(function () {
    'use strict';

    var app = angular.module('scaleApp', [
        'scaleConfigModule',
        'ngResource',
        'ngSanitize',
        'ngRoute',
        'emguo.poller',
        'ui.bootstrap',
        'ui.grid',
        'ui.grid.selection',
        'ui.grid.pagination',
        'ui.grid.resizeColumns',
        'cfp.hotkeys'
    ]);

    app.config(['$routeProvider', '$resourceProvider', 'pollerConfig', function($routeProvider, $resourceProvider, pollerConfig) {
        // stop pollers when route changes
        pollerConfig.stopOnRouteChange = true;
        pollerConfig.smart = true;

        // preserve trailing slashes
        $resourceProvider.defaults.stripTrailingSlashes = false;

        //routing
        $routeProvider
            .when('/', {
                controller: 'ovController',
                templateUrl: 'modules/overview/partials/ovTemplate.html'
            })
            .when('/admin/login',{
                controller: 'adminLoginController',
                templateUrl: 'modules/admin/partials/adminLoginTemplate.html'
            })
            .when('/admin/logout',{
                controller: 'logoutController',
                templateUrl: 'modules/admin/partials/adminLoginTemplate.html'
            })
            .when('/about', {
                controller: 'aboutController',
                templateUrl: 'modules/about/partials/aboutTemplate.html'
            })
            .when('/feed', {
                controller: 'feedDetailsController',
                templateUrl: 'modules/feed/partials/feedDetailsTemplate.html',
                reloadOnSearch: false
            })
            .when('/feed/ingests', {
                controller: 'ingestRecordsController',
                templateUrl: 'modules/feed/partials/ingestRecordsTemplate.html',
                reloadOnSearch: false
            })
            .when('/metrics', {
                controller: 'metricsController',
                templateUrl: 'modules/metrics/partials/metricsTemplate.html',
                reloadOnSearch: false
            })
            .when('/nodes', {
                controller: 'nodesController',
                templateUrl: 'modules/nodes/partials/nodesTemplate.html'
            })
            .when('/nodes/:id', {
                controller: 'nodeDetailsController',
                templateUrl: 'modules/nodes/partials/nodeDetailsTemplate.html'
            })
            .when('/load', {
                controller: 'loadController',
                templateUrl: 'modules/load/partials/loadTemplate.html'
            })
            .when('/load/running', {
                controller: 'queueRunningController',
                templateUrl: 'modules/load/partials/queueRunningTemplate.html'
            })
            .when('/load/depth', {
                controller: 'loadDepthController',
                templateUrl: 'modules/load/partials/loadDepthTemplate.html'
            })
            .when('/recipes', {
                controller: 'recipesController',
                templateUrl: 'modules/recipes/partials/recipesTemplate.html',
                reloadOnSearch: false
            })
            .when('/recipes/recipe/:id', {
                controller: 'recipeDetailsController',
                templateUrl: 'modules/recipes/partials/recipeDetailsTemplate.html'
            })
            .when('/recipes/types/:id?', {
                controller: 'recipeTypesController',
                templateUrl: 'modules/recipes/partials/recipeTypesTemplate.html'
            })
            .when('/recipes/builder', {
                controller: 'recipeEditorController',
                templateUrl: 'modules/recipes/partials/recipeEditorTemplate.html'
            })
            .when('/recipes/builder/:id', {
                controller: 'recipeEditorController',
                templateUrl: 'modules/recipes/partials/recipeEditorTemplate.html'
            })
            .when('/jobs', {
                controller: 'jobsController',
                templateUrl: 'modules/jobs/partials/jobsTemplate.html',
                reloadOnSearch: false
            })
            .when('/jobs/job/:id', {
                controller: 'jobDetailController',
                templateUrl: 'modules/jobs/partials/jobDetailTemplate.html'
            })
            .when('/jobs/types/:id?', {
                controller: 'jobTypesController',
                templateUrl: 'modules/jobs/partials/jobTypesTemplate.html'
            })
            .when('/jobs/executions', {
                controller: 'jobExecutionsController',
                templateUrl: 'modules/jobs/partials/jobExecutionsTemplate.html'
            })
            .when('/jobs/executions/:id', {
                controller: 'jobExecutionDetailController',
                templateUrl: 'modules/jobs/partials/jobExecutionDetailTemplate.html'
            })
            .otherwise({
                redirectTo: '/'
            });
    }])
    .value('moment', window.moment)
    .value('localStorage', window.localStorage)
    .value('XMLHttpRequest', window.XMLHttpRequest)
    .value('toastr', window.toastr);
})();

(function () {
    'use strict';

    angular.module('scaleConfigModule', []).provider('scaleConfig', function () {
        var scaleConfig = {},
            scaleConfigLocal = {};

        this.$get = function () {
            var config = $.ajax({
                type: 'GET',
                url: 'config/scaleConfig.json',
                cache: false,
                async: false,
                contentType: 'application/json',
                dataType: 'json'
            });
            
            if (config.status === 200) {
                scaleConfig = config.responseJSON.scaleConfig;

                var configLocal = $.ajax({
                    type: 'GET',
                    url: 'config/scaleConfig.local.json',
                    cache: false,
                    async: false,
                    contentType: 'application/json',
                    dataType: 'json'
                });

                if (configLocal.status === 200) {
                    scaleConfigLocal = configLocal.responseJSON.scaleConfigLocal;
                }

                _.merge(scaleConfig, scaleConfigLocal);
            }

            return scaleConfig;
        }
    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('aisHeaderController', ['$scope', '$element', 'subnavService', function($scope, $element, subnavService) {
        $scope.date = new Date();
        $scope.currentPath = subnavService.getCurrentPath();
    }])
    .directive('aisHeader', function () {
        /**
         * Usage: <ais-header name={name}></ais-header>
         */
        return {
            controller: 'aisHeaderController',
            restrict: 'E',
            templateUrl: 'modules/header/headerTemplate.html',
            scope: {
                name: '=',
                hideTitle: '=',
                loading: '=', // optional - will overlay a loading spinner on the page based on the passed-in value
                showSubnav: '=',
                subnavLinks: '='
            }
        };

    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').directive('scaleNavigation', function () {
        return {
            restrict: 'E',
            templateUrl: 'modules/navigation/partials/navTemplate.html',
            controller: 'navController'
        };
    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('aboutController', ['$scope', '$location', '$window', 'navService', function($scope, $location, $window, navService) {
        var initialize = function() {
            navService.updateLocation('about');
        };
        initialize();
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('adminLoginController', ['$timeout', '$rootScope', '$location', 'userService', function ($timeout, $rootScope, $location, userService) {

        var initialize = function () {
            $rootScope.user = userService.getUserCreds();
            if(!$rootScope.user){
                $rootScope.user = userService.login('admin');
            }

            console.log($rootScope.user);

            $timeout(function(){
                // Any code in here will automatically have an $scope.apply() run afterwards
                $location.path("/");
            });
        };

        initialize();
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').controller('logoutController', ['$timeout', '$rootScope', '$location', 'userService', function ($timeout, $rootScope, $location, userService) {

        var initialize = function () {
            userService.logout();
            $timeout(function(){
                // Any code in here will automatically have an $scope.apply() run afterwards
                $location.path("/");
            });
        };

        initialize();
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').controller('aisDataFeedController', ['$scope', 'scaleConfig', 'loadService', 'scaleService', function ($scope, scaleConfig, loadService, scaleService) {
        $scope.days = [];
        $scope.hours = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23];
        $scope.values = {};
        var processNewFeed = function(){
            var currentDay = moment.utc();
            $scope.days = [];
            var day = '';
            if($scope.feed){
                _.forEach($scope.feed.values, function(val){
                    var valday = moment.utc(val.time).format(scaleConfig.dateFormats.day);
                    var valhour = moment.utc(val.time).hour();
                    var id = valday + '_' + valhour;
                    $scope.values[id] = val;
                    if(valday !== day){
                        day = valday;
                        $scope.days.push(valday);
                    }
                });
                buildTable();
            }
        };

        var buildTable = function () {
            var currDay = moment().utc().format(scaleConfig.dateFormats.day);
            var currHour = moment().utc().hour();

            var table_html = '<div class="table-responsive"><table>';
            table_html += '<tr><th>Hour (UTC)</th>';
            for(day in $scope.days){
                table_html += '<td class="day-label" title="' + $scope.days[day] + '"><div class="day-of-week">' + scaleService.getDayString(moment($scope.days[day]).day()) + '</div>' + moment($scope.days[day]).format('MM/DD') + '</td>';
            }
            table_html += '</tr>';
            for(var hour in $scope.hours){
                hour = 23-hour;
                table_html += '<tr>';
                table_html += '<th title="' + $scope.hours[hour] + ':00">' + $scope.hours[hour] + '</th>';

                for(var day in $scope.days){
                    var key =  $scope.days[day] + '_' + $scope.hours[hour];
                    var files = $scope.values[key].files;
                    var size = $scope.values[key].size;
                    var cls = 'good';
                    if($scope.days[day] === currDay){
                        if($scope.hours[hour] === currHour){
                            cls = 'current';
                        }
                        else if($scope.hours[hour] > currHour) {
                            cls = 'future';
                        }
                    }
                    if(files === 0 && size === 0 && cls !== 'current' && cls !== 'future'){
                        cls = 'unknown';
                    }
                    //console.log(key);
                    table_html += '<td id="' + key + '" title="' + $scope.days[day] + ' ' + $scope.hours[hour] + ':00">';
                    if(cls === 'future'){
                        //table_html += '<span class="' + cls + '" id="span_' + $scope.days[day] + '_' + $scope.hours[hour] + '" style="display: block;"><div class="file-count">&nbsp;</div><div class="file-size">&nbsp;</div></span></td>';
                        table_html += '<span class="' + cls + '" id="span_' + $scope.days[day] + '_' + $scope.hours[hour] + '" style="display: block;">&nbsp;</span></td>';
                    }
                    else{
                        //table_html += '<span class="' + cls + '" id="span_' + $scope.days[day] + '_' + $scope.hours[hour] + '" style="display: block;"><div class="file-count">' + files + '</div><div class="file-size">' + scaleService.calculateFileSizeFromBytes(size,1) + '</div></span></td>';
                        //table_html += '<span class="' + cls + '" id="span_' + $scope.days[day] + '_' + $scope.hours[hour] + '" style="display: block;"><span class="file-count">' + files + '</span> / <span class="file-size">' + scaleService.calculateFileSizeFromBytes(size,1) + '</span></span></td>';
                        table_html += '<span class="' + cls + '" id="span_' + $scope.days[day] + '_' + $scope.hours[hour] + '" style="display: block;">' + scaleService.calculateFileSizeFromBytes(size,1) + ' / ' + files + '</span></td>';
                    }

                }
                table_html += '</tr>';
            }
            table_html += '</table></div>';
            $('#history').html(table_html);
        };

        var initialize = function(){

            $scope.$watch('feed', function (value) {
                if($scope.feed){
                    processNewFeed();
                }
            });
        };

        initialize();
    }]).directive('aisDataFeed', function () {
        return {
            controller: 'aisDataFeedController',
            templateUrl: 'modules/charts/dataFeed/dataFeedTemplate.html',
            restrict: 'E',
            scope: {
                feed: '=' // Feed data
            }
        };

    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('aisDonutController', ['$scope', '$element', 'scaleConfig', function($scope, $element, scaleConfig) {
        var chart = null;

        var genChart = function () {
            if (chart) {
                //chart.data()
                //$scope.colData
                var oldData = [],
                    removeIds = [];

                // reassemble currently displayed data to match $scope.colData
                _.forEach(chart.data(), function (d) {
                    oldData.push([d.values[0].id, d.values[0].value]);
                });

                // determine which elements to remove
                _.forEach(oldData, function (od) {
                    var keep = _.find($scope.colData, function (cd) {
                        return cd[0] === od[0];
                    });
                    if (!keep) {
                        removeIds.push(od[0]);
                    }
                });

                // update chart
                //console.log(JSON.stringify($scope.colData));
                //console.log(JSON.stringify(removeIds));
                chart.load({
                    columns: $scope.colData,
                    unload: removeIds
                });
            } else {
                chart = c3.generate({
                    bindto: $element[0],
                    data: {
                        columns: $scope.colData,
                        type: $scope.type,
                        colors: {
                            down: scaleConfig.colors.chart_red,
                            warning: scaleConfig.colors.chart_yellow,
                            up: scaleConfig.colors.chart_green,
                            Completed: scaleConfig.colors.chart_green,
                            Done: '#3681bf',
                            Queue: scaleConfig.colors.chart_yellow,
                            Failed: scaleConfig.colors.chart_red,
                            Algorithm: '#444',
                            Data: '#888',
                            System: '#ccc',
                            Offline: scaleConfig.colors.chart_red,
                            'High Failure Rate': scaleConfig.colors.chart_orange,
                            Paused: scaleConfig.colors.chart_yellow
                        }
                    },
                    transition: {
                        duration: 700
                    },
                    pie: {
                        label: {
                            format: d3.format(',')
                        }
                    },
                    donut: {
                        label: {
                            format: $scope.showLabel ? d3.format(',') : function () {
                                return '';
                            }
                        },
                        width: $scope.width,
                        title: $scope.name
                    },
                    tooltip: {
                        format: {
                            value: d3.format(',')
                        }
                    },
                    size: {
                        height: $scope.size || 320
                    }
                });
            }
            $element[0].style.position = 'static';
        };

        var initColumnData = function(){
            $scope.colData = [];
            $scope.data.forEach(function(obj){
                $scope.colData.push([obj.status,obj.count]);
            });
        };

        var initialize = function() {
            initColumnData();
            genChart();
        };

        $scope.$watch('data', function (data) {
            if (data) {
                if (data.length > 0) {
                    initialize();
                } else {
                    $($element[0]).empty();
                }
            }
        });

        window.onresize = function() {
          var width = $($element[0]).width();
          console.log(width);
          genChart();
        }
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').directive('aisDonut', function () {
        return {
            controller: 'aisDonutController',
            restrict: 'E',
            scope: {
                data: '=',
                type: '=',
                size: '=',
                showLabel: '=',
                width: '=',
                name: '='
            }
        };
    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('aisGridChartController', ['$rootScope', '$scope', '$location', '$uibModal', 'userService', 'scaleConfig', function ($rootScope, $scope, $location, $uibModal, userService, scaleConfig) {
        var svg = null,
            rect = null,
            scale = parseFloat($scope.scale),
            tip = d3.tip()
                .attr('class', 'd3-tip')
                .offset([-10, 0])
                .html(function(d) {
                    return d.title + ' ' + d.version + '<br />' + getCellError(d) + '<br />' + getCellTotal(d);
                });

        $scope.loading = true;
        $scope.dataValues = [];
        $scope.cellWidth = 50 * scale;
        $scope.cellHeight = 50 * scale;
        $scope.enableZoom = typeof $scope.mode !== 'undefined' ? $scope.mode === 'zoom' : true;
        $scope.enableTooltip = typeof $scope.mode !== 'undefined' ? $scope.mode === 'tooltip' : false;
        $scope.enableReveal = typeof $scope.reveal !== 'undefined' ? $scope.reveal : true;
        $scope.user = userService.getUserCreds();
        $scope.pauseReason = '';
        $scope.gridData = [];
        $scope.gridClass = function () {
            return $scope.icons === true ? 'icons' : '';
        };

        var width = $('.grid-chart').width(),
            height = $scope.rows ? ($scope.cellHeight * $scope.rows) + 10 : ($scope.cellHeight * 6) + 10, // multiply cell height by 8 (highest zoom scale extent value) plus some breathing room
            cols = 0,
            rows = 0,
            cellFontLg = .4,
            cellFontSm = .3;

        var getDataValues = function (data) {
            $scope.gridData = [];
            $scope.dataValues = [];
            if (data.data) {
                var dataType = data.data.toString().split(',')[0];
                if (dataType === 'JobType') {
                    $scope.dataValues = _.sortByOrder(_.values(data.data), ['name'], ['asc']);
                    // associate JobType with JobTypeStatus
                    _.forEach($scope.dataValues, function (val) {
                        val.status = _.find(data.status, 'job_type.id', val.id);
                    });
                    $scope.dataValues = _.sortByOrder(_.values(data.data), ['status.has_running', 'status.description', 'name'], ['asc', 'asc', 'asc']);
                } else if (dataType === 'Node') {
                    $scope.dataValues = _.sortByOrder(_.values(data.data), ['hostname'], ['asc']);
                    // associate Node with NodeStatus
                    _.forEach($scope.dataValues, function (val) {
                        val.status = _.find(data.status, 'node.id', val.id);
                    });
                    $scope.dataValues = _.sortByOrder($scope.dataValues, ['hostname'], ['asc']); // sort by hostName asc
                } else {
                    $scope.dataValues = data.data;
                }

                cols = $scope.columns ? $scope.columns : Math.floor(width / $scope.cellWidth);
                rows = $scope.rows ? $scope.rows : Math.ceil($scope.dataValues.length / cols);

                d3.range(rows).map(function (row) {
                    d3.range(cols).map(function (col) {
                        if (col <= $scope.dataValues.length - 1) {
                            var dataObj = $scope.dataValues[(cols * row) + col];
                            if (dataObj) {
                                dataObj.coords = [col * $scope.cellHeight, row * $scope.cellWidth];
                                $scope.gridData.push(dataObj);
                            }
                        }
                    });
                });

                update();
            }
        };

        var revealData = function () {
            d3.selectAll('.cell-text')
                .style('display', 'none');
            d3.selectAll('.cell-text-detail')
                .style('display', 'block');
            d3.selectAll('.cell-pause-resume-icon')
                .style('display', 'block');
        };

        var hideData = function () {
            d3.selectAll('.cell-text')
                .style('display', 'block');
            d3.selectAll('.cell-text-detail')
                .style('display', 'none');
            d3.selectAll('.cell-pause-resume-icon')
                .style('display', 'none');
        };

        var initialize = function (data) {
            cols = $scope.columns ? $scope.columns : Math.floor(width / $scope.cellWidth);
            rows = $scope.rows ? $scope.rows : Math.ceil($scope.dataValues.length / cols);

            var tickValues = Array.apply(null, {length: rows}).map(Number.call, Number);

            var zoom = d3.behavior.zoom()
                .scaleExtent([1, 6])
                //.center([0, 0])
                .on('zoom', zoomed);

            if ($scope.enableZoom) {
                svg = d3.select('.grid-chart').append('svg')
                    .attr('width', width)
                    .attr('height', height)
                    .append('g')
                    .call(zoom)
                    .append('g');
            } else if ($scope.enableTooltip) {
                svg = d3.select('.grid-chart').append('svg')
                    .attr('width', width)
                    .attr('height', height)
                    .append('g')
                    .call(tip);
            } else {
                svg = d3.select('.grid-chart').append('svg')
                    .attr('width', width)
                    .attr('height', height)
                    .append('g');
            }

            svg.append('rect')
                .attr('class', 'overlay')
                .attr('width', width)
                .attr('height', height);

            if ($scope.showAxes) {
                var y = d3.scale.linear()
                    .domain([0, rows])
                    .range([0, height-10]);

                var yAxis = d3.svg.axis()
                    .scale(y)
                    .orient('left')
                    .tickValues(tickValues);

                svg.attr('transform', 'translate(' + 25 + ',' + 0 + ')')
                    .append('g')
                    .attr('class', 'y axis')
                    .attr('transform', 'translate(' + 0 + ',' + $scope.cellHeight / 2 + ')')
                    .call(yAxis);
            }

            getDataValues(data);

            function zoomed() {
                var s = d3.event.scale;

                if ($scope.enableReveal) {
                    if (s > 3) {
                        revealData();
                    } else {
                        hideData();
                    }
                }
                if (s === 1) {
                    if ($scope.showAxes) {
                        zoom.translate([25, 0]);
                    } else {
                        zoom.translate([0, 0]);
                    }
                }
                svg.attr('transform', 'translate(' + zoom.translate() + ')scale(' + d3.event.scale + ')');
            }

            $scope.loading = false;
        };

        var dragOffsetX = 0,
            dragOffsetY = 0,
            clickOffsetX = 0,
            clickOffsetY = 0;

        var drag = d3.behavior.drag()
            .on('dragstart', function () {
                // track offsetX and offsetY to distinguish between drag and click
                dragOffsetX = d3.event.sourceEvent.offsetX;
                dragOffsetY = d3.event.sourceEvent.offsetY;
            });

        var getCellFill = function (d) {
            if (d && d.status) {
                return d.status.getCellFill();
            }
            return 'none';
        };

        var getCellText = function (d) {
            if (d) {
                return d.getCellText();
            }
        };

        var getCellActivity = function (d) {
            if (d && d.status) {
                return d.status.getCellActivity();
            }
        };

        var getCellPauseResume = function (d) {
            if (d && d.status) {
                return d.status.getCellPauseResume();
            }
        };

        var getCellActivityTotal = function (d) {
            if (d && d.status) {
                return d.status.getCellActivityTotal();
            }
        };

        var getCellTitle = function (d) {
            if (d) {
                return d.getCellTitle();
            }
        };

        var getCellError = function (d) {
            if (d && d.status) {
                return d.status.getCellError();
            }
            return 'Failed: Unavailable';
        };

        var getCellTotal = function (d) {
            if (d && d.status) {
                return d.status.getCellTotal();
            }
            return 'Completed: Unavailable';
        };

        var getCellStatus = function (d) {
            if (d && d.status) {
                if (d.toString() === 'Node') {
                    return d.status.getCellStatus();
                }
            }
            return 'Status Unavailable';
        };

        var getCellJobs = function (d) {
            if (d && d.status) {
                if (d.toString() === 'Node') {
                    return d.status.getCellJobs();
                }
            }
        };

        var cellClickHandler = function (target) {
            // track offsetX and offsetY to distinguish between drag and click
            clickOffsetX = d3.event.offsetX;
            clickOffsetY = d3.event.offsetY;
            if (dragOffsetX === clickOffsetX && dragOffsetY === clickOffsetY) {
                // offsets are the same; no dragging occurred; process as click event
                $scope.$apply(function () {
                    if (target.toString() === 'JobType') {
                        $location.path('/jobs').search('job_type_id', target.id).search('status', target.status.has_running.status);
                    } else if (target.toString() === 'Node') {
                        $location.path('/nodes/' + target.id);
                    }
                });
            }
        };

        var update = function () {
            // DATA JOIN
            // Join new data with old elements, if any.
            if ($scope.enableTooltip) {
                var containerGroup = svg.selectAll('.cell-group')
                    .data($scope.gridData, function (d) { return d.coords; })
                    .on('mouseover', tip.show)
                    .on('mouseout', tip.hide)
                    .on('click', tip.hide);
            } else {
                var containerGroup = svg.selectAll('.cell-group')
                    .data($scope.gridData, function (d) { return d.coords; });
            }

            // UPDATE
            // Update old elements as needed.
            containerGroup.selectAll('.cell')
                .data($scope.gridData, function (d) { return d.coords; })
                .transition()
                .duration(750)
                .style('stroke', function (d) {
                    return d ? '#fff' : 'none';
                })
                .style('fill', function (d) {
                    return getCellFill(d);
                });

            containerGroup.selectAll('.cell-text')
                .data($scope.gridData, function (d) { return d.coords; })
                .html(function (d) {
                    return getCellText(d);
                });

            containerGroup.selectAll('.cell-total-active')
                .data($scope.gridData, function (d) { return d.coords; })
                .text(function (d) {
                    if (d.toString() === 'JobType') {
                        return getCellActivityTotal(d);
                    }
                });

            containerGroup.selectAll('.cell-pause-resume-icon')
                .data($scope.gridData, function (d) { return d.coords; })
                .html(function (d) {
                    return getCellPauseResume(d);
                });

            containerGroup.selectAll('.cell-activity-icon')
                .data($scope.gridData, function (d) { return d.coords; })
                .html(function (d) {
                    return getCellActivity(d);
                });

            containerGroup.selectAll('.cell-title')
                .data($scope.gridData, function (d) { return d.coords; })
                .html(function (d) {
                    return getCellTitle(d);
                });

            containerGroup.selectAll('.cell-error')
                .data($scope.gridData, function (d) { return d.coords; })
                .text(function (d) {
                    return getCellError(d, true);
                });

            containerGroup.selectAll('.cell-total')
                .data($scope.gridData, function (d) { return d.coords; })
                .text(function (d) {
                    return getCellTotal(d);
                });

            containerGroup.selectAll('.cell-status')
                .data($scope.gridData, function (d) { return d.coords; })
                .text(function (d) {
                    return getCellStatus(d);
                });

            containerGroup.selectAll('.cell-jobs')
                .data($scope.gridData, function (d) { return d.coords; })
                .html(function (d) {
                    return getCellJobs(d);
                });

            containerGroup.selectAll('.cell-overlay')
                .data($scope.gridData, function (d) { return d.coords; })
                .on('click', function (target) {
                    cellClickHandler(target);
                });

            // ENTER
            // Create new elements as needed.
            var cellGroup = containerGroup.enter()
                .append('g')
                .attr('class', 'cell-group');

            cellGroup.append('rect')
                .attr('class', 'cell')
                .attr('width', $scope.cellWidth)
                .attr('height', $scope.cellHeight)
                .style('fill', function (d) {
                    return getCellFill(d);
                })
                .style('stroke', function (d) {
                    return d ? '#fff' : 'none';
                })
                .transition()
                .duration(750);

            cellGroup.append('text')
                .attr('class', 'cell-text')
                .html(function (d) {
                    return getCellText(d);
                })
                .attr('text-anchor', 'middle')
                .attr('x', $scope.cellWidth / 2)
                .attr('y', ($scope.cellHeight / 2) + 12)
                .style('display', $scope.enableReveal ? 'block' : 'none');

            cellGroup.append('text')
                .attr('class', 'cell-total-active')
                .text(function (d) {
                    if (d.toString() === 'JobType') {
                        return getCellActivityTotal(d);
                    }
                })
                .attr('text-anchor', 'end')
                .attr('x', $scope.cellWidth - 2)
                .attr('y', $scope.cellHeight - 5)
                .style('display', $scope.enableReveal ? 'block' : 'none');

            cellGroup.append('g')
                .attr('class', 'cell-activity')
                .append('text')
                .attr('class', 'cell-activity-icon')
                .html(function (d) {
                    return getCellActivity(d);
                })
                .attr('text-anchor', 'end')
                .attr('x', $scope.cellWidth - 2)
                .attr('y', 14);

            var detail = cellGroup.append('text')
                .attr('class', 'cell-text-detail')
                .attr('text-anchor', 'middle')
                .attr('x', $scope.cellWidth / 2)
                .attr('y', Math.floor($scope.cellHeight *.15)) // 15% from top of cell
                .attr('dy', 0)
                .style('display', $scope.enableReveal ? 'none' : 'block');

            detail.append('tspan')
                .attr('class', 'cell-title')
                .attr('text-anchor', 'middle')
                .attr('x', $scope.cellWidth / 2)
                .attr('y', Math.floor($scope.cellHeight * .15)) // 15% from top of cell
                .attr('dy', 0)
                .style('font-size', cellFontSm * scale + 'em')
                .html(function (d) {
                    return getCellTitle(d);
                })
                .call(wrap);

            detail.append('tspan')
                .attr('class', 'cell-error')
                .attr('text-anchor', 'middle')
                .attr('x', $scope.cellWidth / 2)
                .attr('y', Math.floor($scope.cellHeight *.3)) // 30% from top of cell
                .attr('dy', 0)
                .style('font-size', cellFontSm * scale + 'em')
                .text(function (d) {
                    return getCellError(d);
                })
                .call(wrap);

            detail.append('tspan')
                .attr('class', 'cell-total')
                .attr('text-anchor', 'middle')
                .attr('x', $scope.cellWidth / 2)
                .attr('y', Math.floor($scope.cellHeight *.4)) // 40% from top of cell
                .attr('dy', 0)
                .style('font-size', cellFontSm * scale + 'em')
                .text(function (d) {
                    return getCellTotal(d);
                })
                .call(wrap);

            detail.append('tspan')
                .attr('class', 'cell-status')
                .attr('text-anchor', 'middle')
                .attr('x', $scope.cellWidth / 2)
                .attr('y', Math.floor($scope.cellHeight * .55)) // 55% from top of cell
                .attr('dy', 0)
                .style('font-size', cellFontLg * scale + 'em')
                .text(function (d) {
                    return getCellStatus(d);
                });

            detail.append('tspan')
                .attr('class', 'cell-jobs')
                .attr('text-anchor', 'middle')
                .attr('x', $scope.cellWidth / 2)
                .attr('y', Math.floor($scope.cellHeight * .75)) // 75% from top of cell
                .attr('dy', 0)
                .style('font-size', cellFontSm * scale + 'em')
                .html(function (d) {
                    return getCellJobs(d);
                })
                .call(wrap);

            cellGroup.append('rect')
                .attr('class', 'cell-overlay')
                .attr('width', $scope.cellWidth)
                .attr('height', $scope.cellHeight)
                .on('mouseover', function () {
                    d3.select(d3.select(this)[0][0].parentElement.children[0])
                        .style('fill-opacity', '0.75');
                })
                .on('mouseout', function () {
                    d3.select(d3.select(this)[0][0].parentElement.children[0])
                        .style('fill-opacity', '1.0');
                })
                .on('click', function (d) {
                    cellClickHandler(d);
                })
                .call(drag);

            if ($scope.user && $scope.user.is_admin) {
                cellGroup.append('text')
                    .attr('class', 'cell-pause-resume-icon')
                    .html(function (d) {
                        return getCellPauseResume(d);
                    })
                    .attr('text-anchor', 'start')
                    .attr('x', 5)
                    .attr('y', 20)
                    .style('display', $scope.enableReveal ? 'none' : 'block')
                    .style('font-size', '1.3em')
                    .on('mouseover', function () {
                        d3.select(this)
                            .style('cursor', 'pointer')
                            .style('fill', scaleConfig.colors.chart_blue);
                    })
                    .on('mouseout', function () {
                        d3.select(this)
                            .style('fill', 'white');
                    })
                    .on('click', function (target) {
                        var pauseResume = function () {
                            var targetData = {};
                            if (target && target.status) {
                                targetData = target;
                                targetData.status.pauseResumeCell($scope.pauseReason).then(function (updatedData) {
                                    if (targetData.toString() === 'Node') {
                                        // update target data values
                                        targetData.is_paused = updatedData.is_paused;
                                        targetData.pause_reason = updatedData.pause_reason;
                                        targetData.status.node = updatedData;
                                        $rootScope.$broadcast('updateNodeHealth');
                                    }
                                    // update grid cell
                                    updateCellFill();
                                    updatePauseResume();
                                    updateCellStatus();
                                });
                            }
                        };

                        // only prompt for reason when pausing (not resuming)
                        if (!target.is_paused) {
                            var modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: 'pauseDialog.html',
                                scope: $scope
                            });

                            modalInstance.result.then(function () {
                                pauseResume();
                            });
                        } else {
                            pauseResume();
                        }
                    });
            }

            // ENTER + UPDATE
            // Appending to the enter selection expands the update selection to include
            // entering elements; so, operations on the update selection after appending to
            // the enter selection will apply to both entering and updating nodes.
            containerGroup.transition()
                .duration(750)
                .attr('transform', function (d) {
                    return 'translate(' + d.coords + ')';
                });

            var updateCellFill = function () {
                containerGroup.selectAll('.cell')
                    .transition()
                    .duration(250)
                    .style('stroke', function (d) {
                        return d ? '#fff' : 'none';
                    })
                    .style('fill', function (d) {
                        return getCellFill(d);
                    });
            };

            var updatePauseResume = function () {
                containerGroup.selectAll('.cell-pause-resume-icon')
                    .html(function (d) {
                        return getCellPauseResume(d);
                    });
            };

            var updateCellStatus = function () {
                containerGroup.selectAll('.cell-status')
                    .text(function (d) {
                        return getCellStatus(d);
                    });
            };

            // EXIT
            // Remove old elements as needed.
            containerGroup.exit()
                .attr('class', 'cell-exit')
                .transition()
                .duration(750)
                .attr('transform', 'translate(0,0)')
                .remove();

            function wrap (text, width) {
                text.each(function () {
                    var text = d3.select(this),
                        words = text.text().split(/\s+/).reverse(),
                        word,
                        line = [],
                        lineNumber = 0,
                        lineHeight = 1.1,
                        y = text.attr('y'),
                        dy = parseFloat(text.attr('dy')),
                        tspan = text.text(null).append('tspan').attr('x', $scope.cellWidth / 2).attr('y', y).attr('dy', dy + 'em');
                    while (word = words.pop()) {
                        if (word !== 'undefined') {
                            line.push(word);
                            tspan.text(line.join(' '));
                            if (tspan.node().getComputedTextLength() > ($scope.cellWidth - 10)) {
                                line.pop();
                                tspan.text(line.join(' '));
                                line = [word];
                                tspan = text.append('tspan').attr('x', $scope.cellWidth / 2).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);
                            }
                        }
                    }
                });
            }
        };

        $scope.$watch('data', function (data) {
            if (_.keys(data).length > 0) {
                $('.grid-chart').empty();
                initialize(data);
            }
        });

        $scope.$on('redrawGrid', function (event, data) {
            getDataValues(data);
        });
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').directive('aisGridChart', function () {
        return {
            controller: 'aisGridChartController',
            templateUrl: 'modules/charts/grid/gridChartTemplate.html',
            restrict: 'E',
            scope: {
                data: '=',
                icons: '=', // indicates whether cell-text is entirely made up of icons
                scale: '=', // multiplier to increase cell size
                reveal: '=', // if true, less data will show when zoomed out
                mode: '@', // valid values are zoom or tooltip
                columns: '=',
                rows: '=',
                showAxes: '='
            }
        };
    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('aisHealthController', ['$scope', 'gaugeFactory', function ($scope, gaugeFactory) {
        var gauge = null,
            initialized = false;

        var initialize = function () {
            initialized = true;
            var scale = $scope.scale || 1;
            //$scope.gaugeSize = 150 * scale;
            //$scope.gaugeWidth = 25 * scale;
            $scope.donutSize = 275 * scale;
            $scope.donutWidth = 25 * scale;
            //gauge = gaugeFactory.createGauge($scope.type, 'Failure Rate')
        };

        /*var redrawGauge = function () {
            if (gauge) {
                gauge.redraw($scope.data.gaugeData);
            }
        };*/

        $scope.$watch('data', function (data) {
            if (data) {
                if (_.keys(data).length > 0) {
                    if (!initialized) {
                        initialize();
                    }
                    //redrawGauge();
                }
            }
        });
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').directive('aisHealth', function () {
        return {
            controller: 'aisHealthController',
            templateUrl: 'modules/charts/health/healthTemplate.html',
            restrict: 'E',
            scope: {
                name: '=',
                data: '=',
                scale: '=',
                errorLabel: '=',
                type: '='
            }
        };
    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('aisJobLoadController', ['$scope', 'scaleConfig', 'scaleService', 'loadService', function ($scope, scaleConfig, scaleService, loadService) {
        var chart = null,
            colArr = [],
            xArr = [],
            pendingArr = [],
            queuedArr = [],
            runningArr = [],
            removeIds = [],
            legendHide = [];

        $scope.filterValue = 1;
        $scope.filterDuration = 'w';
        $scope.filterDurations = ['M', 'w', 'd'];
        $scope.zoomEnabled = false;
        $scope.zoomClass = 'btn-default';
        $scope.zoomText = 'Enable Zoom';
        $scope.jobLoadData = {};
        $scope.loadingJobLoad = true;
        $scope.jobLoadError = null;
        $scope.jobLoadErrorStatus = null;
        $scope.total = 0;
        $scope.chartStyle = '';

        var jobLoadParams = {
            started: moment.utc().subtract($scope.filterValue, $scope.filterDuration).startOf('d').toDate(), ended: moment.utc().endOf('d').toDate(), job_type_id: null, job_type_name: null, job_type_category: null, url: null
        };

        $scope.toggleZoom = function () {
            $scope.zoomEnabled = !$scope.zoomEnabled;
            chart.zoom.enable($scope.zoomEnabled);
            if ($scope.zoomEnabled) {
                $scope.zoomClass = 'btn-primary';
                $scope.zoomText = 'Disable Zoom';
            } else {
                $scope.zoomClass = 'btn-default';
                $scope.zoomText = 'Enable Zoom';
            }
        };

        var initChart = function () {
            colArr = [];
            xArr = [];
            pendingArr = [];
            queuedArr = [];
            runningArr = [];

            /*
            // x axis values
            var numHours = moment.utc(jobLoadParams.ended).diff(moment.utc(jobLoadParams.started), 'h');
            for (var i = 0; i < numHours; i++) {
                xArr.push(moment.utc(jobLoadParams.started).add(i, 'h').startOf('h').toDate());
            }

            // data values
            _.forEach(xArr, function (xDate) {
                var dataObj = _.find($scope.jobLoadData.results, function (d) {
                    return moment.utc(d.time).startOf('h').isSame(xDate, 'hour');
                });
                // push 0 if data for xDate is not present in queryDates
                pendingArr.push(dataObj ? dataObj.pending_count : 0);
                queuedArr.push(dataObj ? dataObj.queued_count : 0);
                runningArr.push(dataObj ? dataObj.running_count : 0);
            });

            xArr.unshift('x');
            pendingArr.unshift('Pending');
            queuedArr.unshift('Queued');
            runningArr.unshift('Running');
            */

            xArr = _.pluck($scope.jobLoadData.results, 'time');
            _.forEach(xArr, function (d, i) {
                xArr[i] = moment.utc(d).toDate();
            });
            xArr.unshift('x');

            var pendingArr = _.pluck($scope.jobLoadData.results, 'pending_count'),
                queuedArr = _.pluck($scope.jobLoadData.results, 'queued_count'),
                runningArr = _.pluck($scope.jobLoadData.results, 'running_count');

            pendingArr.unshift('Pending');
            queuedArr.unshift('Queued');
            runningArr.unshift('Running');

            // add to colArr
            colArr = [xArr, pendingArr, queuedArr, runningArr];

            var types = {},
                type = {},
                groups = [];

            _.forEach(colArr, function(col){
                    type = {};
                    if (col[0] !== 'x') {
                        type[col[0]] = 'area';
                        groups.push(col[0]);
                    }
                angular.extend(types, type);
            });

            //if (chart) {
                /*
                chart.groups([groups]);
                chart.load({
                    columns: colArr,
                    types: types,
                });
                */
                /*
                chart.flow({
                    columns: colArr
                });
                */
            //} else {
            if (chart) {
                chart.flush();
            }
                // chart config
                chart = c3.generate({
                    bindto: '#job-load',
                    data: {
                        x: 'x',
                        columns: colArr,
                        types: types,
                        groups: [groups],
                        colors: {
                            Pending: scaleConfig.colors.chart_pink,
                            Queued: scaleConfig.colors.chart_purple,
                            Running: scaleConfig.colors.chart_blue
                        }
                    },
                    transition: {
                        duration: 700
                    },
                    tooltip: {
                        format: {
                            title: function (x) {
                                return moment.utc(x).startOf('h').format(scaleConfig.dateFormats.day_second);
                            }
                        }
                    },
                    axis: {
                        x: {
                            type: 'timeseries',
                            tick: {
                                format: function (d) {
                                    return moment.utc(d).format(scaleConfig.dateFormats.day);
                                }
                            }
                        }
                    }
                });
            //}
            $scope.loadingJobLoad = false;
        };

        var getJobLoad = function (showPageLoad) {
            if (showPageLoad) {
                $scope.$parent.loading = true;
            } else {
                $scope.loadingJobLoad = true;
            }
            jobLoadParams.started = moment.utc().subtract($scope.filterValue, $scope.filterDuration).startOf('d').toDate();
            jobLoadParams.ended = moment.utc(jobLoadParams.started).add(1, $scope.filterDuration).endOf('d').toDate();
            jobLoadParams.page_size = 1000;

            loadService.getJobLoad(jobLoadParams).then(null, null, function (result) {
                if (result.$resolved) {
                    $scope.jobLoadData = result;
                    initChart();
                } else {
                    if (result.statusText && result.statusText !== '') {
                        $scope.jobLoadErrorStatus = result.statusText;
                    }
                    $scope.jobLoadError = 'Unable to retrieve job load.';
                }
                if (showPageLoad) {
                    $scope.$parent.loading = false;
                } else {
                    $scope.loadingJobLoad = false;
                }
            });
        };

        $scope.updateJobLoadRange = function (action) {
            if (action === 'older') {
                $scope.filterValue++;
            } else if (action === 'newer') {
                if ($scope.filterValue > 1) {
                    $scope.filterValue--;
                }
            } else if (action === 'today') {
                $scope.filterValue = 1;
            }
            getJobLoad(true);
        };

        $scope.$watch('filterValue', function (value) {
            var $jobLoadNewer = $('.job-load-newer'),
                $jobLoadToday = $('.job-load-today');

            if (value > 1) {
                $jobLoadNewer.removeAttr('disabled');
                $jobLoadToday.removeAttr('disabled');
            } else {
                $jobLoadNewer.attr('disabled', 'disabled');
                $jobLoadToday.attr('disabled', 'disabled');
            }
        });


        if ($scope.autoHeight) {
            // set chart height
            angular.element(document).ready(function () {
                // set container heights equal to available page height
                var viewport = scaleService.getViewportSize(),
                    offset = scaleConfig.headerOffset,
                    headerOffset = $('.job-load-header').height(),
                    legendOffset = $('.job-load-legend-label').height(),
                    filterOffset = $('.job-load-filter').outerHeight(true),
                    chartMaxHeight = viewport.height - offset - headerOffset - legendOffset - filterOffset - 5;

                $scope.chartStyle = 'height: ' + chartMaxHeight + 'px; max-height: ' + chartMaxHeight + 'px;';
                getJobLoad();
            });
        } else {
            getJobLoad();
        }
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').directive('aisJobLoad', function () {
        return {
            controller: 'aisJobLoadController',
            templateUrl: 'modules/charts/jobLoad/jobLoadTemplate.html',
            restrict: 'E',
            scope: {
                showFilter: '=', // show time range filter UI
                cullLegend: '=', // only show job types in legend whose value is > 0
                hideTitle: '=',
                autoHeight: '='
            }
        };
    });
})();

'use strict';

angular.module('scaleApp').controller('aisRadialPercentageController', ['$scope', '$element', 'scaleConfig', function($scope, $element, scaleConfig) {
    var isInitialized = false,
        foreground = '',
        text = '',
        arcTween = '',
        textTween = '';

    var getForeground = function () {
        var value = parseFloat($scope.percentage);
        if (value >= 75) {
            return scaleConfig.colors.chart_green;
        } else if (value < 75 && value >= 50) {
            return scaleConfig.colors.chart_yellow;
        } else {
            return scaleConfig.colors.chart_red;
        }
    };

    var initialize = function() {
        // handle input either .83 or 83
        var percentage = $scope.percentage || 0;
        if (percentage > 1) {
            percentage /= 100;
        }

        // size the chart to the parent container. It's square, so take the
        // smaller of width/height
        var size = $element[0].parentNode.clientWidth;
        if ($element[0].parentNode.clientHeight < size) {
            size = $element[0].parentNode.clientHeight;
        }


        var duration = 1000;
        var formatPercent = d3.format('.0%');

        var arc = d3.svg.arc()
            .startAngle(0)
            .outerRadius(size * 0.95 / 2)
            .innerRadius(size * 0.80 / 2);

        var svg = d3.select($element[0]).append('svg').attr({
            width: size,
            height: size
        }).append('g').attr({
            'transform': 'translate(' + size / 2 + ',' + size / 2 + ')',
            'class': 'aisRadial'
        });

        var meter = svg.append('g').attr({
            'transform': 'rotate(180)'
        });
        meter.append('path')
            .datum({
                endAngle: (2 * Math.PI),
            })
            .attr('class', 'background')
            .attr('d', arc);

        foreground = meter.append('path')
            .datum({
                endAngle: 0
            })
            .attr({
                'd': arc
            })
            .style('fill', function () {
                return getForeground();
            });

        text = svg.append('text')
            .datum({
                percentage: 0
            })
            .attr('text-anchor', 'middle')
            .attr('dy', '.35em');


        textTween = function(transition, newPercentage) {
            transition.attrTween('text', function(d) {
                if (typeof d === 'undefined') {
                    d = 0;
                }
                var i = d3.interpolate(d.percentage, newPercentage);
                return function(t) {
                    d.percentage = i(t);
                    text.text(formatPercent(i(t)));
                    return t;
                }
            });
        };
        arcTween = function(transition, newAngle) {
            transition.attrTween('d', function(d) {
                var i = d3.interpolate(d.endAngle, newAngle);
                return function(t) {
                    d.endAngle = i(t);
                    return arc(d);
                };
            });
        };

        isInitialized = true;

        redraw(percentage);

        // get progress...

        //foreground.attr('d', arc.endAngle((Math.PI * 2) * 0.83));
        //text.text(formatPercent(percentage));
    };

    var redraw = function (value) {
        if (isInitialized) {
            var percentage = value;
            if (percentage > 1) {
                percentage /= 100;
            }
            //console.log('Setting percentage to: ' + percentage);

            //foreground.transition().duration(5000).attr('d', arc);
            foreground.transition().duration(1000)
                .style('fill', function () {
                    return getForeground();
                })
                .call(arcTween, (Math.PI * 2) * percentage);
            //text.text(formatPercent(percentage));
            text.transition().duration(1000).call(textTween, percentage);
        }
    };

    $scope.$watch('percentage', function(value) {
        if (value && !isInitialized) {
            initialize();
        } else {
            redraw(value);
        }
    })
}]);

'use strict';

angular.module('scaleApp').directive('aisRadialPercentage', function () {
    return {
        controller: 'aisRadialPercentageController',
        restrict: 'E',
        scope: {
            percentage: '@'
        }
    };
});

(function () {
    'use strict';

    angular.module('scaleApp').directive('aisMultiselect', function () {
        return {
            restrict: 'A',
            require: '^ngModel',
            scope: {
                multiselectDataProvider: '=',
                enableFiltering: '=',
                maxHeight: '=',
                numberDisplayed: '=',
                includeSelectAllOption: '=',
                nonSelectedText: '=',
                ngModel: '='
            },
            link: function(scope, element, attributes) {
                element = $(element[0]);

                element.multiselect({
                    enableFiltering: scope.enableFiltering,
                    enableCaseInsensitiveFiltering: true,
                    maxHeight: scope.maxHeight || 300,
                    numberDisplayed: scope.numberDisplayed || 3,
                    includeSelectAllOption: scope.includeSelectAllOption,
                    nonSelectedText: scope.nonSelectedText || 'None Selected',
                    onChange: function (optionElement, checked) {
                        scope.$apply(function () {
                            scope.ngModel = element.val();
                        });
                    }
                });

                scope.$watchCollection('multiselectDataProvider', function (newValue, oldValue) {
                    if (angular.equals(newValue, oldValue)) {
                        return;
                    }
                    element.multiselect('dataprovider', newValue);
                });

                /*
                // Watch for any changes to the length of our select element
                scope.$watch(function () {
                    return element[0];
                }, function (newValue) {
                    debugger;
                    //element.multiselect('setOptions', element[0]);
                    //element.multiselect('rebuild');
                }, true);

                // Watch for any changes from outside the directive and refresh
                scope.$watch(attributes.ngModel, function () {
                    element.multiselect('refresh');
                });
                */
            }
        };
    })
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('aisTimelineDirectiveController', ['$scope', '$element', 'scaleConfig', function ($scope, $element, scaleConfig) {

        var gantt = null;

        $element[0].onresize = function(){
            console.log('element resize');
        };

        var initialize = function() {
            $scope.$watch('tasks', function (value) {
                drawTimeline();
            });
        };

        var drawTimeline = function(){
            if($scope.tasks && $scope.tasks.length > 0){
                $scope.tasks.sort(function(a, b) {
                    return a[$scope.ended] - b[$scope.ended];
                });

                $scope.taskNames = _($scope.tasks).pluck('taskName').uniq().value();
                var height = $scope.taskNames.length * 30 + 20;

                var width = $element[0].clientWidth;
                if (!width || width === 0) { width = 600; }


                $scope.tasks.sort(function(a, b) {
                    return a[$scope.started] - b[$scope.started];
                });
                var minDate = $scope.tasks[0][$scope.started];
                var maxDate = $scope.tasks[$scope.tasks.length - 1][$scope.ended];
                var daysDiff = moment.utc(maxDate).diff(moment.utc(minDate),'days');
                var format = '%H:%M:%S.%m';
                if(daysDiff > 0){
                    format = "%m/%d/%y %H:%M";
                }

                gantt = d3.gantt().renderTo("#ais-timeline").taskTypes($scope.taskNames).taskStatus(scaleConfig.taskStatusStyles).tickFormat(format).begin($scope.started).ended($scope.ended).height(height).width(width);

                gantt.timeDomainMode("fit");

                gantt($scope.tasks);

            }
        };

        function getend() {
            var lastend = Date.now();
            if ($scope.tasks.length > 0) {
                lastend = $scope.tasks[$scope.tasks.length - 1][$scope.ended];
            }

            return lastend;
        };

        $scope.formatDate = function(date){
            if(date){
                return moment.utc(date).toISOString();
            }
            else {
                return date;
            }
        };
        initialize();

    }]).directive('aisTimeline', function () {
        return {
            controller: 'aisTimelineDirectiveController',
            templateUrl: 'modules/charts/timeline/timelineDirectiveTemplate.html',
            restrict: 'E',
            scope: {
                tasks: '=',
                started: '=',
                ended: '='
            }
        };

    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('gaugeFactory', ['scaleConfig', function (scaleConfig) {
        var Gauge = function (placeholderName, configuration)
        {
            this.placeholderName = placeholderName;

            var self = this; // for internal d3 functions

            this.configure = function(configuration)
            {
                this.config = configuration;

                this.config.size = this.config.size * 0.9;

                this.config.radius = this.config.size * 0.97 / 2;
                this.config.cx = this.config.size / 2;
                this.config.cy = this.config.size / 2;

                this.config.min = undefined != configuration.min ? configuration.min : 0;
                this.config.max = undefined != configuration.max ? configuration.max : 100;
                this.config.range = this.config.max - this.config.min;

                this.config.majorTicks = configuration.majorTicks || 5;
                this.config.minorTicks = configuration.minorTicks || 2;

                this.config.greenColor 	= configuration.greenColor || '#8fca0e';
                this.config.yellowColor = configuration.yellowColor || '#ffc317';
                this.config.redColor 	= configuration.redColor || '#f54d36';

                this.config.transitionDuration = configuration.transitionDuration || 500;
            };

            this.render = function()
            {
                this.body = d3.select('#' + this.placeholderName)
                    .append('svg:svg')
                    .attr('class', 'gauge')
                    .attr('width', this.config.size)
                    .attr('height', this.config.size);

                this.body.append('svg:circle')
                    .attr('class', 'outer-circle')
                    .attr('cx', this.config.cx)
                    .attr('cy', this.config.cy)
                    .attr('r', this.config.radius)
                    .style('fill', '#ccc');
                /*.style('stroke', '#000')
                 .style('stroke-width', '0.5px');*/

                this.body.append('svg:circle')
                    .attr('cx', this.config.cx)
                    .attr('cy', this.config.cy)
                    .attr('r', 0.9 * this.config.radius)
                    .style('fill', '#fff')
                    .style('stroke', '#e0e0e0')
                    .style('stroke-width', '2px');

                for (var greenIdx in this.config.greenZones)
                {
                    this.drawBand(this.config.greenZones[greenIdx].from, this.config.greenZones[greenIdx].to, self.config.greenColor);
                }

                for (var yellowIdx in this.config.yellowZones)
                {
                    this.drawBand(this.config.yellowZones[yellowIdx].from, this.config.yellowZones[yellowIdx].to, self.config.yellowColor);
                }

                for (var redIdx in this.config.redZones)
                {
                    this.drawBand(this.config.redZones[redIdx].from, this.config.redZones[redIdx].to, self.config.redColor);
                }

                var fontSize = 0;

                if (undefined != this.config.label)
                {
                    fontSize = Math.round(this.config.size / 9);
                    this.body.append('svg:text')
                        .attr('x', this.config.cx)
                        .attr('y', this.config.cy / 2 + fontSize / 2)
                        .attr('dy', fontSize / 2)
                        .attr('text-anchor', 'middle')
                        .text(this.config.label)
                        .style('font-size', fontSize + 'px')
                        .style('fill', '#333')
                        .style('stroke-width', '0px');
                }

                fontSize = Math.round(this.config.size / 16);
                var majorDelta = this.config.range / (this.config.majorTicks - 1);
                for (var major = this.config.min; major <= this.config.max; major += majorDelta)
                {
                    var minorDelta = majorDelta / this.config.minorTicks,
                        point1 = 0,
                        point2 = 0;
                    for (var minor = major + minorDelta; minor < Math.min(major + majorDelta, this.config.max); minor += minorDelta)
                    {
                        point1 = this.valueToPoint(minor, 0.75);
                        point2 = this.valueToPoint(minor, 0.85);

                        this.body.append('svg:line')
                            .attr('x1', point1.x)
                            .attr('y1', point1.y)
                            .attr('x2', point2.x)
                            .attr('y2', point2.y)
                            .style('stroke', '#666')
                            .style('stroke-width', '1px');
                    }

                    point1 = this.valueToPoint(major, 0.7);
                    point2 = this.valueToPoint(major, 0.85);

                    this.body.append('svg:line')
                        .attr('x1', point1.x)
                        .attr('y1', point1.y)
                        .attr('x2', point2.x)
                        .attr('y2', point2.y)
                        .style('stroke', '#333')
                        .style('stroke-width', '2px');

                    if (major == this.config.min || major == this.config.max)
                    {
                        var point = this.valueToPoint(major, 0.63);

                        this.body.append('svg:text')
                            .attr('x', point.x)
                            .attr('y', point.y)
                            .attr('dy', fontSize / 3)
                            .attr('text-anchor', major == this.config.min ? 'start' : 'end')
                            .text(major)
                            .style('font-size', fontSize + 'px')
                            .style('fill', '#333')
                            .style('stroke-width', '0px');
                    }
                }

                var pointerContainer = this.body.append('svg:g').attr('class', 'pointerContainer');

                var midValue = (this.config.min + this.config.max) / 2;

                var pointerPath = this.buildPointerPath(midValue);

                var pointerLine = d3.svg.line()
                    .x(function(d) { return d.x })
                    .y(function(d) { return d.y })
                    .interpolate('basis');

                pointerContainer.selectAll('path')
                    .data([pointerPath])
                    .enter()
                    .append('svg:path')
                    .attr('d', pointerLine)
                    .style('fill', '#888');

                pointerContainer.append('svg:circle')
                    .attr('cx', this.config.cx)
                    .attr('cy', this.config.cy)
                    .attr('r', 0.07 * this.config.radius)
                    .style('fill', '#888');

                fontSize = Math.round(this.config.size / 10);
                pointerContainer.selectAll('text')
                    .data([midValue])
                    .enter()
                    .append('svg:text')
                    .attr('x', this.config.cx)
                    .attr('y', this.config.size - this.config.cy / 4 - fontSize)
                    .attr('dy', fontSize / 2)
                    .attr('text-anchor', 'middle')
                    .style('font-size', fontSize + 'px')
                    .style('fill', '#000')
                    .style('stroke-width', '0px');

                this.redraw(this.config.min, 0);
            };

            this.buildPointerPath = function(value)
            {
                var delta = this.config.range / 13;

                var head = valueToPoint(value, 0.85);
                var head1 = valueToPoint(value - delta, 0.12);
                var head2 = valueToPoint(value + delta, 0.12);

                var tailValue = value - (this.config.range * (1/(270/360)) / 2);
                var tail = valueToPoint(tailValue, 0.28);
                var tail1 = valueToPoint(tailValue - delta, 0.12);
                var tail2 = valueToPoint(tailValue + delta, 0.12);

                return [head, head1, tail2, tail, tail1, head2, head];

                function valueToPoint(value, factor)
                {
                    var point = self.valueToPoint(value, factor);
                    point.x -= self.config.cx;
                    point.y -= self.config.cy;
                    return point;
                }
            };

            this.drawBand = function(start, end, color)
            {
                if (0 >= end - start) return;

                this.body.append('svg:path')
                    .style('fill', color)
                    .attr('d', d3.svg.arc()
                        .startAngle(this.valueToRadians(start))
                        .endAngle(this.valueToRadians(end))
                        .innerRadius(0.65 * this.config.radius)
                        .outerRadius(0.85 * this.config.radius))
                    .attr('transform', function() { return 'translate(' + self.config.cx + ', ' + self.config.cy + ') rotate(270)' });
            };

            this.redraw = function(value, transitionDuration)
            {
                var pointerContainer = this.body.select('.pointerContainer');

                pointerContainer.selectAll('text').text(parseFloat(value).toFixed(2) + '%');

                var pointer = pointerContainer.selectAll('path');
                pointer.transition()
                    .duration(undefined != transitionDuration ? transitionDuration : this.config.transitionDuration)
                    //.delay(0)
                    //.ease('linear')
                    //.attr('transform', function(d)
                    .attrTween('transform', function()
                    {
                        var pointerValue = value;
                        if (value > self.config.max) pointerValue = self.config.max + 0.02*self.config.range;
                        else if (value < self.config.min) pointerValue = self.config.min - 0.02*self.config.range;
                        var targetRotation = (self.valueToDegrees(pointerValue) - 90);
                        var currentRotation = self._currentRotation || targetRotation;
                        self._currentRotation = targetRotation;

                        return function(step)
                        {
                            var rotation = currentRotation + (targetRotation-currentRotation)*step;
                            return 'translate(' + self.config.cx + ', ' + self.config.cy + ') rotate(' + rotation + ')';
                        }
                    });

                var outerCircle = this.body.select('.outer-circle')
                    .transition()
                    .duration(750)
                    .style('fill', function () {
                        var i = parseInt(value);
                        if (i >= 0 && i < 75) {
                            return self.config.greenColor;
                        } else if (i >= 75 && i < 90) {
                            return self.config.yellowColor;
                        } else {
                            return self.config.redColor;
                        }
                    });
            };

            this.valueToDegrees = function(value)
            {
                // thanks @closealert
                //return value / this.config.range * 270 - 45;
                return value / this.config.range * 270 - (this.config.min / this.config.range * 270 + 45);
            };

            this.valueToRadians = function(value)
            {
                return this.valueToDegrees(value) * Math.PI / 180;
            };

            this.valueToPoint = function(value, factor)
            {
                return { 	x: this.config.cx - this.config.radius * factor * Math.cos(this.valueToRadians(value)),
                    y: this.config.cy - this.config.radius * factor * Math.sin(this.valueToRadians(value)) 		};
            };

            // initialization
            this.configure(configuration);
        };

        return {
            createGauge: function (name, label, min, max, size) {
                var config = {
                    size: size || scaleConfig.defaultGaugeWidth,
                    label: label,
                    min: min || 0,
                    max: max || 100,
                    minorTicks: 5
                };

                var range = config.max - config.min;
                config.yellowZones = [{ from: config.min + range*0.75, to: config.min + range*0.9 }];
                config.redZones = [{ from: config.min + range*0.9, to: config.max }];

                var gauge = new Gauge(name + 'GaugeContainer', config);
                gauge.render();
                return gauge;
            }
        }
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('gridFactory', ['uiGridConstants', function (uiGridConstants) {

        var getSortConfig = function(orderParam){
            if(orderParam){
                var sortField = orderParam
                var sortDirection = 'asc';
                if(_.startsWith(orderParam, '-')){
                    sortDirection = 'desc';
                    sortField = sortField[0].length === 1 ? sortField.substring(1) : sortField[0].substring(1);
                }
                return {
                    direction: sortDirection,
                    field: sortField
                };
            }
            return {};
        };

        return {
            defaultGridOptions: function () {
                return {
                    enableRowSelection: true,
                    enableRowHeaderSelection: false,
                    enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,
                    multiSelect: false,
                    enableFiltering: true,
                    useExternalSorting: true,
                    useExternalFiltering: true,
                    enableSorting: true,
                    minRowsToShow: 17,
                    paginationPageSizes: [25, 50, 75, 100],
                    paginationPageSize: 25,
                    useExternalPagination: true
                }
            },
            applySortConfig: function(columnDefs, gridParams){
                var sortConfig = getSortConfig(gridParams.order);
                if(sortConfig.field){
                    var colDef = _.find(columnDefs, {field: sortConfig.field});
                    if(colDef){
                        colDef.sort = {
                            direction: sortConfig.direction,
                            priority: 1
                        }
                    }
                }
                return columnDefs;
            }
        }
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('pollerFactory', ['poller', function (poller) {
        return {
            newPoller: function (resource, interval) {
                return poller.get(resource, {
                    delay: interval,
                    catchError: true
                });
            }
        }
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('Status', ['StatusMaster', 'StatusScheduler', 'StatusResources', function (StatusMaster, StatusScheduler, StatusResources) {
        var Status = function ($resolved, master, scheduler, queue_depth, resources) {
            this.$resolved = $resolved;
            this.master = StatusMaster.transformer(master);
            this.scheduler = StatusScheduler.transformer(scheduler);
            this.queue_depth = queue_depth;
            this.resources = StatusResources.transformer(resources);
        };

        // public methods
        Status.prototype = {
            getCpuUsage: function () {
                if (this.resources.scheduled.cpus && this.resources.total.cpus) {
                    if (this.resources.total.cpus > 0) {
                        return ((this.resources.scheduled.cpus / this.resources.total.cpus) * 100).toFixed(2);
                    }
                }
                return 0.00;
            },
            getMemUsage: function () {
                if (this.resources.scheduled.mem && this.resources.total.mem) {
                    if (this.resources.total.mem > 0) {
                        return ((this.resources.scheduled.mem / this.resources.total.mem) * 100).toFixed(2);
                    }
                }
                return 0.00;
            },
            getDiskUsage: function () {
                if (this.resources.scheduled.disk && this.resources.total.disk) {
                    if (this.resources.total.disk > 0) {
                        return ((this.resources.scheduled.disk / this.resources.total.disk) * 100).toFixed(2);
                    }
                }
                return 0.00;
            }
        };

        // static methods, assigned to class
        Status.build = function (data) {
            if (data) {
                return new Status(
                    data.$resolved,
                    data.master,
                    data.scheduler,
                    data.queue_depth,
                    data.resources
                );
            }
            return new Status();
        };

        Status.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(Status.build)
                    .filter(Boolean);
            }
            return Status.build(data);
        };

        return Status;
    }]);
})();
(function () {
    'use strict';
    
    angular.module('scaleApp').factory('StatusMaster', function () {
        var StatusMaster = function (is_online, hostname, port) {
            this.is_online = is_online;
            this.hostname = hostname;
            this.port = port;
        };

        // public methods
        StatusMaster.prototype = {

        };

        // static methods, assigned to class
        StatusMaster.build = function (data) {
            if (data) {
                return new StatusMaster(
                    data.is_online,
                    data.hostname,
                    data.port
                );
            }
            return new StatusMaster();
        };

        StatusMaster.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(StatusMaster.build)
                    .filter(Boolean);
            }
            return StatusMaster.build(data);
        };

        return StatusMaster;
    });
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('StatusResource', function () {
        var StatusResource = function (cpus, mem, disk) {
            this.cpus = cpus;
            this.mem = mem;
            this.disk = disk;
        };

        // public methods
        StatusResource.prototype = {

        };

        // static methods, assigned to class
        StatusResource.build = function (data) {
            if (data) {
                return new StatusResource(
                    data.cpus,
                    data.mem,
                    data.disk
                );
            }
            return new StatusResource();
        };

        StatusResource.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(StatusResource.build)
                    .filter(Boolean);
            }
            return StatusResource.build(data);
        };

        return StatusResource;
    });
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('StatusResources', ['StatusResource', function (StatusResource) {
        var StatusResources = function (total, scheduled, used) {
            this.total = StatusResource.transformer(total);
            this.scheduled = StatusResource.transformer(scheduled);
            this.used = StatusResource.transformer(used);
        };

        // public methods
        StatusResources.prototype = {

        };

        // static methods, assigned to class
        StatusResources.build = function (data) {
            if (data) {
                return new StatusResources(
                    data.total,
                    data.scheduled,
                    data.used
                );
            }
            return new StatusResources();
        };

        StatusResources.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(StatusResources.build)
                    .filter(Boolean);
            }
            return StatusResources.build(data);
        };

        return StatusResources;
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('StatusScheduler', function () {
        var StatusScheduler = function (is_online, is_paused, hostname) {
            this.is_online = is_online;
            this.is_paused = is_paused;
            this.hostname = hostname;
        };

        // public methods
        StatusScheduler.prototype = {

        };

        // static methods, assigned to class
        StatusScheduler.build = function (data) {
            if (data) {
                return new StatusScheduler(
                    data.is_online,
                    data.is_paused,
                    data.hostname
                );
            }
            return new StatusScheduler();
        };

        StatusScheduler.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(StatusScheduler.build)
                    .filter(Boolean);
            }
            return StatusScheduler.build(data);
        };

        return StatusScheduler;
    });
})();
(function () {
    'use strict';

    angular.module('scaleApp').service('scaleService', ['scaleConfig', function (scaleConfig) {
        return {
            calculateFileSizeFromMib: function(num){
                if (num > 0) {
                    if (num < 1024) {
                        return num.toFixed(2) + ' MB';
                    }
                    if (num >= 1024 && num < 1024*1024) {
                        return (num/1024).toFixed(2) + ' GB';
                    }
                    return (num/1024/1024).toFixed(2) + ' TB';
                }
                return num;
            },
            calculateFileSizeFromBytes: function(num,decimals){
                // if(precision){
                //     // round num to specified precision
                //     num = Math.round(num/precision);
                // }
                if (num > 0) {
                    if (num < 1024) {
                        return num.toFixed(decimals) + ' Bytes';
                    }
                    if (num >= 1024 && num < 1024*1024) {
                        return (num/1024).toFixed(decimals) + ' KB';
                    }
                    if (num >= 1024*1024 && num < 1024*1024*1024) {
                        return (num/1024/1024).toFixed(decimals) + ' MB';
                    }
                    if (num >= 1024*1024*1024 && num < 1024*1024*1024*1024) {
                        return (num/1024/1024/1024).toFixed(decimals) + ' GB';
                    }
                    return (num/1024/1024/1024/1024).toFixed(decimals) + ' TB';
                }
                return num;
            },
            getViewportSize: function () {
                var w = window,
                    d = document,
                    e = d.documentElement,
                    g = document.body,
                    x = w.innerWidth || e.clientWidth || g.clientWidth,
                    y = w.innerHeight || e.clientHeight || g.clientHeight;

                return {
                    width: x,
                    height: y
                };
            },
            calculateDuration: function (start, stop, formatStr) {
                var to = moment.utc(stop),
                    from = moment.utc(start),
                    diff = to.diff(from);

                formatStr = formatStr || 'D[d], H[h], M[m], ss';

                return moment.duration(diff, 'milliseconds').format();
            },
            getDayString: function(dayNumber){
                var dayArr = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']
                return dayArr[dayNumber];
            },
            isIE: function () {
                var ua = window.navigator.userAgent,
                    oldIE = ua.indexOf('MSIE'),
                    newIE = ua.indexOf('Trident/');

                if ((oldIE > -1) || (newIE > -1)) {
                    return true;
                }
                return false;
            }
        }
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').service('schedulerService', ['$http', '$q', 'scaleConfig', function ($http, $q, scaleConfig) {
        var getUpdateSchedulerData = function (is_paused) {
            return {
                is_paused: is_paused
            };
        };

        return {
            updateScheduler: function (data) {
                data = data || getUpdateSchedulerData();
                var d = $q.defer();

                $http({
                    url: scaleConfig.urls.apiPrefix + 'scheduler/',
                    method: 'PATCH',
                    data: data
                }).success(function (result) {
                    d.resolve(result);
                }).error(function (error) {
                    d.reject(error);
                });

                return d.promise;
            }
        }
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').service('statusService', ['$resource', 'scaleConfig', 'poller', 'pollerFactory', 'Status', function ($resource, scaleConfig, poller, pollerFactory, Status) {
        return {
            getStatus: function () {
                var statusResource = $resource(scaleConfig.urls.apiPrefix + 'status/'),
                    statusPoller = pollerFactory.newPoller(statusResource, scaleConfig.pollIntervals.status);

                return statusPoller.promise.then(null, null, function (result) {
                    if (result.$resolved) {
                        result = Status.transformer(result);
                        //result = angular.extend(result, returnResult);
                    } else {
                        statusPoller.stop();
                    }
                    return result;
                });
            }
        }
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').service('userService', ['$rootScope', function ($rootScope) {
        return {
            getUserCreds: function(){
                var creds = localStorage.getItem('userCreds');
                try {
                    return JSON.parse(creds);
                } catch (e) {
                    console.log('Error parsing user credentials');
                    return creds;
                }
            },
            setUserCreds: function(user){
                if (user !== null) {
                    localStorage.setItem('userCreds', JSON.stringify(user));
                } else {
                    $rootScope.user = null;
                    localStorage.removeItem('userCreds');
                }

            },
            login: function (username) {
                var user = {
                    username: username,
                    is_admin: true
                };
                this.setUserCreds(user);
                return user;
            },
            logout: function() {
                this.setUserCreds(null);
            }
        }
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('feedDetailsController', ['$scope', '$location', 'scaleConfig', 'navService', 'subnavService', 'feedService', 'moment', function($scope, $location, scaleConfig, navService, subnavService, feedService, moment) {
        $scope.loading = true;
        $scope.feedData = {};
        $scope.subnavLinks = scaleConfig.subnavLinks.feed;
        $scope.useIngestTime = 'false';
        $scope.filterValue = 1;
        $scope.filterDuration = 'w';

        $scope.changeFeedSelection = function(){
            setFeedUrl();
            //getFeed();
        };

        $scope.changeIngestTimeSelection = function(){
            setFeedUrl();
            getFeed();
        };

        var getFeedParams = function(){
            var params = {};
            var strikeId = $scope.selectedFeed ? $scope.selectedFeed.strike.id : null;
            var useIngestTime = $scope.useIngestTime ? $scope.useIngestTime : null;

            params.started = moment.utc().subtract($scope.filterValue, $scope.filterDuration).startOf('d').toISOString();
            params.ended = moment.utc(params.started).add(1, $scope.filterDuration).endOf('d').toISOString();

            if (strikeId != $location.search().strike_id) {
                params.strike_id = strikeId;
            } else if ($location.search().strike_id) {
                params.strike_id = $location.search().strike_id;
            }

            if (useIngestTime != $location.search().use_ingest_time) {
               params.use_ingest_time = useIngestTime;
            } else if ($location.search().use_ingest_time) {
               console.log('getFeedParams use_ingest_time: ' + $location.search().use_ingest_time);
               params.use_ingest_time = $location.search().use_ingest_time;
            }

            return params;
        };

        var getFeed = function () {
            $scope.loading = true;
            if ($location.search().use_ingest_time) {
                $scope.useIngestTime = $location.search().use_ingest_time;
            }
            var feedParams = getFeedParams();
            $location.search(feedParams);
            feedService.getFeed(feedParams).then(function (data) {
                $scope.allFeeds = _.sortByOrder(data.results, ['strike.name'], ['asc']);
                var strikeId = $location.search().strike_id;
                if(strikeId){
                    // set selectedFeed = new feed
                    var feed = _.find($scope.allFeeds, function(feed){
                        return feed.strike.id == strikeId;
                    });
                    $scope.selectedFeed = feed ? feed : null;
                } else {
                    $scope.selectedFeed = $scope.allFeeds[0];
                    setFeedUrl();
                }
            }).finally(function(){
                $scope.loading = false;
            });
        };

        $scope.updateFeedRange = function (action) {
            if (action === 'older') {
                $scope.filterValue++;
            } else if (action === 'newer') {
                if ($scope.filterValue > 1) {
                    $scope.filterValue--;
                }
            } else if (action === 'today') {
                $scope.filterValue = 1;
            }
            getFeed();
        };

        var setFeedUrl = function(){
            // set param in URL
            var params = getFeedParams();
            $location.search(params);
        };

        var initialize = function () {
            navService.updateLocation('feed');
            subnavService.setCurrentPath('feed');
            getFeed();
        };

        initialize();

        $scope.$watch('filterValue', function (value) {
            var $feedNewer = $('.feed-newer'),
                $feedToday = $('.feed-today');

            if (value > 1) {
                $feedNewer.removeAttr('disabled');
                $feedToday.removeAttr('disabled');
            } else {
                $feedNewer.attr('disabled', 'disabled');
                $feedToday.attr('disabled', 'disabled');
            }
        });
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('ingestRecordsController', ['$scope', '$rootScope', '$location', 'scaleConfig', 'scaleService', 'gridFactory', 'navService', 'subnavService', 'feedService', function($scope, $rootScope, $location, scaleConfig, scaleService, gridFactory, navService, subnavService, feedService) {
        $scope.subnavLinks = scaleConfig.subnavLinks.feed;

        var gridParams = {
            page: 1, page_size: 25, started: null, ended: null, order: '-transfer_started', status: null
        };

        // check for gridParams in query string, and update as necessary
        _.forEach(_.pairs(gridParams), function (param) {
            var value = _.at($location.search(), param[0]);
            if (value.length > 0) {
                gridParams[param[0]] = value.length > 1 ? value : value[0];
            }
        });

        var filteredByStatus = gridParams.status ? true : false;
        var filteredByOrder = gridParams.order ? true : false;
        $scope.lastModifiedStart = gridParams.started ? moment.utc(gridParams.started).toDate() : moment.utc().subtract(1, 'weeks').startOf('d').toDate();

        $scope.lastModifiedStartPopup = {
            opened: false
        };
        $scope.openLastModifiedStartPopup = function ($event) {
            $event.stopPropagation();
            $scope.lastModifiedStartPopup.opened = true;
        };
        $scope.lastModifiedStop = gridParams.ended ? moment.utc(gridParams.ended).toDate() : moment.utc().endOf('d').toDate();
        $scope.lastModifiedStopPopup = {
            opened: false
        };
        $scope.openLastModifiedStopPopup = function ($event) {
            $event.stopPropagation();
            $scope.lastModifiedStopPopup.opened = true;
        };
        $scope.dateModelOptions = {
            timezone: '+000'
        };

        $scope.statusValues = scaleConfig.ingestStatus;
        $scope.selectedStatus = gridParams.status || $scope.statusValues[0];
        $scope.$watch('selectedStatus', function (value) {
            if ($scope.loading) {
                if (filteredByStatus) {
                    updateStatus(value);
                }
            } else {
                filteredByStatus = value !== 'VIEW ALL';
                updateStatus(value);
            }
        });

        $scope.$watch('lastModifiedStart', function (value) {
            if (!$scope.loading) {
                gridParams.started = value.toISOString();
                $scope.filterResults();
            }
        });

        $scope.$watch('lastModifiedStop', function (value) {
            if (!$scope.loading) {
                console.log(value);
                gridParams.ended = value.toISOString();
                $scope.filterResults();
            }
        });


        var updateStatus = function (value) {
            if (value != gridParams.status) {
                gridParams.page = 1;
            }
            gridParams.status = value === 'VIEW ALL' ? null : value;
            gridParams.page_size = $scope.gridOptions.paginationPageSize;
            if (!$scope.loading) {
                $scope.filterResults();
            }
        };

        var defaultColumnDefs = [
            { field: 'file_name', displayName: 'File Name', enableFiltering: false },
            {
                field: 'file_size',
                displayName: 'File Size',
                enableFiltering: false,
                cellTemplate: '<div class="ui-grid-cell-contents">{{ row.entity.file_size_formatted }}</div>',
            },
            { field: 'strike.title', displayName: 'Strike Process', enableFiltering: false },
            {
                field: 'status',
                filterHeaderTemplate: '<div class="ui-grid-filter-container"><select class="form-control input-sm" ng-model="grid.appScope.selectedStatus"><option ng-selected="{{ grid.appScope.statusValues[$index] == grid.appScope.selectedStatus }}" value="{{ grid.appScope.statusValues[$index] }}" ng-repeat="status in grid.appScope.statusValues track by $index">{{ status.toUpperCase() }}</option></select></div>'
            },
            {
                field: 'transfer_started',
                enableFiltering: false
            },
            { field: 'transfer_ended', enableFiltering: false },
            {
                field: 'ingest_started',
                enableFiltering: false
            },
            { field: 'ingest_ended', enableFiltering: false }
        ];

        $scope.gridOptions = gridFactory.defaultGridOptions();
        $scope.gridOptions.paginationCurrentPage = parseInt(gridParams.page || 1);
        $scope.gridOptions.paginationPageSize = parseInt(gridParams.page_size) || $scope.gridOptions.paginationPageSize;
        $scope.gridOptions.columnDefs = gridFactory.applySortConfig(defaultColumnDefs, gridParams);
        $scope.gridOptions.data = [];
        $scope.gridOptions.onRegisterApi = function (gridApi) {
                //set gridApi on scope
                $scope.gridApi = gridApi;
                // $scope.gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                //     if ($scope.actionClicked) {
                //         $scope.actionClicked = false;
                //     } else {
                //         $scope.$apply(function(){
                //             $location.path('/feed/ingests/' + row.entity.id);
                //         });
                //     }
                //
                // });
                $scope.gridApi.pagination.on.paginationChanged($scope, function (currentPage, pageSize) {
                    gridParams.page = currentPage;
                    gridParams.page_size = pageSize;
                    console.log('gridApi.paginationChanged');
                    $scope.filterResults();
                });
                $scope.gridApi.core.on.sortChanged($scope, function (grid, sortColumns) {
                    $rootScope.colDefs = null;
                    _.forEach($scope.gridApi.grid.columns, function (col) {
                        col.colDef.sort = col.sort;
                    });
                    $rootScope.colDefs = $scope.gridApi.grid.options.columnDefs;
                    var sortArr = [];
                    _.forEach(sortColumns, function (col) {
                        sortArr.push(col.sort.direction === 'desc' ? '-' + col.field : col.field);
                    });
                    updateOrder(sortArr);
                });
            };

        $scope.filterResults = function () {
            _.forEach(_.pairs(gridParams), function (param) {
                $location.search(param[0], param[1]);
            });
            getIngests();
        };

        var updateOrder = function (sortArr) {
            gridParams.order = sortArr.length > 0 ? sortArr : null;
            filteredByOrder = sortArr.length > 0;
            $scope.filterResults();
        };

        var getIngests = function () {
            $scope.loading = true;
            feedService.getIngestsOnce(gridParams).then(function (data) {
                $scope.ingests = data.results;
                $scope.gridOptions.totalItems = data.count;
                $scope.gridOptions.data = $scope.ingests;
                $scope.loading = false;
            }).catch(function (error) {
                console.log(error);
            }).finally(function () {
                $scope.loading = false;
            });
        };


        var initialize = function () {
            navService.updateLocation('feed');
            subnavService.setCurrentPath('feed/ingests');
            if (!gridParams.started) {
                console.log('lastModifiedStart: ' + $scope.lastModifiedStart);
                gridParams.started = moment.utc($scope.lastModifiedStart).toISOString();
                $location.search('started', gridParams.started).replace();
            }
            if (!gridParams.ended) {
                gridParams.ended = moment.utc($scope.lastModifiedStop).toISOString();
                $location.search('ended', gridParams.ended).replace();
            }
            getIngests();
        };

        initialize();

        angular.element(document).ready(function () {
            // set container heights equal to available page height
            var viewport = scaleService.getViewportSize(),
                offset = scaleConfig.headerOffset + scaleConfig.dateFilterOffset,
                gridMaxHeight = viewport.height - offset;

            $scope.gridStyle = 'height: ' + gridMaxHeight + 'px; max-height: ' + gridMaxHeight + 'px; overflow-y: auto;';
        });
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('Feed', ['scaleConfig', function (scaleConfig) {
        var Feed = function (value, status) {
            this.value = value;
            this.status = status;
        };

        // public methods
        Feed.prototype = {
            toString: function () {
                return 'Feed';
            },
            getCellText: function () {
                return this.value;
            },
            getCellTitle: function () {
                return '';
            }
        };

        // static methods, assigned to class
        Feed.build = function (data) {
            if (data) {
                return new Feed(
                    data.value,
                    data.status
                );
            }
            return new Feed();
        };

        Feed.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(Feed.build)
                    .filter(Boolean);
            }
            return Feed.build(data);
        };

        return Feed;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('FeedStatus', ['scaleConfig', function (scaleConfig) {
        var FeedStatus = function (status) {
            this.status = status;
        };

        // public methods
        FeedStatus.prototype = {
            toString: function () {
                return 'FeedStatus';
            },
            getCellFill: function () {
                return scaleConfig.colors.chart_green;
            },
            getCellActivity: function () {
                return '';
            },
            getCellActivityTotal: function () {
                return '';
            },
            getCellError: function () {
                return '';
            },
            getCellTotal: function () {
                return '';
            }
        };

        // static methods, assigned to class
        FeedStatus.build = function (data) {
            if (data) {
                return new FeedStatus(
                    data.status
                );
            }
            return new FeedStatus();
        };

        FeedStatus.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(FeedStatus.build)
                    .filter(Boolean);
            }
            return FeedStatus.build(data);
        };

        return FeedStatus;
    }]);
})();

(function () {
    'use strict';
    angular.module('scaleApp').service('feedService', ['$location', '$timeout', '$q', '$http', 'scaleConfig', 'scaleService', 'Feed', 'FeedStatus', function ($location, $timeout, $q, $http, scaleConfig, scaleService, Feed, FeedStatus) {

        var getFeedParams = function(params){
            if(!params){ params = {}; }
            var p = {};
            p.page_size = 1000;
            p.started = params.started ? params.started : moment.utc().add(-7,'days').startOf('d').toDate();
            p.ended = params.ended ? params.ended : moment.utc().toDate();
            p.use_ingest_time = params.use_ingest_time ? params.use_ingest_time : null;
            return p;
        };

        var getIngestsParams = function(params){
            return params;
        };

        return {
            getFeed: function(params){
                var d = $q.defer();
                var params = getFeedParams(params);
                $http({
                    url: scaleConfig.urls.apiPrefix + 'ingests/status/',
                    method: 'GET',
                    params: params
                }).success(function (data) {
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getIngestsOnce: function(params) {
                var d = $q.defer();
                var params = getIngestsParams(params);
                $http({
                    url: scaleConfig.urls.apiPrefix + 'ingests/',
                    method: 'GET',
                    params: params
                }).success(function (data) {
                    _.forEach(data.results, function(d){
                        d.file_size_formatted = scaleService.calculateFileSizeFromBytes(d.file_size);
                    });
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            }
        };
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('jobDetailController', ['$scope', '$rootScope', '$location', '$routeParams', '$uibModal', 'navService', 'jobService', 'jobExecutionService', 'nodeService', 'loadService', 'scaleConfig', 'subnavService', 'userService', 'toastr', function ($scope, $rootScope, $location, $routeParams, $uibModal, navService, jobService, jobExecutionService, nodeService, loadService, scaleConfig, subnavService, userService, toastr) {
        $scope.job = {};
        $scope.jobId = $routeParams.id;
        $scope.subnavLinks = scaleConfig.subnavLinks.jobs;
        subnavService.setCurrentPath('jobs');
        $scope.loadingJobDetail = false;
        $scope.latestExecution = null;
        $scope.executionLog = null;
        $scope.executionDetails = null;
        $scope.selectedExectuionDetailValues = null;
        $scope.timeline = [];
        $scope.readonly = true;
        $scope.jobErrorCreated = '';
        $scope.jobErrorLastModified = '';
        $scope.lastStatusChange = '';
        $scope.triggerOccurred = '';

        $scope.showLog = function (execution) {
            $scope.selectedExecutionLog = execution;
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'showLog.html',
                scope: $scope,
                //size: 'lg',
                windowClass: 'log-modal-window'
            });
        };

        $scope.showExecutionDetails = function (executionId) {
            jobExecutionService.getJobExecutionDetails(executionId).then(function (data) {
                $scope.selectedExecutionDetails = data;
                $scope.selectedExecutionDetailValues = _.pairs(data);
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'showExecutionDetails.html',
                    scope: $scope,
                    size: 'lg'
                });
            });
        };

        $scope.mediaTypeClass = function (mediaType) {
            var mediaTypeCfg = _.find(scaleConfig.mediaTypes, 'mimeType', mediaType);
            if (mediaTypeCfg) {
                return mediaTypeCfg.icon;
            } else {
                return null;
            }
        };

        $scope.requeueJob = function (jobId) {
            $scope.loading = true;
            loadService.requeueJobs({ job_ids: [jobId] }).then(function (data) {
                toastr['success']('Requeued Job');
                $scope.job.status = data.job_status;
                getJobDetail(jobId);
            }).catch(function (error) {
                toastr['error']('Requeue request failed');
                console.log(error);
            }).finally(function () {
                $scope.loading = false;
            });
        };

        $scope.cancelJob = function (job) {
            $scope.loading = true;
            $scope.actionClicked = true;
            $scope.loading = true;
            var originalStatus = job.status;
            job.status = 'CANCEL';
            jobService.updateJob(job.id, { status: 'CANCELED' }).then(function (data) {
                toastr['success']('Job Canceled');
                job.status = 'CANCELED';
            }).catch(function (error) {
                toastr['error'](error);
                console.log(error);
                job.status = originalStatus;
            }).finally(function () {
                $scope.loading = false;
            });
        };

        var getJobDetail = function (jobId) {
            $scope.loadingJobDetail = true;
            jobService.getJobDetail(jobId).then(function (data) {
                $scope.job = data;
                $scope.timeline = calculateTimeline(data);
                $scope.publishedProducts = _.where(data.products, { 'is_published': true });
                $scope.unpublishedProducts = _.where(data.products, { 'is_published': false });
                $scope.publishedProductsGrouped = _.pairs(_.groupBy($scope.publishedProducts, 'job_exe.id'));
                $scope.latestExecution = data.getLatestExecution();
                $scope.jobErrorCreated = data.error ? moment.utc(data.error.created).toISOString() : '';
                $scope.lastStatusChange = data.last_status_change ? moment.duration(moment.utc(data.last_status_change).diff(moment.utc())).humanize(true) : '';
                $scope.triggerOccurred = data.event.occurred ? moment.duration(moment.utc(data.event.occurred).diff(moment.utc())).humanize(true) : '';
            }).catch(function (error) {
                console.log(error);
            }).finally(function () {
                $scope.loadingJobDetail = false;
            });
        };

        var calculateTimeline = function (job) {
            var tl = [];
            tl.push({ taskName: 'Created', started: job.created ? moment.utc(job.created).toDate() : job.created, ended: job.queued ? moment.utc(job.queued).toDate() : job.queued });
            tl.push({ taskName: 'Queued', started: job.queued ? moment.utc(job.queued).toDate() : job.queued, ended: job.started ? moment.utc(job.started).toDate() : job.started });
            tl.push({ taskName: 'Executed', started: job.started ? moment.utc(job.started).toDate() : job.started, ended: job.ended ? moment.utc(job.ended).toDate() : job.ended });

            return tl;
        };

        var initialize = function () {
            navService.updateLocation('jobs');

            $rootScope.user = userService.getUserCreds();
            if($rootScope.user){
                $scope.readonly = false;
            }

            getJobDetail($scope.jobId);
        };

        initialize();
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('jobExecutionDetailController', ['$scope', '$location', '$routeParams', 'navService', 'jobExecutionService', 'nodeService', 'scaleConfig', 'subnavService', function ($scope, $location, $routeParams, navService, jobExecutionService, nodeService, scaleConfig, subnavService) {
        $scope.jobExecution = {};
        $scope.jobExecutionId = $routeParams.id;
        $scope.loading = true;
        $scope.subnavLinks = scaleConfig.subnavLinks.jobs;
        subnavService.setCurrentPath('jobs/runs');

        var getJobExecutionDetail = function (jobExecutionId) {
            jobExecutionService.getJobExecutionDetail(id).then(function (data) {
                $scope.jobExecution = data;
            }).catch(function (error) {
                console.log(error);
            }).finally(function () {
                $scope.loading = false;
            });
        };

        var initialize = function () {
            getJobExecutionDetail($routeParams.id);
            navService.updateLocation('jobs');
        };

        initialize();
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').controller('jobExecutionsController', ['$scope', '$location', 'navService', 'statsService', 'jobExecutionService', 'jobTypeService', 'uiGridConstants', 'scaleConfig', 'subnavService', function($scope, $location, navService, statsService, jobExecutionService, jobTypeService, uiGridConstants, scaleConfig, subnavService) {

        $scope.jobExecutions = [];
        $scope.loading = true;
        $scope.jobTypeValues = [];
        $scope.selectedJobType = '';
        $scope.jobStatus = scaleConfig.jobStatus;
        $scope.selectedJobStatus = '';
        $scope.subnavLinks = scaleConfig.subnavLinks.jobs;
        subnavService.setCurrentPath('jobs/executions');

        var gridFilter = {},
            gridPageNumber = 1;

        $scope.gridOptions = {
            enableRowSelection: true,
            enableRowHeaderSelection: false,
            enableHorizontalScrollbar: uiGridConstants.scrollbars.NEVER,
            multiSelect: false,
            enableFiltering: true,
            useExternalFiltering: true,
            enableSorting: true,
            minRowsToShow: 17,
            paginationPageSizes: [25,50,75],
            paginationPageSize: 25,
            useExternalPagination: true,
            columnDefs: [
                {
                    field: 'jobTypeId',
                    displayName: 'Job Type',
                    cellTemplate: '<div class="ui-grid-cell-contents"><span ng-bind-html="row.entity.getIcon()"></span> {{ row.entity.job.jobType.title }}</div>',
                    filterHeaderTemplate: '<div class="ui-grid-filter-container"><select class="form-control input-sm" ng-model="grid.appScope.selectedJobType"><option value="{{ grid.appScope.jobTypeValues[$index].id }}" ng-repeat="jobType in grid.appScope.jobTypeValues track by $index">{{ grid.appScope.jobTypeValues[$index].name }} {{ grid.appScope.jobTypeValues[$index].version }}</option></select>'
                },
                { field: 'created', enableFiltering: false, cellFilter: 'date:\'yyyy-MM-dd HH:mm:ss\'' },
                { field: 'lastModified', enableFiltering: false, cellFilter: 'date:\'yyyy-MM-dd HH:mm:ss\'' },
                {
                    field: 'status',
                    filterHeaderTemplate: '<div class="ui-grid-filter-container"><select class="form-control input-sm" ng-model="grid.appScope.selectedJobStatus"><option ng-repeat="status in grid.appScope.jobStatus track by $index">{{ status.toUpperCase() }}</option></select>'
                },
                { field: 'id', displayName: 'ID', enableFiltering: false }
            ],
            data: [],
            onRegisterApi: function (gridApi) {
                //set gridApi on scope
                $scope.gridApi = gridApi;
                $scope.gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                    $scope.$apply(function () {
                        //$location.path('/jobexecutions/' + row.entity.id);
                        console.log(row);
                    });
                });
                $scope.gridApi.pagination.on.paginationChanged($scope, function (currentPage, pageSize) {
                    $scope.getPage(currentPage, pageSize);
                });
            }
        };

        $scope.$watch('selectedJobType', function (value) {
            if (!$scope.loading) {
                gridFilter.jobTypeId = value;
                $scope.getPage(gridPageNumber, $scope.gridOptions.paginationPageSize, gridFilter);
            }
        });

        $scope.$watch('selectedJobStatus', function (value) {
            if (!$scope.loading) {
                gridFilter.jobStatus = value;
                $scope.getPage(gridPageNumber, $scope.gridOptions.paginationPageSize, gridFilter);
            }
        });

        $scope.getPage = function (pageNumber, pageSize) {
            $scope.loading = true;
            gridPageNumber = pageNumber;
            jobExecutionService.getJobExecutions(pageNumber, pageSize, gridFilter).then(function (data) {
                var newData = [];
                for (var i = 0; i < $scope.gridOptions.paginationPageSize; i++) {
                    if (data.executions[i]) {
                        newData.push(data.executions[i]);
                    }
                }
                $scope.gridOptions.data = newData;
                $scope.gridOptions.totalItems = data.count;
            }).catch(function (error) {
                console.log(error);
            }).finally(function () {
                $scope.loading = false;
            });
        };

        var getJobExecutions = function () {
            jobExecutionService.getJobExecutions(gridPageNumber, $scope.gridOptions.paginationPageSize, gridFilter).then(function (data) {
                window.localStorage['scale-jobexecutions-time'] = moment.utc().toISOString();
                window.localStorage['scale-jobexecutions'] = JSON.stringify(data);
                $scope.gridOptions.totalItems = data.count;
                $scope.gridOptions.data = data.executions;
            }).catch(function (error) {
                console.log(error);
            }).finally(function () {
                getJobTypes();
            });
        };

        var getJobTypes = function () {
            jobTypeService.getJobTypesOnce().then(function (data) {
                $scope.jobTypeValues = data.results;
                $scope.jobTypeValues.unshift({ name: '', version: '', id: null });
            }).catch(function (error) {
                console.log(error);
            }).finally(function () {
                $scope.loading = false;
            });
        };

        var initialize = function() {
            getJobExecutions();
            navService.updateLocation('jobs');
        };
        initialize();
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').controller('jobTypesController', ['$rootScope', '$scope', '$routeParams', '$location', 'hotkeys', 'scaleService', 'navService', 'jobTypeService', 'scaleConfig', 'subnavService', 'nodeService', 'localStorage', 'userService', function ($rootScope, $scope, $routeParams, $location, hotkeys, scaleService, navService, jobTypeService, scaleConfig, subnavService, nodeService, localStorage, userService) {
        $scope.requestedJobTypeId = parseInt($routeParams.id);
        $scope.masterContainerStyle = '';
        $scope.detailContainerStyle = '';
        $scope.jobTypes = [];
        $scope.jobTypeIds = [];
        $scope.jobTypeCount = 0;
        $scope.activeJobTypeDetails = {};
        $scope.activeJobTypeInterfaceValues = [];
        $scope.activeJobTypeErrors = [];
        $scope.activeJobTypeStats = {};
        $scope.showJobTypeErrors = false;
        $scope.loading = true;
        $scope.activeJobType = null;
        $scope.healthData6 = {};
        $scope.healthData12 = {};
        $scope.healthData24 = {};
        $scope.activityIcon = '<i class="fa fa-pulse">&#x' + scaleConfig.activityIconCode + '</i>';
        $scope.selectJobClass = 'visible';
        $scope.jobDetailsClass = 'invisible';
        $scope.pauseBtnClass = 'fa-pause';
        $scope.user = userService.getUserCreds();
        $scope.subnavLinks = scaleConfig.subnavLinks.jobs;
        subnavService.setCurrentPath('jobs/types');

        var jobTypeStats = {};

        $scope.viewDetails = function (id) {
            $scope.activeJobType = _.find($scope.jobTypes, 'id', id);
            $scope.activeJobType.created = formatDateTime($scope.activeJobType.created);
            $scope.activeJobType.lastModified = formatDateTime($scope.activeJobType.lastModified);

            $location.path('jobs/types/' + id);

            getJobTypeDetails($scope.activeJobType.id);

            //formatJobTypeStats();

            $scope.jobDetailsClass = 'visible';
            $scope.selectJobClass = 'invisible';
        };

        $scope.togglePause = function () {
            $scope.activeJobType.is_paused = !$scope.activeJobType.is_paused;
            $scope.activeJobTypeDetails.is_paused = $scope.activeJobType.is_paused;
            $scope.loading = true;
            jobTypeService.updateJobType($scope.activeJobTypeDetails).then(function(data){
                $scope.activeJobTypeDetails = data;
                $scope.pauseBtnClass = $scope.getPauseButtonClass($scope.activeJobTypeDetails.is_paused);
                $scope.loading = false;
            }).catch(function (error) {
                console.log(error);
                toastr['error'](error);
                $scope.loading = false;
            });
        };

        $scope.getPauseButtonClass = function(is_paused){
            return is_paused ? 'fa-play' : 'fa-pause';
        }

        $scope.getJobTypeListItemClass = function(jobType){
            return jobType.is_paused ? 'paused' : '';
        }

        var formatDateTime = function (dt) {
            return moment.utc(dt).toISOString();
        };

        var getJobTypes = function () {
            jobTypeService.getJobTypesOnce().then(function (data) {
                $scope.jobTypes = data.results;
                $scope.jobTypeIds = _.pluck(data.results, 'id');
                $scope.jobTypeCount = data.count;
                if ($scope.requestedJobTypeId) {
                    $scope.viewDetails($scope.requestedJobTypeId);
                } else {
                    $scope.loading = false;
                }
                hotkeys.bindTo($scope)
                    .add({
                        combo: 'ctrl+up',
                        description: 'Previous Job Type',
                        callback: function () {
                            if ($scope.activeJobType) {
                                var idx = _.indexOf($scope.jobTypeIds, $scope.activeJobType.id);
                                if (idx > 0) {
                                    $scope.viewDetails($scope.jobTypeIds[idx - 1]);
                                }
                            }
                        }
                    }).add({
                        combo: 'ctrl+down',
                        description: 'Next Job Type',
                        callback: function () {
                            if ($scope.activeJobType) {
                                var idx = _.indexOf($scope.jobTypeIds, $scope.activeJobType.id);
                                if (idx < ($scope.jobTypeIds.length - 1)) {
                                    $scope.viewDetails($scope.jobTypeIds[idx + 1]);
                                }
                            }
                        }
                    });
            }).catch(function (error) {
                console.log(error);
                $scope.loading = false;
            });
        };

        var getJobTypeDetails = function (id) {
            $scope.loading = true;
            jobTypeService.getJobTypeDetails(id).then(function (data) {
                $scope.activeJobTypeDetails = data;
                $scope.activeJobTypeInterfaceValues = _.pairs(data.job_type_interface);
                $scope.pauseBtnClass = $scope.getPauseButtonClass($scope.activeJobTypeDetails.is_paused);
                // format error mapping
                $scope.activeJobTypeErrors = [];
                $scope.showJobTypeErrors = _.keys(data.error_mapping.exit_codes).length > 0;
                if ($scope.showJobTypeErrors) {
                    _.forEach(data.error_mapping.exit_codes, function (error_name) {
                        var error = _.find(data.errors, 'name', error_name),
                            exitCode = _.invert(data.error_mapping.exit_codes)[error_name];
                        $scope.activeJobTypeErrors.push({code: exitCode, data: error});
                    });
                }

                // format job type stats
                var performance = data.getPerformance(),
                    failures = data.getFailures();

                $scope.activeJobTypeStats = performance;

                $scope.healthData6 = {
                    gaugeData: performance.hour6.rate,
                    donutData: failures.hour6
                };
                $scope.healthData12 = {
                    gaugeData: performance.hour12.rate,
                    donutData: failures.hour12
                };
                $scope.healthData24 = {
                    gaugeData: performance.hour24.rate,
                    donutData: failures.hour24
                };
            }).catch(function (error) {
                console.log(error);
            }).finally(function () {
                $scope.loading = false;
            });
        };

        var initialize = function () {
            getJobTypes();
            navService.updateLocation('jobs');
        };

        angular.element(document).ready(function () {
            // set container heights equal to available page height
            var viewport = scaleService.getViewportSize(),
                masterOffset = scaleConfig.headerOffset,
                detailOffset = scaleConfig.headerOffset + document.getElementsByClassName('nav-tabs')[0].scrollHeight,
                masterMaxHeight = viewport.height - masterOffset,
                detailMaxHeight = viewport.height - detailOffset;

            $scope.masterContainerStyle = 'height: ' + masterMaxHeight + 'px; max-height: ' + masterMaxHeight + 'px; overflow-y: auto;';
            $scope.detailContainerStyle = 'height: ' + detailMaxHeight + 'px; max-height: ' + detailMaxHeight + 'px; overflow-y: auto;';
        });

        initialize();
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('jobsController', ['$rootScope', '$scope', '$location', '$uibModal', 'navService', 'jobService', 'jobTypeService', 'jobExecutionService', 'uiGridConstants', 'scaleConfig', 'subnavService', 'gridFactory', 'loadService', 'scaleService', 'userService', 'moment', 'toastr', function($rootScope, $scope, $location, $uibModal, navService, jobService, jobTypeService, jobExecutionService, uiGridConstants, scaleConfig, subnavService, gridFactory, loadService, scaleService, userService, moment, toastr) {
        var self = this;

        self.jobsParams = {
            page: null, page_size: null, started: null, ended: null, order: $rootScope.jobsControllerOrder || '-last_modified', status: null, job_type_id: null, job_type_name: null, job_type_category: null, url: null
        };

        // check for jobsParams in query string, and update as necessary
        _.forEach(_.pairs(self.jobsParams), function (param) {
            var value = _.at($location.search(), param[0]);
            if (value.length > 0) {
                self.jobsParams[param[0]] = value.length > 1 ? value : value[0];
            }
        });

        var gridPageNumber = self.jobsParams.page || 1,
            filteredByJobType = self.jobsParams.job_type_id ? true : false,
            filteredByJobStatus = self.jobsParams.status ? true : false,
            filteredByOrder = self.jobsParams.order ? true : false;

        $scope.jobsData = {};
        $scope.loading = true;
        $scope.jobTypeValues = [];
        $scope.jobExecution = null;
        $scope.selectedJobType = self.jobsParams.job_type_id || 0;
        $scope.jobStatusValues = scaleConfig.jobStatus;
        $scope.selectedJobStatus = self.jobsParams.status || $scope.jobStatusValues[0];
        $scope.subnavLinks = scaleConfig.subnavLinks.jobs;
        $scope.actionClicked = false;
        $scope.gridStyle = '';
        $scope.readonly = true;
        $scope.lastModifiedStart = self.jobsParams.started ? moment.utc(self.jobsParams.started).toDate() : moment.utc().subtract(1, 'weeks').startOf('d').toDate();
        $scope.lastModifiedStartPopup = {
            opened: false
        };
        $scope.openLastModifiedStartPopup = function ($event) {
            $event.stopPropagation();
            $scope.lastModifiedStartPopup.opened = true;
        };
        $scope.lastModifiedStop = self.jobsParams.ended ? moment.utc(self.jobsParams.ended).toDate() : moment.utc().endOf('d').toDate();
        $scope.lastModifiedStopPopup = {
            opened: false
        };
        $scope.openLastModifiedStopPopup = function ($event) {
            $event.stopPropagation();
            $scope.lastModifiedStopPopup.opened = true;
        };
        $scope.dateModelOptions = {
            timezone: '+000'
        };

        subnavService.setCurrentPath('jobs');

        var defaultColumnDefs = [
            {
                field: 'job_type',
                displayName: 'Job Type',
                cellTemplate: '<div class="ui-grid-cell-contents"><span ng-bind-html="row.entity.job_type.getIcon()"></span> {{ row.entity.job_type.title }} {{ row.entity.job_type.version }}</div>',
                filterHeaderTemplate: '<div class="ui-grid-filter-container"><select class="form-control input-sm" ng-model="grid.appScope.selectedJobType"><option ng-if="grid.appScope.jobTypeValues[$index]" ng-selected="{{ grid.appScope.jobTypeValues[$index].id == grid.appScope.selectedJobType }}" value="{{ grid.appScope.jobTypeValues[$index].id }}" ng-repeat="jobType in grid.appScope.jobTypeValues track by $index">{{ grid.appScope.jobTypeValues[$index].title }} {{ grid.appScope.jobTypeValues[$index].version }}</option></select></div>'
            },
            {
                field: 'created',
                displayName: 'Created',
                enableFiltering: false,
                cellTemplate: '<div class="ui-grid-cell-contents">{{ row.entity.created_formatted }}</div>'
            },
            {
                field: 'last_modified',
                displayName: 'Last Modified',
                enableFiltering: false,
                cellTemplate: '<div class="ui-grid-cell-contents">{{ row.entity.last_modified_formatted }}</div>'
            },
            { field: 'duration', enableFiltering: false, enableSorting: false, cellTemplate: '<div class="ui-grid-cell-contents">{{ row.entity.getDuration() }}</div>' },
            {
                field: 'status',
                cellTemplate: '<div class="ui-grid-cell-contents">{{ row.entity.status }} <button ng-show="((!grid.appScope.readonly) && (row.entity.status === \'FAILED\' || row.entity.status === \'CANCELED\'))" ng-click="grid.appScope.requeueJobs({ job_ids: [row.entity.id] })" class="btn btn-xs btn-default" title="Requeue Job"><i class="fa fa-repeat"></i></button> <button ng-show="!grid.appScope.readonly && row.entity.status !== \'COMPLETED\' && row.entity.status !== \'CANCELED\'" ng-click="grid.appScope.cancelJob(row.entity)" class="btn btn-xs btn-default" title="Cancel Job"><i class="fa fa-ban"></i></button></div>',
                filterHeaderTemplate: '<div class="ui-grid-filter-container"><select class="form-control input-sm" ng-model="grid.appScope.selectedJobStatus"><option ng-selected="{{ grid.appScope.jobStatusValues[$index] == grid.appScope.selectedJobStatus }}" value="{{ grid.appScope.jobStatusValues[$index] }}" ng-repeat="status in grid.appScope.jobStatusValues track by $index">{{ status.toUpperCase() }}</option></select></div>'
            },
            {
                field: 'id',
                displayName: 'Log',
                enableFiltering: false,
                sortable: false,
                width: 60,
                cellTemplate: '<div class="ui-grid-cell-contents text-center"><button ng-click="grid.appScope.showLog(row.entity.id)" class="btn btn-xs btn-default"><i class="fa fa-file-text"></i></button></div>'
            }
        ];

        $scope.gridOptions = gridFactory.defaultGridOptions();
        $scope.gridOptions.paginationCurrentPage = parseInt(self.jobsParams.page || 1);
        $scope.gridOptions.paginationPageSize = parseInt(self.jobsParams.page_size) || $scope.gridOptions.paginationPageSize;
        var colDefs = $rootScope.colDefs ? $rootScope.colDefs : defaultColumnDefs;
        $scope.gridOptions.columnDefs = gridFactory.applySortConfig(colDefs, self.jobsParams);
        $scope.gridOptions.data = [];
        $scope.gridOptions.onRegisterApi = function (gridApi) {
                //set gridApi on scope
                $scope.gridApi = gridApi;
                $scope.gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                    if ($scope.actionClicked) {
                        $scope.actionClicked = false;
                    } else {
                        $scope.$apply(function(){
                            $location.path('/jobs/job/' + row.entity.id);
                        });
                    }

                });
                $scope.gridApi.pagination.on.paginationChanged($scope, function (currentPage, pageSize) {
                    self.jobsParams.page = currentPage;
                    self.jobsParams.page_size = pageSize;
                    console.log('gridApi');
                    $scope.filterResults();
                });
                $scope.gridApi.core.on.sortChanged($scope, function (grid, sortColumns) {
                    $rootScope.colDefs = null;
                    _.forEach($scope.gridApi.grid.columns, function (col) {
                        col.colDef.sort = col.sort;
                    });
                    $rootScope.colDefs = $scope.gridApi.grid.options.columnDefs;
                    var sortArr = [];
                    _.forEach(sortColumns, function (col) {
                        sortArr.push(col.sort.direction === 'desc' ? '-' + col.field : col.field);
                    });
                    self.updateJobOrder(sortArr);
                });
            };


        $scope.showStatus = function (status) {
            return _.includes($scope.jobStatusValues, status);
        };

        self.updateJobType = function (value) {
            if (value != self.jobsParams.job_type_id) {
                self.jobsParams.page = 1;
            }
            self.jobsParams.job_type_id = value == 0 ? null : value;
            self.jobsParams.page_size = $scope.gridOptions.paginationPageSize;
            console.log('selectedJobType');
            if (!$scope.loading) {
                $scope.filterResults();
            }
        };

        $scope.$watch('selectedJobType', function (value) {
            if ($scope.loading) {
                if (filteredByJobType) {
                    self.updateJobType(value);
                }
            } else {
                filteredByJobType = value != 0;
                self.updateJobType(value);
            }
        });

        self.updateJobStatus = function (value) {
            if (value != self.jobsParams.status) {
                self.jobsParams.page = 1;
            }
            self.jobsParams.status = value === 'VIEW ALL' ? null : value;
            self.jobsParams.page_size = $scope.gridOptions.paginationPageSize;
            console.log('selectedJobStatus');
            if (!$scope.loading) {
                $scope.filterResults();
            }
        };

        $scope.$watch('selectedJobStatus', function (value) {
            if ($scope.loading) {
                if (filteredByJobStatus) {
                    self.updateJobStatus(value);
                }
            } else {
                filteredByJobStatus = value !== 'VIEW ALL';
                self.updateJobStatus(value);
            }
        });

        self.updateJobOrder = function (sortArr) {
            self.jobsParams.order = sortArr.length > 0 ? sortArr : null;
            filteredByOrder = sortArr.length > 0;
            $scope.filterResults();
        };

        $scope.$watch('lastModifiedStart', function (value) {
            if (!$scope.loading) {
                self.jobsParams.started = value.toISOString();
                $scope.filterResults();
            }
        });

        $scope.$watch('lastModifiedStop', function (value) {
            if (!$scope.loading) {
                self.jobsParams.ended = value.toISOString();
                $scope.filterResults();
            }
        });

        /*$scope.$watch('gridApi', function (gridApi) {
            if (filteredByOrder) {
                gridApi.core.raise.sortChanged();
            }
        });*/

        $scope.showLog = function (jobId) {
            // show log modal
            $scope.actionClicked = true;
            console.log('show log modal');
            jobService.getJobDetail(jobId).then(function (data) {
                $scope.selectedJob = data.job_type.title + ' ' + data.job_type.version;
                $scope.jobExecution = data.getLatestExecution();
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'showLog.html',
                    scope: $scope,
                    size: 'lg',
                    windowClass: 'log-modal-window'
                });
            });
        };

        $scope.filterResults = function () {
            _.forEach(_.pairs(self.jobsParams), function (param) {
                $location.search(param[0], param[1]);
            });
            $scope.loading = true;
            self.getJobs();
        };

        $scope.requeueJobs = function (jobsParams) {
            jobsParams = jobsParams || { started: $scope.lastModifiedStart.toISOString(), ended: $scope.lastModifiedStop.toISOString()};
            $scope.actionClicked = true;
            $scope.loading = true;
            loadService.requeueJobs(jobsParams).then(function () {
                toastr['success']('Requeue Successful');
                self.getJobs();
            }).catch(function (error) {
                toastr['error']('Requeue request failed');
                console.log(error);
                $scope.loading = false;
            });
        };

        $scope.cancelJob = function (job) {
            $scope.actionClicked = true;
            $scope.loading = true;
            var originalStatus = job.status;
            job.status = 'CANCEL';
            jobService.updateJob(job.id, { status: 'CANCELED' }).then(function (data) {
                toastr['success']('Job Canceled');
                job.status = 'CANCELED';
            }).catch(function (error) {
                toastr['error'](error);
                console.log(error);
                job.status = originalStatus;
            }).finally(function () {
                $scope.loading = false;
            });
        };

        self.getJobs = function () {
            jobService.getJobsOnce(self.jobsParams).then(function (data) {
                $scope.jobsData = data.results;
                $scope.gridOptions.totalItems = data.count;
                $scope.gridOptions.data = data.results;
            }).catch(function (error) {
                console.log(error);
            }).finally(function () {
                $scope.loading = false;
            });
        };

        self.getJobTypes = function () {
            jobTypeService.getJobTypesOnce().then(function (data) {
                $scope.jobTypeValues = data.results;
                $scope.jobTypeValues.unshift({ name: 'VIEW ALL', title: 'VIEW ALL', version: '', id: 0 });
                /*if (!filteredByJobType && !filteredByJobStatus && !filteredByOrder) {
                    self.getJobs();
                } else {
                    if (filteredByOrder) {
                        self.updateJobOrder(self.jobsParams.order);
                    }
                }*/
                self.getJobs(self.jobsParams);
            }).catch(function (error) {
                $scope.loading = false;
                console.log(error);
            });
        };

        self.initialize = function () {
            if (typeof $rootScope.colDefs === 'undefined') {
                // root column defs have not been altered by user, so set up defaults
                if (!self.jobsParams.order) {
                    self.jobsParams.order = '-last_modified';
                    $location.search('order', self.jobsParams.order).replace();
                }
                if (!self.jobsParams.page_size) {
                    self.jobsParams.page_size = $scope.gridOptions.paginationPageSize;
                    $location.search('page_size', self.jobsParams.page_size).replace();
                }
                if (!self.jobsParams.started) {
                    self.jobsParams.started = moment.utc($scope.lastModifiedStart).toISOString();
                    $location.search('started', self.jobsParams.started).replace();
                }
                if (!self.jobsParams.ended) {
                    self.jobsParams.ended = moment.utc($scope.lastModifiedStop).toISOString();
                    $location.search('ended', self.jobsParams.ended).replace();
                }
            }
            self.getJobTypes();
            $rootScope.user = userService.getUserCreds();

            if ($rootScope.user) {
                $scope.readonly = false;
            }
            navService.updateLocation('jobs');
        };

        self.initialize();

        angular.element(document).ready(function () {
            // set container heights equal to available page height
            var viewport = scaleService.getViewportSize(),
                offset = scaleConfig.headerOffset + scaleConfig.dateFilterOffset,
                gridMaxHeight = viewport.height - offset;

            $scope.gridStyle = 'height: ' + gridMaxHeight + 'px; max-height: ' + gridMaxHeight + 'px; overflow-y: auto;';
        });
    }]);
})();

(function(){
    angular.module('scaleApp').controller('jobExecutionLogController', ['$scope', '$location', '$element', '$timeout', 'jobExecutionService', 'scaleConfig', function($scope, $location, $element, $timeout, jobExecutionService, scaleConfig) {
        'use strict';
        var initialize = function(){

            $scope.forceScroll = true;

            $scope.jobLogError = null;

            $scope.$watch('execution', function (newValue, oldValue) {
                if ($scope.execution) {
                    jobExecutionService.getLog($scope.execution.id).then(null, null, function(result){
                        // get difference of max scroll length and current scroll length.
                        var logResult = result.execution_log;
                        if(result.$resolved){
                            var div = $($element[0]).find('.bash');
                            $scope.scrollDiff = (div.scrollTop() + div.prop('offsetHeight')) - div.prop('scrollHeight');
                            if($scope.scrollDiff >= 0){ $scope.forceScroll = true; }
                            $scope.execLog = logResult;
                        } else {
                            if (result.statusText && result.statusText !== '') {
                                $scope.jobLogErrorStatus = result.statusText;
                            }
                            $scope.jobLogError = 'Unable to retrieve job logs.';
                        }
                    });
                }
            });
            $scope.$watch('execLog', function (newValue, oldValue) {
                if ($scope.execLog) {
                    if($scope.forceScroll || $scope.scrollDiff >= 0){
                        $timeout(function(){
                            $scope.forceScroll = false;
                            var scrlHeight = $($element[0]).find('.bash').prop("scrollHeight");
                            $($element[0]).find('.bash').scrollTop(scrlHeight);
                        }, 50);
                    }
                }
            });
        };

        $scope.scrollitem = function(item){
                console.log(item);
        };

        $scope.stdoutChanged = function(){
            console.log('stdout changed.');
        };

        initialize();

    }]).directive('jobExecutionLog', function () {
        return {
            controller: 'jobExecutionLogController',
            templateUrl: 'modules/jobs/directives/jobExecutionLogTemplate.html',
            restrict: 'E',
            scope: {
                execution: '='
            }
        };
    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('aisJobHealthController', ['$rootScope', '$scope', 'jobTypeService', function ($rootScope, $scope, jobTypeService) {
        $scope.loadingJobHealth = true;
        $scope.jobHealthError = null;
        $scope.jobHealthErrorStatus = null;
        $scope.jobHealth = {};

        var getJobTypeStatus = function () {
            jobTypeService.getJobTypeStatus(null, null, $scope.duration, null).then(null, null, function (data) {
                if (data.$resolved) {
                    $scope.jobHealthError = null;
                    $scope.jobTypeStatus = data.results;
                    $scope.total = 0;
                    $scope.failed = 0;

                    var performance = {},
                        failures = [];

                    _.forEach(data.results, function (status) {
                        performance = status.getPerformance();
                        $scope.total = $scope.total + performance.total;
                        $scope.failed = $scope.failed + performance.failed;
                        failures.push(status.getFailures());
                    });

                    var failureData = [],
                        systemFailures = 0,
                        dataFailures = 0,
                        algorithmFailures = 0;

                    _.forEach(failures, function (f) {
                        _.forEach(f, function (type) {
                            if (type.status === 'SYSTEM') {
                                systemFailures = systemFailures + type.count;
                            } else if (type.status === 'DATA') {
                                dataFailures = dataFailures + type.count;
                            } else if (type.status === 'ALGORITHM') {
                                algorithmFailures = algorithmFailures + type.count;
                            }
                        });
                    });

                    if (systemFailures > 0 || dataFailures > 0 || algorithmFailures > 0) {
                        if (systemFailures > 0) {
                            failureData.push({
                                status: 'SYSTEM',
                                count: systemFailures
                            });
                        }
                        if (dataFailures > 0) {
                            failureData.push({
                                status: 'DATA',
                                count: dataFailures
                            });
                        }
                        if (algorithmFailures > 0) {
                            failureData.push({
                                status: 'ALGORITHM',
                                count: algorithmFailures
                            });
                        }
                    }

                    $scope.jobHealth = {
                        gaugeData: $scope.total === 0 ? 0 : 100 - (($scope.failed / $scope.total) * 100).toFixed(2),
                        donutData: failureData
                    };

                    if ($scope.broadcastData) {
                        $rootScope.$broadcast('jobTypeStatus', $scope.jobTypeStatus);
                    }
                } else {
                    if (data.statusText && data.statusText !== '') {
                        $scope.jobHealthErrorStatus = data.statusText;
                    }
                    $scope.jobHealthError = 'Unable to retrieve job statistics.';
                }
                $scope.loadingJobHealth = false;
            });
        };

        getJobTypeStatus();
    }]).directive('aisJobHealth', function(){
        /**
         * Usage: <ais-job-health />
         **/
        return {
            controller: 'aisJobHealthController',
            templateUrl: 'modules/jobs/directives/jobHealthTemplate.html',
            restrict: 'E',
            scope: {
                duration: '=',
                broadcastData: '=', // set to true when using another widget in the same view that also calls getJobTypeStatus
                showDescription: '='
            }
        };
    });
})();
(function () {
    'use strict';

    angular.module('scaleApp').controller('jobTypeInterfaceDirectiveController', ['$rootScope', '$scope', 'jobTypeService', function ($rootScope, $scope, jobTypeService) {

    }]).directive('aisJobTypeInterface', function(){
        /**
         * Usage: <ais-job-health />
         **/
        return {
            controller: 'jobTypeInterfaceDirectiveController',
            templateUrl: 'modules/jobs/directives/jobTypeInterfaceTemplate.html',
            restrict: 'E',
            scope: {
                jobTypeInterface: '='
            }
        };
    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('Job', ['scaleConfig', 'JobType', 'scaleService', function (scaleConfig, JobType, scaleService) {
        var Job = function (id, job_type, event, error, status, priority, num_exes, timeout, max_tries, cpus_required, mem_required, disk_in_required, disk_out_required, created, queued, started, ended, last_status_change, last_modified) {
            this.id = id;
            this.job_type = JobType.transformer(job_type);
            this.event = event;
            this.error = error;
            this.status = status;
            this.priority = priority;
            this.num_exes = num_exes;
            this.timeout = timeout;
            this.max_tries = max_tries;
            this.cpus_required = cpus_required;
            this.mem_required = mem_required;
            this.disk_in_required = disk_in_required;
            this.disk_out_required = disk_out_required;
            this.created = created;
            this.created_formatted = moment.utc(created).toISOString();
            this.queued = queued;
            this.started = started;
            this.ended = ended;
            this.last_status_change = last_status_change;
            this.last_modified = last_modified;
            this.last_modified_formatted = moment.utc(last_modified).toISOString();
        };

        // public methods
        Job.prototype = {
            getDuration: function () {
                var start = this.started,
                    end = this.ended ? this.ended : moment.utc().toISOString();
                return scaleService.calculateDuration(start, end);
            }
        };

        // static methods, assigned to class
        Job.build = function (data) {
            if (data) {
                return new Job(
                    data.id,
                    data.job_type,
                    data.event,
                    data.error,
                    data.status,
                    data.priority,
                    data.num_exes,
                    data.timeout,
                    data.max_tries,
                    data.cpus_required,
                    data.mem_required,
                    data.disk_in_required,
                    data.disk_out_required,
                    data.created,
                    data.queued,
                    data.started,
                    data.ended,
                    data.last_status_change,
                    data.last_modified
                );
            }
            return new Job();
        };

        Job.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(Job.build)
                    .filter(Boolean);
            }
            return Job.build(data);
        };

        return Job;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('JobDetailEvent', ['JobDetailEventRule', function (JobDetailEventRule) {
        var JobDetailEvent = function (id, type, rule, occurred) {
            this.id = id;
            this.type = type;
            this.rule = JobDetailEventRule.transformer(rule);
            this.occurred = occurred;
        };

        // public methods
        JobDetailEvent.prototype = {

        };

        // static methods, assigned to class
        JobDetailEvent.build = function (data) {
            if (data) {
                return new JobDetailEvent(
                    data.id,
                    data.type,
                    data.rule,
                    data.occurred
                );
            }
            return new JobDetailEvent();
        };

        JobDetailEvent.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobDetailEvent.build)
                    .filter(Boolean);
            }
            return JobDetailEvent.build(data);
        };

        return JobDetailEvent;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('JobDetailEventRule', function () {
        var JobDetailEventRule = function (id, type, is_active, created, archived, last_modified) {
            this.id = id;
            this.type = type;
            this.is_active = is_active;
            this.created = created;
            this.archived = archived;
            this.last_modified = last_modified;
        };

        // public methods
        JobDetailEventRule.prototype = {

        };

        // static methods, assigned to class
        JobDetailEventRule.build = function (data) {
            if (data) {
                return new JobDetailEventRule(
                    data.id,
                    data.type,
                    data.is_active,
                    data.created,
                    data.archived,
                    data.last_modified
                );
            }
            return new JobDetailEventRule();
        };

        JobDetailEventRule.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobDetailEventRule.build)
                    .filter(Boolean);
            }
            return JobDetailEventRule.build(data);
        };

        return JobDetailEventRule;
    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('JobDetailInputData', function () {
        var JobDetailInputData = function (name, value, file_id, file_ids, files) {
            this.name = name;
            this.value = value;
            this.file_id = file_id;
            this.file_ids = file_ids;
            this.files = files;
        };

        // public methods
        JobDetailInputData.prototype = {
            getValue: function () {
                if (this.value)
                    return this.value;
                if (this.file_id)
                    return this.file_id;
                if (this.file_ids)
                    return this.file_ids;
            }
        };

        // static methods, assigned to class
        JobDetailInputData.build = function (data) {
            if (data) {
                return new JobDetailInputData(
                    data.name,
                    data.value,
                    data.file_id,
                    data.file_ids,
                    data.files
                );
            }
            return new JobDetailInputData();
        };

        JobDetailInputData.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobDetailInputData.build)
                    .filter(Boolean);
            }
            return JobDetailInputData.build(data);
        };

        return JobDetailInputData;
    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('JobDetailOutputData', function () {
        var JobDetailOutputData = function (name, workspace_id, files) {
            this.name = name;
            this.workspace_id = workspace_id;
            this.files = files;
        };

        // public methods
        JobDetailOutputData.prototype = {

        };

        // static methods, assigned to class
        JobDetailOutputData.build = function (data) {
            if (data) {
                return new JobDetailOutputData(
                    data.name,
                    data.workspace_id,
                    data.files
                );
            }
            return new JobDetailOutputData();
        };

        JobDetailOutputData.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobDetailOutputData.build)
                    .filter(Boolean);
            }
            return JobDetailOutputData.build(data);
        };

        return JobDetailOutputData;
    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('JobDetails', ['scaleConfig', 'JobType', 'JobExecution', 'Product', 'JobDetailInputData', 'JobDetailOutputData', 'Recipe', 'JobDetailEvent', 'scaleService', function (scaleConfig, JobType, JobExecution, Product, JobDetailInputData, JobDetailOutputData, Recipe, JobDetailEvent, scaleService) {
        var JobDetails = function (cpus_required, created, queued, started, ended, data, disk_in_required, disk_out_required, error, event, id, job_exes, job_type, last_modified, last_status_change, max_tries, mem_required, num_exes, priority, products, recipes, results, input_files, status, timeout ) {
            // decorate inputs and outputs to support data binding in details view
            data.input_data = decorateInputData(data.input_data, input_files);
            data.output_data = decorateOutputData(data.output_data, results, products);
            this.cpus_required = cpus_required;
            this.created = created;
            this.created_formatted = moment.utc(created).toISOString();
            this.queued = queued;
            this.queued_formatted = moment.utc(queued).toISOString();
            this.started = started;
            this.started_formatted = moment.utc(started).toISOString();
            this.ended = ended;
            this.ended_formatted = moment.utc(ended).toISOString();
            this.data = {
                input_data: JobDetailInputData.transformer(data.input_data),
                version: data.version,
                output_data: JobDetailOutputData.transformer(data.output_data)
            };
            this.disk_in_required = disk_in_required;
            this.disk_out_required = disk_out_required;
            this.error = error;
            this.event = JobDetailEvent.transformer(event);
            this.id = id;
            this.job_exes = JobExecution.transformer(job_exes);
            this.job_type = JobType.transformer(job_type);
            this.last_modified = last_modified;
            this.last_status_change = last_status_change;
            this.max_tries = max_tries;
            this.mem_required = mem_required;
            this.num_exes = num_exes;
            this.priority = priority;
            this.products = Product.transformer(products);
            this.recipes = Recipe.transformer(recipes);
            this.results = {
                output_data: JobDetailOutputData.transformer(results.output_data),
                version: results.version
            };
            this.input_files = input_files;
            this.status = status;
            this.timeout = timeout;
        };

        // private methods
        var decorateInputData = function(input_data, input_files){
            _.forEach(input_data, function(val){
                var file_ids = [];
                if(!val.files){ val.files = []; }

                if(val.file_id && val.file_id > 0){
                    file_ids = [val.file_id];
                }
                else if(val.file_ids && val.file_ids.length > 0){
                    // multiple files
                    file_ids = val.file_ids;
                }
                _.forEach(file_ids, function(file_id){
                    var infile = _.find(input_files, {id: file_id});
                    if(infile){
                        val.files.push(
                            {
                                file_name: infile.file_name,
                                url: infile.url,
                                created: infile.created,
                                last_modified: infile.last_modified,
                                file_size_formatted: scaleService.calculateFileSizeFromBytes(infile.file_size)
                            }
                        );
                    }
                });
            });
            return input_data;
        };

        var decorateOutputData = function(output_data, results, products){
            _.forEach(output_data, function(val){
                var file_ids = [];
                var result = _.find(results.output_data, { name: val.name });
                if(!val.files){ val.files = []; }

                if( result && result.file_id && result.file_id > 0 ){
                    // single file
                    file_ids = [result.file_id];
                }
                else if(result && result.file_ids && result.file_ids.length > 0){
                    // multiple files
                    file_ids = result.file_ids;
                }
                _.forEach(file_ids, function(file_id){
                    var outfile = _.find(products, {id: file_id});
                    console.log(file_id + ': ' + outfile.id);
                    if(outfile){
                        val.files.push(
                            {
                                file_name: outfile.file_name,
                                url: outfile.url,
                                created: outfile.created,
                                last_modified: outfile.last_modified,
                                file_size_formatted: scaleService.calculateFileSizeFromBytes(outfile.file_size)
                            }
                        );
                    }
                });
            });
            return output_data;
        };

        // public methods
        JobDetails.prototype = {
            getDuration: function () {
                return scaleService.calculateDuration(this.created, this.last_modified);
            },
            getLatestExecution: function(){
                if (this.num_exes > 0 ) {
                    return this.job_exes[0];
                }
                return null;
            },
            getStatusClass: function(){
                // if(this.status === 'COMPLETED'){
                //     return 'label-success';
                // }
                // else if( this.status === 'FAILED'){
                //     return 'label-default';//    return 'label-danger';
                // }
                // else{
                //     return 'label-default';
                // }
                return this.status.toLowerCase();
            }
        };

        // static methods, assigned to class
        JobDetails.build = function (data) {
            if (data) {
                return new JobDetails(
                    data.cpus_required,
                    data.created,
                    data.queued,
                    data.started,
                    data.ended,
                    data.data,
                    data.disk_in_required,
                    data.disk_out_required,
                    data.error,
                    data.event,
                    data.id,
                    data.job_exes,
                    data.job_type,
                    data.last_modified,
                    data.last_status_change,
                    data.max_tries,
                    data.mem_required,
                    data.num_exes,
                    data.priority,
                    data.products,
                    data.recipes,
                    data.results,
                    data.input_files,
                    data.status,
                    data.timeout
                );
            }
            return new JobDetails();
        };

        JobDetails.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobDetails.build)
                    .filter(Boolean);
            }
            return JobDetails.build(data);
        };

        return JobDetails;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('JobExecution', ['scaleConfig', 'Job', 'Node', 'moment', function (scaleConfig, Job, Node, moment) {
        var JobExecution = function (id, status, command_arguments, timeout, pre_started, pre_completed, pre_exit_code, job_started, job_completed, job_exit_code, post_started, post_completed, post_exit_code, created, queued, started, ended, last_modified, job, node, error, environment, cpus_scheduled, mem_scheduled, disk_in_scheduled, disk_out_scheduled, disk_total_scheduled, results, current_stdout_url, current_stderr_url, results_manifest) {
            this.id = id;
            this.status = status;
            this.command_arguments = command_arguments;
            this.timeout = timeout;
            this.pre_started = pre_started;
            this.pre_completed = pre_completed;
            this.pre_exit_code = pre_exit_code;
            this.job_started = job_started;
            this.job_completed = job_completed;
            this.job_exit_code = job_exit_code;
            this.post_started = post_started;
            this.post_completed = post_completed;
            this.post_exit_code = post_exit_code;
            this.created = created;
            this.created_formatted = created ? moment.utc(created).toISOString() : created;
            this.queued = queued;
            this.queued_formatted = queued ? moment.utc(queued).toISOString() : queued;
            this.started = started;
            this.started_formatted = started ? moment.utc(started).toISOString() : started;
            this.ended = ended;
            this.ended_formatted = ended ? moment.utc(ended).toISOString() : ended;
            this.last_modified = last_modified;
            this.last_modified_formatted = last_modified ? moment.utc(last_modified).toISOString() : last_modified;
            this.job = Job.transformer(job);
            this.node = Node.transformer(node);
            this.error = error;
            this.environment = environment;
            this.cpus_scheduled = cpus_scheduled;
            this.mem_scheduled = mem_scheduled;
            this.disk_in_scheduled = disk_in_scheduled;
            this.disk_out_scheduled = disk_out_scheduled;
            this.disk_total_scheduled = disk_total_scheduled;
            this.results = results;
            this.current_stdout_url = current_stdout_url;
            this.current_stderr_url = current_stderr_url;
            this.results_manifest = results_manifest;
        };

        // public methods
        JobExecution.prototype = {
            getDuration: function () {
                return moment.utc(this.job_completed).diff(moment.utc(this.job_started));
            },
            getIcon: function () {
                return this.job.jobType.iconCode ? '<i class="fa">&#x' + this.job.jobType.iconCode + '</i>' : '<i class="fa">&#x' + scaleConfig.defaultIconCode + '</i>';
            }
        };

        // static methods, assigned to class
        JobExecution.build = function (data) {
            if (data) {
                return new JobExecution(
                    data.id,
                    data.status,
                    data.command_arguments,
                    data.timeout,
                    data.pre_started,
                    data.pre_completed,
                    data.pre_exit_code,
                    data.job_started,
                    data.job_completed,
                    data.job_exit_code,
                    data.post_started,
                    data.post_completed,
                    data.post_exit_code,
                    data.created,
                    data.queued,
                    data.started,
                    data.ended,
                    data.last_modified,
                    data.job,
                    data.node,
                    data.error,
                    data.environment,
                    data.cpus_scheduled,
                    data.mem_scheduled,
                    data.disk_in_scheduled,
                    data.disk_out_scheduled,
                    data.disk_total_scheduled,
                    data.results,
                    data.current_stdout_url,
                    data.current_stderr_url,
                    data.results_manifest
                );
            }
            return new JobExecution();
        };

        JobExecution.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobExecution.build)
                    .filter(Boolean);
            }
            return JobExecution.build(data);
        };

        return JobExecution;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('JobExecutionLog', ['scaleConfig', 'Job', 'Node', function (scaleConfig, Job, Node) {
        var JobExecutionLog = function (id, status, command_arguments, timeout, exit_code, created, queued, scheduled, pre_started, pre_completed, job_started, job_completed, post_started, post_completed, ended, last_modified, job, node, error, is_finished, stdout, stderr) {
            this.id = id;
            this.status = status;
            this.command_arguments = command_arguments;
            this.timeout = timeout;
            this.exit_code = exit_code;
            this.created = created;
            this.queued = queued;
            this.scheduled = scheduled;
            this.pre_started = pre_started;
            this.pre_completed = pre_completed;
            this.job_started = job_started;
            this.job_completed = job_completed;
            this.post_started = post_started;
            this.post_completed = post_completed;
            this.ended = ended;
            this.last_modified = last_modified;
            this.job = Job.transformer(job);
            this.node = Node.transformer(node);
            this.error = error;
            this.is_finished = is_finished;
            this.stdout = stdout;
            this.stdoutHtml = stdout ? stdout.replace(new RegExp('\r?\n','g'), '<br />') : '';
            this.stderr = stderr;
        };

        // public methods
        JobExecutionLog.prototype = {
            toHtml: function(instr){
                return instr
            }

        };

        // static methods, assigned to class
        JobExecutionLog.build = function (data) {
            if (data) {
                return new JobExecutionLog(
                    data.id,
                    data.status,
                    data.command_arguments,
                    data.timeout,
                    data.exit_code,
                    data.created,
                    data.queued,
                    data.scheduled,
                    data.pre_started,
                    data.pre_completed,
                    data.job_started,
                    data.job_completed,
                    data.post_started,
                    data.post_completed,
                    data.ended,
                    data.last_modified,
                    data.job,
                    data.node,
                    data.error,
                    data.is_finished,
                    data.stdout,
                    data.stderr
                );
            }
            return new JobExecutionLog();
        };

        JobExecutionLog.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobExecutionLog.build)
                    .filter(Boolean);
            }
            return JobExecutionLog.build(data);
        };

        return JobExecutionLog;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('JobType', ['scaleConfig', 'JobTypeInterface', function (scaleConfig, JobTypeInterface) {
        var JobType = function (id, name, title, version, description, is_system, is_long_running, is_active, is_operational, is_paused, uses_docker, docker_privileged, docker_image, priority, timeout, max_tries, cpus_required, mem_required, disk_out_const_required, disk_out_mult_required, icon_code, created, archived, paused, last_modified, job_type_interface) {
            this.id = id;
            this.name = name;
            this.title = title;
            this.version = version;
            this.description = description;
            this.is_system = is_system;
            this.is_long_running = is_long_running;
            this.is_active = is_active;
            this.is_operational = is_operational;
            this.is_paused = is_paused;
            this.uses_docker = uses_docker;
            this.docker_privileged = docker_privileged;
            this.docker_image = docker_image;
            this.priority = priority;
            this.timeout = timeout;
            this.max_tries = max_tries;
            this.cpus_required = cpus_required;
            this.mem_required = mem_required;
            this.disk_out_const_required = disk_out_const_required;
            this.disk_out_mult_required = disk_out_mult_required;
            this.icon_code = icon_code;
            this.created = created;
            this.archived = archived;
            this.paused = paused;
            this.last_modified = last_modified;
            this.job_type_interface = JobTypeInterface.transformer(job_type_interface);
        };

        // public methods
        JobType.prototype = {
            toString: function () {
                return 'JobType';
            },
            getIcon: function () {
                return this.icon_code ? '<i class="fa">&#x' + this.icon_code + '</i>' : '<i class="fa">&#x' + scaleConfig.defaultIconCode + '</i>';
            },
            getCellText: function () {
                return this.icon_code ? '&#x' + this.icon_code + ';' : '&#x' + scaleConfig.defaultIconCode + ';';
            },
            getCellTitle: function () {
                return this.title;
            }
        };

        // static methods, assigned to class
        JobType.build = function (data) {
            if (data) {
                return new JobType(
                    data.id,
                    data.name,
                    data.title,
                    data.version,
                    data.description,
                    data.is_system,
                    data.is_long_running,
                    data.is_active,
                    data.is_operational,
                    data.is_paused,
                    data.uses_docker,
                    data.docker_privileged,
                    data.docker_image,
                    data.priority,
                    data.timeout,
                    data.max_tries,
                    data.cpus_required,
                    data.mem_required,
                    data.disk_out_const_required,
                    data.disk_out_mult_required,
                    data.icon_code,
                    data.created,
                    data.archived,
                    data.paused,
                    data.last_modified,
                    data.interface
                );
            }
            return new JobType();
        };

        JobType.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobType.build)
                    .filter(Boolean);
            }
            return JobType.build(data);
        };

        return JobType;
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('JobTypeDetails', ['scaleConfig', 'JobTypeInterface', 'JobTypeErrorMapping', 'JobTypeError', 'scaleService', function (scaleConfig, JobTypeInterface, JobTypeErrorMapping, JobTypeError, scaleService) {
        var JobTypeDetails = function (id, name, version, title, description, category, author_name, author_url, is_system, is_long_running, is_active, is_operational, is_paused, icon_code, uses_docker, docker_privileged, docker_image, priority, timeout, max_tries, cpus_required, mem_required, disk_out_const_required, disk_out_mult_required, created, archived, paused, last_modified, job_type_interface, error_mapping, errors, job_counts_6h, job_counts_12h, job_counts_24h) {
            this.id = id;
            this.name = name;
            this.version = version;
            this.title = title;
            this.description = description;
            this.category = category;
            this.author_name = author_name;
            this.author_url = author_url;
            this.is_system = is_system;
            this.is_long_running = is_long_running;
            this.is_active = is_active;
            this.is_operational = is_operational;
            this.is_paused = is_paused;
            this.icon_code = icon_code;
            this.uses_docker = uses_docker;
            this.docker_privileged = docker_privileged;
            this.docker_image = docker_image;
            this.priority = priority;
            this.timeout = timeout;
            this.max_tries = max_tries;
            this.cpus_required = cpus_required;
            this.mem_required = mem_required;
            this.mem_required_formatted = scaleService.calculateFileSizeFromMib(mem_required);
            this.disk_out_const_required = disk_out_const_required;
            this.disk_out_const_required_formatted = scaleService.calculateFileSizeFromMib(disk_out_const_required);
            this.disk_out_mult_required = disk_out_mult_required;
            this.created = created;
            this.archived = archived;
            this.paused = paused;
            this.last_modified = last_modified;
            this.job_type_interface = job_type_interface;
            this.error_mapping = JobTypeErrorMapping.transformer(error_mapping);
            this.errors = JobTypeError.transformer(errors);
            this.job_counts_6h = job_counts_6h;
            this.job_counts_12h = job_counts_12h;
            this.job_counts_24h = job_counts_24h;
        };

        // public methods
        JobTypeDetails.prototype = {
            getIcon: function () {
                return this.icon_code ? '<i class="fa">&#x' + this.icon_code + '</i>' : '<i class="fa">&#x' + scaleConfig.defaultIconCode + '</i>';
            },
            getPerformance: function () {
                var failed6Arr = _.where(this.job_counts_6h, { 'status': 'FAILED' }),
                    failed12Arr = _.where(this.job_counts_12h, { 'status': 'FAILED' }),
                    failed24Arr = _.where(this.job_counts_24h, { 'status': 'FAILED' });

                var completed6 = _.find(this.job_counts_6h, 'status', 'COMPLETED') || { count: 0 },
                    failed6 = _.sum(failed6Arr, 'count'),
                    total6 = failed6Arr.length > 0 ? failed6 + completed6.count : completed6.count,
                    successRate6 = total6 === 0 ? 0 : 100 - ((failed6 / total6) * 100).toFixed(2),
                    completed12 = _.find(this.job_counts_12h, 'status', 'COMPLETED') || { count: 0 },
                    failed12 = _.sum(failed12Arr, 'count'),
                    total12 = failed12Arr.length > 0 ? failed12 + completed12.count : completed12.count,
                    successRate12 = total12 === 0 ? 0 : 100 - ((failed12 / total12) * 100).toFixed(2),
                    completed24 = _.find(this.job_counts_24h, 'status', 'COMPLETED') || { count: 0 },
                    failed24 = _.sum(failed24Arr, 'count'),
                    total24 = failed24Arr.length > 0 ? failed24 + completed24.count : completed24.count,
                    successRate24 = total24 === 0 ? 0 : 100 - ((failed24 / total24) * 100).toFixed(2);

                return {
                    hour6: {
                        rate: successRate6,
                        failed: failed6,
                        completed: completed6.count,
                        total: total6
                    },
                    hour12: {
                        rate: successRate12,
                        failed: failed12,
                        completed: completed12.count,
                        total: total12
                    },
                    hour24: {
                        rate: successRate24,
                        failed: failed24,
                        completed: completed24.count,
                        total: total24
                    }
                };
            },
            getFailures: function () {
                var failed6 = _.where(this.job_counts_6h, { 'status': 'FAILED' }),
                    failed6Values = _.values(_.groupBy(failed6, 'category')),
                    failed12 = _.where(this.job_counts_12h, { 'status': 'FAILED' }),
                    failed12Values = _.values(_.groupBy(failed12, 'category')),
                    failed24 = _.where(this.job_counts_24h, { 'status': 'FAILED' }),
                    failed24Values = _.values(_.groupBy(failed24, 'category'));

                var getFailureCounts = function (categories) {
                    var returnArr = [];
                    _.forEach(categories, function (category) {
                        _.forEach(category, function (val) {
                            returnArr.push({ status: val.category, count: val.count });
                        });
                    });
                    return returnArr;
                };

                return {
                    hour6: getFailureCounts(failed6Values),
                    hour12: getFailureCounts(failed12Values),
                    hour24: getFailureCounts(failed24Values)
                };
            }
        };

        // static methods, assigned to class
        JobTypeDetails.build = function (data) {
            if (data) {
                return new JobTypeDetails(
                    data.id,
                    data.name,
                    data.version,
                    data.title,
                    data.description,
                    data.category,
                    data.author_name,
                    data.author_url,
                    data.is_system,
                    data.is_long_running,
                    data.is_active,
                    data.is_operational,
                    data.is_paused,
                    data.icon_code,
                    data.uses_docker,
                    data.docker_privileged,
                    data.docker_image,
                    data.priority,
                    data.timeout,
                    data.max_tries,
                    data.cpus_required,
                    data.mem_required,
                    data.disk_out_const_required,
                    data.disk_out_mult_required,
                    data.created,
                    data.archived,
                    data.paused,
                    data.last_modified,
                    data.interface,
                    data.error_mapping,
                    data.errors,
                    data.job_counts_6h,
                    data.job_counts_12h,
                    data.job_counts_24h
                );
            }
            return new JobTypeDetails();
        };

        JobTypeDetails.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobTypeDetails.build);
            }
            return JobTypeDetails.build(data);
        };

        return JobTypeDetails;
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('JobTypeError', ['moment', 'scaleConfig', function (moment, scaleConfig) {
        var JobTypeError = function (id, name, title, description, category, created, last_modified) {
            this.id = id;
            this.name = name;
            this.title = title;
            this.description = description;
            this.category = category;
            this.created = created;
            this.created_formatted = created ? moment.utc(created).toISOString() : created;
            this.last_modified = last_modified;
            this.last_modified_formatted = last_modified ? moment.utc(last_modified).toISOString() : last_modified;
        };

        // public methods
        JobTypeError.prototype = {

        };

        // static methods, assigned to class
        JobTypeError.build = function (data) {
            if (data) {
                return new JobTypeError(
                    data.id,
                    data.name,
                    data.title,
                    data.description,
                    data.category,
                    data.created,
                    data.last_modified
                );
            }
            return new JobTypeError();
        };

        JobTypeError.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobTypeError.build)
                    .filter(Boolean);
            }
            return JobTypeError.build(data);
        };

        return JobTypeError;
    }])
})();

(function () {
    'use strict';
    
    angular.module('scaleApp').factory('JobTypeErrorMapping', function () {
        var JobTypeErrorMapping = function (version, exit_codes) {
            this.version = version;
            this.exit_codes = exit_codes;
        };

        // public methods
        JobTypeErrorMapping.prototype = {

        };

        // static methods, assigned to class
        JobTypeErrorMapping.build = function (data) {
            if (data) {
                return new JobTypeErrorMapping(
                    data.version,
                    data.exit_codes
                );
            }
            return new JobTypeErrorMapping();
        };

        JobTypeErrorMapping.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobTypeErrorMapping.build)
                    .filter(Boolean);
            }
            return JobTypeErrorMapping.build(data);
        };

        return JobTypeErrorMapping;
    })
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('JobTypeInputData', ['scaleConfig', function (scaleConfig) {
        var JobTypeInputData = function (media_types, required, type, name) {
            this.media_types = media_types;
            this.required = required;
            this.type = type;
            this.name = name;
        };

        // public methods
        JobTypeInputData.prototype = {

        };

        // static methods, assigned to class
        JobTypeInputData.build = function (data) {
            if (data) {
                return new JobTypeInputData(
                    data.media_types,
                    data.required,
                    data.type,
                    data.name
                );
            }
            return new JobTypeInputData();
        };

        JobTypeInputData.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobTypeInputData.build);
            }
            return JobTypeInputData.build(data);
        };

        return JobTypeInputData;
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('JobTypeInterface', ['scaleConfig', 'JobTypeInputData', 'JobTypeOutputData', function (scaleConfig, JobTypeInputData, JobTypeOutputData) {
        var JobTypeInterface = function (version, command, command_arguments, input_data, output_data) {
            this.version = version;
            this.command = command;
            this.command_arguments = command_arguments;
            this.input_data = JobTypeInputData.transformer(input_data);
            this.output_data = JobTypeOutputData.transformer(output_data);
        };

        // public methods
        JobTypeInterface.prototype = {
            getIcon: function () {
                return this.iconCode ? '<i class="fa">&#x' + this.iconCode + '</i>' : '<i class="fa">&#x' + scaleConfig.defaultIconCode + '</i>';
            }
        };

        // static methods, assigned to class
        JobTypeInterface.build = function (data) {
            if (data) {
                return new JobTypeInterface(
                    data.version,
                    data.command,
                    data.command_arguments,
                    data.input_data,
                    data.output_data
                );
            }
            return new JobTypeInterface();
        };

        JobTypeInterface.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobTypeInterface.build)
                    .filter(Boolean);
            }
            return JobTypeInterface.build(data);
        };

        return JobTypeInterface;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('JobTypeOutputData', function () {
        var JobTypeOutputData = function (name, type, required, media_type) {
            this.name = name;
            this.type = type;
            this.required = required;
            this.media_type = media_type;
        };

        // public methods
        JobTypeOutputData.prototype = {

        };

        // static methods, assigned to class
        JobTypeOutputData.build = function (data) {
            if (data) {
                return new JobTypeOutputData(
                    data.name,
                    data.type,
                    data.required,
                    data.media_type
                );
            }
            return new JobTypeOutputData();
        };

        JobTypeOutputData.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobTypeOutputData.build)
                    .filter(Boolean);
            }
            return JobTypeOutputData.build(data);
        };

        return JobTypeOutputData;
    });
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('JobTypeStatus', ['scaleConfig', 'JobType', 'JobExecution', function (scaleConfig, JobType, JobExecution) {
        var JobTypeStatus = function (job_type, job_counts) {
            this.job_type = JobType.transformer(job_type);
            this.job_counts = job_counts;
            this.has_running = _.find(job_counts, 'status', 'RUNNING');
            this.description = this.getPerformance().rateDescription;
        };

        // public methods
        JobTypeStatus.prototype = {
            toString: function () {
                return 'JobTypeStatus';
            },
            getPerformance: function () {
                var failedArr = _.where(this.job_counts, { 'status': 'FAILED' });

                var completed = _.find(this.job_counts, 'status', 'COMPLETED') || { count: 0 },
                    failed = _.sum(failedArr, 'count'),
                    total = failedArr.length > 0 ? failed + completed.count : completed.count,
                    successRate = total === 0 ? 0 : 100 - ((failed / total) * 100).toFixed(2),
                    successRateDescription = 'success';

                if (successRate <= 30 && total > 0) {
                    successRateDescription = 'error';
                } else if (successRate > 30 && successRate <= 60 && total > 0) {
                    successRateDescription = 'warning';
                } else if (total === 0 && !this.has_running) {
                    successRateDescription = 'z_inactive'; // prepend with 'z_' for ordering purposes
                }

                return {
                    rate: successRate,
                    rateDescription: successRateDescription,
                    failed: failed,
                    completed: completed.count,
                    total: total
                };
            },
            getRunning: function () {
                return _.find(this.job_counts, 'status', 'RUNNING') || { count: 0 };
            },
            getFailures: function () {
                var failed = _.where(this.job_counts, { 'status': 'FAILED' }),
                    failedValues = _.values(_.groupBy(failed, 'category'));

                var getFailureCounts = function (categories) {
                    var returnArr = [];
                    _.forEach(categories, function (category) {
                        _.forEach(category, function (val) {
                            returnArr.push({ status: val.category, count: val.count });
                        });
                    });
                    return returnArr;
                };

                return getFailureCounts(failedValues);
            },
            getCellFill: function () {
                var status = this.getPerformance().rateDescription;
                if (status === 'success') {
                    return scaleConfig.colors.chart_green;
                } else if (status === 'warning') {
                    return scaleConfig.colors.chart_yellow;
                } else if (status === 'error') {
                    return scaleConfig.colors.chart_red;
                } else if (status === 'z_inactive') {
                    return scaleConfig.colors.chart_gray_dark;
                }
            },
            getCellActivity: function () {
                var running = this.getRunning();
                if (running.count > 0) {
                    return '&#x' + scaleConfig.activityIconCode + ';';
                }
                return '';
            },
            getCellActivityTotal: function () {
                return this.getRunning().count > 0 ? this.getRunning().count : '';
            },
            getCellError: function () {
                var performance = this.getPerformance();
                return 'Failed: ' + (performance.failed);
            },
            getCellTotal: function () {
                var performance = this.getPerformance();
                return 'Completed: ' + performance.completed;
            },
            getCellPauseResume: function () {
                return;
            }
        };

        // static methods, assigned to class
        JobTypeStatus.build = function (data) {
            if (data) {
                return new JobTypeStatus(
                    data.job_type,
                    data.job_counts
                );
            }
            return new JobTypeStatus();
        };

        JobTypeStatus.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(JobTypeStatus.build)
                    .filter(Boolean);
            }
            return JobTypeStatus.build(data);
        };

        return JobTypeStatus;
    }]);
})();

(function (){
    'use strict';

    angular.module('scaleApp').factory('Product', ['JobType', 'scaleService', 'scaleConfig', function (JobType, scaleService, scaleConfig) {
        var Product = function (id, workspace, file_name, media_type, file_size, data_type, is_deleted, uuid, url, created, deleted, data_started, data_ended, geometry, center_point, meta_data, countries, last_modified, is_operational, is_published, published, unpublished, job_type, job, job_exe, update, source_files) {
            this.id = id;
            this.workspace = workspace;
            this.file_name = file_name;
            this.media_type = media_type;
            this.file_size = file_size;
            this.file_size_readable = this.getReadableFileSize();
            this.data_type = data_type;
            this.is_deleted = is_deleted;
            this.uuid = uuid;
            this.url = url;
            this.created = created;
            this.created_formatted = created ? moment.utc(created).toISOString() : created;
            this.deleted = deleted;
            this.data_started = data_started;
            this.data_ended = data_ended;
            this.geometry = geometry;
            this.center_point = center_point;
            this.meta_data = meta_data;
            this.countries = countries;
            this.last_modified = last_modified;
            this.last_modified_formatted = last_modified ? moment.utc(last_modified).toISOString() : last_modified;
            this.is_operational = is_operational;
            this.is_operational_label = is_operational ? 'Operational' : 'R&amp;D';
            this.is_published = is_published;
            this.published = published;
            this.unpublished = unpublished;
            this.job_type = JobType.transformer(job_type);
            this.job = job;
            this.job_exe = job_exe;
            this.update = update;
            this.source_files = source_files;
        };

        // public methods
        Product.prototype = {
            getDuration: function () {
                return moment.utc(this.last_modified).diff(moment.utc(this.created));
            },
            getReadableFileSize: function () {
                return scaleService.calculateFileSizeFromBytes(this.file_size);
            }
        };

        // static methods, assigned to class
        Product.build = function (data) {
            if (data) {
                return new Product(
                    data.id,
                    data.workspace,
                    data.file_name,
                    data.media_type,
                    data.file_size,
                    data.data_type,
                    data.is_deleted,
                    data.uuid,
                    data.url,
                    data.created,
                    data.deleted,
                    data.data_started,
                    data.data_ended,
                    data.geometry,
                    data.center_point,
                    data.meta_data,
                    data.countries,
                    data.last_modified,
                    data.is_operational,
                    data.is_published,
                    data.published,
                    data.unpublished,
                    data.job_type,
                    data.job,
                    data.job_exe,
                    data.update,
                    data.source_files
                );
            }
            return new Product();
        };

        Product.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(Product.build)
                    .filter(Boolean);
            }
            return Product.build(data);
        };

        return Product;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('RunningJob', ['scaleConfig', 'scaleService', 'JobType', function (scaleConfig, scaleService, JobType) {
        var RunningJob = function (count, longest_running, job_type) {
            this.count = count;
            this.longest_running = longest_running;
            this.job_type = JobType.transformer(job_type);
        };

        // public methods
        RunningJob.prototype = {
            getDuration: function () {
                return scaleService.calculateDuration(this.longest_running, moment.utc().toISOString());
            },
            getIcon: function () {
                var configJobType = _.find(scaleConfig.jobTypes, 'title', this.job_type.name);
                if (configJobType) {
                    return configJobType.icon;
                }
                return scaleConfig.defaultIcon;
            }
        };

        // static methods, assigned to class
        RunningJob.build = function (data) {
            if (data) {
                return new RunningJob(
                    data.count,
                    data.longest_running,
                    data.job_type
                );
            }
            return new RunningJob();
        };

        RunningJob.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(RunningJob.build)
                    .filter(Boolean);
            }
            return RunningJob.build(data);
        };

        return RunningJob;
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('SystemFailure', ['scaleConfig', 'scaleService', function (scaleConfig, scaleService) {
        var SystemFailure = function (count, job_type_name, job_type_version, error_name, first_error, last_error) {
            this.count = count;
            this.job_type_name = job_type_name;
            this.job_type_version = job_type_version;
            this.error_name = error_name;
            this.first_error = first_error;
            this.last_error = last_error;
        };

        // public methods
        SystemFailure.prototype = {
            getDuration: function () {
                return scaleService.calculateDuration(this.first_error, this.last_error);
            },
            getIcon: function () {
                var configJobType = _.find(scaleConfig.jobTypes, 'title', this.job_type_name);
                if (configJobType) {
                    return configJobType.icon;
                }
                return scaleConfig.defaultIcon;
            }
        };

        // static methods, assigned to class
        SystemFailure.build = function (data) {
            if (data) {
                return new SystemFailure(
                    data.count,
                    data.job_type_name,
                    data.job_type_version,
                    data.error_name,
                    data.first_error,
                    data.last_error
                );
            }
            return new SystemFailure();
        };

        SystemFailure.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(SystemFailure.build)
                    .filter(Boolean);
            }
            return SystemFailure.build(data);
        };

        return SystemFailure;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').service('jobExecutionService', ['$http', '$q', '$resource', 'poller', 'scaleConfig', 'JobExecution', 'JobExecutionLog', function ($http, $q, $resource, poller, scaleConfig, JobExecution, JobExecutionLog) {

        var getJobExecutionsParams = function( pageNumber, pageSize, filter ){
            var params = {
                page: pageNumber,
                page_size: pageSize
            };
            var jobTypeId = filter.job_type_id ? filter.jobTypeId : '';
            var jobStatus = filter.status ? filter.jobStatus : '';

            if (jobStatus && jobStatus !== '') {
                params.job_status = jobStatus;
            }
            return params;
        };

        return {
            getJobExecutions: function (pageNumber, pageSize, filter) {
                var jobExecutions = [],
                    d = $q.defer();

                var params = getJobExecutionsParams(pageNumber, pageSize, filter);
                $http({
                    url: scaleConfig.urls.apiPrefix + 'job-executions/',
                    method: 'GET',
                    params: params
                }).success(function (data) {
                    jobExecutions.executions = JobExecution.transformer(data.results);
                    jobExecutions.count = data.count;
                    d.resolve(jobExecutions);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getJobExecutionDetails: function (id) {
                var d = $q.defer();

                $http.get(scaleConfig.urls.apiPrefix + 'job-executions/' + id + '/').success(function (data) {
                    d.resolve(JobExecution.transformer(data));
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getLogOnce: function(execId){
                var d = $q.defer();

                $http.get(scaleConfig.urls.apiPrefix + 'job-executions/' + execId + '/logs/').success(function (data) {
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getLog: function(execId){
                var url = url || scaleConfig.urls.apiPrefix + 'job-executions/' + execId + '/logs/';

                // Update view. Since a promise can only be resolved or rejected once but we want
                // to keep track of all requests, poller service uses the notifyCallback. By default
                // poller only gets notified of success responses.
                var jobExecutionLogResource = $resource(url);
                var jobExecutionLogPoller = poller.get(jobExecutionLogResource, {
                        delay: scaleConfig.pollIntervals.jobExecutionLog
                    });

                return jobExecutionLogPoller.promise.then(null, null, function (result) {
                    if(result.$resolved){
                        result.execution_log = JobExecutionLog.transformer(result);
                        if(result.execution_log.status === 'COMPLETED' || result.execution_log.status === 'FAILED'){
                            jobExecutionLogPoller.stop();
                        }
                        return result;
                    } else {
                        jobExecutionLogPoller.stop();
                        return result;
                    }

                });
            }
        };
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').service('jobService', ['$http', '$q', '$resource', 'scaleConfig', 'Job', 'JobDetails', 'RunningJob', 'poller', 'pollerFactory', function($http, $q, $resource, scaleConfig, Job, JobDetails, RunningJob, poller, pollerFactory) {

        var getJobsParams = function (page, page_size, started, ended, order, status, job_type_id, job_type_name, job_type_category, url) {
            return {
                page: page,
                page_size: page_size,
                started: started,
                ended: ended,
                order: order,
                status: status,
                job_type_id: job_type_id,
                job_type_name: job_type_name,
                job_type_category: job_type_category,
                url: url
            };
        };

        var getJobUpdateData = function (status) {
            return {
                status: status
            };
        };

        return {
            getJobs: function (params) {
                params = params || getJobsParams();
                params.url = params.url ? params.url : scaleConfig.urls.apiPrefix + 'jobs/';

                var jobsResource = $resource(params.url, params),
                    jobsPoller = pollerFactory.newPoller(jobsResource, scaleConfig.pollIntervals.jobs);

                return jobsPoller.promise.then(null, null, function (data) {
                    if (data.$resolved) {
                        data.results = Job.transformer(data.results);
                    } else {
                        jobsPoller.stop();
                    }
                    return data;
                });
            },
            getJobsOnce: function (params) {
                params = params || getJobsParams();
                var d = $q.defer();

                $http({
                    url: params.url ? params.url : scaleConfig.urls.apiPrefix + 'jobs/',
                    method: 'GET',
                    params: params
                }).success(function (data) {
                    data.results = Job.transformer(data.results);
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });

                return d.promise;
            },
            getJobCountsByStatus: function (hour) {
                hour = hour || 3;
                var d = $q.defer();

                $http.get(scaleConfig.urls.getJobCountsByStatus(hour)).success(function (data) {
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getJobDetail: function (id) {
                var d = $q.defer();
                $http.get(scaleConfig.urls.apiPrefix + 'jobs/' + id + '/').success(function (data) {
                    d.resolve(JobDetails.transformer(data));
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getRunningJobs: function (pageNumber, pageSize) {
                var params = {
                    pageNumber: pageNumber,
                    pageSize: pageSize
                };
                var runningJobsResource = $resource(scaleConfig.urls.apiPrefix + 'job-types/running/', params),
                    runningJobsPoller = pollerFactory.newPoller(runningJobsResource, scaleConfig.pollIntervals.runningJobs);

                return runningJobsPoller.promise.then(null, null, function (data) {
                    if (data.$resolved) {
                        data.results = RunningJob.transformer(data.results);
                    } else {
                        runningJobsPoller.stop();
                    }
                    return data;
                });
            },
            getRunningJobsOnce: function (pageNumber, pageSize) {
                var params = {
                    pageNumber: pageNumber,
                    pageSize: pageSize
                };
                var d = $q.defer();

                $http.get(scaleConfig.urls.apiPrefix + 'job-types/running/', params).success(function (data) {
                    data.results = RunningJob.transformer(data.results);
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            updateJob: function (id, data) {
                data = data || getJobUpdateData();
                var d = $q.defer();

                $http({
                    url: scaleConfig.urls.apiPrefix + 'jobs/' + id + '/',
                    method: 'PATCH',
                    data: data
                }).success(function (result) {
                    d.resolve(result);
                }).error(function (error) {
                    d.reject(error);
                });

                return d.promise;
            }
        };
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').service('jobTypeService', ['$http', '$q', '$resource', 'poller', 'pollerFactory', 'scaleConfig', 'jobService', 'JobType', 'JobTypeDetails', 'JobTypeStatus', function ($http, $q, $resource, poller, pollerFactory, scaleConfig, jobService, JobType, JobTypeDetails, JobTypeStatus) {
        /*var totalJobTypes = 5;

        var getTotalJobTypes = function () {
            return totalJobTypes;
        };

        var setTotalJobTypes = function () {
            totalJobTypes = Math.floor(Math.random() * (20 - 1 + 1)) + 1;
        };

        setInterval(function () {
            setTotalJobTypes();
        }, 3100);*/

        var getJobTypeStatusParams = function (page, page_size, started, ended) {
            var params = {};

            if (page) { params.page = page; }
            if (page_size) { params.page_size = page_size; }
            if (started) { params.started = started; }
            if (ended) { params.ended = ended; }

            return params;
        };

        return {
            getJobTypes: function (order) {
                var params = {
                    order: order || ['name','version']
                };

                var jobTypesResource = $resource(scaleConfig.urls.apiPrefix + 'job-types/', params),
                    jobTypesPoller = pollerFactory.newPoller(jobTypesResource, scaleConfig.pollIntervals.jobTypes);

                return jobTypesPoller.promise.then(null, null, function (data) {
                    if (data.$resolved) {
                        /*var returnResult = {
                            $resolved: true,
                            job_types: []
                        };
                        for (var i = 1; i < getTotalJobTypes(); i++) {
                            returnResult.job_types.push(
                                {
                                    "is_system": true,
                                    "paused": null,
                                    "disk": 64.0,
                                    "id": i,
                                    "docker_image": null,
                                    "archived": null,
                                    "uses_docker": false,
                                    "priority": 10,
                                    "version": "1.0",
                                    "icon_code": scaleConfig.jobTypes[i - 1].code,
                                    "description": "Ingests a source file into a workspace",
                                    "mem": 64.0,
                                    "is_active": true,
                                    "cpus": 1.0,
                                    "last_modified": "2015-03-11T00:00:00Z",
                                    "max_tries": 3,
                                    "is_paused": false,
                                    "name": scaleConfig.jobTypes[i - 1].title,
                                    "created": "2015-03-11T00:00:00Z",
                                    "timeout": 1800,
                                    "is_long_running": false
                                }
                            )
                        }
                        result = returnResult;*/

                        data.results = JobType.transformer(data.results);
                        return data;
                    } else {
                        jobTypesPoller.stop();
                        return data;
                    }
                });
            },
            getJobTypesOnce: function (order) {
                order = order || ['name','version'];

                var d = $q.defer();

                $http({
                    url: scaleConfig.urls.apiPrefix + 'job-types/',
                    method: 'GET',
                    params: { order: order }
                }).success(function (data) {
                    data.results = JobType.transformer(data.results);
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getJobTypeStatus: function (page, page_size, started, ended) {
                var params = getJobTypeStatusParams(page, page_size, started, ended);

                var jobTypeStatusResource = $resource(scaleConfig.urls.apiPrefix + 'job-types/status/', params),
                    jobTypeStatusPoller = pollerFactory.newPoller(jobTypeStatusResource, scaleConfig.pollIntervals.jobTypeStatus);

                return jobTypeStatusPoller.promise.then(null, null, function (data) {
                    if (data.$resolved) {
                        /*var returndata = {
                            $resolved: true,
                            job_type_stats: []
                        };
                        for (var i = 0; i < getTotalJobTypes(); i++) {
                            returndata.job_type_stats.push(
                                {
                                    "id": i,
                                    "icon_code": "",
                                    "name": "",
                                    "version": "",
                                    "num_completed": Math.floor(Math.random() * (20000 - 10000 + 1)) + 10000,
                                    "num_canceled": Math.floor(Math.random() * (100 - 20 + 1)) + 20,
                                    "num_error_DATA": Math.floor(Math.random() * (9000 - 20 + 1)) + 20,
                                    "num_error_SYSTEM": Math.floor(Math.random() * (9000 - 20 + 1)) + 20,
                                    "num_error_ALGORITHM": Math.floor(Math.random() * (9000 - 20 + 1)) + 20
                                }
                            )
                        }
                        data = returndata;*/

                        data.results = JobTypeStatus.transformer(data.results);
                    } else {
                        jobTypeStatusPoller.stop();
                    }
                    return data;
                });
            },
            getJobTypeStatusOnce: function (page, page_size, started, ended) {
                var d = $q.defer(),
                    params = getJobTypeStatusParams(page, page_size, started, ended);

                $http({
                    url: scaleConfig.urls.apiPrefix + 'job-types/status/',
                    method: 'GET',
                    params: params
                }).success(function (data) {
                    data.results = JobTypeStatus.transformer(data.results);
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getJobTypeDetails: function (id) {
                var d = $q.defer();
                $http.get(scaleConfig.urls.apiPrefix + 'job-types/' + id + '/').success(function (data) {
                    d.resolve(JobTypeDetails.transformer(data));
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            updateJobType: function (data){
                var updatedJobType = function(data){
                    return {
                        error_mappings: data.error_mappings,
                        is_paused: data.is_paused
                    };
                };
                var updatedData = updatedJobType(data);
                var d = $q.defer();

                $http({
                    url: scaleConfig.urls.apiPrefix + 'job-types/' + data.id + '/',
                    method: 'PATCH',
                    data: updatedData
                }).success(function (result) {
                    d.resolve(JobTypeDetails.transformer(result));
                }).error(function (error) {
                    d.reject(error);
                });                
                return d.promise;
            }
        };
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('loadController', ['$scope', '$location', 'scaleService', 'navService', 'loadService', 'uiGridConstants', 'scaleConfig', 'subnavService', 'QueueStatus', 'gridFactory', function($scope, $location, scaleService, navService, loadService, uiGridConstants, scaleConfig, subnavService, QueueStatus, gridFactory) {
        $scope.loading = true;
        $scope.queueStatusError = null;
        $scope.queueStatusErrorStatus = null;
        $scope.totalQueued = 0;
        $scope.gridStyle = '';
        $scope.subnavLinks = scaleConfig.subnavLinks.load;
        subnavService.setCurrentPath('load');

        $scope.getPage = function (pageNumber, pageSize) {
            $scope.loading = true;
            loadService.getQueueStatus(pageNumber - 1, pageSize).then(function (data) {
                var newData = [];
                for (var i = 0; i < $scope.gridOptions.paginationPageSize; i++) {
                    newData.push(data.jobs[i]);
                }
                $scope.gridOptions.data = newData;
            }).catch(function (error) {
                $scope.status = 'Unable to load queue status: ' + error.message;
                console.error($scope.status);
            }).finally(function () {
                $scope.loading = false;
            });
        };

        var initialize = function() {
            $scope.gridOptions = gridFactory.defaultGridOptions();
            $scope.gridOptions.enableSorting = false;
            $scope.gridOptions.columnDefs = [
                    {
                        field: 'job_type_name',
                        displayName: 'Job Type',
                        enableFiltering: false,
                        cellTemplate: '<div class="ui-grid-cell-contents"><span ng-bind-html="row.entity.getIcon()"></span> {{ row.entity.job_type_name }}</div>'
                    },
                    { field: 'job_type_version', enableFiltering: false },
                    { field: 'highest_priority', enableFiltering: false },
                    {
                        field: 'longestQueued',
                        displayName: 'Duration of Longest Queued Job',
                        enableFiltering: false,
                        cellTemplate: '<div class="ui-grid-cell-contents">{{ row.entity.getDuration() }}</div>'
                    },
                    { field: 'count', enableFiltering: false },
                    { field: 'is_job_type_paused', enableFiltering: false }
                ];
            $scope.gridOptions.data = [];
            $scope.gridOptions.onRegisterApi = function (gridApi) {
                    //set gridApi on scope
                    $scope.gridApi = gridApi;
                    gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                        console.log(row);
                        //$location.path('/jobs').search({job_type_id: row.entity.job_type_id, status: 'RUNNING'});
                    });
                    $scope.gridApi.pagination.on.paginationChanged($scope, function (currentPage, pageSize) {
                        $scope.getPage(currentPage, pageSize);
                    });
                };


            loadService.getQueueStatus(0, $scope.gridOptions.paginationPageSize).then(null, null, function (result) {
                if (result.$resolved) {
                    $scope.gridOptions.data = result.queue_status;
                    $scope.gridOptions.totalItems = result.queue_status.length;
                    $scope.totalQueued = _.sum(result.queue_status, 'count');
                    console.log('queue status updated');
                } else {
                    if (result.statusText && result.statusText !== '') {
                        $scope.queueStatusErrorStatus = result.statusText;
                    }
                    $scope.queueStatusError = 'Unable to retrieve queue status.';
                }
                $scope.loading = false
            });

            navService.updateLocation('queue');
        };
        initialize();

        angular.element(document).ready(function () {
            // set container heights equal to available page height
            var viewport = scaleService.getViewportSize(),
                offset = scaleConfig.headerOffset,
                gridMaxHeight = viewport.height - offset;

            $scope.gridStyle = 'height: ' + gridMaxHeight + 'px; max-height: ' + gridMaxHeight + 'px; overflow-y: auto;';
        });
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('loadDepthController', ['$scope', '$location', 'navService', 'scaleConfig', 'subnavService', function ($scope, $location, navService, scaleConfig, subnavService) {
        $scope.subnavLinks = scaleConfig.subnavLinks.load;
        subnavService.setCurrentPath('load/depth');

        $scope.loading = false;

        var initialize = function () {
            navService.updateLocation('load');
        };

        initialize();
    }]);
})();

(function(){
    'use strict';

    angular.module('scaleApp').controller('queueRunningController', ['$scope', '$location', 'scaleService', 'navService', 'jobService', 'gridFactory', 'uiGridConstants', 'scaleConfig', 'subnavService', function($scope, $location, scaleService, navService, jobService, gridFactory, uiGridConstants, scaleConfig, subnavService) {
        $scope.loading = true;
        $scope.runningJobsError = null;
        $scope.runningJobsErrorStatus = null;
        $scope.totalRunning = 0;
        $scope.gridStyle = '';
        $scope.subnavLinks = scaleConfig.subnavLinks.load;
        subnavService.setCurrentPath('load/running');

        $scope.getPage = function (pageNumber, pageSize){
            $scope.loading = true;
            jobService.getRunningJobsOnce(pageNumber - 1, pageSize).then(function (data) {
                var newData = [];
                for(var i = 0; i < $scope.gridOptions.paginationPageSize; i++){
                    newData.push(data.results[i]);
                }
                $scope.gridOptions.data = newData;
            }).catch(function(error){
                $scope.status = 'Unable to load queue running status: ' + error.message;
                console.error($scope.status);
            }).finally(function(){
                $scope.loading = false;
            });
        };

        var initialize = function() {
            $scope.gridOptions = gridFactory.defaultGridOptions();
            $scope.gridOptions.enableSorting = false;
            $scope.gridOptions.columnDefs = [
                {
                    field: 'title',
                    displayName: 'Job Type',
                    enableFiltering: false,
                    cellTemplate: '<div class="ui-grid-cell-contents"><i class="fa fa-{{ row.entity.getIcon() }}"></i> {{ row.entity.job_type.title }}</div>'
                },
                {field: 'job_type.version', enableFiltering: false},
                {field: 'count', displayName: 'Number of Jobs', enableFiltering: false},
                {
                    field: 'longestRunning',
                    displayName: 'Duration of Longest Running Job',
                    enableFiltering: false,
                    cellTemplate: '<div class="ui-grid-cell-contents">{{ row.entity.getDuration() }}</div>'
                }
            ];
            $scope.gridOptions.data = [];
            $scope.gridOptions.onRegisterApi = function (gridApi) {
                // set gridApi on scope
                $scope.gridApi = gridApi;
                gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                    $scope.$apply(function(){
                        $location.path('/jobs').search({job_type_id: row.entity.job_type.id, status: 'RUNNING'});
                    });
                });
                $scope.gridApi.pagination.on.paginationChanged($scope, function (currentPage, pageSize) {
                    $scope.getPage(currentPage, pageSize);
                });
            };

            jobService.getRunningJobs(0, $scope.gridOptions.paginationPageSize).then(null, null, function (data) {
                if (data.$resolved) {
                    $scope.gridOptions.data = data.results;
                    $scope.gridOptions.totalItems = data.results.length;
                    $scope.totalRunning = _.sum(data.results, 'count');
                    console.log('running jobs updated');
                } else {
                    if (data.statusText && data.statusText !== '') {
                        $scope.runningJobsErrorStatus = data.statusText;
                    }
                    $scope.runningJobsError = 'Unable to retrieve running jobs.';
                }
                $scope.loading = false;
            });
            navService.updateLocation('load');
        };
        initialize();

        angular.element(document).ready(function () {
            // set container heights equal to available page height
            var viewport = scaleService.getViewportSize(),
                offset = scaleConfig.headerOffset,
                gridMaxHeight = viewport.height - offset;

            $scope.gridStyle = 'height: ' + gridMaxHeight + 'px; max-height: ' + gridMaxHeight + 'px; overflow-y: auto;';
        });
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('QueueStatus', ['scaleConfig', 'scaleService', function (scaleConfig, scaleService) {
        var QueueStatus = function (count, longest_queued, job_type_name, job_type_version, highest_priority, is_job_type_paused) {
            this.count = count;
            this.longest_queued = longest_queued;
            this.job_type_name = job_type_name;
            this.job_type_version = job_type_version;
            this.highest_priority = highest_priority;
            this.is_job_type_paused = is_job_type_paused;
        };

        // public methods
        QueueStatus.prototype = {
            getIcon: function () {
                var configJobType = _.find(scaleConfig.jobTypes, 'title', this.job_type_name);
                return configJobType ? '<i class="fa">&#x' + configJobType.code + '</i>' : '<i class="fa">&#x' + scaleConfig.defaultIconCode + '</i>';
            },
            getDuration: function () {
                return scaleService.calculateDuration(this.longest_queued, moment.utc().toISOString());
            }
        };

        // static methods, assigned to class
        QueueStatus.build = function (data) {
            if (data) {
                return new QueueStatus(
                    data.count,
                    data.longest_queued,
                    data.job_type_name,
                    data.job_type_version,
                    data.highest_priority,
                    data.is_job_type_paused
                );
            }
            return new QueueStatus();
        };

        QueueStatus.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(QueueStatus.build)
                    .filter(Boolean);
            }
            return QueueStatus.build(data);
        };

        return QueueStatus;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').service('loadService', ['$http', '$q', '$resource', 'scaleConfig', 'poller', 'pollerFactory', 'QueueStatus', function($http, $q, $resource, scaleConfig, poller, pollerFactory, QueueStatus) {
        var getJobLoadParams = function (page, page_size, started, ended, order, status, job_type_id, job_type_name, job_type_category, url) {
            return {
                started: started,
                ended: ended,
                job_type_id: job_type_id,
                job_type_name: job_type_name,
                job_type_category: job_type_category,
                page_size: 1000,
                url: url
            };
        };

        var getRequeueJobsParams = function (started, ended, job_status, job_type_ids, job_type_names, job_type_categories, priority, url) {
            return {
                started: started,
                ended: ended,
                job_status: job_status,
                job_ids: job_ids,
                job_type_ids: job_type_ids,
                job_type_names: job_type_names,
                job_type_categories: job_type_categories,
                priority: priority,
                url: url
            };
        };

        return {
            getQueueStatus: function (pageNumber, pageSize) {
                var params = {
                    page_number: pageNumber,
                    page_size: pageSize
                };

                var queueStatusResource = $resource(scaleConfig.urls.apiPrefix + 'queue/status/', params),
                    queueStatusPoller = pollerFactory.newPoller(queueStatusResource, scaleConfig.pollIntervals.queueStatus);

                return queueStatusPoller.promise.then(null, null, function (result) {
                    if (result.$resolved) {
                        result.queue_status = QueueStatus.transformer(result.queue_status);
                    } else {
                        queueStatusPoller.stop();
                    }
                    return result;
                });
            },
            getQueueStatusOnce: function () {
                var d = $q.defer();

                $http.get(scaleConfig.urls.apiPrefix + 'queue/status/').success(function (data) {
                    var returnData = QueueStatus.transformer(data.queue_status);
                    d.resolve(returnData);
                }).error(function (error) {
                    d.reject(error);
                });

                return d.promise;
            },
            requeueJobs: function (params) {
                params = params || getRequeueJobsParams();
                params.url = params.url ? params.url : scaleConfig.urls.apiPrefix + 'queue/requeue-jobs/';

                var d = $q.defer();

                $http.post(params.url, params).success(function (result) {
                    d.resolve(result);
                }).error(function(error){
                    d.reject(error);
                });

                return d.promise;
            },
            getJobLoad: function (params) {
                params = params || getJobLoadParams();
                params.url = params.url ? params.url : scaleConfig.urls.apiPrefix + 'load/';

                var jobLoadResource = $resource(params.url, params),
                    jobLoadPoller = pollerFactory.newPoller(jobLoadResource, scaleConfig.pollIntervals.jobLoad);

                return jobLoadPoller.promise.then(null, null, function (data) {
                    if (!data.$resolved) {
                        jobLoadPoller.stop();
                    }
                    return data;
                });
            },
            getJobLoadOnce: function (params) {
                params = params || getJobLoadParams();
                var d = $q.defer();

                $http({
                    url: params.url ? params.url : scaleConfig.urls.apiPrefix + 'load/',
                    method: 'GET',
                    params: params
                }).success(function (data) {
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });

                return d.promise;
            }
        };
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('metricsController', ['$scope', '$location', 'scaleConfig', 'scaleService', 'navService', 'metricsService', 'moment', function ($scope, $location, scaleConfig, scaleService, navService, metricsService, moment) {
        var chart = null,
            colArr = [],
            colNames = {},
            xArr = [],
            removeIds = [],
            yUnits = [],
            locationParams = {
                chart: null
            },
            self = this;

        $scope._ = _;
        $scope.moment = moment;
        $scope.loadingMetrics = false;
        $scope.chartArr = [];
        $scope.chartData = [];
        $scope.chartStyle = '';
        $scope.selectedDataType = {};
        $scope.inputStartDate = moment.utc().subtract(1, 'M').toDate();
        $scope.inputEndDate = moment.utc().toDate();
        $scope.openInputStart = function ($event) {
            $event.stopPropagation();
            $scope.inputStartOpened = true;
        };
        $scope.inputStartOpened = false;
        $scope.openInputEnd = function ($event) {
            $event.stopPropagation();
            $scope.inputEndOpened = true;
        };
        $scope.inputEndOpened = false;
        $scope.dateModelOptions = {
            timezone: '+000'
        };
        $scope.dataTypeFilterText = '';
        $scope.filtersApplied = [];
        $scope.filteredChoices = [];
        $scope.filteredChoicesOptions = [];
        $scope.selectedMetrics = [];
        $scope.columnGroupsOptions = [];
        $scope.columns = [];
        $scope.groups = [];
        $scope.chartTitle = '';
        $scope.chartDisplay = 'stacked';
        $scope.stackedClass = 'btn-primary';
        $scope.groupedClass = 'btn-default';
        $scope.subchartClass = 'btn-primary';
        $scope.subchartEnabled = false;
        $scope.chartType = 'bar';
        $scope.chartTypeDisplay = 'Bar';
        $scope.barClass = 'btn-primary';
        $scope.areaClass = 'btn-default';
        $scope.lineClass = 'btn-default';
        $scope.splineClass = 'btn-default';
        $scope.scatterClass = 'btn-default';

        /*
        // check for locationParams in query string, and update as necessary
        _.forEach(_.pairs(locationParams), function (param) {
            var value = _.at($location.search(), param[0]);
            if (value.length > 0) {
                locationParams[param[0]] = value.length > 1 ? value : value[0];
            }
        });

        if (locationParams.chart) {
            try {
                $scope.chartArr = JSON.parse(atob(locationParams.chart));
            } catch (e) {
                toastr['error']('Unable to parse JSON');
            }
        }
        */

        self.getPlotDataParams = function (obj) {
            return {
                page: null,
                page_size: null,
                started: obj.started,
                ended: obj.ended,
                choice_id: obj.choice_id,
                column: obj.column,
                group: obj.group,
                dataType: obj.dataType.name
            };
        };

        self.resetSelections = function () {
            $scope.inputStartDate = moment.utc().subtract(1, 'M').toDate();
            $scope.inputEndDate = moment.utc().toDate();
            $scope.selectedDataType = {};
            $scope.changeDataTypeSelection();
        };

        self.updateChart = function () {
            $scope.chartData = [];
            if ($scope.chartArr.length === 0) {
                // nothing to show on chart
                chart.destroy();
                chart = null;
            } else {
                var callInit = _.after($scope.chartArr.length, function () {
                    // only initChart after this function has been called for all datasets in chartArr
                    $scope.loadingMetrics = false;
                    self.initChart();
                });

                _.forEach($scope.chartArr, function (obj) {
                    var params = self.getPlotDataParams(obj);
                    metricsService.getPlotData(params).then(function (data) {
                    //metricsService.getGeneratedPlotData({query: obj, params: params}).then(function (data) {
                        $scope.chartData.push({
                            query: obj,
                            results: data.results
                        });
                        callInit();
                    }).catch(function (error) {
                        $scope.loadingMetrics = false;
                        console.log(error);
                        toastr['error'](error);
                    });
                });
                /*
                locationParams.chart = btoa(JSON.stringify($scope.chartArr));
                $location.search('chart', locationParams.chart).replace();
                */
            }
        };

        $scope.addToChart = function () {
            $scope.chartArr = []; // comment this out if allowing multiple adds
            $scope.loadingMetrics = true;
            var filteredChoices = [],
                selectedColumns = [];
            // find the filter object associated with the chosen filter IDs
            _.forEach($scope.filtersApplied, function (id) {
                filteredChoices.push(_.find($scope.filteredChoices, { id: parseInt(id) }));
            });
            if (angular.isArray($scope.selectedMetrics)) {
                _.forEach($scope.selectedMetrics, function (metric) {
                    selectedColumns.push(_.find($scope.columns, { name: metric }));
                });
            } else {
                selectedColumns.push(_.find($scope.columns, { name: $scope.selectedMetrics }));
            }
            $scope.chartArr.push({
                started: $scope.inputStartDate.toISOString(),
                ended: $scope.inputEndDate.toISOString(),
                choice_id: $scope.filtersApplied,
                column: _.pluck(selectedColumns, 'name'),
                group: null,
                dataType: $scope.selectedDataType,
                filtersApplied: filteredChoices,
                selectedMetrics: selectedColumns
            });
            self.updateChart();
            //self.resetSelections();
        };

        $scope.deleteFromChart = function (objToDelete) {
            _.remove($scope.chartArr, function (obj) {
                return JSON.stringify(obj) === JSON.stringify(objToDelete);
            });
            self.updateChart();
        };

        $scope.getFilterOptions = function (param) {
            return _.uniq(_.pluck($scope.filteredChoices, param));
        };

        $scope.changeDataTypeSelection = function () {
            // reset options
            $scope.filtersApplied = [];
            //$scope.filteredChoices = [];
            $scope.selectedDataTypeOptions = [];
            $scope.dataTypeFilterText = '';
            $scope.selectedMetrics = [];
            //$scope.columnGroups = [];
            $scope.columns = [];

            if (!$scope.selectedDataType.name || $scope.selectedDataType.name === '') {
                $scope.selectedDataType = {};
                self.getDataTypes();
            } else {
                self.getDataTypeOptions($scope.selectedDataType);
            }
        };

        /*$scope.changeFilterSelection = function (name) {
            console.log(name + ': ' + $scope.filtersApplied[name]);
            // remove filter if value is null or empty
            if (!$scope.filtersApplied[name] || $scope.filtersApplied[name] === '') {
                delete $scope.filtersApplied[name];
            }
            // update filtered choices
            applyFiltersToChoices();
        };*/

        $scope.areFiltersApplied = function () {
            return $scope.filtersApplied.length > 0;
        };

        /*$scope.removeFilter = function (name) {
            // set value = null
            $scope.filtersApplied[name] = '';
            // trigger filter selection change
            $scope.changeFilterSelection(name);
        };*/

        $scope.updateChartDisplay = function (display) {
            $scope.chartDisplay = display;
            $scope.stackedClass = display === 'stacked' ? 'btn-primary' : 'btn-default';
            $scope.groupedClass = display === 'grouped' ? 'btn-primary' : 'btn-default';
            self.initChart();
        };

        $scope.updateChartType = function (type) {
            $scope.chartType = type;
            $scope.chartTypeDisplay = _.capitalize(type);
            $scope.barClass = type === 'bar' ? 'btn-primary' : 'btn-default';
            $scope.areaClass = type === 'area' ? 'btn-primary' : 'btn-default';
            $scope.lineClass = type === 'line' ? 'btn-primary' : 'btn-default';
            $scope.splineClass = type === 'spline' ? 'btn-primary' : 'btn-default';
            $scope.scatterClass = type === 'scatter' ? 'btn-primary' : 'btn-default';
            self.initChart();
        };

        $scope.toggleSubchart = function () {
            $scope.subchartEnabled = !$scope.subchartEnabled;
            if ($scope.subchartEnabled) {
                $scope.subchartClass = 'btn-primary';
            } else {
                $scope.subchartClass = 'btn-default';
            }
        };

        self.initialize = function () {
            navService.updateLocation('metrics');
            self.getDataTypes();
            /*
            if ($scope.chartArr.length > 0) {
                self.updateChart();
            }
            */
        };

        /*var applyFiltersToChoices = function () {
            var choices = $scope.selectedDataTypeOptions ? $scope.selectedDataTypeOptions.choices : [];
            var filteredChoices = _.where(choices,$scope.filtersApplied);
            $scope.filteredChoices = filteredChoices;
        };*/

        self.getDataTypes = function () {
            metricsService.getDataTypes().then(function (result) {
                $scope.availableDataTypes = result.results;
            }).catch(function (error) {
                console.log(error);
                toastr['error'](error);
            });
        };

        self.getDataType = function (id) {
            metricsService.getDataTypeMetrics(id).then(function (result) {
                $scope.selectedDataTypeAvailableMetrics = result.metrics;
            }).catch(function (error) {
                console.log(error);
            });
        };

        self.getDataTypeOptions = function (dataType) {
            metricsService.getDataTypeOptions(dataType.name).then(function (result) {
                $scope.selectedDataTypeOptions = result;
                _.forEach(result.filters, function (filter) {
                    $scope.dataTypeFilterText = $scope.dataTypeFilterText.length === 0 ? _.capitalize(filter.param) : $scope.dataTypeFilterText + ', ' + _.capitalize(filter.param);
                });
                $scope.filteredChoices = _.sortByOrder(result.choices, ['title','version'], ['asc','asc']);
                // format filteredChoices for use with multiselect directive
                var filteredChoicesOptions = [];
                _.forEach($scope.filteredChoices, function (choice) {
                    filteredChoicesOptions.push({
                        label: choice.version ? choice.title + ' ' + choice.version : choice.title,
                        title: choice.version ? choice.title + ' ' + choice.version : choice.title,
                        value: choice.id
                    });
                });
                $scope.filteredChoicesOptions = filteredChoicesOptions;
                $scope.columns = _.sortByOrder(result.columns, ['title'], ['asc']);
                $scope.groups = result.groups;

                // create an array of objects containing grouped columns
                var columnGroupsOptions = [],
                    columnGroups = _.pairs(_.groupBy(result.columns, 'group'));
                _.forEach(columnGroups, function (group) {
                    var option = {
                        label: _.find($scope.groups, { name: group[0] }).title,
                        children: []
                    };
                    _.forEach(group[1], function (column) {
                        var child = {
                            label: column.title,
                            title: column.title,
                            value: column.name
                        };
                        option.children.push(child);
                    });
                    columnGroupsOptions.push(option);
                });
                columnGroupsOptions.unshift({
                    label: 'None Selected',
                    title: 'None Selected',
                    value: ''
                });
                $scope.columnGroupsOptions = columnGroupsOptions;
            }).catch(function (error){
                console.log(error);
                toastr['error'](error);
            });
        };

        self.initialize();

        $scope.$watch('inputEndDate', function (value) {
            console.log(value)
        });

        // set up chart
        self.initChart = function () {
            // mark any existing data for removal
            // compare currCols (columns currently in the chart) with displayCols (columns to display)
            removeIds = [];
            var currCols = [],
                displayCols = [];
            _.forEach(colArr, function (col, idx) {
                if (idx > 0) {
                    currCols.push(col[0]);
                }
            });
            _.forEach($scope.chartData, function (d) {
                displayCols = displayCols.concat(_.pluck(d.query.filtersApplied, 'name'));
            });
            // determine the exact differences between currCols and displayCols
            // if none are found, then removeIds stays empty
            _.forEach(currCols, function (currCol) {
                var displayCol = _.find(displayCols, function (dCol) {
                    return dCol === currCol;
                });
                if (!displayCol) {
                    removeIds.push(currCol);
                }
            });

            // init with new data
            colArr = [];
            xArr = [];
            colNames = {};

            // create xArr
            var numDays = moment.utc($scope.inputEndDate).endOf('d').diff(moment.utc($scope.inputStartDate.toISOString()).startOf('d'), 'd') + 1; // add 1 to include starting day in count
            for (var i = 0; i < numDays; i++) {
                xArr.push(moment.utc($scope.inputStartDate.toISOString()).startOf('d').add(i, 'd').toDate());
            }

            // iterate over datatypes and add values to colArr
            _.forEach($scope.chartData, function (data) {
                var valueArr = [],
                    query = data.query,
                    queryFilter = {},
                    queryDates = [];

                yUnits = _.pluck(query.selectedMetrics, 'units');

                if (query.filtersApplied.length > 0) {
                    // filters were applied, so build data source accordingly
                    _.forEach(data.results, function (result) {
                        // values for all filters are returned in one array of arrays,
                        // so group results by id to isolate filter values
                        var groupedResult = _.groupBy(result.values, 'id'),
                            resultObj = {},
                            filterIds = _.pluck(query.filtersApplied, 'id');
                        // try to get each filter id from groupedResult.
                        // if it's undefined, an empty array will be returned
                        // this allows a zeroed array to appear in the chart,
                        // since we want to include all filters selected by the user
                        // regardless of value
                        if (filterIds.length > 1) {
                            // when more than one filter is requested, then an id
                            // value is present within data.results
                            _.forEach(filterIds, function (id) {
                                resultObj[id] = _.get(groupedResult, id, []);
                            });
                        } else {
                            // when one filter is requested, no id value is included
                            // in data.results, so build resultObj with the other
                            // info we have
                            resultObj[query.choice_id[0]] = _.pairs(groupedResult)[0][1];
                        }
                        _.forEach(_.pairs(resultObj), function (d) {
                            valueArr = [];
                            // d[0] will be choice id, d[1] will be values
                            // if only one filter was selected, d[0] will return as string 'undefined' since no id is included in this case
                            queryFilter = d[0] === 'undefined' ? query.filtersApplied[0] : _.find(query.filtersApplied, { id: parseInt(d[0]) });
                            queryDates = d[1];

                            // add result values to valueArr
                            _.forEach(xArr, function (xDate) {
                                var valueObj = _.find(queryDates, function (qDate) {
                                    return moment.utc(qDate.date).isSame(xDate, 'day');
                                });
                                // push 0 if data for xDate is not present in queryDates
                                valueArr.push(valueObj ? valueObj.value : 0);
                            });

                            // prepend valueArr with filter title, and push onto colArr
                            valueArr.unshift(queryFilter.name + queryFilter.id);
                            colNames[queryFilter.name + queryFilter.id] = queryFilter.version ? queryFilter.title + ' ' + queryFilter.version : queryFilter.title;
                            colArr.push(valueArr);
                        });
                    });
                } else {
                    // no filters were applied, so show aggregate statistics
                    _.forEach(data.results, function (result) {
                        // add result values to valueArr
                        _.forEach(xArr, function (xDate) {
                            var valueObj = _.find(result.values, function (qDate) {
                                return moment.utc(qDate.date).isSame(xDate, 'day');
                            });
                            // push 0 if data for xDate is not present in result.values
                            valueArr.push(valueObj ? valueObj.value : 0);
                        });

                        // prepend valueArr with filter title, and push onto colArr
                        var columnLabel = result.column.title + ' for all ' + query.dataType.title;
                        valueArr.unshift(columnLabel);
                        colNames['aggregate'] = columnLabel;
                        colArr.push(valueArr);
                    });
                }
            });

            // inform the user if the metrics they selected are empty
            if (_.sum(_.flatten(colArr)) === 0) {
                toastr['info']('There is no data to display.');
            }

            // prepend xArr with an 'x' label and add to colArr
            xArr.unshift('x');
            colArr.unshift(xArr);

            var types = {},
                type = {},
                groups = [];

            _.forEach(colArr, function (col) {
                type = {};
                if (col[0] !== 'x') {
                    type[col[0]] = $scope.chartType;
                    if ($scope.chartDisplay === 'stacked') {
                        groups.push(col[0]);
                    }
                }
                angular.extend(types, type);
            });

            if (chart) {
                // chart already exists, so update values
                chart.groups([groups]);
                chart.data.names(colNames);
                chart.axis.labels({
                    y: _.capitalize(yUnits[0])
                });
                chart.load({
                    columns: colArr,
                    types: types,
                    unload: removeIds
                });
            } else {
                // no chart yet, so set it up
                chart = c3.generate({
                    bindto: '#metrics',
                    data: {
                        x: 'x',
                        columns: colArr,
                        types: types,
                        groups: [groups],
                        names: colNames
                    },
                    subchart: {
                        show: $scope.subchartEnabled
                    },
                    transition: {
                        duration: 700
                    },
                    color: {
                        pattern: scaleConfig.colors.patternD320
                    },
                    axis: {
                        type: 'timeseries',
                        x: {
                            tick: {
                                format: function (d) {
                                    return moment.utc(d).toISOString();
                                }
                            },
                            label: {
                                text: 'Dates',
                                position: 'outer-center'
                            }
                        },
                        y: {
                            label: {
                                text: _.capitalize(yUnits[0]),
                                position: 'outer-middle'
                            }
                        }
                    }
                });
            }
        };

        // set chart height
        angular.element(document).ready(function () {
            // set container heights equal to available page height
            var viewport = scaleService.getViewportSize(),
                offset = scaleConfig.headerOffset,
                chartMaxHeight = viewport.height - offset;

            $scope.chartStyle = 'height: ' + chartMaxHeight + 'px; max-height: ' + chartMaxHeight + 'px;';
        });
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').service('metricsService', ['$http', '$q', '$resource', 'scaleConfig', function ($http, $q, $resource, scaleConfig) {
        var getPlotDataParams = function (page, page_size, started, ended, choice_id, column, group, dataType) {
            console.log(choice_id);
            return {
                page: page,
                page_size: page_size,
                started: started,
                ended: ended,
                choice_id: choice_id,
                column: column,
                group: group,
                dataType: dataType
            };
        };

        return {
            getDataTypes: function () {
                var d = $q.defer();
                $http.get(scaleConfig.urls.apiPrefix + 'metrics/').success(function (data) {
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getDataTypeMetrics: function (id) {
                var d = $q.defer();
                $http.get(scaleConfig.urls.apiPrefix + 'metrics/' + id + '/').success(function (data) {
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getDataTypeOptions: function (name) {
                var d = $q.defer();
                var url = scaleConfig.urls.apiPrefix + 'metrics/' + name + '/';
                $http.get(url).success(function (data) {
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getPlotData: function (params) {
                var params = params || getPlotDataParams(),
                    d = $q.defer();

                $http({
                    method: 'GET',
                    url: scaleConfig.urls.apiPrefix + 'metrics/' + params.dataType + '/plot-data/',
                    params: params
                }).success(function (data) {
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });

                return d.promise;
            },
            getGeneratedPlotData: function (obj) {
                var d = $q.defer();

                var returnObj = {
                    count: 28,
                    next: null,
                    previous: null,
                    results: []
                };

                var numDays = moment.utc(obj.params.ended).diff(moment.utc(obj.params.started), 'd') + 1;

                _.forEach(obj.query.selectedMetrics, function (metric) {
                    var returnResult = {
                        column: metric,
                        min_x: moment.utc(obj.params.started).format('YYYY-MM-DD'),
                        max_x: moment.utc(obj.params.ended).format('YYYY-MM-DD'),
                        min_y: 1,
                        max_y: 100,
                        values: []
                    };

                    for (var i = 0; i < numDays; i++) {
                        if (obj.query.filtersApplied.length > 1) {
                            _.forEach(obj.query.filtersApplied, function (filter) {
                                returnResult.values.push({
                                    date: moment.utc(obj.params.started).add(i, 'd').format('YYYY-MM-DD'),
                                    value: Math.floor(Math.random() * (1000 - 1 + 1)) + 1,
                                    id: filter.id
                                });
                            });
                        } else {
                            returnResult.values.push({
                                date: moment.utc(obj.params.started).add(i, 'd').format('YYYY-MM-DD'),
                                value: Math.floor(Math.random() * (1000 - 1 + 1)) + 1
                            });
                        }
                    }
                    returnObj.results.push(returnResult);
                });

                d.resolve(returnObj);

                return d.promise;
            }
        };
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('navController', ['$scope', '$location', '$window', 'scaleConfig', 'navService', function($scope, $location, $window, scaleConfig, navService) {
        document.getElementsByTagName('body')[0].style.backgroundColor = scaleConfig.colors.nav_bg;

        $scope.activePage = 'overview';
        $scope.docsUrl = scaleConfig.urls.documentation;

        $scope.goto = function(loc) {
            $location.search('');
            $location.path(loc);
        };

        var locationUpdated = function() {
            $scope.activePage = navService.location;
        };

        var initialize = function() {
            navService.registerObserver(locationUpdated);
        };
        initialize();

    }]);
})();

(function () {
    'use strict';
    /**
     * See: http://stackoverflow.com/questions/12576798/angularjs-how-to-watch-service-variables/17558885#17558885
     * Doing things this way so that ssNavbarController can get notified
     * when the location changes. Then, our controllers just need to call into
     * this service to updateLocation.
     *
     * The only thing I don't like about this is that the individual
     * controllers have to call in and tell the ssNavigationService what
     * page they are showing.
     */
    angular.module('scaleApp').service('navService', ['$location', function ($location) {

        this.location = 'overview'; // where the app starts

        var observers = [];

        this.registerObserver = function(callback) {
            observers.push(callback);
        };

        this.notifyObservers = function() {
            angular.forEach(observers, function(observer) {
                observer();
            });
        };

        this.updateLocation = function(locationIn) {
            this.location = locationIn;
            this.notifyObservers();
        };

    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').service('subnavService', ['$http', 'scaleConfig', function ($http, scaleConfig) {
        var currentPath = '';

        this.setCurrentPath = function (path) {
            currentPath = path;
        };

        this.getCurrentPath = function () {
            return currentPath;
        };
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').controller('nodeDetailsController', ['$scope', '$location', '$routeParams', '$timeout', 'navService', 'nodeService', function($scope, $location, $routeParams, $timeout, navService, nodeService) {
        $scope.nodeId = $routeParams.id;

        var getNodeDetails = function (nodeId) {
            nodeService.getNode(nodeId).then( function (data) {
                $scope.node = data;
            });
        };

        var initialize = function() {
            navService.updateLocation('nodes');

            getNodeDetails($scope.nodeId);
            _.defer(function () {
                $scope.loading = false;
            });
        };

        initialize();

        /*$scope.$watch('nodeData', function (val) {
            $scope.redrawGrid();
        }, true);*/
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('nodesController', ['$scope', '$location', '$timeout', 'navService', 'nodeService', function($scope, $location, $timeout, navService, nodeService) {
        $scope.nodeCounts = [];
        $scope.loading = true;
        $scope.hourValue = 3;
        $scope.nodesError = null;
        $scope.nodesErrorStatus = null;
        $scope.nodeStatusError = null;
        $scope.nodeStatusErrorStatus = null;
        $scope.nodeData = {
            data: null,
            status: null
        };

        var debounceTimer = {};

        var debounceBroadcast = function (message, args) {
            if (debounceTimer[message]) {
                $timeout.cancel(debounceTimer[message]);
            }
            debounceTimer[message] = $timeout(function () {
                $scope.$broadcast(message, args);
            }, 500);
        };

        $scope.redrawGrid = function () {
            debounceBroadcast('redrawGrid', $scope.nodeData);
        };

        var getNodes = function () {
            nodeService.getNodes().then(null, null, function (data) {
                if (data.$resolved) {
                    $scope.nodesError = null;
                    $scope.nodeData.data = data.results;
                    $scope.redrawGrid();
                } else {
                    if (data.statusText && data.statusText !== '') {
                        $scope.nodesErrorStatus = data.statusText;
                    }
                    $scope.nodesError = 'Unable to retrieve nodes.';
                }
            });
        };

        var getNodeStatus = function () {
            nodeService.getNodeStatus(null, null, 'PT' + $scope.hourValue + 'H', null).then(null, null, function (data) {
                if (data.$resolved) {
                    $scope.nodeStatusError = null;
                    $scope.nodeData.status = data.results;
                    $scope.redrawGrid();
                } else {
                    if (data.statusText && data.statusText !== '') {
                        $scope.nodeStatusErrorStatus = data.statusText;
                    }
                    $scope.nodeStatusError = 'Unable to retrieve node status.';
                }
            });
        };

        var initialize = function() {
            getNodes();
            getNodeStatus();
            _.defer(function () {
                $scope.loading = false;
            });
            navService.updateLocation('nodes');
        };

        initialize();
    }]);
})();
(function (){
    'use strict';

    angular.module('scaleApp').controller('aisNodeHealthController', ['$rootScope', '$scope', 'nodeService', function ($rootScope, $scope, nodeService) {
        $scope.loadingNodeHealth = true;
        $scope.nodeHealthError = null;
        $scope.nodeHealthErrorStatus = null;
        $scope.nodeHealth = {};
        $scope.nodesOffline = 0;
        $scope.nodesPausedErrors = 0;
        $scope.nodesPaused = 0;
        $scope.nodesOfflineAndPaused = 0;
        $scope.nodesOfflineAndPausedErrors = 0;
        $scope.healthyNodes = 0;
        $scope.totalNodes = 0;

        var getNodeStatus = function () {
            $scope.loadingNodeHealth = true;
            nodeService.getNodeStatus(null, null, $scope.duration, null).then(null, null, function (data) {
                if (data.$resolved) {
                    $scope.totalNodes = data.results.length;

                    var nodesOffline = [],
                        nodesPausedErrors = [],
                        nodesPaused = [],
                        nodesOfflineAndPausedErrors = [],
                        nodesOfflineAndPaused = [];

                    _.forEach(data.results, function (n) {
                        if (!n.is_online) {
                            // node is offline
                            if (n.node.is_paused_errors) {
                                nodesOfflineAndPausedErrors.push(n);
                            } else if (n.node.is_paused) {
                                nodesOfflineAndPaused.push(n);
                            } else {
                                nodesOffline.push(n);
                            }
                        } else {
                            // node is online
                            if (n.node.is_paused_errors) {
                                nodesPausedErrors.push(n);
                            } else if (n.node.is_paused) {
                                nodesPaused.push(n);
                            }
                        }
                    });

                    $scope.nodesOffline = nodesOffline.length;
                    $scope.nodesPausedErrors = nodesPausedErrors.length;
                    $scope.nodesPaused = nodesPaused.length;
                    $scope.nodesOfflineAndPausedErrors = nodesOfflineAndPausedErrors.length;
                    $scope.nodesOfflineAndPaused = nodesOfflineAndPaused.length;

                    // add the length of nodes both offline and paused to produce an accurate healthy count
                    $scope.healthyNodes = $scope.totalNodes - $scope.nodesOffline - $scope.nodesPausedErrors - $scope.nodesPaused - $scope.nodesOfflineAndPaused - $scope.nodesOfflineAndPausedErrors;

                    var donutData = [];

                    // determine percentage of healthy nodes, and breakdown of why nodes are unhealthy
                    var gaugeData = $scope.totalNodes > 0 ? (($scope.healthyNodes / $scope.totalNodes) * 100).toFixed(2) : 0.00;

                    if ($scope.nodesOffline > 0) {
                        donutData.push({
                            status: 'Offline',
                            count: $scope.nodesOffline
                        });
                    }

                    if ($scope.nodesPausedErrors > 0) {
                        donutData.push({
                            status: 'High Failure Rate',
                            count: $scope.nodesPausedErrors
                        });
                    }

                    if ($scope.nodesPaused > 0) {
                        donutData.push({
                            status: 'Paused',
                            count: $scope.nodesPaused
                        });
                    }

                    $scope.nodeHealth = {
                        gaugeData: gaugeData,
                        donutData: donutData
                    };
                } else {
                    if (data.statusText && data.statusText !== '') {
                        $scope.nodeHealthErrorStatus = data.statusText;
                    }
                    $scope.nodeHealthError = 'Unable to retrieve node health.';
                }
                $scope.loadingNodeHealth = false;
            });
        };

        getNodeStatus();

        $rootScope.$on('updateNodeHealth', function () {
            getNodeStatus();
        });
    }]).directive('aisNodeHealth', function(){
        /**
         * Usage: <ais-node-health />
         **/
         return {
             controller: 'aisNodeHealthController',
             templateUrl: 'modules/nodes/directives/nodeHealthTemplate.html',
             restrict: 'E',
             scope: {
                 duration: '=',
                 showDescription: '='
             }
         };
    });
})();

(function(){
    'use strict';

    angular.module('scaleApp').factory('Node', ['NodeResources', 'scaleService', function (NodeResources, scaleService) {
        var Node = function (id, hostname, port, slave_id, pause_reason, is_paused, is_paused_errors, is_active, archived, created, last_offer, last_modified, resources) {
            this.id = id;
            this.hostname = hostname;
            this.port = port;
            this.slave_id = slave_id;
            this.pause_reason = pause_reason;
            this.is_paused = is_paused;
            this.is_paused_errors = is_paused_errors;
            this.is_active = is_active;
            this.archived = archived;
            this.created = created;
            this.last_offer = last_offer;
            this.last_modified = last_modified;
            this.resources = NodeResources.transformer(resources);
        };

        //public methods
        Node.prototype = {
            toString: function () {
                return 'Node';
            },
            getDuration: function () {
                return scaleService.calculateDuration(this.created, this.last_modified);
            },
            getCellText: function () {
                return this.hostname;
            },
            getCellTitle: function () {
                return this.hostname.split('.')[0];
            }
        };

        // static methods, assigned to class
        Node.build = function (data) {
            if (data) {
                return new Node(
                    data.id,
                    data.hostname,
                    data.port,
                    data.slave_id,
                    data.pause_reason,
                    data.is_paused,
                    data.is_paused_errors,
                    data.is_active,
                    data.archived,
                    data.created,
                    data.last_offer,
                    data.last_modified,
                    data.resources
                );
            }
            return new Node();
        };

        Node.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(Node.build);
            }
            return Node.build(data);
        };

        return Node;
    }]);
})();

(function(){
    'use strict';

    angular.module('scaleApp').factory('NodeResources', function(){
        var NodeResources = function (cpus, mem, disk) {
            this.cpus = cpus;
            this.mem = mem;
            this.disk = disk;
        };

        //public methods
        NodeResources.prototype = {
            // getDuration: function() {
                //return scaleService.calculateDuration(this.created, this.last_modified);
            // }
        };

        // static methods, assigned to class
        NodeResources.build = function (data) {
            if (data) {
                return new NodeResources(
                    data.cpus,
                    data.mem,
                    data.disk
                );
            }
            return new NodeResources();
        };

        NodeResources.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(NodeResources.build)
                    .filter(Boolean);
            }
            return NodeResources.build(data);
        };

        return NodeResources;
    });
})();

(function() {
    'use strict';

    angular.module('scaleApp').factory('NodeStatus', ['scaleConfig', 'nodeUpdateService', 'Node', 'JobExecution', function (scaleConfig, nodeUpdateService, Node, JobExecution) {
        var NodeStatus = function (node, is_online, job_exe_counts, job_exes_running) {
            this.node = Node.transformer(node);
            this.is_online = is_online;
            this.job_exe_counts = job_exe_counts;
            this.job_exes_running = JobExecution.transformer(job_exes_running);
        };

        //public methods
        NodeStatus.prototype = {
            toString: function () {
                return 'NodeStatus';
            },
            getCompleted: function () {
                var completed = _.find(this.job_exe_counts, 'status', 'COMPLETED');
                return completed ? completed.count : 0;
            },
            getFailed: function () {
                var failed = _.find(this.job_exe_counts, 'status', 'FAILED');
                return failed ? failed.count : 0;
            },
            getCellFill: function () {
                var color = '';
                if (this.is_online) {
                    if (this.node.is_paused_errors) {
                        color = scaleConfig.colors.chart_orange;
                    } else if (this.node.is_paused) {
                        color = scaleConfig.colors.chart_yellow;
                    } else {
                        color = scaleConfig.colors.chart_green;
                    }
                } else {
                    color = scaleConfig.colors.chart_red;
                }
                return color;
            },
            getCellActivity: function () {
                return '';
            },
            getCellError: function () {
                return 'Failed: ' + this.getFailed();
            },
            getCellTotal: function () {
                return 'Completed: ' + this.getCompleted();
            },
            getCellStatus: function () {
                if (this.is_online) {
                    if (this.node.is_paused_errors) {
                        return 'High Failure Rate';
                    } else if (this.node.is_paused) {
                        return 'Paused';
                    } else {
                        return 'Online';
                    }
                } else {
                    return 'Offline';
                }
            },
            getCellJobs: function () {
                var text = '';
                _.forEach(this.job_exes_running, function (jobExecution) {
                    text = jobExecution.job.job_type.icon_code ?
                    text + ' ' + '&#x' + jobExecution.job.job_type.icon_code + ';' :
                    text + ' ' + '&#x' + scaleConfig.defaultIconCode + ';';
                });
                return text;
            },
            getCellPauseResume: function () {
                return this.node.is_paused ? '&#xf04b;' : '&#xf04c;';
            },
            pauseResumeCell: function (pause_reason) {
                var updateData = {
                    hostname: this.node.hostname,
                    port: this.node.port,
                    pause_reason: pause_reason || '',
                    is_paused: !this.node.is_paused
                };
                return nodeUpdateService.updateNode(this.node.id, updateData).then(function (result) {
                    return Node.transformer(result);
                }).catch(function (error) {
                    console.log(error);
                });
            }
        };

        // static methods, assigned to class
        NodeStatus.build = function (data) {
            if (data) {
                return new NodeStatus(
                    data.node,
                    data.is_online,
                    data.job_exe_counts,
                    data.job_exes_running
                );
            }
            return new NodeStatus();
        };

        NodeStatus.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(NodeStatus.build);
            }
            return NodeStatus.build(data);
        };

        return NodeStatus;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').service('nodeService', ['$http', '$q', '$resource', 'scaleConfig', 'Node', 'NodeStatus', 'poller', 'pollerFactory', function ($http, $q, $resource, scaleConfig, Node, NodeStatus, poller, pollerFactory) {
        /*var totalNodes = 5;

        var getTotalNodes = function () {
            return totalNodes;
        };

        var setTotalNodes = function () {
            totalNodes = Math.floor(Math.random() * (20 - 1 + 1)) + 1;
        };

        setInterval(function () {
            setTotalNodes();
        }, 3100);*/

        var getNodeStatusParams = function (page, page_size, started, ended) {
            var params = {};

            if(page) { params.page = page; }
            if(page_size) { params.page_size = page_size; }
            if(started) { params.started = started; }
            if(ended) { params.ended = ended; }

            return params;
        };

        return {
            getNodes: function () {
                var nodesResource = $resource(scaleConfig.urls.apiPrefix + 'nodes/'),
                    nodesPoller = pollerFactory.newPoller(nodesResource, scaleConfig.pollIntervals.nodes);

                return nodesPoller.promise.then(null, null, function (data) {
                    if (data.$resolved) {
                        /*var returnResult = {
                            $resolved: true,
                            nodes: []
                        };
                        var newData = {};
                        for (var i = 0; i < getTotalNodes(); i++) {
                            newData = {
                                "id": i,
                                "hostname": "node" + i + ".local",
                                "port": 5051,
                                "slave_id": "20150616-103050-1800454536-5050-6193-S2",
                                "total_cpus": 2.0,
                                "total_mem": 6793.0,
                                "total_disk": 94639.0,
                                "is_paused": false,
                                "created": "2015-06-15T17:18:52.414Z",
                                "last_modified": "2015-06-15T17:18:52.414Z"
                            };
                            returnResult.nodes.push(newData);
                        }
                        result = returnResult;*/

                        data.results = Node.transformer(data.results);
                    } else {
                        nodesPoller.stop();
                    }
                    return data;
                });
            },
            getNodesOnce: function () {
                var d = $q.defer();
                $http.get(scaleConfig.urls.apiPrefix + 'nodes/').success(function (data) {
                    var returnData = Node.transformer(data.nodes);
                    d.resolve(returnData);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getNode: function (slaveId) {
                var d = $q.defer();
                $http.get(scaleConfig.urls.apiPrefix + 'nodes/' + slaveId + '/').success(function (data) {
                    var returnData = Node.transformer(data);
                    d.resolve(returnData);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getNodeStatus: function (page, page_size, started, ended) {
                var params = getNodeStatusParams(page, page_size, started, ended);

                var nodeStatusResource = $resource(scaleConfig.urls.apiPrefix + 'nodes/status/', params),
                    nodeStatusPoller = pollerFactory.newPoller(nodeStatusResource, scaleConfig.pollIntervals.nodeStatus);

                return nodeStatusPoller.promise.then(null, null, function (data) {
                    if (data.$resolved) {
                        /*var returnResult = {
                            $resolved: true,
                            node_stats: []
                        };
                        var newData = {};
                        for (var i = 0; i < getTotalNodes(); i++) {
                            newData = {
                                "hostname": "node" + i + ".local",
                                "jobs_completed": Math.floor(Math.random() * (100 - 20 + 1)) + 20,
                                "system_failures": Math.floor(Math.random() * (20 - 0 + 1)) + 0,
                                "id": i
                            };
                            returnResult.node_stats.push(newData);
                        }
                        result = returnResult;*/

                        data.results = NodeStatus.transformer(data.results);
                    } else {
                        nodeStatusPoller.stop();
                    }
                    return data;
                });
            },
            getNodeStatusOnce: function (page, page_size, started, ended) {
                var d = $q.defer();
                var params = getNodeStatusParams(page, page_size, started, ended);
                $http({
                    url: scaleConfig.urls.apiPrefix + 'nodes/status/',
                    method: 'GET',
                    params: params
                }).success(function (data) {
                    data.results = NodeStatus.transformer(data.results);
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },
            getNodeData: function (slaveId, since) {
                var data = {},
                    self = this;

                since = since || 'PT3H';

                return self.getNodes().then(function (nodes) {
                    data.nodes = nodes;
                    return self.getNodeStatus(since).then(function (stats) {
                        data.stats = stats;
                        return data;
                    });
                });
            }
        };

    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').service('nodeUpdateService', ['$http', '$q', 'scaleConfig', 'Node', function ($http, $q, scaleConfig, Node) {
        var getNodeUpdateData = function (hostname, port, pause_reason, is_paused) {
            return {
                hostname: hostname,
                port: port,
                pause_reason: pause_reason,
                is_paused: is_paused
            };
        };

        return {
            updateNode: function (id, data) {
                data = data || getNodeUpdateData();
                var d = $q.defer();

                $http({
                    url: scaleConfig.urls.apiPrefix + 'nodes/' + id + '/',
                    method: 'PATCH',
                    data: data
                }).success(function (result) {
                    d.resolve(Node.transformer(result));
                }).error(function (error) {
                    d.reject(error);
                });

                return d.promise;
            }
        };
    }])
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('ovController', ['$rootScope', '$scope', 'navService', 'nodeService', 'jobService', 'jobTypeService', 'statusService', 'gaugeFactory', 'scaleConfig', 'scaleService', 'schedulerService', 'userService', function($rootScope, $scope, navService, nodeService, jobService, jobTypeService, statusService, gaugeFactory, scaleConfig, scaleService, schedulerService, userService) {
        $scope.date = new Date();
        $scope.jobError = null;
        $scope.jobErrorStatus = null;
        $scope.loadingJobs = true;
        $scope.jobTypes = [];
        $scope.hourValue = 3;
        $scope.jobData = {
            data: null,
            status: null
        };
        $scope.jobErrorBreakdown = [];
        $scope.status = null;
        $scope.loadingStatus = true;
        $scope.statusError = null;
        $scope.statusErrorStatus = null;
        $scope.masterStatus = '';
        $scope.masterStatusClass = 'alert-success';
        $scope.schedulerStatus = '';
        $scope.schedulerStatusClass = 'alert-success';
        $scope.memCalc = '';
        $scope.diskCalc = '';
        $scope.schedulerIsPaused = false;
        $scope.user = userService.getUserCreds();
        $scope.schedulerContainerClass = $scope.user ? $scope.user.is_admin ? 'col-xs-8 col-lg-10' : 'col-xs-12' : 'col-xs-12';
        $scope.schedulerBtnClass = 'fa-pause';

        $scope.toggleScheduler = function () {
            $scope.schedulerIsPaused = !$scope.schedulerIsPaused;
            var schedulerData = {
                is_paused: $scope.schedulerIsPaused
            };
            schedulerService.updateScheduler(schedulerData).then(function (data) {
                $scope.schedulerStatus = data.is_paused ? 'Paused' : 'Running';
                $scope.schedulerStatusClass = data.is_paused ? 'alert-warning' : 'alert-success';
                $scope.schedulerBtnClass = data.is_paused ? 'fa-play' : 'fa-pause';
            }).catch(function (error) {
                console.log(error);
            });
        };

        var redrawGrid = function () {
            $scope.$broadcast('redrawGrid', $scope.jobData);
        };

        var getJobTypes = function () {
            jobTypeService.getJobTypes().then(null, null, function (data) {
                if (data.$resolved) {
                    $scope.jobError = null;
                    $scope.jobData.data = data.results;
                    redrawGrid();
                } else {
                    if (data.statusText && data.statusText !== '') {
                        $scope.jobErrorStatus = data.statusText;
                    }
                    $scope.jobError = 'Unable to retrieve job types.'
                }
                $scope.loadingJobs = false
            });
        };

        var getStatus = function () {
            var cpuGauge = gaugeFactory.createGauge('cpu', 'CPU', 0, 100, 180),
                memGauge = gaugeFactory.createGauge('memory', 'Memory', 0, 100, 180),
                diskGauge = gaugeFactory.createGauge('disk', 'Disk', 0, 100, 180);

            statusService.getStatus().then(null, null, function (result) {
                if (result.$resolved) {
                    $scope.statusError = null;
                    $scope.status = result;
                    cpuGauge.redraw(result.getCpuUsage());
                    memGauge.redraw(result.getMemUsage());
                    diskGauge.redraw(result.getDiskUsage());
                    $scope.masterStatus = result.master.is_online ? 'Online' : 'Offline';
                    $scope.masterStatusClass = result.master.is_online ? 'alert-success' : 'alert-danger';
                    if (result.scheduler.is_online) {
                        $scope.schedulerStatus = result.scheduler.is_paused ? 'Paused' : 'Running';
                        $scope.schedulerStatusClass = result.scheduler.is_paused ? 'alert-warning' : 'alert-success';
                        $scope.schedulerIsPaused = result.scheduler.is_paused;
                        $scope.schedulerBtnClass = result.scheduler.is_paused ? 'fa-play' : 'fa-pause';
                    } else {
                        $scope.schedulerStatus = result.scheduler.is_paused ? 'Offline; Paused' : 'Offline';
                        $scope.schedulerStatusClass = 'alert-danger';
                        $scope.schedulerIsPaused = result.scheduler.is_paused;
                        $scope.schedulerBtnClass = result.scheduler.is_paused ? 'fa-play' : 'fa-pause';
                    }
                    if (result.resources.scheduled.mem && result.resources.total.mem) {
                        $scope.memCalc = scaleService.calculateFileSizeFromMib(result.resources.scheduled.mem) + ' / ' + scaleService.calculateFileSizeFromMib(result.resources.total.mem);
                    }
                    if (result.resources.scheduled.disk && result.resources.total.disk) {
                        $scope.diskCalc = scaleService.calculateFileSizeFromMib(result.resources.scheduled.disk) + ' / ' + scaleService.calculateFileSizeFromMib(result.resources.total.disk);
                    }
                } else {
                    if (result.statusText && result.statusText !== '') {
                        $scope.statusErrorStatus = result.statusText;
                    }
                    $scope.statusError = 'Unable to retrieve cluster status.';
                }
                $scope.loadingStatus = false;
            });
        };

        $rootScope.$on('jobTypeStatus', function (event, data) {
            $scope.jobData.status = data;
            redrawGrid();
        });

        var initialize = function () {
            getJobTypes();
            getStatus();
            navService.updateLocation('overview');
        };

        initialize();
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('recipeDetailsController', ['$rootScope', '$scope', '$location', '$routeParams', 'navService', 'recipeService', 'scaleConfig', 'subnavService', 'userService', function ($rootScope, $scope, $location, $routeParams, navService, recipeService, scaleConfig, subnavService, userService) {

        var self = this;

        $scope.recipe = {};
        $scope.recipeId = $routeParams.id;
        $scope.subnavLinks = scaleConfig.subnavLinks.recipes;
        subnavService.setCurrentPath('recipes');
        $scope.loadingRecipeDetail = true;
        $scope.activeTab = 'status';
        $scope.lastStatusChange = '';

        self.getRecipeDetail = function (recipeId) {
            $scope.loadingRecipeDetail = true;
            recipeService.getRecipeDetails(recipeId).then(function (data) {
                $scope.recipe = data;
                recipeService.getRecipeTypeDetail(data.recipe_type.id).then(function(recipeType){
                    $scope.recipeType = recipeType;
                }).catch(function(error){
                   console.log(error);
                });
            }).catch(function (error) {
                console.log(error);
            }).finally(function () {
                $scope.loadingRecipeDetail = false;
            });
        };

        self.initialize = function () {
            navService.updateLocation('recipes');
            $rootScope.user = userService.getUserCreds();

            self.getRecipeDetail($scope.recipeId);
        };



        $scope.switchTab = function (tab) {
            $('#' + $scope.activeTab).hide();
            $scope.activeTab = tab;
            $('#' + $scope.activeTab).show();
        };

        self.initialize();
    }]);
})();

(function(){
    'use strict';

    angular.module('scaleApp').controller('recipeEditorController', ['$scope', '$log', '$location', '$routeParams', '$uibModal', 'navService', 'recipeService', 'RecipeType', 'subnavService', 'jobTypeService', 'scaleConfig', function($scope, $log, $location, $routeParams, $uibModal, navService, recipeService, RecipeType, subnavService, jobTypeService, scaleConfig) {

        $scope.date = new Date();
        $scope.recipes = null;
        $scope.recipeTypeId = parseInt($routeParams.id);

        $scope.jobTypeValues = [];

        $scope.subnavLinks = scaleConfig.subnavLinks.recipes;
        subnavService.setCurrentPath('recipes/builder');

        $scope.items = ['item1', 'item2', 'item3'];
        $scope.animationsEnabled = true;
        $scope.selected = null;

        var getJobTypes = function () {
            jobTypeService.getJobTypesOnce().then(function (data) {
                $scope.jobTypeValues = data;
            }).catch(function (error) {
                console.log(error);
            }).finally(function () {
                $scope.loading = false;
            });
        };

        $scope.openAddJob = function (size) {
           var modalInstance = $uibModal.open({
             animation: $scope.animationsEnabled,
             templateUrl: 'addJobContent.html',
             scope: $scope,
             size: 'sm'
           });

           modalInstance.result.then(function () {
             $scope.addJobType($scope.selectedItem);
           }, function () {

           });
         };

         $scope.addJobType = function(selectedJobType){
             $scope.recipeType.definition.addJobType(selectedJobType);
             $scope.redrawGraph();
         };

         $scope.selectItem = function(item){
             $scope.selectedItem = item;
         };

        $scope.initialize = function() {
            getJobTypes();
            navService.updateLocation('recipes');
            if($scope.recipeTypeId){
                $scope.getRecipeTypeDetail($scope.recipeTypeId);
            }
            else{
                $scope.recipeType = RecipeType.new();
            }

        };

        $scope.getRecipeTypeDetail = function (id) {
            recipeService.getRecipeTypeDetail(id).then(function (data) {
                $scope.recipeType = data;
                if ($scope.redrawGraph) {
                    $scope.redrawGraph();
                }
            });
        };

        $scope.saveRecipeType = function(){
                console.log($scope.recipeType.name);
        };

        $scope.initialize();
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').controller('recipeTypesController', ['$rootScope', '$scope', '$routeParams', '$location', '$uibModal', 'hotkeys', 'scaleService', 'navService', 'recipeService', 'subnavService', 'jobTypeService', 'scaleConfig', 'RecipeType', 'userService', function ($rootScope, $scope, $routeParams, $location, $uibModal, hotkeys, scaleService, navService, recipeService, subnavService, jobTypeService, scaleConfig, RecipeType, userService) {
        $scope.loading = true;
        $scope.masterContainerStyle = '';
        $scope.detailContainerStyle = '';
        $scope.masterMaxHeight = 0;
        $scope.detailMaxHeight = 0;
        $scope.recipeTypes = [];
        $scope.recipeTypeIds = [];
        $scope.requestedRecipeTypeId = parseInt($routeParams.id);
        $scope.activeRecipeType = null;
        $scope.percentage = 73;
        $scope.date = new Date();
        $scope.recipes = null;
        $scope.mode = 'view'; // valid values are add, view, and edit
        $scope.addBtnText = 'New Recipe';
        $scope.addBtnClass = 'btn-primary';
        $scope.addBtnIcon = 'fa-plus-circle';
        $scope.editBtnText = 'Edit';
        $scope.editBtnClass = 'btn-success';
        $scope.editBtnIcon = 'fa-edit';
        $scope.jobTypeValues = [];
        $scope.isRecipeModified = false;
        $scope.saveBtnClass = 'btn-default';
        $scope.masterClass = 'col-xs-3';
        $scope.detailClass = 'col-xs-9';
        $scope.minimizeMaster = false;
        $scope.newBtnContainerClass = 'hidden';
        $scope.minimizeBtnContainerClass = 'hidden';
        $scope.minimizeBtnClass = 'fa fa-chevron-left';
        $scope.user = $rootScope.user;

        $scope.subnavLinks = scaleConfig.subnavLinks.recipes;
        subnavService.setCurrentPath('recipes/types');

        var initialize = function () {
            navService.updateLocation('recipes');
            $rootScope.user = userService.getUserCreds();
            getRecipeTypes();
            //getJobTypes();
        };
        
        var getRecipeTypes = function () {
            recipeService.getRecipeTypes().then(function (data) {
                $scope.recipeTypes = data;
                $scope.recipeTypeIds = _.pluck(data, 'id');
                $scope.viewRecipeTypeDetail($scope.requestedRecipeTypeId);
                hotkeys.bindTo($scope)
                    .add({
                        combo: 'ctrl+up',
                        description: 'Previous Recipe Type',
                        callback: function () {
                            if ($scope.activeRecipeType) {
                                var idx = _.indexOf($scope.recipeTypeIds, $scope.activeRecipeType.id);
                                if (idx > 0) {
                                    $scope.loadRecipeType($scope.recipeTypeIds[idx - 1]);
                                }
                            }
                        }
                    }).add({
                        combo: 'ctrl+down',
                        description: 'Next Recipe Type',
                        callback: function () {
                            if ($scope.activeRecipeType) {
                                var idx = _.indexOf($scope.recipeTypeIds, $scope.activeRecipeType.id);
                                if (idx < ($scope.recipeTypeIds.length - 1)) {
                                    $scope.loadRecipeType($scope.recipeTypeIds[idx + 1]);
                                }
                            }
                        }
                    });
            }).catch(function (error) {
                console.log(error);
            }).finally(function () {
                if ($scope.loading) {
                    $scope.loading = false;
                }
            })
        };

        $scope.newRecipeType = function(){
            $location.path('/recipes/types/0');
        };

        $scope.viewRecipeTypeDetail = function(recipeTypeId){
            if (recipeTypeId > 0) {
                recipeService.getRecipeTypeDetail(recipeTypeId).then(function (data){
                    $scope.activeRecipeType = data;
                });
            } else if( recipeTypeId === 0) {
                $scope.activeRecipeType = new RecipeType();
            }
        };

        $scope.loadRecipeType = function (id) {
            if($scope.activeRecipeType && $scope.activeRecipeType.modified){
                confirmChangeRecipe().then(function () {
                    // OK
                    $location.path('/recipes/types/' + id);
                }, function () {
                    // Cancel

                });
            } else {
                $location.path('/recipes/types/' + id);
            }
        };

        var confirmChangeRecipe = function () {
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'confirmDialog.html',
                scope: $scope,
                size: 'sm'
            });

            return modalInstance.result;
        };

        $scope.toggleMaster = function (minimizeMaster) {
            if (typeof minimizeMaster !== 'undefined') {
                $scope.minimizeMaster = minimizeMaster;
            } else {
                $scope.minimizeMaster = !$scope.minimizeMaster;
            }
            $scope.masterClass = $scope.minimizeMaster ? 'col-xs-1' : 'col-xs-3';
            $scope.detailClass = $scope.minimizeMaster ? 'col-xs-11' : 'col-xs-9';
            $scope.minimizeBtnContainerClass = $scope.minimizeMaster ? 'col-xs-12' : $rootScope.user ? 'col-xs-6 text-right' : 'col-xs-12 text-right';
            $scope.minimizeBtnClass = $scope.minimizeMaster ? 'fa fa-chevron-right' : 'fa fa-chevron-left';
            $scope.newBtnContainerClass = $scope.minimizeMaster ? 'hidden' : 'col-xs-6';
        };

        $rootScope.$on('toggleEdit', function (event, data) {
            $scope.toggleMaster(data === 'edit');
        });

        initialize();

        $rootScope.$on('recipeModified', function () {
            $scope.isRecipeModified = true;
            $scope.saveBtnClass = 'btn-success';
        });

        angular.element(document).ready(function () {
            $scope.newBtnContainerClass = $rootScope.user ? 'col-xs-6' : 'hidden';
            $scope.minimizeBtnContainerClass = $rootScope.user ? 'col-xs-6 text-right' : 'col-xs-12 text-right';
            // set container heights equal to available page height
            var viewport = scaleService.getViewportSize(),
                masterOffset = scaleConfig.headerOffset + document.getElementsByClassName('master-controls')[0].scrollHeight,
                detailOffset = scaleConfig.headerOffset;

            $scope.masterMaxHeight = viewport.height - masterOffset;
            $scope.detailMaxHeight = viewport.height - detailOffset;

            $scope.masterContainerStyle = 'height: ' + $scope.masterMaxHeight + 'px; max-height: ' + $scope.masterMaxHeight + 'px; overflow-y: auto;';
            $scope.detailContainerStyle = 'height: ' + $scope.detailMaxHeight + 'px; max-height: ' + $scope.detailMaxHeight + 'px';
        });
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').controller('recipesController', ['$rootScope', '$scope', '$location', 'scaleService', 'navService', 'gridFactory', 'uiGridConstants', 'scaleConfig', 'subnavService', 'recipeService', function ($rootScope, $scope, $location, scaleService, navService, gridFactory, uiGridConstants, scaleConfig, subnavService, recipeService) {

        var recipesParams = {
            page: null, page_size: null, started: null, ended: null, order: $rootScope.recipesControllerOrder || null, type_id: null, type_name: null, url: null
        };

        // check for recipesParams in query string, and update as necessary
        _.forEach(_.pairs(recipesParams), function (param) {
            var value = _.at($location.search(), param[0]);
            if (value.length > 0) {
                recipesParams[param[0]] = value.length > 1 ? value : value[0];
            }
        });

        var gridPageNumber = recipesParams.page || 1,
            filteredByRecipeType = recipesParams.type_id ? true : false,
            filteredByOrder = recipesParams.order ? true : false;

        // this file will be similar to jobsController
        $scope.recipesData = {};
        $scope.loading = true;
        $scope.recipeTypeValues = [];
        $scope.selectedRecipeType = recipesParams.type_id || 0;
        $scope.subnavLinks = scaleConfig.subnavLinks.recipes;
        $scope.gridStyle = '';
        $scope.lastModifiedStart = recipesParams.started ? moment.utc(recipesParams.started).toDate() : moment.utc().subtract(1, 'weeks').startOf('d').toDate();
        $scope.lastModifiedStartPopup = {
            opened: false
        };
        $scope.openLastModifiedStartPopup = function ($event) {
            $event.stopPropagation();
            $scope.lastModifiedStartPopup.opened = true;
        };
        $scope.lastModifiedStop = recipesParams.ended ? moment.utc(recipesParams.ended).toDate() : moment.utc().endOf('d').toDate();
        $scope.lastModifiedStopPopup = {
            opened: false
        };
        $scope.openLastModifiedStopPopup = function ($event) {
            $event.stopPropagation();
            $scope.lastModifiedStopPopup.opened = true;
        };
        $scope.dateModelOptions = {
            timezone: '+000'
        };

        subnavService.setCurrentPath('recipes');

        var defaultColumnDefs = [
            {
                field: 'recipe_type',
                displayName: 'Recipe Type',
                cellTemplate: '<div class="ui-grid-cell-contents">{{ row.entity.recipe_type.title }} {{ row.entity.recipe_type.version }}</div>',
                filterHeaderTemplate: '<div class="ui-grid-filter-container"><select class="form-control input-sm" ng-model="grid.appScope.selectedRecipeType"><option ng-selected="{{ grid.appScope.recipeTypeValues[$index].id == grid.appScope.selectedRecipeType }}" value="{{ grid.appScope.recipeTypeValues[$index].id }}" ng-repeat="recipeType in grid.appScope.recipeTypeValues track by $index">{{ grid.appScope.recipeTypeValues[$index].title }} {{ grid.appScope.recipeTypeValues[$index].version }}</option></select>'
            },
            //{ field: 'created', enableFiltering: false, cellFilter: 'date:\'yyyy-MM-dd HH:mm:ss\''},
            { field: 'created', enableFiltering: false},
            {
                field: 'last_modified',
                enableFiltering: false,
                //cellFilter: 'date:\'yyyy-MM-dd HH:mm:ss\'',                
            },
            { field: 'duration', enableFiltering: false, enableSorting: false, cellTemplate: '<div class="ui-grid-cell-contents">{{ row.entity.getDuration() }}</div>' }
        ];

        $scope.gridOptions = gridFactory.defaultGridOptions();
        $scope.gridOptions.paginationCurrentPage = parseInt(recipesParams.page || 1);
        $scope.gridOptions.paginationPageSize = parseInt(recipesParams.page_size) || $scope.gridOptions.paginationPageSize;
        var colDefs = $rootScope.recipeColDefs ? $rootScope.recipeColDefs : defaultColumnDefs;
        $scope.gridOptions.columnDefs = gridFactory.applySortConfig(colDefs, recipesParams);
        $scope.gridOptions.data = [];
        $scope.gridOptions.onRegisterApi = function (gridApi) {
            //set gridApi on scope
            $scope.gridApi = gridApi;
            $scope.gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                $scope.$apply(function(){
                    $location.path('/recipes/recipe/' + row.entity.id);
                });

            });
            $scope.gridApi.pagination.on.paginationChanged($scope, function (currentPage, pageSize) {
                recipesParams.page = currentPage;
                recipesParams.page_size = pageSize;
                console.log('gridApi');
                $scope.filterResults();
            });
            $scope.gridApi.core.on.sortChanged($scope, function (grid, sortColumns) {
                $rootScope.recipeColDefs = null;
                _.forEach($scope.gridApi.grid.columns, function (col) {
                    col.colDef.sort = col.sort;
                });
                $rootScope.recipeColDefs = $scope.gridApi.grid.options.columnDefs;
                var sortArr = [];
                _.forEach(sortColumns, function (col) {
                    sortArr.push(col.sort.direction === 'desc' ? '-' + col.field : col.field);
                });
                updateRecipeOrder(sortArr);
            });
        };

        $scope.getPage = function (filter, pageNumber, pageSize, url) {
            $scope.loading = true;
            recipeService.getRecipes(filter, pageNumber, pageSize, url).then(function (data) {
                var newData = [];
                for (var i = 0; i < $scope.gridOptions.paginationPageSize; i++) {
                    if (data.results[i]) {
                        newData.push(data.results[i]);
                    }
                }
                $scope.gridOptions.data = newData;
                $scope.gridOptions.totalItems = data.count;
                $scope.jobsData = data;
                gridPageNumber = pageNumber;
            }).catch(function (error) {
                console.log(error);
            }).finally(function () {
                $scope.loading = false;
            });
        };

        $scope.filterResults = function () {
            _.forEach(_.pairs(recipesParams), function (param) {
                $location.search(param[0], param[1]);
            });
            $scope.loading = true;
            getRecipes();
        };

        var getRecipes = function () {
            recipeService.getRecipes(recipesParams).then(function (data) {
                $scope.recipesData = data;
                $scope.gridOptions.totalItems = data.count;
                $scope.gridOptions.data = data.results;
            }).catch(function (error) {
                console.log(error);
            }).finally(function () {
                $scope.loading = false;
            });
        };

        var getRecipeTypes = function () {
            recipeService.getRecipeTypes().then(function (data) {
                $scope.recipeTypeValues = data;
                $scope.recipeTypeValues.unshift({ name: 'VIEW ALL', title: 'VIEW ALL', version: '', id: 0 });
                getRecipes();
            }).catch(function (error) {
                $scope.loading = false;
                console.log(error);
            });
        };

        var updateRecipeOrder = function (sortArr) {
            recipesParams.order = sortArr.length > 0 ? sortArr : null;
            filteredByOrder = sortArr.length > 0;
            $scope.filterResults();
        };

        var updateRecipeType = function (value) {
            if (value != recipesParams.type_id) {
                recipesParams.page = 1;
            }
            recipesParams.type_id = value == 0 ? null : value;
            recipesParams.page_size = $scope.gridOptions.paginationPageSize;
            console.log('selectedRecipeType');
            if (!$scope.loading) {
                $scope.filterResults();
            }
        };

        $scope.$watch('lastModifiedStart', function (value) {
            if (!$scope.loading) {
                recipesParams.started = value.toISOString();
                $scope.filterResults();
            }
        });

        $scope.$watch('lastModifiedStop', function (value) {
            if (!$scope.loading) {
                recipesParams.ended = value.toISOString();
                $scope.filterResults();
            }
        });

        $scope.$watch('selectedRecipeType', function (value) {
            if ($scope.loading) {
                if (filteredByRecipeType) {
                    updateRecipeType(value);
                }
            } else {
                filteredByRecipeType = value != 0;
                updateRecipeType(value);
            }
        });

        var initialize = function () {
            if (typeof $rootScope.recipeColDefs === 'undefined') {
                // root column defs have not been altered by user, so set up defaults
                if (!recipesParams.order) {
                    recipesParams.order = '-last_modified';
                    $location.search('order', recipesParams.order).replace();
                }
                if (!recipesParams.page_size) {
                    recipesParams.page_size = $scope.gridOptions.paginationPageSize;
                    $location.search('page_size', recipesParams.page_size).replace();
                }
                if (!recipesParams.started) {
                    recipesParams.started = moment.utc($scope.lastModifiedStart).toISOString();
                    $location.search('started', recipesParams.started).replace();
                }
                if (!recipesParams.ended) {
                    recipesParams.ended = moment.utc($scope.lastModifiedStop).toISOString();
                    $location.search('ended', recipesParams.ended).replace();
                }
            }
            getRecipeTypes();
            navService.updateLocation('recipes');
        };

        initialize();

        angular.element(document).ready(function(){
           // set container height equal to available page height
            var viewport = scaleService.getViewportSize();
            var offset = scaleConfig.headerOffset + scaleConfig.dateFilterOffset;
            var gridMaxHeight = viewport.height - offset;
            $scope.gridStyle = 'height: ' + gridMaxHeight + 'px; max-height: ' + gridMaxHeight + 'px;';
        });
    }]);
})();

/**
 * <ais-scale-recipe-viewer />
 */
(function () {
    angular.module('scaleApp').controller('aisScaleRecipeGraphViewerController', ['$rootScope', '$scope', '$location', '$uibModal', 'scaleConfig', 'scaleService', 'jobTypeService', 'recipeService', 'workspacesService', function ($rootScope, $scope, $location, $uibModal, scaleConfig, scaleService, jobTypeService, recipeService, workspacesService) {
        $scope.vertices = [];
        $scope.edges = [];
        $scope.isUpdate = false;
        $scope.selectedJob = null;
        $scope.selectedInputProvider = null;
        $scope.mode = null;
        $scope.editMode = null;
        $scope.dependencyBtnClass = 'fa-plus';
        $scope.addBtnText = 'New Recipe';
        $scope.addBtnClass = 'btn-primary';
        $scope.addBtnIcon = 'fa-plus-circle';
        $scope.editBtnText = 'Edit';
        $scope.editBtnClass = 'btn-success';
        $scope.editBtnIcon = 'fa-edit';
        $scope.jobTypeValues = [];
        $scope.saveBtnClass = 'btn-default';
        $scope.savingRecipe = false;
        $scope.warnings = [];
        $scope.readonly = true;
        $scope.detailMaxHeight = 0;
        $scope.recipeTypeTrigger = { dataTypes: '' };
        $scope.detailContainerStyle = '';
        $scope.containerClass = $scope.hasContainer ? '' : 'detail-container no-tabs';
        $scope.lastStatusChange = '';
        $scope.availableWorkspaces = [];
        $scope.recipeInputTypes = [
            {
                name: 'property',
                title: 'Property',
                fields: []
            },
            {
                name: 'file',
                title: 'File',
                fields: [
                    {
                        name: 'media_types',
                        title: 'Media Types',
                        value: []
                    }
                ]
            },
            {
                name: 'files',
                title: 'Files',
                fields: [
                    {
                        name: 'media_types',
                        title: 'Media Types',
                        value: []
                    }
                ]
            }
        ];
        $scope.availableTriggerTypes = scaleConfig.triggerTypes;
        $scope.selectedRecipeInputType = {};
        $scope.recipeInput = {
            name: '',
            required: true,
            type: ''
        };
        $scope.isIE = scaleService.isIE();

        var startJob = null;

        // Dagre variables
        var svg = null;
        var inner = null;
        var graph = null;
        var zoom = null;
        var render = null;


        var resetEditBtn = function () {
            $scope.editBtnText = $scope.mode === 'edit' ? 'Cancel Edit' : 'Edit';
            $scope.editBtnClass = $scope.mode === 'edit' ? 'btn-warning' : 'btn-success';
            $scope.editBtnIcon = $scope.mode === 'edit' ? 'fa-close' : 'fa-edit';
        };

        var resetAddBtn = function () {
            $scope.addBtnText = $scope.mode === 'add' ? 'Cancel' : 'New Recipe';
            $scope.addBtnClass = $scope.mode === 'add' ? 'btn-warning' : 'btn-primary';
            $scope.addBtnIcon = $scope.mode === 'add' ? 'fa-close' : 'fa-plus-circle';
        };

        var toggleAddRecipe = function () {
            $scope.mode = $scope.mode === 'add' ? 'view' : 'add';
            resetAddBtn();
        };

        var toggleEditRecipe = function () {
            if($scope.mode === 'edit'){
                $scope.mode = 'view';
                $scope.reloadRecipeTypeDetail($scope.recipeType.id);
            } else {
                $scope.mode = 'edit';
            }
            $scope.editMode = '';
            resetEditBtn();
        };

        var enableSaveRecipe = function () {
            $scope.recipeType.modified = true;
            $scope.saveBtnClass = 'btn-success';
        };

        var disableSaveRecipe = function () {
            $scope.recipeType.modified = false;
            $scope.saveBtnClass = 'btn-default;'
        };

        var confirmChangeRecipe = function () {
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'confirmDialog.html',
                scope: $scope,
                size: 'sm'
            });

            return modalInstance.result;
        };

        var getRecipeTypeJobClassName = function(job){
            // default to 'nostatus'
            var className = 'nostatus';
            // find the associated job in the recipe.jobs
            if($scope.recipe){
                var recipejob = _.find($scope.recipe.jobs,{job_name: job.name});
                if(recipejob){
                    className = recipejob.job.status.toLowerCase();
                }
            }
            return className;
        };

        $scope.reloadRecipeTypeDetail = function (id) {
            var getRecipeDetail = function () {
                recipeService.getRecipeTypeDetail(id).then(function (data) {
                    $scope.recipeType = data;

                });
            };

            if ($scope.recipeType.modified) {
                confirmChangeRecipe().then(function () {
                    // OK
                    disableSaveRecipe();
                    resetAddBtn();
                    if ($scope.mode === 'edit') {
                        toggleEditRecipe();
                    }
                    getRecipeDetail();
                }, function () {
                    // Cancel

                });
            } else {
                if ($scope.mode === 'edit') {
                    toggleEditRecipe();
                }
                resetAddBtn();
                getRecipeDetail();
            }
        };

        $scope.redraw = function () {
            initialize();
            //$rootScope.$broadcast('recipeModified');
        };

        $scope.nodeClick = function (name) {
            // Remove selection class
            $('div').removeClass('selected-node');
            $('div').removeClass('selected-node-dependency');
            $('div').removeClass('job-active');

            // find the job in the recipe definition
            var job = _.find($scope.recipeType.definition.jobs,{name: name});

            if(name === 'start'){
                job = startJob;
            }
            var $name = $('#' + name);
            var pos = $name.position();

            // click node different from selectedJob
            if (!$scope.selectedJob || job.name !== $scope.selectedJob.name) {
                if ($scope.editMode === 'addDependency') {
                    addDependency(name);
                    enableSaveRecipe();
                    $scope.redraw();

                } else if ($scope.editMode === 'addInput') {
                    $scope.selectedInputProvider = job;
                    $('.recipeNode:not(".selected-node")').removeClass('selected-node-selectable');
                    $('#' + name).addClass('selected-node-dependency');
                    $('#output-selector').css({top: pos.top, left: pos.left, position: 'absolute'});
                    console.log('toggle input selector');
                } else if ($scope.editMode === 'addOutput'){
                    $scope.selectedOutputReceiver = job;
                    // set position of output-selector
                    $('#input-selector').css({top: pos.top, left: pos.left, position: 'absolute'});
                    //$scope.mode = 'addInputActive';
                    $('.recipeNode:not(".selected-node")').removeClass('selected-node-selectable');
                    $('#' + name).addClass('selected-node-dependency');
                    console.log('toggle output selector');
                } else {
                    // update the selected job
                    $scope.selectedJob = job;
                    if($scope.recipe){
                        $scope.selectedRecipeJob = _.find($scope.recipe.jobs, { job_name: job.name });
                    }
                    // apply the selected-node class
                    $name.addClass('selected-node');
                }
            }
            else { // click selected node
                $('div').removeClass('selected-node');
                $scope.selectedJob = null;
                $scope.selectedRecipeJob = null;
                $scope.selectedOutputReceiver = null;
                $scope.selectedInputProvider = null;
                $scope.editMode = '';
                $scope.dependencyBtnClass = 'fa-plus';

                $('.recipeNode:not(".selected-node")').removeClass('selected-node-selectable');
            }
            if($scope.selectedJob){
                $('#' + $scope.selectedJob.name).addClass('selected-node');
            }
        };
        $scope.toggleEditMode = function () {
            if ($scope.mode === 'edit') {
                $scope.reloadRecipeTypeDetail($scope.recipeType.id);
            } else {
                toggleEditRecipe();
                resetAddBtn();
            }
            $rootScope.$broadcast('toggleEdit', $scope.mode);
        };

        $scope.openAddJob = function () {
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'addJobContent.html',
                scope: $scope,
                size: 'sm'
            });

            modalInstance.result.then(function () {
                if($scope.selectedJobType){
                    jobTypeService.getJobTypeDetails($scope.selectedJobType.id).then(function(data){
                        $scope.addJobType(data);
                        enableSaveRecipe();
                    });
                }
            }, function () {

            });
        };

        $scope.openEditTrigger = function () {
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'editTrigger.html',
                scope: $scope,
                size: 'md'
            });

            modalInstance.result.then(function () {
                if( $scope.mode === 'edit' || $scope.mode === 'add' ) {
                    $scope.recipeType.trigger_rule.configuration.condition.data_types = $scope.recipeTypeTrigger.dataTypes ? $scope.recipeTypeTrigger.dataTypes.split(',') : [];
                    enableSaveRecipe();
                }
            }, function () {

            });


        };

        $scope.deleteRecipeInput = function(inputName){
            var removedRecipeInput = _.remove($scope.recipeType.definition.input_data, function (recipeInput) {
                return recipeInput.name === inputName;
            });
            console.log('removed ' + removedRecipeInput.length + ' recipe inputs.');
            enableSaveRecipe();
            $scope.redraw();

        };

        $scope.openAddInput = function(){
            var modalInstance = $uibModal.open({
                animation: $scope.animationsEnabled,
                templateUrl: 'addInput.html',
                scope: $scope
            });

            modalInstance.result.then(function(){
                // check for fields and add as necessary
                if( $scope.selectedRecipeInputType.fields.length > 0){
                    var fieldArr = [];
                    _.forEach($scope.selectedRecipeInputType.fields, function(field){
                        _.forEach(field.value.split(','), function(value){
                            fieldArr.push(value);
                        });
                        $scope.recipeInput[field.name] = fieldArr;
                    });
                }

                // add input to recipe type definition
                $scope.recipeType.definition.input_data.push($scope.recipeInput);
                _.forEach($scope.recipeType.definition.jobs, function(job){
                    if(job.recipe_inputs.length === 0){
                        job.recipe_inputs.push({
                            job_input: $scope.recipeInput.name,
                            recipe_input: $scope.recipeInput.name
                        });
                    }
                });
                getIoMappings();

                // reset form fields
                $scope.recipeInput = {
                    name: '',
                    required: true,
                    type: ''
                };
                $scope.selectedRecipeInputType = {};
            });
        };

        $scope.changeInputType = function(){
            $scope.selectedRecipeInputType = _.find($scope.recipeInputTypes, {'name': $scope.recipeInput.type});
        };

        var getWarningsHtml = function (warnings) {
            var warningsHtml = '';
            _.forEach(warnings, function (warning) {
                warningsHtml += '<b>' + warning.id + ':</b> ' + warning.details + '<br /><br />';
            });
            warningsHtml += '<button type="button" class="btn btn-default btn-xs clear">Hide</button>';
            return warningsHtml;
        };

        $scope.validateRecipeType = function () {
            recipeService.validateRecipeType($scope.recipeType).then(function(validationResult){
                if(validationResult.warnings && validationResult.warnings.length > 0){
                    // display the warnings
                    var warningsHtml = getWarningsHtml(validationResult.warnings);
                    toastr["error"](warningsHtml);
                } else {
                    toastr["success"]('Recipe is valid.');
                }
            }).catch(function(error){
                if(error.detail){
                    toastr["error"](error.detail);
                } else {
                    toastr["error"](error);
                }
            });

        };


        $scope.saveRecipeType = function () {
            $scope.savingRecipe = true;
            console.log('save recipe: ' + $scope.recipeType.name);
            recipeService.validateRecipeType($scope.recipeType).then(function(validationResult){
                if(validationResult.warnings && validationResult.warnings.length > 0){
                    // display the warnings
                    var warningsHtml = getWarningsHtml(validationResult.warnings);
                    toastr["error"](warningsHtml);
                    $scope.savingRecipe = false;
                } else {
                    recipeService.saveRecipeType($scope.recipeType).then(function(saveResult){
                        $scope.savingRecipe = false;
                        $scope.recipeType = saveResult;
                        $scope.redraw();
                        //$location.path('/recipes/types/' + saveResult.id);
                    });
                }
            }).catch(function(error){
                if(error && error.detail){
                    toastr['error'](error.detail);
                } else {
                    toastr['error'](error);
                }
                $scope.savingRecipe = false;
            });

            disableSaveRecipe();
        };

        $scope.addJobType = function (selectedJobType) {
            console.log(selectedJobType.name);
            $scope.recipeType.definition.addJob(selectedJobType);
            $scope.$broadcast('redrawRecipes');
        };

        $scope.mapInput = function (providerName, providerOutput) {
            console.log('map selected job input to ' + providerName + '.' + providerOutput);
            var dependency = _.find($scope.selectedJob.dependencies, {name: providerName});

            if(dependency && dependency.connections && dependency.connections.length > 0){
                var conn = _.find(dependency.connections, { output: providerOutput, input: $scope.selectedJobInput.name });
                if(!conn){
                    dependency.connections.push({ output: providerOutput, input: $scope.selectedJobInput.name });
                }
            }
            else if(!dependency){
                dependency = {name: providerName, connections: [{ output: providerOutput, input: $scope.selectedJobInput.name }]};
                $scope.selectedJob.dependencies.push(dependency);
            }
            else {
                dependency.connections = [{ output: providerOutput, input: $scope.selectedJobInput.name }];
            }
            $scope.selectedJob.depStart = false;
            $scope.editMode = '';
            $scope.selectedJobInput = null;
            $scope.selectedInputProvider = null;
            enableSaveRecipe();
            $scope.redraw();
        };

        $scope.mapInputRecipeInput = function(recipeInput){
            console.log('map selected job to recipe input ' + recipeInput);
            var existingInput = _.find($scope.selectedJob.recipe_inputs, { job_input: $scope.selectedJobInput.name });
            if( existingInput && existingInput.recipe_name !== recipeInput){
                // update it
                existingInput.recipe_input = recipeInput;
                enableSaveRecipe();
                $scope.redraw();
            } else if( !existingInput ){
                // create it
                $scope.selectedJob.recipe_inputs.push({
                    job_input: $scope.selectedJobInput.name,
                    recipe_input: recipeInput
                });
                enableSaveRecipe();
                $scope.redraw();
            }
            $scope.editMode = '';
            $scope.selectedJobInput = null;
            $scope.selectedInputProvider = null;
        };

        $scope.mapOutput = function (receiverName, receiverInput) {
            var dependency = _.find($scope.selectedOutputReceiver.dependencies, {name: $scope.selectedJob.name});

            if(dependency && dependency.connections && dependency.connections.length > 0){
                var conn = _.find(dependency.connections, { output: $scope.selectedJobOutput.name, input: receiverInput });
                if(!conn){
                    dependency.connections.push({output: $scope.selectedJobOutput.name, input: receiverInput});
                }
            }
            else if(!dependency){
                dependency = {name: $scope.selectedJob.name, connections: [{output: $scope.selectedJobOutput.name, input: receiverInput}]};
                $scope.selectedOutputReceiver.dependencies.push(dependency);
            }
            else {
                dependency.connections = [{output: $scope.selectedJobOutput.name, input: receiverInput}];
            }
            $scope.selectedOutputReceiver.depStart = false;
            $scope.editMode = '';
            $scope.selectedJobOutput = null;
            $scope.selectedOutputReceiver = null;
            enableSaveRecipe();
            $scope.redraw();
        };

        $scope.toggleAddDependency = function () {
            if ($scope.editMode === 'addDependency') {
                $scope.editMode = '';
                $scope.dependencyBtnClass = 'fa-plus';
                $('.recipeNode:not(".selected-node")').removeClass('selected-node-selectable');
            } else {
                console.log('toggle addDependency mode');
                $scope.editMode = 'addDependency';
                $scope.dependencyBtnClass = 'fa-minus';
                $('.recipeNode:not(".selected-node")').addClass('selected-node-selectable');
            }
        };

        $scope.toggleAddInput = function (jobinput) {
            if ($scope.editMode === 'addInput') {
                $scope.editMode = '';
                $('.recipeNode:not(".selected-node")').removeClass('selected-node-selectable');
            } else {
                $scope.selectedJobInput = jobinput;
                console.log('toggle addInput mode');
                $scope.editMode = 'addInput';
                $('.recipeNode:not(".selected-node")').addClass('selected-node-selectable');
            }
        };

        $scope.toggleAddOutput = function (joboutput) {
            if ($scope.editMode === 'addOutput') {
                $scope.editMode = '';
                $('.recipeNode:not(".selected-node")').removeClass('selected-node-selectable');
            } else {
                $scope.selectedJobOutput = joboutput;
                console.log('toggle addOutput mode');
                $scope.editMode = 'addOutput';
                $('.recipeNode:not(".selected-node")').addClass('selected-node-selectable');
            }
        };

        $scope.removeDependency = function (depName) {
            var removedDeps = _.remove($scope.selectedJob.dependencies, function (dep) {
                return dep.name === depName;
            });
            console.log('removed ' + removedDeps.length + ' dependencies.');
            enableSaveRecipe();
            $scope.redraw();
        };

        $scope.removeInputMapping = function (depName, depOutput) {
            if( depName === 'recipe' ){
                // remove it from selectedJob.recipe_inputs
                var dep = _.remove($scope.selectedJob.recipe_inputs, { recipe_input: depOutput });
                enableSaveRecipe();
                $scope.redraw();
            } else {
                var dep = _.find($scope.selectedJob.dependencies, {name: depName});
                if (dep && dep.connections) {
                    // it's an input from another job
                    var removedCon = _.remove(dep.connections, function (conn) {
                        return conn.output === depOutput;
                    });
                    console.log('removed ' + removedCon.length + ' input connections.');
                    enableSaveRecipe();
                    $scope.redraw();
                }
            }

        };

        $scope.deleteRecipeJob = function(jobName){
            // remove dependent connections
            _.forEach($scope.recipeType.definition.jobs, function(job){
                _.remove(job.dependencies, {name: jobName});
            });
            // remove job from definition.jobs
            _.remove($scope.recipeType.definition.jobs, { name: jobName });
            // enable save and redraw
            $scope.selectedJob = null;
            enableSaveRecipe();
            $scope.redraw();
        };

        $scope.removeOutputMapping = function (jobName, depOutput) {
            // we have to remove output mapping from the job where the dependency is defined
            var receiver = _.find($scope.recipeType.definition.jobs,{name: jobName});
            // remove it from receiver.dependencies
            var dep = _.find(receiver.dependencies, {name: $scope.selectedJob.name});
            if (dep && dep.connections) {
                var removedCon = _.remove(dep.connections, function (conn) {
                    return conn.output === depOutput;
                });
                console.log('removed ' + removedCon.length + ' output connections.');
                enableSaveRecipe();
                $scope.redraw();
            }
        };

        $scope.selectJobTypeToAdd = function(item){
            $scope.selectedJobType = item;
        };

        $scope.$on('redrawRecipes', function () {
            $scope.redraw();
        });

        var addDependency = function(jobName){
            console.log($scope.selectedJob.name + '->' + jobName);
            if (!$scope.selectedJob.dependencies) {
                $scope.selectedJob.dependencies = [];
            }
            var existingDependency = _.find($scope.selectedJob.dependencies, {name: jobName});

            if(!existingDependency){ $scope.selectedJob.dependencies.push({name: jobName}); }
            $scope.selectedJob.depStart = false;
            $scope.editMode = '';
            $scope.dependencyBtnClass = 'fa-plus';

        };

        var getIoMappings = function () {
            if($scope.recipeType.definition){
                _.forEach($scope.recipeType.definition.jobs, function (job) {
                    // populate the current jobType
                    /*var thisJobType = _.find($scope.recipeType.job_types,{id: job.job_type_id});
                    job.job_type = thisJobType;*/

                    // find dependents
                    if (job.job_type && job.job_type.job_type_interface) {
                        _.forEach(job.job_type.job_type_interface.output_data, function (jobOutput, key) {
                            if (jobOutput) {
                                var deps = getDependents(job.name,jobOutput.name);
                                jobOutput.dependents = deps;
                            }
                        });
                        // add dependency mappings
                        _.forEach(job.job_type.job_type_interface.input_data, function (jobInput, key) {
                            if (jobInput) {
                                var inputMappings = [];
                                _.forEach(job.dependencies, function (dependency,key) {
                                    _.forEach(dependency.connections, function (conn,key) {
                                        if (conn.input === jobInput.name) {
                                            inputMappings.push({
                                                name: dependency.name,
                                                output: conn.output,
                                                input: conn.input
                                            });
                                        }
                                    });
                                });
                                _.forEach(job.recipe_inputs, function(recipeInput, key){
                                    if(recipeInput.job_input === jobInput.name){
                                        inputMappings.push({
                                            name: 'recipe',
                                            output: recipeInput.recipe_input,
                                            input: recipeInput.job_input
                                        });
                                    }
                                });
                                jobInput.dependencies = inputMappings;
                            }
                        });

                    }
                });
            }

        };

        var initialize = function () {

            jobTypeService.getJobTypesOnce().then(function(data){
                $scope.jobTypeValues = data.results;
            });

            workspacesService.getWorkspaces().then(function(data){
                $scope.availableWorkspaces = data
            });

            $scope.$watch('recipeType', function (newValue, oldValue) {
                if ($scope.recipeType) {
                    if (!$scope.recipeType.id || $scope.recipeType.id === 0) {
                        $scope.mode = 'add';
                    }
                    _.forEach($scope.recipeType.definition.jobs, function (job, idx) {
                        if(!job.job_type.job_type_interface && $scope.recipeType.job_types){
                            var jobTypeData = _.find($scope.recipeType.job_types, {name: job.job_type.name, version: job.job_type.version});
                            $scope.recipeType.definition.jobs[idx].job_type = jobTypeData;
                        }

                    });

                    // setup string to bind comma delimited list of trigger rule configuration condition data types
                    if($scope.recipeType.trigger_rule && $scope.recipeType.trigger_rule.configuration && $scope.recipeType.trigger_rule.configuration.condition && $scope.recipeType.trigger_rule.configuration.condition.data_types){
                        $scope.recipeTypeTrigger.dataTypes = $scope.recipeType.trigger_rule.configuration.condition.data_types.join(',');
                    }

                    initGraph();
                    getIoMappings();
                    drawGraph($scope.isUpdate);
                }
            });
            if($rootScope.user){
                $scope.readonly = false;
            }
        };

        var initGraph = function () {
            // ******
            // setup D3 container and Graph
            // ******
            //$scope.selectedJob = null;
            function clicked() {
                var d = d3.event;
                var x = d3.event.x;
                var y = d3.event.y;
                var width = parseInt(svg.style("width").replace(/px/, ""));
                var height = parseInt(svg.style("height").replace(/px/, ""));

                inner.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")scale(2)translate(" + -x + "," + -y + ")");

                //inner.attr("transform", "translate(50px, 50px)scale(2,3)");

                console.log(d);
            }

            svg = d3.select("svg");
            inner = svg.select("g"); //.on("click", clicked);
            // Set up zoom support
            zoom = d3.behavior.zoom().on("zoom", function () {
                inner.attr("transform", "translate(" + d3.event.translate + ")" +
                    "scale(" + d3.event.scale + ")");
            });
            svg.call(zoom);

            render = new dagreD3.render();

            // Left-to-right layout
            graph = new dagreD3.graphlib.Graph();
            graph.setGraph({
                nodesep: 70,
                ranksep: 50,
                rankdir: "TB",
                marginx: 20,
                marginy: 20
            });
        };

        drawGraph = function (isUpdate) {
            // globals because dagre needs a reference to angular scope
            window.nodeClick = function(name) {
                var scope = angular.element(document.getElementById('recipeviewer')).scope();
                scope.$apply(function () {
                    scope.nodeClick(name);
                });
            };

            window.mapInput = function(jobName, jobOutput){
                var scope = angular.element(document.getElementById('recipeviewer')).scope();
                scope.$apply(function () {
                    scope.mapInput(jobName, jobOutput);
                });
            };

            $scope.isUpdate = true;
            if($scope.recipe){
                $scope.lastStatusChange = $scope.recipe.last_modified ? moment.duration(moment.utc($scope.recipe.last_modified).diff(moment.utc())).humanize(true) : '';
            }

            var jobs = [];
            if ($scope.recipeType.definition) {
                jobs = $scope.recipeType.definition.jobs;
            }
            var childCounts = [];
            // create graph objects
            for (var idx in jobs) {
                var job = jobs[idx];

                if ( job.dependencies === undefined || job.dependencies.length < 1) {
                    job.depStart = true;
                }
                var className = getRecipeTypeJobClassName(job);

                var html = '<div>';
                //var html = "<div onclick=\"console.log('" + job.job_type.name + "')\">";
                html += '<span class="status"></span>';
                //   html += "<span class=consumers>"+worker.consumers+"</span>";
                html += '<span class="name">';
                if (job.job_type) {
                    //console.log(job.jobType);
                    html += '<div id="' + job.name + '" class="recipeNode" onclick="nodeClick(\'' + job.name + '\')"><span class="name">' + job.job_type.getIcon() + ' ' + job.name + '</span></div>';
                    //if(jobType.name){
                    //    html += '<div id="' + job.name + '" class="recipeNode" onclick="nodeClick(\'' + job.name + '\')"><span class="name">' + jobType.getIcon() + ' ' + jobType.title + '</span></div>';
                    //} else {
                    //    html += '<div id="' + job.name + '" class="recipeNode" onclick="nodeClick(\'' + job.name + '\')"><span class="name">' + jobType.getIcon() + ' ' + job.name + '</span></div>';
                    //}

                }
                html += '</span>';
                //   html += "<span class=queue><span class=counter>"+worker.count+"</span></span>";
                html += '</div>';
                graph.setNode(job.name, {
                    labelType: 'html',
                    label: html,
                    rx: 5,
                    ry: 5,
                    padding: 0,
                    class: className
                });
                // setup edges
                for (var d in job.dependencies) {
                    var dep = job.dependencies[d];

                    if (dep.name) {
                        graph.setEdge(dep.name, job.name, {
                            //labelType: 'html',
                            //label: dep.name + '-->' + job.name,
                            width: 20

                        });
                        if (childCounts[dep.name]) {
                            childCounts[dep.name] += 1;
                        } else {
                            childCounts[dep.name] = 1;
                        }
                    }
                }
            }

            // set start node and edges
            graph.setNode('start', {
                labelType: 'html',
                label: '<div id="start" class="recipeNode" onclick="nodeClick(\'start\')"><span class=name>Start</span></div>',
                rx: 5,
                ry: 5,
                padding: 0
            });
            startJob = {
                name: 'start',
                job_type: {
                    title: 'Start'
                },
                input_data: $scope.recipeType.input_data
            };
            var noDeps = _.filter(jobs, 'depStart', true);
            for (var n in noDeps) {
                graph.setEdge('start', noDeps[n].name, {
                    width: 20
                });
            }

            // set end node and edges
            graph.setNode('end', {
                labelType: 'html',
                label: '<div><span class=name>End</span></div>',
                rx: 5,
                ry: 5,
                padding: 0
            });
            var noChildren =_.filter(jobs, function (job) {
                return !childCounts[job.name];
            });
            for (var o in noChildren) {
                graph.setEdge(noChildren[o].name, 'end', {
                    width: 20
                });
            }

            // wait for current call stack to clear
            _.defer(function () {
                inner.call(render, graph);

                // Zoom and scale to fit
                var zoomScale = zoom.scale();
                var graphWidth = graph.graph().width + 40;
                var graphHeight = graph.graph().height + 40;
                var width = parseInt(svg.style("width").replace(/px/, ""));
                var height = parseInt(svg.style("height").replace(/px/, ""));
                //zoomScale = Math.min(width / graphWidth, height / graphHeight);
                //if(zoomScale<0.80){
                //  zoomScale = 0.80;
                // }
                zoomScale = 0.75;
                if(zoomScale < 1){
                    //console.log('zoomScale: ' + zoomScale);
                    var translate = [0,0];// [(width*zoomScale)-(graphWidth*zoomScale), 0];
                    zoom.translate(translate);
                    zoom.scale(zoomScale);
                    zoom.event(isUpdate ? svg.transition().duration(500) : d3.select("svg"));
                }

                // add selected class to appropriate node
                if($scope.selectedJob){
                    $('#' + $scope.selectedJob.name).addClass('selected-node');
                }
            });
        };

        var getDependents = function (name,outputName) {
            var results = [];

            _.forEach($scope.recipeType.definition.jobs, function (job, key) {
                if (job.name !== name) {
                    _.forEach(job.dependencies, function (dependency, key) {
                        if (dependency.name === name) {
                            _.forEach(dependency.connections, function (conn, key) {
                                if (conn.output === outputName) {
                                    results.push({
                                        name: job.name,
                                        output: conn.output,
                                        input: conn.input
                                    });
                                }
                            });
                        }
                    });
                }
            });
            return results;
        };

        initialize();

    }]).directive('aisScaleRecipeGraphViewer', function () {
        'use strict';
        /**
         * Usage: <ais-scale-recipe-viewer recipe="recipe" />
         */
        return {
            controller: 'aisScaleRecipeGraphViewerController',
            templateUrl: 'modules/recipes/partials/recipeGraphViewerTemplate.html',
            restrict: 'E',
            scope: {
                recipeType: '=',
                recipe: '=',
                isModified: '=modified',
                allowEdit: '=',
                hasContainer: '='
            },
            link: function (scope) {
                angular.element(document).ready(function () {
                    var elHeight = document.getElementsByClassName('recipe-viewer-title')[0].scrollHeight;
                    scope.detailMaxHeight = scope.$parent.detailMaxHeight ? scope.$parent.detailMaxHeight - elHeight : 700;
                    scope.detailContainerStyle = 'height: ' + scope.detailMaxHeight + 'px; max-height: ' + scope.detailMaxHeight + 'px; overflow-y: auto;';
                });
            }
        };

    });
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('Recipe', ['RecipeType', 'scaleService', function (RecipeType, scaleService) {
        var Recipe = function (id, created, completed, last_modified, recipe_type) {
            this.id = id;
            this.created = created;
            this.completed = completed;
            this.last_modified = last_modified;
            this.recipe_type = RecipeType.transformer(recipe_type);
        };

        // public methods
        Recipe.prototype = {
            getDuration: function () {
                return scaleService.calculateDuration(this.created, this.last_modified);
            }
        };

        // static methods, assigned to class
        Recipe.build = function (data) {
            if (data) {
                return new Recipe(
                    data.id,
                    data.created,
                    data.completed,
                    data.last_modified,
                    data.recipe_type
                );
            }
            return new Recipe();
        };

        Recipe.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(Recipe.build)
                    .filter(Boolean);
            }
            return Recipe.build(data);
        };

        return Recipe;
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('RecipeData', function () {
        var RecipeData = function (input_data, version, workspace_id) {
            this.input_data = input_data;
            this.version = version;
            this.workspace_id = workspace_id;
        };

        // static methods, assigned to class
        RecipeData.build = function (data) {
            if (data) {
                return new RecipeData(
                    data.input_data,
                    data.version,
                    data.workspace_id
                );
            }
            return new RecipeData();
        };

        RecipeData.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(RecipeData.build)
                    .filter(Boolean);
            }
            return RecipeData.build(data);
        };

        return RecipeData;
    });
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('RecipeDetails', ['RecipeData', 'RecipeTypeDefinition', 'RecipeType', 'RecipeTypeDetail', 'RecipeJobContainer', 'scaleConfig', function (RecipeData, RecipeTypeDefinition, RecipeType, RecipeTypeDetail, RecipeJobContainer, scaleConfig) {
        var RecipeDetails = function (id, created, completed, last_modified, data, recipe_type, recipe_type_rev, jobs) {
            this.id = id;
            this.created = created;
            this.completed = completed;
            this.completed_formatted = this.completed ? moment.utc(this.completed).toISOString() : this.completed;
            this.last_modified = last_modified;
            this.data = RecipeData.transformer(data);
            this.recipe_type = RecipeType.transformer(recipe_type);
            this.recipe_type_rev = RecipeTypeDetail.transformer(recipe_type_rev);
            this.jobs = RecipeJobContainer.transformer(jobs);
        };

        // static methods, assigned to class
        RecipeDetails.build = function (data) {
            if (data) {
                return new RecipeDetails(
                    data.id,
                    data.created,
                    data.completed,
                    data.last_modified,
                    data.data,
                    data.recipe_type,
                    data.recipe_type_rev,
                    data.jobs
                );
            }
            return new RecipeDetails();
        };

        RecipeDetails.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(RecipeDetails.build)
                    .filter(Boolean);
            }
            return RecipeDetails.build(data);
        };

        return RecipeDetails;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('RecipeJob', ['JobType', function (JobType) {
        var RecipeJob = function (id, status, job_type) {
            this.id = id;
            this.status = status;
            this.job_type = JobType.transformer(job_type);
        };

        // static methods, assigned to class
        RecipeJob.build = function (data) {
            if (data) {
                return new RecipeJob(
                    data.id,
                    data.status,
                    data.job_type
                );
            }
            return new RecipeJob();
        };

        RecipeJob.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(RecipeJob.build)
                    .filter(Boolean);
            }
            return RecipeJob.build(data);
        };

        return RecipeJob;
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('RecipeJobContainer', ['RecipeJob', function (RecipeJob) {
        var RecipeJobContainer = function (job_name, job) {
            this.job_name = job_name;
            this.job = RecipeJob.transformer(job);
        };

        // static methods, assigned to class
        RecipeJobContainer.build = function (data) {
            if (data) {
                return new RecipeJobContainer(
                    data.job_name,
                    data.job
                );
            }
            return new RecipeJobContainer();
        };

        RecipeJobContainer.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(RecipeJobContainer.build)
                    .filter(Boolean);
            }
            return RecipeJobContainer.build(data);
        };

        return RecipeJobContainer;
    }]);
})();
(function () {
    'use strict';

    angular.module('scaleApp').factory('RecipeType', ['scaleConfig', 'RecipeTypeDefinition', function (scaleConfig, RecipeTypeDefinition) {
        var RecipeType = function (id, name, version, title, description, is_active, definition, revision_num, created,  last_modified, archived, trigger_rule) {
            this.id = id;
            this.name = name;
            this.version = version;
            this.title = title;
            this.description = description;
            this.is_active = is_active;
            this.definition = definition ? RecipeTypeDefinition.transformer(definition) : new RecipeTypeDefinition();
            this.revision_num = revision_num;
            this.created = created;
            this.last_modified = last_modified;
            this.archived = archived;
            this.trigger_rule = trigger_rule;
            this.modified = false;
        };

        // static methods, assigned to class
        RecipeType.build = function (data) {
            if(data){
                return new RecipeType(
                    data.id,
                    data.name,
                    data.version,
                    data.title,
                    data.description,
                    data.is_active,
                    data.definition,
                    data.revision_num,
                    data.created,
                    data.last_modified,
                    data.archived,
                    data.trigger_rule
                );
            }
            return new RecipeType();
        };

        RecipeType.transformer = function (data) {
            if (angular.isArray(data)) {
                return data.map(RecipeType.build);
            }
            return RecipeType.build(data);
        };

        return RecipeType;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('RecipeTypeDefinition', ['scaleConfig', 'RecipeTypeDefinitionJob', 'JobTypeInputData', function (scaleConfig, RecipeTypeDefinitionJob, JobTypeInputData) {

        var self = this;
        // private methods
        var RecipeTypeDefinition = function (input_data, version, jobs) {
            this.input_data = input_data ? JobTypeInputData.transformer(input_data) : [];
            this.version = version || '1.0';
            this.jobs = jobs ? RecipeTypeDefinitionJob.transformer(jobs) : [];
        };

        var getJobName = function(jobs, jobName){
            var theName = jobName;
            var existing = _.find(jobs, { 'name': jobName });
            var idx = 2;
            while(existing){
                theName = jobName + '-' + idx;
                existing = _.find(jobs, { 'name': theName });
                idx++;
            }
            return theName;
        };

        // public methods
        RecipeTypeDefinition.prototype = {
            addJob: function (jobType) {
                var jname = getJobName(this.jobs, jobType.name);
                console.log(jname);
                var job = {
                    dependencies: [],
                    recipe_inputs: [],
                    name: jname,
                    job_type_id: jobType.id,
                    job_type: jobType
                };
                this.jobs.push(job);
            }
        };

        // static methods, assigned to class
        RecipeTypeDefinition.build = function (data) {
            if(data){
                return new RecipeTypeDefinition(
                    data.input_data,
                    data.version,
                    data.jobs
                );
            }
            return new RecipeTypeDefinition();
        };

        RecipeTypeDefinition.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(RecipeTypeDefinition.build);
            }
            return RecipeTypeDefinition.build(data);
        };

        return RecipeTypeDefinition;
    }]);
})();

(function(){
    'use strict';

    angular.module('scaleApp').factory('RecipeTypeDefinitionJob', ['scaleConfig', 'JobTypeDetails', function (scaleConfig, JobTypeDetails) {
        // private methods
        var RecipeTypeDefinitionJob = function (recipe_inputs, name, job_type, dependencies) {
            this.recipe_inputs = recipe_inputs;
            this.name = name;
            this.job_type = job_type;
            //this.job_type = {
            //    name: job_type.name,
            //    version: job_type.version
            //};
            this.dependencies = dependencies || [];
        };

        // static methods, assigned to class
        RecipeTypeDefinitionJob.build = function (data) {
            if (data) {
                return new RecipeTypeDefinitionJob(
                    data.recipe_inputs,
                    data.name,
                    data.job_type,
                    data.dependencies
                );
            }
            return new RecipeTypeDefinitionJob();
        };

        RecipeTypeDefinitionJob.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(RecipeTypeDefinitionJob.build);
            }
            return RecipeTypeDefinitionJob.build(data);
        };


        return RecipeTypeDefinitionJob;

    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('RecipeTypeDetail', ['scaleConfig', 'RecipeTypeDefinition', 'JobTypeDetails', function (scaleConfig, RecipeTypeDefinition, JobTypeDetails) {
        var RecipeTypeDetail = function (id, name, version, title, description, is_active, definition, created, last_modified, archived, trigger_rule, job_types) {
            this.id = id;
            this.name = name;
            this.version = version;
            this.title = title;
            this.description = description;
            this.is_active = is_active;
            this.definition = RecipeTypeDefinition.transformer(definition);
            this.created = created;
            this.last_modified = last_modified;
            this.archived = archived;
            this.trigger_rule = trigger_rule;
            this.job_types = JobTypeDetails.transformer(job_types);
            this.modified = false;
        };

        // static methods, assigned to class
        RecipeTypeDetail.build = function (data) {
            if (data) {
                return new RecipeTypeDetail(
                    data.id,
                    data.name,
                    data.version,
                    data.title,
                    data.description,
                    data.is_active,
                    data.definition,
                    data.created,
                    data.last_modified,
                    data.archived,
                    data.trigger_rule,
                    data.job_types
                );
            }
            return new RecipeTypeDetail();
        };

        RecipeTypeDetail.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(RecipeTypeDetail.build);
            }
            return RecipeTypeDetail.build(data);
        };

        return RecipeTypeDetail;
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').factory('RecipeTypeValidation', ['RecipeTypeDefinition', function (RecipeTypeDefinition) {

        var getRecipeTypeValidationJobs = function(jobs){
            var jobsOut = [];
            _.forEach(jobs, function(job){
               jobsOut.push({
                   recipe_inputs: job.recipe_inputs,
                   name: job.name,
                   job_type: {
                       name: job.job_type.name,
                       version: job.job_type.version
                   },
                   dependencies: job.dependencies
               })
            });
            return jobsOut;
        }
        var RecipeTypeValidation = function (id, name, version, title, description, definition, trigger_rule) {
            if(id){
                this.id = id;
            }
            this.name = name;
            this.version = version;
            this.title = title;
            this.description = description;
            //this.definition = definition ? RecipeTypeDefinition.transformer(definition) : new RecipeTypeDefinition();
            this.definition = {
                input_data: definition.input_data,
                version: definition.version,
                jobs: getRecipeTypeValidationJobs(definition.jobs)
            };
            this.trigger_rule = trigger_rule;
        };

        // static methods, assigned to class
        RecipeTypeValidation.build = function (data) {
            if (data) {
                return new RecipeTypeValidation(
                    data.id,
                    data.name,
                    data.version,
                    data.title,
                    data.description,
                    data.definition,
                    data.trigger_rule
                );
            }
            return new RecipeTypeValidation();
        };

        RecipeTypeValidation.transformer = function (data) {
            if (angular.isArray(data)) {
                return data
                    .map(RecipeTypeValidation.build);
            }
            return RecipeTypeValidation.build(data);
        };

        return RecipeTypeValidation;
    }]);
})();
(function () {
    'use strict';
    /**
     *
     */
    angular.module('scaleApp').service('recipeService', ['$http', '$q', '$timeout', 'scaleConfig', 'RecipeType', 'RecipeTypeDetail', 'Recipe', 'RecipeDetails', 'RecipeTypeValidation', function ($http, $q, $timeout, scaleConfig, RecipeType, RecipeTypeDetail, Recipe, RecipeDetails, RecipeTypeValidation) {
        var getRecipesParams = function (page, page_size, started, ended, order, completed, recipe_type_id, recipe_type_name, url) {
            return {
                page: page,
                page_size: page_size,
                started: started,
                ended: ended,
                order: order,
                completed: completed,
                recipe_type_id: recipe_type_id,
                recipe_type_name: recipe_type_name,
                url: url
            };
        };

        return {
            getRecipeTypes: function () {
                var d = $q.defer();
                $http.get(scaleConfig.urls.apiPrefix + 'recipe-types/').success(function (data) {
                    d.resolve(RecipeType.transformer(data.results));
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },

            getRecipeTypeDetail: function (id) {
              var d = $q.defer();

              $http.get(scaleConfig.urls.apiPrefix + 'recipe-types/' + id + '/').success(function (data) {
                var returnData = RecipeTypeDetail.transformer(data);
                d.resolve(returnData);
              });
              return d.promise;
            },

            getRecipes: function (params) {
                params = params || getRecipesParams();
                var d = $q.defer();

                $http({
                    url: params.url ? params.url : scaleConfig.urls.apiPrefix + 'recipes/',
                    method: 'GET',
                    params: params
                }).success(function (data) {
                    data.results = Recipe.transformer(data.results);
                    d.resolve(data);
                }).error(function (error) {
                    d.reject(error);
                });

                return d.promise;
            },

            getRecipeDetails: function (id) {
                var d = $q.defer();
                $http.get(scaleConfig.urls.apiPrefix + 'recipes/' + id + '/').success(function (data) {
                    var result = RecipeDetails.transformer(data);
                    d.resolve(result);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            },

            saveRecipeType: function(recipeType) {
                var d = $q.defer();
                var cleanRecipeType = RecipeTypeValidation.transformer(recipeType);

                if(!cleanRecipeType.id){
                    $http.post(scaleConfig.urls.apiPrefix + 'recipe-types/', cleanRecipeType).success(function (result) {
                        recipeType.id = result;
                        d.resolve(recipeType);
                    }).error(function(error){
                        d.reject(error);
                    });
                } else {
                    $http.patch(scaleConfig.urls.apiPrefix + 'recipe-types/' + cleanRecipeType.id + '/', cleanRecipeType).success(function (result) {
                        recipeType = result;
                        d.resolve(recipeType);
                    }).error(function(error){
                        d.reject(error);
                    });
                }

                return d.promise;
            },

            validateRecipeType: function (recipeType) {
                var d = $q.defer();
                var cleanRecipeType = RecipeTypeValidation.transformer(recipeType);

                $http.post(scaleConfig.urls.apiPrefix + 'recipe-types/validation/', cleanRecipeType).success(function (result) {
                    d.resolve(result);
                }).error(function(error){
                    d.reject(error);
                });

                return d.promise;
            }
        };
    }]);
})();

(function () {
    'use strict';

    angular.module('scaleApp').service('workspacesService', ['$http', '$q', '$resource', 'scaleConfig', function($http, $q, $resource, scaleConfig) {

        return {
            getWorkspaces: function () {
                var d = $q.defer();
                var url = scaleConfig.urls.apiPrefix + 'workspaces/';

                $http({
                    url: url,
                    method: 'GET'
                }).success(function (data) {
                    d.resolve(data.results);
                }).error(function (error) {
                    d.reject(error);
                });
                return d.promise;
            }//,
            //getWorkspaceDetails: function(id) {
            //
            //}
        };
    }]);
})();

/**
 * @author Dimitry Kudrayvtsev
 * @version 2.1
 */

 var updateWindow = function(){
    //  x = w.innerWidth || e.clientWidth || g.clientWidth;
    //  y = w.innerHeight|| e.clientHeight|| g.clientHeight;
     //
    //  svg.attr("width", x).attr("height", y);
    console.log('resize');
 };

 window.onresize = updateWindow;

d3.gantt = function() {
    var FIT_TIME_DOMAIN_MODE = "fit";
    var FIXED_TIME_DOMAIN_MODE = "fixed";

    var margin = {
		top : 20,
		right : 20,
		bottom : 20,
		left : 60
    };
    var timeDomainStart = d3.time.day.offset(new Date(),-3);
    var timeDomainEnd = d3.time.hour.offset(new Date(),+3);
    var timeDomainMode = FIT_TIME_DOMAIN_MODE;// fixed or fit
    var taskTypes = [];
    var taskStatus = [];
    var height = document.body.clientHeight - margin.top - margin.bottom-5;
    var width = document.body.clientWidth - margin.right - margin.left-5;
	var renderTo = "body";
	var begin = '';
	var ended = '';

    var tickFormat = "%H:%M:%S";

    var keyFunction = function(d) {
		return d[begin] + d.taskName + d[ended];
    };

    var rectTransform = function(d) {
		return "translate(" + x(d[begin]) + "," + y(d.taskName) + ")";
    };

    var x = d3.time.scale().domain([ timeDomainStart, timeDomainEnd ]).range([ 0, width ]).clamp(true);

    var y = d3.scale.ordinal().domain(taskTypes).rangeRoundBands([ 0, height - margin.top - margin.bottom ], .1);

    var xAxis = d3.svg.axis().scale(x).orient("bottom").tickFormat(d3.time.format(tickFormat)).tickSubdivide(true)
	    .tickSize(8).tickPadding(8);

    var yAxis = d3.svg.axis().scale(y).orient("left").tickSize(0);

    var initTimeDomain = function(tasks) {
	if (timeDomainMode === FIT_TIME_DOMAIN_MODE) {
	    if (tasks === undefined || tasks.length < 1) {
		timeDomainStart = d3.time.day.offset(new Date(), -3);
		timeDomainEnd = d3.time.hour.offset(new Date(), +3);
		return;
	    }
	    tasks.sort(function(a, b) {
		return a[ended] - b[ended];
	    });
	    timeDomainEnd = tasks[tasks.length - 1][ended];
	    tasks.sort(function(a, b) {
		return a[begin] - b[begin];
	    });
	    timeDomainStart = tasks[0][begin];
	}
    };

    var initAxis = function() {
	x = d3.time.scale().domain([ timeDomainStart, timeDomainEnd ]).range([ 0, width ]).clamp(true);
	y = d3.scale.ordinal().domain(taskTypes).rangeRoundBands([ 0, height - margin.top - margin.bottom ], .1);
	xAxis = d3.svg.axis().scale(x).orient("bottom").ticks(Math.ceil(width/150)).tickFormat(d3.time.format(tickFormat)).tickSubdivide(true)
		.tickSize(8).tickPadding(8);

	yAxis = d3.svg.axis().scale(y).orient("left").tickSize(0);
    };

    function gantt(tasks) {

	initTimeDomain(tasks);
	initAxis();

	var svg = d3.select(renderTo)
	.append("svg")
	.attr("class", "chart")
	.attr("width", width + margin.left + margin.right)
	.attr("height", height + margin.top + margin.bottom)
	.append("g")
        .attr("class", "gantt-chart")
	.attr("width", width + margin.left + margin.right)
	.attr("height", height + margin.top + margin.bottom)
	.attr("transform", "translate(" + margin.left + ", " + margin.top + ")");

      svg.selectAll(".chart")
	 .data(tasks, keyFunction).enter()
	 .append("rect")
	 .attr("rx", 5)
         .attr("ry", 5)
	 .attr("class", function(d){
	     if(taskStatus[d.status] == null){ return "bar";}
	     return taskStatus[d.status];
	     })
	 .attr("y", 0)
	 .attr("transform", rectTransform)
	 .attr("height", function(d) { return y.rangeBand(); })
	 .attr("width", function(d) {
	     return (x(d[ended]) - x(d[begin]));
	     });


	 svg.append("g")
	 .attr("class", "x axis")
	 .attr("transform", "translate(0, " + (height - margin.top - margin.bottom) + ")")
	 .transition()
	 .call(xAxis);

	 svg.append("g").attr("class", "y axis").transition().call(yAxis);

	 return gantt;

    };

    gantt.redraw = function(tasks) {
        console.log('redraw');
	initTimeDomain(tasks);
	initAxis();

        var svg = d3.select("svg");

        var ganttChartGroup = svg.select(".gantt-chart");
        var rect = ganttChartGroup.selectAll("rect").data(tasks, keyFunction);

        rect.enter()
         .insert("rect",":first-child")
         .attr("rx", 5)
         .attr("ry", 5)
	 .attr("class", function(d){
	     if(taskStatus[d.status] == null){ return "bar";}
	     return taskStatus[d.status];
	     })
	 .transition()
	 .attr("y", 0)
	 .attr("transform", rectTransform)
	 .attr("height", function(d) { return y.rangeBand(); })
	  .attr("width", function(d) {
	     return (x(d[ended]) - x(d[begin]));
	     });

        rect.transition()
          .attr("transform", rectTransform)
	 .attr("height", function(d) { return y.rangeBand(); })
	 .attr("width", function(d) {
	     return (x(d[ended]) - x(d[begin]));
	     });

	rect.exit().remove();

	svg.select(".x").transition().call(xAxis);
	svg.select(".y").transition().call(yAxis);

	return gantt;
    };

    gantt.margin = function(value) {
	if (!arguments.length)
	    return margin;
	margin = value;
	return gantt;
    };

    gantt.timeDomain = function(value) {
	if (!arguments.length)
	    return [ timeDomainStart, timeDomainEnd ];
	timeDomainStart = +value[0], timeDomainEnd = +value[1];
	return gantt;
    };

    /**
     * @param {string}
     *                vale The value can be "fit" - the domain fits the data or
     *                "fixed" - fixed domain.
     */
    gantt.timeDomainMode = function(value) {
	if (!arguments.length)
	    return timeDomainMode;
        timeDomainMode = value;
        return gantt;

    };

    gantt.taskTypes = function(value) {
	if (!arguments.length)
	    return taskTypes;
	taskTypes = value;
	return gantt;
    };

    gantt.taskStatus = function(value) {
	if (!arguments.length)
	    return taskStatus;
	taskStatus = value;
	return gantt;
    };

	gantt.begin = function(value){
		if(!arguments.length){
			return begin;
		}
		begin = value;
		return gantt;
	};

	gantt.ended = function(value){
		if(!arguments.length){
			return ended;
		}
		ended = value;
		return gantt;
	};

    gantt.width = function(value) {
	if (!arguments.length)
	    return width;
	width = +value;
	return gantt;
    };

    gantt.height = function(value) {
	if (!arguments.length)
	    return height;
	height = +value;
	return gantt;
    };

    gantt.tickFormat = function(value) {
	if (!arguments.length)
	    return tickFormat;
	tickFormat = value;
	return gantt;
    };

	gantt.renderTo = function(value) {
		if(!arguments.length){
			return renderTo;
		}
		renderTo = value;
		return gantt;
	};



    return gantt;
};

function Gauge(placeholderName, configuration)
{
    this.placeholderName = placeholderName;

    var self = this; // for internal d3 functions

    this.configure = function(configuration)
    {
        this.config = configuration;

        this.config.size = this.config.size * 0.9;

        this.config.raduis = this.config.size * 0.97 / 2;
        this.config.cx = this.config.size / 2;
        this.config.cy = this.config.size / 2;

        this.config.min = undefined != configuration.min ? configuration.min : 0;
        this.config.max = undefined != configuration.max ? configuration.max : 100;
        this.config.range = this.config.max - this.config.min;

        this.config.majorTicks = configuration.majorTicks || 5;
        this.config.minorTicks = configuration.minorTicks || 2;

        this.config.greenColor 	= configuration.greenColor || "#8fca0e";
        this.config.yellowColor = configuration.yellowColor || "#ffc317";
        this.config.redColor 	= configuration.redColor || "#f54d36";

        this.config.transitionDuration = configuration.transitionDuration || 500;
    };

    this.render = function()
    {
        this.body = d3.select("#" + this.placeholderName)
            .append("svg:svg")
            .attr("class", "gauge")
            .attr("width", this.config.size)
            .attr("height", this.config.size);

        this.body.append("svg:circle")
            .attr("class", "outer-circle")
            .attr("cx", this.config.cx)
            .attr("cy", this.config.cy)
            .attr("r", this.config.raduis * 0.95)
            .style("fill", "#ccc");
            /*.style("stroke", "#000")
            .style("stroke-width", "0.5px");*/

        this.body.append("svg:circle")
            .attr("cx", this.config.cx)
            .attr("cy", this.config.cy)
            .attr("r", 0.9 * this.config.raduis)
            .style("fill", "#fff")
            .style("stroke", "#e0e0e0")
            .style("stroke-width", "2px");

        for (var greenIdx in this.config.greenZones)
        {
            this.drawBand(this.config.greenZones[greenIdx].from, this.config.greenZones[greenIdx].to, self.config.greenColor);
        }

        for (var yellowIdx in this.config.yellowZones)
        {
            this.drawBand(this.config.yellowZones[yellowIdx].from, this.config.yellowZones[yellowIdx].to, self.config.yellowColor);
        }

        for (var redIdx in this.config.redZones)
        {
            this.drawBand(this.config.redZones[redIdx].from, this.config.redZones[redIdx].to, self.config.redColor);
        }

        var fontSize = 0;

        if (undefined != this.config.label)
        {
            fontSize = Math.round(this.config.size / 9);
            this.body.append("svg:text")
                .attr("x", this.config.cx)
                .attr("y", this.config.cy / 2 + fontSize / 2)
                .attr("dy", fontSize / 2)
                .attr("text-anchor", "middle")
                .text(this.config.label)
                .style("font-size", fontSize + "px")
                .style("fill", "#333")
                .style("stroke-width", "0px");
        }

        fontSize = Math.round(this.config.size / 16);
        var majorDelta = this.config.range / (this.config.majorTicks - 1);
        for (var major = this.config.min; major <= this.config.max; major += majorDelta)
        {
            var minorDelta = majorDelta / this.config.minorTicks,
                point1 = 0,
                point2 = 0;
            for (var minor = major + minorDelta; minor < Math.min(major + majorDelta, this.config.max); minor += minorDelta)
            {
                point1 = this.valueToPoint(minor, 0.75);
                point2 = this.valueToPoint(minor, 0.85);

                this.body.append("svg:line")
                    .attr("x1", point1.x)
                    .attr("y1", point1.y)
                    .attr("x2", point2.x)
                    .attr("y2", point2.y)
                    .style("stroke", "#666")
                    .style("stroke-width", "1px");
            }

            point1 = this.valueToPoint(major, 0.7);
            point2 = this.valueToPoint(major, 0.85);

            this.body.append("svg:line")
                .attr("x1", point1.x)
                .attr("y1", point1.y)
                .attr("x2", point2.x)
                .attr("y2", point2.y)
                .style("stroke", "#333")
                .style("stroke-width", "2px");

            if (major == this.config.min || major == this.config.max)
            {
                var point = this.valueToPoint(major, 0.63);

                this.body.append("svg:text")
                    .attr("x", point.x)
                    .attr("y", point.y)
                    .attr("dy", fontSize / 3)
                    .attr("text-anchor", major == this.config.min ? "start" : "end")
                    .text(major)
                    .style("font-size", fontSize + "px")
                    .style("fill", "#333")
                    .style("stroke-width", "0px");
            }
        }

        var pointerContainer = this.body.append("svg:g").attr("class", "pointerContainer");

        var midValue = (this.config.min + this.config.max) / 2;

        var pointerPath = this.buildPointerPath(midValue);

        var pointerLine = d3.svg.line()
            .x(function(d) { return d.x })
            .y(function(d) { return d.y })
            .interpolate("basis");

        pointerContainer.selectAll("path")
            .data([pointerPath])
            .enter()
            .append("svg:path")
            .attr("d", pointerLine)
            .style("fill", "#888");

        pointerContainer.append("svg:circle")
            .attr("cx", this.config.cx)
            .attr("cy", this.config.cy)
            .attr("r", 0.12 * this.config.raduis)
            .style("fill", "#888");

        fontSize = Math.round(this.config.size / 10);
        pointerContainer.selectAll("text")
            .data([midValue])
            .enter()
            .append("svg:text")
            .attr("x", this.config.cx)
            .attr("y", this.config.size - this.config.cy / 4 - fontSize)
            .attr("dy", fontSize / 2)
            .attr("text-anchor", "middle")
            .style("font-size", fontSize + "px")
            .style("fill", "#000")
            .style("stroke-width", "0px");

        this.redraw(this.config.min, 0);
    };

    this.buildPointerPath = function(value)
    {
        var delta = this.config.range / 13;

        var head = valueToPoint(value, 0.85);
        var head1 = valueToPoint(value - delta, 0.12);
        var head2 = valueToPoint(value + delta, 0.12);

        var tailValue = value - (this.config.range * (1/(270/360)) / 2);
        var tail = valueToPoint(tailValue, 0.28);
        var tail1 = valueToPoint(tailValue - delta, 0.12);
        var tail2 = valueToPoint(tailValue + delta, 0.12);

        return [head, head1, tail2, tail, tail1, head2, head];

        function valueToPoint(value, factor)
        {
            var point = self.valueToPoint(value, factor);
            point.x -= self.config.cx;
            point.y -= self.config.cy;
            return point;
        }
    };

    this.drawBand = function(start, end, color)
    {
        if (0 >= end - start) return;

        this.body.append("svg:path")
            .style("fill", color)
            .attr("d", d3.svg.arc()
                .startAngle(this.valueToRadians(start))
                .endAngle(this.valueToRadians(end))
                .innerRadius(0.65 * this.config.raduis)
                .outerRadius(0.85 * this.config.raduis))
            .attr("transform", function() { return "translate(" + self.config.cx + ", " + self.config.cy + ") rotate(270)" });
    };

    this.redraw = function(value, transitionDuration)
    {
        var pointerContainer = this.body.select(".pointerContainer");

        pointerContainer.selectAll("text").text(Math.round(value));

        var pointer = pointerContainer.selectAll("path");
        pointer.transition()
            .duration(undefined != transitionDuration ? transitionDuration : this.config.transitionDuration)
            //.delay(0)
            //.ease("linear")
            //.attr("transform", function(d)
            .attrTween("transform", function()
            {
                var pointerValue = value;
                if (value > self.config.max) pointerValue = self.config.max + 0.02*self.config.range;
                else if (value < self.config.min) pointerValue = self.config.min - 0.02*self.config.range;
                var targetRotation = (self.valueToDegrees(pointerValue) - 90);
                var currentRotation = self._currentRotation || targetRotation;
                self._currentRotation = targetRotation;

                return function(step)
                {
                    var rotation = currentRotation + (targetRotation-currentRotation)*step;
                    return "translate(" + self.config.cx + ", " + self.config.cy + ") rotate(" + rotation + ")";
                }
            });

        var outerCircle = this.body.select(".outer-circle")
            .transition()
            .duration(750)
            .style("fill", function () {
                var i = parseInt(value);
                if (i > 0 && i < 75) {
                    return self.config.greenColor;
                } else if (i >= 75 && i < 90) {
                    return self.config.yellowColor;
                } else {
                    return self.config.redColor;
                }
            });
    };

    this.valueToDegrees = function(value)
    {
        // thanks @closealert
        //return value / this.config.range * 270 - 45;
        return value / this.config.range * 270 - (this.config.min / this.config.range * 270 + 45);
    };

    this.valueToRadians = function(value)
    {
        return this.valueToDegrees(value) * Math.PI / 180;
    };

    this.valueToPoint = function(value, factor)
    {
        return { 	x: this.config.cx - this.config.raduis * factor * Math.cos(this.valueToRadians(value)),
            y: this.config.cy - this.config.raduis * factor * Math.sin(this.valueToRadians(value)) 		};
    };

    // initialization
    this.configure(configuration);
}
/*! 
 * angular-hotkeys v1.5.0
 * https://chieffancypants.github.io/angular-hotkeys
 * Copyright (c) 2015 Wes Cruver
 * License: MIT
 */
!function(){"use strict";angular.module("cfp.hotkeys",[]).provider("hotkeys",["$injector",function(a){this.includeCheatSheet=!0,this.useNgRoute=a.has("ngViewDirective"),this.templateTitle="Keyboard Shortcuts:",this.templateHeader=null,this.templateFooter=null,this.template='<div class="cfp-hotkeys-container fade" ng-class="{in: helpVisible}" style="display: none;"><div class="cfp-hotkeys"><h4 class="cfp-hotkeys-title" ng-if="!header">{{ title }}</h4><div ng-bind-html="header" ng-if="header"></div><table><tbody><tr ng-repeat="hotkey in hotkeys | filter:{ description: \'!$$undefined$$\' }"><td class="cfp-hotkeys-keys"><span ng-repeat="key in hotkey.format() track by $index" class="cfp-hotkeys-key">{{ key }}</span></td><td class="cfp-hotkeys-text">{{ hotkey.description }}</td></tr></tbody></table><div ng-bind-html="footer" ng-if="footer"></div><div class="cfp-hotkeys-close" ng-click="toggleCheatSheet()">×</div></div></div>',this.cheatSheetHotkey="?",this.cheatSheetDescription="Show / hide this help menu",this.$get=["$rootElement","$rootScope","$compile","$window","$document",function(a,b,c,d,e){function f(a){var b={command:"⌘",shift:"⇧",left:"←",right:"→",up:"↑",down:"↓","return":"↩",backspace:"⌫"};a=a.split("+");for(var c=0;c<a.length;c++)"mod"===a[c]&&(d.navigator&&d.navigator.platform.indexOf("Mac")>=0?a[c]="command":a[c]="ctrl"),a[c]=b[a[c]]||a[c];return a.join(" + ")}function g(a,b,c,d,e,f){this.combo=a instanceof Array?a:[a],this.description=b,this.callback=c,this.action=d,this.allowIn=e,this.persistent=f,this._formated=null}function h(){for(var a=o.hotkeys.length;a--;){var b=o.hotkeys[a];b&&!b.persistent&&k(b)}}function i(){o.helpVisible=!o.helpVisible,o.helpVisible?(t=l("esc"),k("esc"),j("esc",t.description,i,null,["INPUT","SELECT","TEXTAREA"])):(k("esc"),t!==!1&&j(t))}function j(a,b,c,d,e,f){var h,i=["INPUT","SELECT","TEXTAREA"],j=Object.prototype.toString.call(a);if("[object Object]"===j&&(b=a.description,c=a.callback,d=a.action,f=a.persistent,e=a.allowIn,a=a.combo),b instanceof Function?(d=c,c=b,b="$$undefined$$"):angular.isUndefined(b)&&(b="$$undefined$$"),void 0===f&&(f=!0),"function"==typeof c){h=c,e instanceof Array||(e=[]);for(var k,l=0;l<e.length;l++)e[l]=e[l].toUpperCase(),k=i.indexOf(e[l]),-1!==k&&i.splice(k,1);c=function(a){var b=!0,c=a.target||a.srcElement,d=c.nodeName.toUpperCase();if((" "+c.className+" ").indexOf(" mousetrap ")>-1)b=!0;else for(var e=0;e<i.length;e++)if(i[e]===d){b=!1;break}b&&n(h.apply(this,arguments))}}"string"==typeof d?Mousetrap.bind(a,n(c),d):Mousetrap.bind(a,n(c));var m=new g(a,b,c,d,e,f);return o.hotkeys.push(m),m}function k(a){var b=a instanceof g?a.combo:a;if(Mousetrap.unbind(b),angular.isArray(b)){for(var c=!0,d=b.length;d--;)c=k(b[d])&&c;return c}var e=o.hotkeys.indexOf(l(b));return e>-1?(o.hotkeys[e].combo.length>1?o.hotkeys[e].combo.splice(o.hotkeys[e].combo.indexOf(b),1):o.hotkeys.splice(e,1),!0):!1}function l(a){if(!a)return o.hotkeys;for(var b,c=0;c<o.hotkeys.length;c++)if(b=o.hotkeys[c],b.combo.indexOf(a)>-1)return b;return!1}function m(a){return a.$id in p||(p[a.$id]=[],a.$on("$destroy",function(){for(var b=p[a.$id].length;b--;)k(p[a.$id].pop())})),{add:function(b){var c;return c=arguments.length>1?j.apply(this,arguments):j(b),p[a.$id].push(c),this}}}function n(a){return function(c,d){if(a instanceof Array){var e=a[0],f=a[1];a=function(a){f.scope.$eval(e)}}b.$apply(function(){a(c,l(d))})}}Mousetrap.prototype.stopCallback=function(a,b){return(" "+b.className+" ").indexOf(" mousetrap ")>-1?!1:b.contentEditable&&"true"==b.contentEditable},g.prototype.format=function(){if(null===this._formated){for(var a=this.combo[0],b=a.split(/[\s]/),c=0;c<b.length;c++)b[c]=f(b[c]);this._formated=b}return this._formated};var o=b.$new();o.hotkeys=[],o.helpVisible=!1,o.title=this.templateTitle,o.header=this.templateHeader,o.footer=this.templateFooter,o.toggleCheatSheet=i;var p=[];if(this.useNgRoute&&b.$on("$routeChangeSuccess",function(a,b){h(),b&&b.hotkeys&&angular.forEach(b.hotkeys,function(a){var c=a[2];("string"==typeof c||c instanceof String)&&(a[2]=[c,b]),a[5]=!1,j.apply(this,a)})}),this.includeCheatSheet){var q=e[0],r=a[0],s=angular.element(this.template);j(this.cheatSheetHotkey,this.cheatSheetDescription,i),(r===q||r===q.documentElement)&&(r=q.body),angular.element(r).append(c(s)(o))}var t=!1,u={add:j,del:k,get:l,bindTo:m,template:this.template,toggleCheatSheet:i,includeCheatSheet:this.includeCheatSheet,cheatSheetHotkey:this.cheatSheetHotkey,cheatSheetDescription:this.cheatSheetDescription,useNgRoute:this.useNgRoute,purgeHotkeys:h,templateTitle:this.templateTitle};return u}]}]).directive("hotkey",["hotkeys",function(a){return{restrict:"A",link:function(b,c,d){var e,f;angular.forEach(b.$eval(d.hotkey),function(b,c){f="string"==typeof d.hotkeyAllowIn?d.hotkeyAllowIn.split(/[\s,]+/):[],e=c,a.add({combo:c,description:d.hotkeyDescription,callback:b,action:d.hotkeyAction,allowIn:f})}),c.bind("$destroy",function(){a.del(e)})}}}]).run(["hotkeys",function(a){}])}(),function(a,b,c){function d(a,b,c){return a.addEventListener?void a.addEventListener(b,c,!1):void a.attachEvent("on"+b,c)}function e(a){if("keypress"==a.type){var b=String.fromCharCode(a.which);return a.shiftKey||(b=b.toLowerCase()),b}return r[a.which]?r[a.which]:s[a.which]?s[a.which]:String.fromCharCode(a.which).toLowerCase()}function f(a,b){return a.sort().join(",")===b.sort().join(",")}function g(a){var b=[];return a.shiftKey&&b.push("shift"),a.altKey&&b.push("alt"),a.ctrlKey&&b.push("ctrl"),a.metaKey&&b.push("meta"),b}function h(a){return a.preventDefault?void a.preventDefault():void(a.returnValue=!1)}function i(a){return a.stopPropagation?void a.stopPropagation():void(a.cancelBubble=!0)}function j(a){return"shift"==a||"ctrl"==a||"alt"==a||"meta"==a}function k(){if(!q){q={};for(var a in r)a>95&&112>a||r.hasOwnProperty(a)&&(q[r[a]]=a)}return q}function l(a,b,c){return c||(c=k()[a]?"keydown":"keypress"),"keypress"==c&&b.length&&(c="keydown"),c}function m(a){return"+"===a?["+"]:(a=a.replace(/\+{2}/g,"+plus"),a.split("+"))}function n(a,b){var c,d,e,f=[];for(c=m(a),e=0;e<c.length;++e)d=c[e],u[d]&&(d=u[d]),b&&"keypress"!=b&&t[d]&&(d=t[d],f.push("shift")),j(d)&&f.push(d);return b=l(d,f,b),{key:d,modifiers:f,action:b}}function o(a,c){return a===b?!1:a===c?!0:o(a.parentNode,c)}function p(a){function c(a){a=a||{};var b,c=!1;for(b in u)a[b]?c=!0:u[b]=0;c||(x=!1)}function k(a,b,c,d,e,g){var h,i,k=[],l=c.type;if(!s._callbacks[a])return[];for("keyup"==l&&j(a)&&(b=[a]),h=0;h<s._callbacks[a].length;++h)if(i=s._callbacks[a][h],(d||!i.seq||u[i.seq]==i.level)&&l==i.action&&("keypress"==l&&!c.metaKey&&!c.ctrlKey||f(b,i.modifiers))){var m=!d&&i.combo==e,n=d&&i.seq==d&&i.level==g;(m||n)&&s._callbacks[a].splice(h,1),k.push(i)}return k}function l(a,b,c,d){s.stopCallback(b,b.target||b.srcElement,c,d)||a(b,c)===!1&&(h(b),i(b))}function m(a){"number"!=typeof a.which&&(a.which=a.keyCode);var b=e(a);if(b)return"keyup"==a.type&&v===b?void(v=!1):void s.handleKey(b,g(a),a)}function o(){clearTimeout(t),t=setTimeout(c,1e3)}function q(a,b,d,f){function g(b){return function(){x=b,++u[a],o()}}function h(b){l(d,b,a),"keyup"!==f&&(v=e(b)),setTimeout(c,10)}u[a]=0;for(var i=0;i<b.length;++i){var j=i+1===b.length,k=j?h:g(f||n(b[i+1]).action);r(b[i],k,f,a,i)}}function r(a,b,c,d,e){s._directMap[a+":"+c]=b,a=a.replace(/\s+/g," ");var f,g=a.split(" ");return g.length>1?void q(a,g,b,c):(f=n(a,c),s._callbacks[f.key]=s._callbacks[f.key]||[],k(f.key,f.modifiers,{type:f.action},d,a,e),void s._callbacks[f.key][d?"unshift":"push"]({callback:b,modifiers:f.modifiers,action:f.action,seq:d,level:e,combo:a}))}var s=this;if(a=a||b,!(s instanceof p))return new p(a);s.target=a,s._callbacks={},s._directMap={};var t,u={},v=!1,w=!1,x=!1;s._handleKey=function(a,b,d){var e,f=k(a,b,d),g={},h=0,i=!1;for(e=0;e<f.length;++e)f[e].seq&&(h=Math.max(h,f[e].level));for(e=0;e<f.length;++e)if(f[e].seq){if(f[e].level!=h)continue;i=!0,g[f[e].seq]=1,l(f[e].callback,d,f[e].combo,f[e].seq)}else i||l(f[e].callback,d,f[e].combo);var m="keypress"==d.type&&w;d.type!=x||j(a)||m||c(g),w=i&&"keydown"==d.type},s._bindMultiple=function(a,b,c){for(var d=0;d<a.length;++d)r(a[d],b,c)},d(a,"keypress",m),d(a,"keydown",m),d(a,"keyup",m)}for(var q,r={8:"backspace",9:"tab",13:"enter",16:"shift",17:"ctrl",18:"alt",20:"capslock",27:"esc",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down",45:"ins",46:"del",91:"meta",93:"meta",224:"meta"},s={106:"*",107:"+",109:"-",110:".",111:"/",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},t={"~":"`","!":"1","@":"2","#":"3",$:"4","%":"5","^":"6","&":"7","*":"8","(":"9",")":"0",_:"-","+":"=",":":";",'"':"'","<":",",">":".","?":"/","|":"\\"},u={option:"alt",command:"meta","return":"enter",escape:"esc",plus:"+",mod:/Mac|iPod|iPhone|iPad/.test(navigator.platform)?"meta":"ctrl"},v=1;20>v;++v)r[111+v]="f"+v;for(v=0;9>=v;++v)r[v+96]=v;p.prototype.bind=function(a,b,c){var d=this;return a=a instanceof Array?a:[a],d._bindMultiple.call(d,a,b,c),d},p.prototype.unbind=function(a,b){var c=this;return c.bind.call(c,a,function(){},b)},p.prototype.trigger=function(a,b){var c=this;return c._directMap[a+":"+b]&&c._directMap[a+":"+b]({},a),c},p.prototype.reset=function(){var a=this;return a._callbacks={},a._directMap={},a},p.prototype.stopCallback=function(a,b){var c=this;return(" "+b.className+" ").indexOf(" mousetrap ")>-1?!1:o(b,c.target)?!1:"INPUT"==b.tagName||"SELECT"==b.tagName||"TEXTAREA"==b.tagName||b.isContentEditable},p.prototype.handleKey=function(){var a=this;return a._handleKey.apply(a,arguments)},p.init=function(){var a=p(b);for(var c in a)"_"!==c.charAt(0)&&(p[c]=function(b){return function(){return a[b].apply(a,arguments)}}(c))},p.init(),a.Mousetrap=p,"undefined"!=typeof module&&module.exports&&(module.exports=p),"function"==typeof define&&define.amd&&define(function(){return p})}(window,document);
(function () {
    'use strict';

    angular.module('scaleApp').config(['$provide', function ($provide) {
        $provide.decorator('$httpBackend', angular.mock.e2e.$httpBackendDecorator);
    }]).run(['$httpBackend', 'scaleConfig', 'XMLHttpRequest', function ($httpBackend, scaleConfig, XMLHttpRequest) {

        var getSync = function (url) {
            var request = new XMLHttpRequest();
            request.open('GET', url, false);
            request.send(null);
            return [request.status, request.response, {}];
        };

        // Status service
        var statusOverrideUrl = 'test/data/status.json';
        var statusRegex = new RegExp('^' + scaleConfig.urls.apiPrefix + 'status/', 'i');
        $httpBackend.whenGET(statusRegex).respond(function () {
            return getSync(statusOverrideUrl);
        });

        // Job type status
        var jobTypeStatusOverrideUrl = 'test/data/jobTypeStatus.json';
        var jobTypeStatusRegex = new RegExp('^' + scaleConfig.urls.apiPrefix + 'job-types/status/', 'i');
        $httpBackend.whenGET(jobTypeStatusRegex).respond(function () {
            return getSync(jobTypeStatusOverrideUrl);
        });

        // Job types
        var jobTypesOverrideUrl = 'test/data/jobTypes.json';
        var jobTypesRegex = new RegExp('^' + scaleConfig.urls.apiPrefix + 'job-types/', 'i');
        $httpBackend.whenGET(jobTypesRegex).respond(function () {
            return getSync(jobTypesOverrideUrl);
        });

        // Node status
        var nodeStatusOverrideUrl = 'test/data/nodeStatus.json';
        var nodeStatusRegex = new RegExp('^' + scaleConfig.urls.apiPrefix + 'nodes/status/', 'i');
        $httpBackend.whenGET(nodeStatusRegex).respond(function () {
            return getSync(nodeStatusOverrideUrl);
        });

        // Job load
        var jobLoadRegex = new RegExp('^' + scaleConfig.urls.apiPrefix + 'load/', 'i');
        $httpBackend.whenGET(jobLoadRegex).respond(function () {
            var numHours = moment.utc().endOf('d').diff(moment.utc().subtract(7, 'd').startOf('d'), 'h');
            var startTime = moment.utc().subtract(7, 'd').startOf('d');
            var data = {
                count: numHours,
                next: null,
                previous: null,
                results: []
            };

            for (var i = 0; i < data.count; i++) {
                data.results.push({
                    time: moment.utc(startTime).add(i, 'h').toISOString(),
                    pending_count: Math.floor(Math.random() * (100 - 20 + 1)) + 20,
                    queued_count: Math.floor(Math.random() * (100 - 20 + 1)) + 20,
                    running_count: Math.floor(Math.random() * (100 - 20 + 1)) + 20
                });
            }

            return [200, data, {}];
        });

        // For everything else, don't mock
        $httpBackend.whenGET(/^\w+.*/).passThrough();
        $httpBackend.whenPOST(/^\w+.*/).passThrough();
    }]);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInNjYWxlQ29uZmlnLmpzIiwiaGVhZGVyL2hlYWRlckRpcmVjdGl2ZS5qcyIsIm5hdmlnYXRpb24vbmF2RGlyZWN0aXZlLmpzIiwiYWJvdXQvY29udHJvbGxlcnMvYWJvdXRDb250cm9sbGVyLmpzIiwiYWRtaW4vY29udHJvbGxlcnMvYWRtaW5Mb2dpbkNvbnRyb2xsZXIuanMiLCJhZG1pbi9jb250cm9sbGVycy9sb2dvdXRDb250cm9sbGVyLmpzIiwiY2hhcnRzL2RhdGFGZWVkL2RhdGFGZWVkRGlyZWN0aXZlLmpzIiwiY2hhcnRzL2RvbnV0L2RvbnV0Q29udHJvbGxlci5qcyIsImNoYXJ0cy9kb251dC9kb251dERpcmVjdGl2ZS5qcyIsImNoYXJ0cy9ncmlkL2dyaWRDaGFydENvbnRyb2xsZXIuanMiLCJjaGFydHMvZ3JpZC9ncmlkQ2hhcnREaXJlY3RpdmUuanMiLCJjaGFydHMvaGVhbHRoL2hlYWx0aENvbnRyb2xsZXIuanMiLCJjaGFydHMvaGVhbHRoL2hlYWx0aERpcmVjdGl2ZS5qcyIsImNoYXJ0cy9qb2JMb2FkL2pvYkxvYWRDb250cm9sbGVyLmpzIiwiY2hhcnRzL2pvYkxvYWQvam9iTG9hZERpcmVjdGl2ZS5qcyIsImNoYXJ0cy9yYWRpYWxQZXJjZW50YWdlL3JhZGlhbFBlcmNlbnRhZ2VDb250cm9sbGVyLmpzIiwiY2hhcnRzL3JhZGlhbFBlcmNlbnRhZ2UvcmFkaWFsUGVyY2VudGFnZURpcmVjdGl2ZS5qcyIsImNvbW1vbi9kaXJlY3RpdmVzL2Fpc011bHRpc2VsZWN0LmpzIiwiY2hhcnRzL3RpbWVsaW5lL3RpbWVsaW5lRGlyZWN0aXZlLmpzIiwiY29tbW9uL2ZhY3Rvcmllcy9nYXVnZUZhY3RvcnkuanMiLCJjb21tb24vZmFjdG9yaWVzL2dyaWRGYWN0b3J5LmpzIiwiY29tbW9uL2ZhY3Rvcmllcy9wb2xsZXJGYWN0b3J5LmpzIiwiY29tbW9uL21vZGVscy9TdGF0dXMuanMiLCJjb21tb24vbW9kZWxzL1N0YXR1c01hc3Rlci5qcyIsImNvbW1vbi9tb2RlbHMvU3RhdHVzUmVzb3VyY2UuanMiLCJjb21tb24vbW9kZWxzL1N0YXR1c1Jlc291cmNlcy5qcyIsImNvbW1vbi9tb2RlbHMvU3RhdHVzU2NoZWR1bGVyLmpzIiwiY29tbW9uL3NlcnZpY2VzL3NjYWxlU2VydmljZS5qcyIsImNvbW1vbi9zZXJ2aWNlcy9zY2hlZHVsZXJTZXJ2aWNlLmpzIiwiY29tbW9uL3NlcnZpY2VzL3N0YXR1c1NlcnZpY2UuanMiLCJjb21tb24vc2VydmljZXMvdXNlclNlcnZpY2UuanMiLCJmZWVkL2NvbnRyb2xsZXJzL2ZlZWREZXRhaWxzQ29udHJvbGxlci5qcyIsImZlZWQvY29udHJvbGxlcnMvaW5nZXN0UmVjb3Jkc0NvbnRyb2xsZXIuanMiLCJmZWVkL21vZGVscy9GZWVkLmpzIiwiZmVlZC9tb2RlbHMvRmVlZFN0YXR1cy5qcyIsImZlZWQvc2VydmljZXMvZmVlZFNlcnZpY2UuanMiLCJqb2JzL2NvbnRyb2xsZXJzL2pvYkRldGFpbENvbnRyb2xsZXIuanMiLCJqb2JzL2NvbnRyb2xsZXJzL2pvYkV4ZWN1dGlvbkRldGFpbENvbnRyb2xsZXIuanMiLCJqb2JzL2NvbnRyb2xsZXJzL2pvYkV4ZWN1dGlvbnNDb250cm9sbGVyLmpzIiwiam9icy9jb250cm9sbGVycy9qb2JUeXBlc0NvbnRyb2xsZXIuanMiLCJqb2JzL2NvbnRyb2xsZXJzL2pvYnNDb250cm9sbGVyLmpzIiwiam9icy9kaXJlY3RpdmVzL2pvYkV4ZWN1dGlvbkxvZ0RpcmVjdGl2ZS5qcyIsImpvYnMvZGlyZWN0aXZlcy9qb2JIZWFsdGhEaXJlY3RpdmUuanMiLCJqb2JzL2RpcmVjdGl2ZXMvam9iVHlwZUludGVyZmFjZURpcmVjdGl2ZS5qcyIsImpvYnMvbW9kZWxzL0pvYi5qcyIsImpvYnMvbW9kZWxzL0pvYkRldGFpbEV2ZW50LmpzIiwiam9icy9tb2RlbHMvSm9iRGV0YWlsRXZlbnRSdWxlLmpzIiwiam9icy9tb2RlbHMvSm9iRGV0YWlsSW5wdXREYXRhLmpzIiwiam9icy9tb2RlbHMvSm9iRGV0YWlsT3V0cHV0RGF0YS5qcyIsImpvYnMvbW9kZWxzL0pvYkRldGFpbHMuanMiLCJqb2JzL21vZGVscy9Kb2JFeGVjdXRpb24uanMiLCJqb2JzL21vZGVscy9Kb2JFeGVjdXRpb25Mb2cuanMiLCJqb2JzL21vZGVscy9Kb2JUeXBlLmpzIiwiam9icy9tb2RlbHMvSm9iVHlwZURldGFpbHMuanMiLCJqb2JzL21vZGVscy9Kb2JUeXBlRXJyb3IuanMiLCJqb2JzL21vZGVscy9Kb2JUeXBlRXJyb3JNYXBwaW5nLmpzIiwiam9icy9tb2RlbHMvSm9iVHlwZUlucHV0RGF0YS5qcyIsImpvYnMvbW9kZWxzL0pvYlR5cGVJbnRlcmZhY2UuanMiLCJqb2JzL21vZGVscy9Kb2JUeXBlT3V0cHV0RGF0YS5qcyIsImpvYnMvbW9kZWxzL0pvYlR5cGVTdGF0dXMuanMiLCJqb2JzL21vZGVscy9Qcm9kdWN0LmpzIiwiam9icy9tb2RlbHMvUnVubmluZ0pvYi5qcyIsImpvYnMvbW9kZWxzL1N5c3RlbUZhaWx1cmUuanMiLCJqb2JzL3NlcnZpY2VzL2pvYkV4ZWN1dGlvblNlcnZpY2UuanMiLCJqb2JzL3NlcnZpY2VzL2pvYlNlcnZpY2UuanMiLCJqb2JzL3NlcnZpY2VzL2pvYlR5cGVTZXJ2aWNlLmpzIiwibG9hZC9jb250cm9sbGVycy9sb2FkQ29udHJvbGxlci5qcyIsImxvYWQvY29udHJvbGxlcnMvbG9hZERlcHRoQ29udHJvbGxlci5qcyIsImxvYWQvY29udHJvbGxlcnMvcXVldWVSdW5uaW5nQ29udHJvbGxlci5qcyIsImxvYWQvbW9kZWxzL1F1ZXVlU3RhdHVzLmpzIiwibG9hZC9zZXJ2aWNlcy9sb2FkU2VydmljZS5qcyIsIm1ldHJpY3MvY29udHJvbGxlcnMvbWV0cmljc0NvbnRyb2xsZXIuanMiLCJtZXRyaWNzL3NlcnZpY2VzL21ldHJpY3NTZXJ2aWNlLmpzIiwibmF2aWdhdGlvbi9jb250cm9sbGVycy9uYXZDb250cm9sbGVyLmpzIiwibmF2aWdhdGlvbi9zZXJ2aWNlcy9uYXZTZXJ2aWNlLmpzIiwibmF2aWdhdGlvbi9zZXJ2aWNlcy9zdWJuYXZTZXJ2aWNlLmpzIiwibm9kZXMvY29udHJvbGxlcnMvbm9kZURldGFpbHNDb250cm9sbGVyLmpzIiwibm9kZXMvY29udHJvbGxlcnMvbm9kZXNDb250cm9sbGVyLmpzIiwibm9kZXMvZGlyZWN0aXZlcy9ub2RlSGVhbHRoRGlyZWN0aXZlLmpzIiwibm9kZXMvbW9kZWxzL05vZGUuanMiLCJub2Rlcy9tb2RlbHMvTm9kZVJlc291cmNlcy5qcyIsIm5vZGVzL21vZGVscy9Ob2RlU3RhdHVzLmpzIiwibm9kZXMvc2VydmljZXMvbm9kZVNlcnZpY2UuanMiLCJub2Rlcy9zZXJ2aWNlcy9ub2RlVXBkYXRlU2VydmljZS5qcyIsIm92ZXJ2aWV3L2NvbnRyb2xsZXJzL292Q29udHJvbGxlci5qcyIsInJlY2lwZXMvY29udHJvbGxlcnMvcmVjaXBlRGV0YWlsc0NvbnRyb2xsZXIuanMiLCJyZWNpcGVzL2NvbnRyb2xsZXJzL3JlY2lwZUVkaXRvckNvbnRyb2xsZXIuanMiLCJyZWNpcGVzL2NvbnRyb2xsZXJzL3JlY2lwZVR5cGVzQ29udHJvbGxlci5qcyIsInJlY2lwZXMvY29udHJvbGxlcnMvcmVjaXBlc0NvbnRyb2xsZXIuanMiLCJyZWNpcGVzL2RpcmVjdGl2ZXMvcmVjaXBlR3JhcGhWaWV3ZXJEaXJlY3RpdmUuanMiLCJyZWNpcGVzL21vZGVscy9SZWNpcGUuanMiLCJyZWNpcGVzL21vZGVscy9SZWNpcGVEYXRhLmpzIiwicmVjaXBlcy9tb2RlbHMvUmVjaXBlRGV0YWlscy5qcyIsInJlY2lwZXMvbW9kZWxzL1JlY2lwZUpvYi5qcyIsInJlY2lwZXMvbW9kZWxzL1JlY2lwZUpvYkNvbnRhaW5lci5qcyIsInJlY2lwZXMvbW9kZWxzL1JlY2lwZVR5cGUuanMiLCJyZWNpcGVzL21vZGVscy9SZWNpcGVUeXBlRGVmaW5pdGlvbi5qcyIsInJlY2lwZXMvbW9kZWxzL1JlY2lwZVR5cGVEZWZpbml0aW9uSm9iLmpzIiwicmVjaXBlcy9tb2RlbHMvUmVjaXBlVHlwZURldGFpbC5qcyIsInJlY2lwZXMvbW9kZWxzL1JlY2lwZVR5cGVWYWxpZGF0aW9uLmpzIiwicmVjaXBlcy9zZXJ2aWNlcy9yZWNpcGVTZXJ2aWNlLmpzIiwid29ya3NwYWNlcy9zZXJ2aWNlcy93b3Jrc3BhY2VzU2VydmljZS5qcyIsImdhbnR0LWNoYXJ0LWQzLmpzIiwiZ2F1Z2UuanMiLCJob3RrZXlzLm1pbi5qcyIsImJhY2tlbmRTdHVicy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxDQUFBLFlBQUE7SUFDQTs7SUFFQSxJQUFBLE1BQUEsUUFBQSxPQUFBLFlBQUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOzs7SUFHQSxJQUFBLCtEQUFBLFNBQUEsZ0JBQUEsbUJBQUEsY0FBQTs7UUFFQSxhQUFBLG9CQUFBO1FBQ0EsYUFBQSxRQUFBOzs7UUFHQSxrQkFBQSxTQUFBLHVCQUFBOzs7UUFHQTthQUNBLEtBQUEsS0FBQTtnQkFDQSxZQUFBO2dCQUNBLGFBQUE7O2FBRUEsS0FBQSxlQUFBO2dCQUNBLFlBQUE7Z0JBQ0EsYUFBQTs7YUFFQSxLQUFBLGdCQUFBO2dCQUNBLFlBQUE7Z0JBQ0EsYUFBQTs7YUFFQSxLQUFBLFVBQUE7Z0JBQ0EsWUFBQTtnQkFDQSxhQUFBOzthQUVBLEtBQUEsU0FBQTtnQkFDQSxZQUFBO2dCQUNBLGFBQUE7Z0JBQ0EsZ0JBQUE7O2FBRUEsS0FBQSxpQkFBQTtnQkFDQSxZQUFBO2dCQUNBLGFBQUE7Z0JBQ0EsZ0JBQUE7O2FBRUEsS0FBQSxZQUFBO2dCQUNBLFlBQUE7Z0JBQ0EsYUFBQTtnQkFDQSxnQkFBQTs7YUFFQSxLQUFBLFVBQUE7Z0JBQ0EsWUFBQTtnQkFDQSxhQUFBOzthQUVBLEtBQUEsY0FBQTtnQkFDQSxZQUFBO2dCQUNBLGFBQUE7O2FBRUEsS0FBQSxTQUFBO2dCQUNBLFlBQUE7Z0JBQ0EsYUFBQTs7YUFFQSxLQUFBLGlCQUFBO2dCQUNBLFlBQUE7Z0JBQ0EsYUFBQTs7YUFFQSxLQUFBLGVBQUE7Z0JBQ0EsWUFBQTtnQkFDQSxhQUFBOzthQUVBLEtBQUEsWUFBQTtnQkFDQSxZQUFBO2dCQUNBLGFBQUE7Z0JBQ0EsZ0JBQUE7O2FBRUEsS0FBQSx1QkFBQTtnQkFDQSxZQUFBO2dCQUNBLGFBQUE7O2FBRUEsS0FBQSx1QkFBQTtnQkFDQSxZQUFBO2dCQUNBLGFBQUE7O2FBRUEsS0FBQSxvQkFBQTtnQkFDQSxZQUFBO2dCQUNBLGFBQUE7O2FBRUEsS0FBQSx3QkFBQTtnQkFDQSxZQUFBO2dCQUNBLGFBQUE7O2FBRUEsS0FBQSxTQUFBO2dCQUNBLFlBQUE7Z0JBQ0EsYUFBQTtnQkFDQSxnQkFBQTs7YUFFQSxLQUFBLGlCQUFBO2dCQUNBLFlBQUE7Z0JBQ0EsYUFBQTs7YUFFQSxLQUFBLG9CQUFBO2dCQUNBLFlBQUE7Z0JBQ0EsYUFBQTs7YUFFQSxLQUFBLG9CQUFBO2dCQUNBLFlBQUE7Z0JBQ0EsYUFBQTs7YUFFQSxLQUFBLHdCQUFBO2dCQUNBLFlBQUE7Z0JBQ0EsYUFBQTs7YUFFQSxVQUFBO2dCQUNBLFlBQUE7OztLQUdBLE1BQUEsVUFBQSxPQUFBO0tBQ0EsTUFBQSxnQkFBQSxPQUFBO0tBQ0EsTUFBQSxrQkFBQSxPQUFBO0tBQ0EsTUFBQSxVQUFBLE9BQUE7OztBQy9IQSxDQUFBLFlBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEscUJBQUEsSUFBQSxTQUFBLGVBQUEsWUFBQTtRQUNBLElBQUEsY0FBQTtZQUNBLG1CQUFBOztRQUVBLEtBQUEsT0FBQSxZQUFBO1lBQ0EsSUFBQSxTQUFBLEVBQUEsS0FBQTtnQkFDQSxNQUFBO2dCQUNBLEtBQUE7Z0JBQ0EsT0FBQTtnQkFDQSxPQUFBO2dCQUNBLGFBQUE7Z0JBQ0EsVUFBQTs7O1lBR0EsSUFBQSxPQUFBLFdBQUEsS0FBQTtnQkFDQSxjQUFBLE9BQUEsYUFBQTs7Z0JBRUEsSUFBQSxjQUFBLEVBQUEsS0FBQTtvQkFDQSxNQUFBO29CQUNBLEtBQUE7b0JBQ0EsT0FBQTtvQkFDQSxPQUFBO29CQUNBLGFBQUE7b0JBQ0EsVUFBQTs7O2dCQUdBLElBQUEsWUFBQSxXQUFBLEtBQUE7b0JBQ0EsbUJBQUEsWUFBQSxhQUFBOzs7Z0JBR0EsRUFBQSxNQUFBLGFBQUE7OztZQUdBLE9BQUE7Ozs7O0FDcENBLENBQUEsWUFBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFdBQUEsK0RBQUEsU0FBQSxRQUFBLFVBQUEsZUFBQTtRQUNBLE9BQUEsT0FBQSxJQUFBO1FBQ0EsT0FBQSxjQUFBLGNBQUE7O0tBRUEsVUFBQSxhQUFBLFlBQUE7Ozs7UUFJQSxPQUFBO1lBQ0EsWUFBQTtZQUNBLFVBQUE7WUFDQSxhQUFBO1lBQ0EsT0FBQTtnQkFDQSxNQUFBO2dCQUNBLFdBQUE7Z0JBQ0EsU0FBQTtnQkFDQSxZQUFBO2dCQUNBLGFBQUE7Ozs7Ozs7QUNwQkEsQ0FBQSxZQUFBO0lBQ0E7O0lBRUEsUUFBQSxPQUFBLFlBQUEsVUFBQSxtQkFBQSxZQUFBO1FBQ0EsT0FBQTtZQUNBLFVBQUE7WUFDQSxhQUFBO1lBQ0EsWUFBQTs7Ozs7QUNQQSxDQUFBLFlBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEsWUFBQSxXQUFBLG9FQUFBLFNBQUEsUUFBQSxXQUFBLFNBQUEsWUFBQTtRQUNBLElBQUEsYUFBQSxXQUFBO1lBQ0EsV0FBQSxlQUFBOztRQUVBOzs7O0FDUEEsQ0FBQSxZQUFBO0lBQ0E7O0lBRUEsUUFBQSxPQUFBLFlBQUEsV0FBQSwrRUFBQSxVQUFBLFVBQUEsWUFBQSxXQUFBLGFBQUE7O1FBRUEsSUFBQSxhQUFBLFlBQUE7WUFDQSxXQUFBLE9BQUEsWUFBQTtZQUNBLEdBQUEsQ0FBQSxXQUFBLEtBQUE7Z0JBQ0EsV0FBQSxPQUFBLFlBQUEsTUFBQTs7O1lBR0EsUUFBQSxJQUFBLFdBQUE7O1lBRUEsU0FBQSxVQUFBOztnQkFFQSxVQUFBLEtBQUE7Ozs7UUFJQTs7O0FDbkJBLENBQUEsWUFBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFdBQUEsMkVBQUEsVUFBQSxVQUFBLFlBQUEsV0FBQSxhQUFBOztRQUVBLElBQUEsYUFBQSxZQUFBO1lBQ0EsWUFBQTtZQUNBLFNBQUEsVUFBQTs7Z0JBRUEsVUFBQSxLQUFBOzs7O1FBSUE7OztBQ2JBLENBQUEsWUFBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFdBQUEsa0ZBQUEsVUFBQSxRQUFBLGFBQUEsYUFBQSxjQUFBO1FBQ0EsT0FBQSxPQUFBO1FBQ0EsT0FBQSxRQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxHQUFBO1FBQ0EsT0FBQSxTQUFBO1FBQ0EsSUFBQSxpQkFBQSxVQUFBO1lBQ0EsSUFBQSxhQUFBLE9BQUE7WUFDQSxPQUFBLE9BQUE7WUFDQSxJQUFBLE1BQUE7WUFDQSxHQUFBLE9BQUEsS0FBQTtnQkFDQSxFQUFBLFFBQUEsT0FBQSxLQUFBLFFBQUEsU0FBQSxJQUFBO29CQUNBLElBQUEsU0FBQSxPQUFBLElBQUEsSUFBQSxNQUFBLE9BQUEsWUFBQSxZQUFBO29CQUNBLElBQUEsVUFBQSxPQUFBLElBQUEsSUFBQSxNQUFBO29CQUNBLElBQUEsS0FBQSxTQUFBLE1BQUE7b0JBQ0EsT0FBQSxPQUFBLE1BQUE7b0JBQ0EsR0FBQSxXQUFBLElBQUE7d0JBQ0EsTUFBQTt3QkFDQSxPQUFBLEtBQUEsS0FBQTs7O2dCQUdBOzs7O1FBSUEsSUFBQSxhQUFBLFlBQUE7WUFDQSxJQUFBLFVBQUEsU0FBQSxNQUFBLE9BQUEsWUFBQSxZQUFBO1lBQ0EsSUFBQSxXQUFBLFNBQUEsTUFBQTs7WUFFQSxJQUFBLGFBQUE7WUFDQSxjQUFBO1lBQ0EsSUFBQSxPQUFBLE9BQUEsS0FBQTtnQkFDQSxjQUFBLGtDQUFBLE9BQUEsS0FBQSxPQUFBLGdDQUFBLGFBQUEsYUFBQSxPQUFBLE9BQUEsS0FBQSxNQUFBLFNBQUEsV0FBQSxPQUFBLE9BQUEsS0FBQSxNQUFBLE9BQUEsV0FBQTs7WUFFQSxjQUFBO1lBQ0EsSUFBQSxJQUFBLFFBQUEsT0FBQSxNQUFBO2dCQUNBLE9BQUEsR0FBQTtnQkFDQSxjQUFBO2dCQUNBLGNBQUEsZ0JBQUEsT0FBQSxNQUFBLFFBQUEsVUFBQSxPQUFBLE1BQUEsUUFBQTs7Z0JBRUEsSUFBQSxJQUFBLE9BQUEsT0FBQSxLQUFBO29CQUNBLElBQUEsT0FBQSxPQUFBLEtBQUEsT0FBQSxNQUFBLE9BQUEsTUFBQTtvQkFDQSxJQUFBLFFBQUEsT0FBQSxPQUFBLEtBQUE7b0JBQ0EsSUFBQSxPQUFBLE9BQUEsT0FBQSxLQUFBO29CQUNBLElBQUEsTUFBQTtvQkFDQSxHQUFBLE9BQUEsS0FBQSxTQUFBLFFBQUE7d0JBQ0EsR0FBQSxPQUFBLE1BQUEsVUFBQSxTQUFBOzRCQUNBLE1BQUE7OzZCQUVBLEdBQUEsT0FBQSxNQUFBLFFBQUEsVUFBQTs0QkFDQSxNQUFBOzs7b0JBR0EsR0FBQSxVQUFBLEtBQUEsU0FBQSxLQUFBLFFBQUEsYUFBQSxRQUFBLFNBQUE7d0JBQ0EsTUFBQTs7O29CQUdBLGNBQUEsYUFBQSxNQUFBLGNBQUEsT0FBQSxLQUFBLE9BQUEsTUFBQSxPQUFBLE1BQUEsUUFBQTtvQkFDQSxHQUFBLFFBQUEsU0FBQTs7d0JBRUEsY0FBQSxrQkFBQSxNQUFBLGdCQUFBLE9BQUEsS0FBQSxPQUFBLE1BQUEsT0FBQSxNQUFBLFFBQUE7O3dCQUVBOzs7d0JBR0EsY0FBQSxrQkFBQSxNQUFBLGdCQUFBLE9BQUEsS0FBQSxPQUFBLE1BQUEsT0FBQSxNQUFBLFFBQUEsK0JBQUEsYUFBQSwyQkFBQSxLQUFBLEtBQUEsUUFBQSxRQUFBOzs7O2dCQUlBLGNBQUE7O1lBRUEsY0FBQTtZQUNBLEVBQUEsWUFBQSxLQUFBOzs7UUFHQSxJQUFBLGFBQUEsVUFBQTs7WUFFQSxPQUFBLE9BQUEsUUFBQSxVQUFBLE9BQUE7Z0JBQ0EsR0FBQSxPQUFBLEtBQUE7b0JBQ0E7Ozs7O1FBS0E7UUFDQSxVQUFBLGVBQUEsWUFBQTtRQUNBLE9BQUE7WUFDQSxZQUFBO1lBQ0EsYUFBQTtZQUNBLFVBQUE7WUFDQSxPQUFBO2dCQUNBLE1BQUE7Ozs7Ozs7QUM1RkEsQ0FBQSxZQUFBO0lBQ0E7O0lBRUEsUUFBQSxPQUFBLFlBQUEsV0FBQSw0REFBQSxTQUFBLFFBQUEsVUFBQSxhQUFBO1FBQ0EsSUFBQSxRQUFBOztRQUVBLElBQUEsV0FBQSxZQUFBO1lBQ0EsSUFBQSxPQUFBOzs7Z0JBR0EsSUFBQSxVQUFBO29CQUNBLFlBQUE7OztnQkFHQSxFQUFBLFFBQUEsTUFBQSxRQUFBLFVBQUEsR0FBQTtvQkFDQSxRQUFBLEtBQUEsQ0FBQSxFQUFBLE9BQUEsR0FBQSxJQUFBLEVBQUEsT0FBQSxHQUFBOzs7O2dCQUlBLEVBQUEsUUFBQSxTQUFBLFVBQUEsSUFBQTtvQkFDQSxJQUFBLE9BQUEsRUFBQSxLQUFBLE9BQUEsU0FBQSxVQUFBLElBQUE7d0JBQ0EsT0FBQSxHQUFBLE9BQUEsR0FBQTs7b0JBRUEsSUFBQSxDQUFBLE1BQUE7d0JBQ0EsVUFBQSxLQUFBLEdBQUE7Ozs7Ozs7Z0JBT0EsTUFBQSxLQUFBO29CQUNBLFNBQUEsT0FBQTtvQkFDQSxRQUFBOzttQkFFQTtnQkFDQSxRQUFBLEdBQUEsU0FBQTtvQkFDQSxRQUFBLFNBQUE7b0JBQ0EsTUFBQTt3QkFDQSxTQUFBLE9BQUE7d0JBQ0EsTUFBQSxPQUFBO3dCQUNBLFFBQUE7NEJBQ0EsTUFBQSxZQUFBLE9BQUE7NEJBQ0EsU0FBQSxZQUFBLE9BQUE7NEJBQ0EsSUFBQSxZQUFBLE9BQUE7NEJBQ0EsV0FBQSxZQUFBLE9BQUE7NEJBQ0EsTUFBQTs0QkFDQSxPQUFBLFlBQUEsT0FBQTs0QkFDQSxRQUFBLFlBQUEsT0FBQTs0QkFDQSxXQUFBOzRCQUNBLE1BQUE7NEJBQ0EsUUFBQTs0QkFDQSxTQUFBLFlBQUEsT0FBQTs0QkFDQSxxQkFBQSxZQUFBLE9BQUE7NEJBQ0EsUUFBQSxZQUFBLE9BQUE7OztvQkFHQSxZQUFBO3dCQUNBLFVBQUE7O29CQUVBLEtBQUE7d0JBQ0EsT0FBQTs0QkFDQSxRQUFBLEdBQUEsT0FBQTs7O29CQUdBLE9BQUE7d0JBQ0EsT0FBQTs0QkFDQSxRQUFBLE9BQUEsWUFBQSxHQUFBLE9BQUEsT0FBQSxZQUFB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QUFBO29CQUNBLE9BQUEsWUFBQTs7O1lBR0EsZUFBQSxVQUFBO2lCQUNBLEtBQUEsT0FBQSxVQUFBLFVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQTtpQkFDQSxLQUFBLFVBQUEsR0FBQTtvQkFDQSxPQUFBLFlBQUE7OztZQUdBLGVBQUEsVUFBQTtpQkFDQSxLQUFBLE9BQUEsVUFBQSxVQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUE7aUJBQ0EsS0FBQSxVQUFBLEdBQUE7b0JBQ0EsSUFBQSxFQUFBLGVBQUEsV0FBQTt3QkFDQSxPQUFBLHFCQUFBOzs7O1lBSUEsZUFBQSxVQUFBO2lCQUNBLEtBQUEsT0FBQSxVQUFBLFVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQTtpQkFDQSxLQUFBLFVBQUEsR0FBQTtvQkFDQSxPQUFBLG1CQUFBOzs7WUFHQSxlQUFBLFVBQUE7aUJBQ0EsS0FBQSxPQUFBLFVBQUEsVUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBO2lCQUNBLEtBQUEsVUFBQSxHQUFBO29CQUNBLE9BQUEsZ0JBQUE7OztZQUdBLGVBQUEsVUFBQTtpQkFDQSxLQUFBLE9BQUEsVUFBQSxVQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUE7aUJBQ0EsS0FBQSxVQUFBLEdBQUE7b0JBQ0EsT0FBQSxhQUFBOzs7WUFHQSxlQUFBLFVBQUE7aUJBQ0EsS0FBQSxPQUFBLFVBQUEsVUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBO2lCQUNBLEtBQUEsVUFBQSxHQUFBO29CQUNBLE9BQUEsYUFBQSxHQUFBOzs7WUFHQSxlQUFBLFVBQUE7aUJBQ0EsS0FBQSxPQUFBLFVBQUEsVUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBO2lCQUNBLEtBQUEsVUFBQSxHQUFBO29CQUNBLE9BQUEsYUFBQTs7O1lBR0EsZUFBQSxVQUFBO2lCQUNBLEtBQUEsT0FBQSxVQUFBLFVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQTtpQkFDQSxLQUFBLFVBQUEsR0FBQTtvQkFDQSxPQUFBLGNBQUE7OztZQUdBLGVBQUEsVUFBQTtpQkFDQSxLQUFBLE9BQUEsVUFBQSxVQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUE7aUJBQ0EsS0FBQSxVQUFBLEdBQUE7b0JBQ0EsT0FBQSxZQUFBOzs7WUFHQSxlQUFBLFVBQUE7aUJBQ0EsS0FBQSxPQUFBLFVBQUEsVUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBO2lCQUNBLEdBQUEsU0FBQSxVQUFBLFFBQUE7b0JBQ0EsaUJBQUE7Ozs7O1lBS0EsSUFBQSxZQUFBLGVBQUE7aUJBQ0EsT0FBQTtpQkFDQSxLQUFBLFNBQUE7O1lBRUEsVUFBQSxPQUFBO2lCQUNBLEtBQUEsU0FBQTtpQkFDQSxLQUFBLFNBQUEsT0FBQTtpQkFDQSxLQUFBLFVBQUEsT0FBQTtpQkFDQSxNQUFBLFFBQUEsVUFBQSxHQUFBO29CQUNBLE9BQUEsWUFBQTs7aUJBRUEsTUFBQSxVQUFBLFVBQUEsR0FBQTtvQkFDQSxPQUFBLElBQUEsU0FBQTs7aUJBRUE7aUJBQ0EsU0FBQTs7WUFFQSxVQUFBLE9BQUE7aUJBQ0EsS0FBQSxTQUFBO2lCQUNBLEtBQUEsVUFBQSxHQUFBO29CQUNBLE9BQUEsWUFBQTs7aUJBRUEsS0FBQSxlQUFBO2lCQUNBLEtBQUEsS0FBQSxPQUFBLFlBQUE7aUJBQ0EsS0FBQSxLQUFBLENBQUEsT0FBQSxhQUFBLEtBQUE7aUJBQ0EsTUFBQSxXQUFBLE9BQUEsZUFBQSxVQUFBOztZQUVBLFVBQUEsT0FBQTtpQkFDQSxLQUFBLFNBQUE7aUJBQ0EsS0FBQSxVQUFBLEdBQUE7b0JBQ0EsSUFBQSxFQUFBLGVBQUEsV0FBQTt3QkFDQSxPQUFBLHFCQUFBOzs7aUJBR0EsS0FBQSxlQUFBO2lCQUNBLEtBQUEsS0FBQSxPQUFBLFlBQUE7aUJBQ0EsS0FBQSxLQUFBLE9BQUEsYUFBQTtpQkFDQSxNQUFBLFdBQUEsT0FBQSxlQUFBLFVBQUE7O1lBRUEsVUFBQSxPQUFBO2lCQUNBLEtBQUEsU0FBQTtpQkFDQSxPQUFBO2lCQUNBLEtBQUEsU0FBQTtpQkFDQSxLQUFBLFVBQUEsR0FBQTtvQkFDQSxPQUFBLGdCQUFBOztpQkFFQSxLQUFBLGVBQUE7aUJBQ0EsS0FBQSxLQUFBLE9BQUEsWUFBQTtpQkFDQSxLQUFBLEtBQUE7O1lBRUEsSUFBQSxTQUFBLFVBQUEsT0FBQTtpQkFDQSxLQUFBLFNBQUE7aUJBQ0EsS0FBQSxlQUFBO2lCQUNBLEtBQUEsS0FBQSxPQUFBLFlBQUE7aUJBQ0EsS0FBQSxLQUFBLEtBQUEsTUFBQSxPQUFBLFlBQUE7aUJBQ0EsS0FBQSxNQUFBO2lCQUNBLE1BQUEsV0FBQSxPQUFBLGVBQUEsU0FBQTs7WUFFQSxPQUFBLE9BQUE7aUJBQ0EsS0FBQSxTQUFBO2lCQUNBLEtBQUEsZUFBQTtpQkFDQSxLQUFBLEtBQUEsT0FBQSxZQUFBO2lCQUNBLEtBQUEsS0FBQSxLQUFBLE1BQUEsT0FBQSxhQUFBO2lCQUNBLEtBQUEsTUFBQTtpQkFDQSxNQUFBLGFBQUEsYUFBQSxRQUFBO2lCQUNBLEtBQUEsVUFBQSxHQUFBO29CQUNBLE9BQUEsYUFBQTs7aUJBRUEsS0FBQTs7WUFFQSxPQUFBLE9BQUE7aUJBQ0EsS0FBQSxTQUFBO2lCQUNBLEtBQUEsZUFBQTtpQkFDQSxLQUFBLEtBQUEsT0FBQSxZQUFBO2lCQUNBLEtBQUEsS0FBQSxLQUFBLE1BQUEsT0FBQSxZQUFBO2lCQUNBLEtBQUEsTUFBQTtpQkFDQSxNQUFBLGFBQUEsYUFBQSxRQUFBO2lCQUNBLEtBQUEsVUFBQSxHQUFBO29CQUNBLE9BQUEsYUFBQTs7aUJBRUEsS0FBQTs7WUFFQSxPQUFBLE9BQUE7aUJBQ0EsS0FBQSxTQUFBO2lCQUNBLEtBQUEsZUFBQTtpQkFDQSxLQUFBLEtBQUEsT0FBQSxZQUFBO2lCQUNBLEtBQUEsS0FBQSxLQUFBLE1BQUEsT0FBQSxZQUFBO2lCQUNBLEtBQUEsTUFBQTtpQkFDQSxNQUFBLGFBQUEsYUFBQSxRQUFBO2lCQUNBLEtBQUEsVUFBQSxHQUFBO29CQUNBLE9BQUEsYUFBQTs7aUJBRUEsS0FBQTs7WUFFQSxPQUFBLE9BQUE7aUJBQ0EsS0FBQSxTQUFBO2lCQUNBLEtBQUEsZUFBQTtpQkFDQSxLQUFBLEtBQUEsT0FBQSxZQUFBO2lCQUNBLEtBQUEsS0FBQSxLQUFBLE1BQUEsT0FBQSxhQUFB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QUNBLE9BQUEsWUFBQSxPQUFBO2VBQ0EsSUFBQSxRQUFBLE1BQUEsU0FBQSxJQUFBO1lBQ0EsT0FBQSxZQUFBLE9BQUE7ZUFDQTtZQUNBLE9BQUEsWUFBQSxPQUFBOzs7O0lBSUEsSUFBQSxhQUFBLFdBQUE7O1FBRUEsSUFBQSxhQUFBLE9BQUEsY0FBQTtRQUNBLElBQUEsYUFBQSxHQUFBO1lBQ0EsY0FBQTs7Ozs7UUFLQSxJQUFBLE9BQUEsU0FBQSxHQUFBLFdBQUE7UUFDQSxJQUFBLFNBQUEsR0FBQSxXQUFBLGVBQUEsTUFBQTtZQUNBLE9BQUEsU0FBQSxHQUFBLFdBQUE7Ozs7UUFJQSxJQUFBLFdBQUE7UUFDQSxJQUFBLGdCQUFBLEdBQUEsT0FBQTs7UUFFQSxJQUFBLE1BQUEsR0FBQSxJQUFBO2FBQ0EsV0FBQTthQUNBLFlBQUEsT0FBQSxPQUFBO2FBQ0EsWUFBQSxPQUFBLE9BQUE7O1FBRUEsSUFBQSxNQUFBLEdBQUEsT0FBQSxTQUFBLElBQUEsT0FBQSxPQUFBLEtBQUE7WUFDQSxPQUFBO1lBQ0EsUUFBQTtXQUNBLE9BQUEsS0FBQSxLQUFBO1lBQ0EsYUFBQSxlQUFBLE9BQUEsSUFBQSxNQUFBLE9BQUEsSUFBQTtZQUNBLFNBQUE7OztRQUdBLElBQUEsUUFBQSxJQUFBLE9BQUEsS0FBQSxLQUFBO1lBQ0EsYUFBQTs7UUFFQSxNQUFBLE9BQUE7YUFDQSxNQUFBO2dCQUNBLFdBQUEsSUFBQSxLQUFBOzthQUVBLEtBQUEsU0FBQTthQUNBLEtBQUEsS0FBQTs7UUFFQSxhQUFBLE1BQUEsT0FBQTthQUNBLE1BQUE7Z0JBQ0EsVUFBQTs7YUFFQSxLQUFBO2dCQUNBLEtBQUE7O2FBRUEsTUFBQSxRQUFBLFlBQUE7Z0JBQ0EsT0FBQTs7O1FBR0EsT0FBQSxJQUFBLE9BQUE7YUFDQSxNQUFBO2dCQUNBLFlBQUE7O2FBRUEsS0FBQSxlQUFBO2FBQ0EsS0FBQSxNQUFBOzs7UUFHQSxZQUFBLFNBQUEsWUFBQSxlQUFBO1lBQ0EsV0FBQSxVQUFBLFFBQUEsU0FBQSxHQUFBO2dCQUNBLElBQUEsT0FBQSxNQUFB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QUFBLEVBQUEsT0FBQTs7Z0JBRUEsSUFBQSxVQUFBLE9BQUEsTUFBQSxHQUFBLE9BQUE7Z0JBQ0EsSUFBQSxVQUFBLE9BQUEsTUFBQSxPQUFBLE1BQUEsU0FBQSxHQUFBLE9BQUE7Z0JBQ0EsSUFBQSxXQUFBLE9BQUEsSUFBQSxTQUFBLEtBQUEsT0FBQSxJQUFBLFNBQUE7Z0JBQ0EsSUFBQSxTQUFBO2dCQUNBLEdBQUEsV0FBQSxFQUFBO29CQUNBLFNBQUE7OztnQkFHQSxRQUFBLEdBQUEsUUFBQSxTQUFBLGlCQUFBLFVBQUEsT0FBQSxXQUFBLFdBQUEsWUFBQSxrQkFBQSxXQUFBLFFBQUEsTUFBQSxPQUFBLFNBQUEsTUFBQSxPQUFBLE9BQUEsT0FBQSxRQUFBLE1BQUE7O2dCQUVBLE1BQUEsZUFBQTs7Z0JBRUEsTUFBQSxPQUFBOzs7OztRQUtBLFNBQUEsU0FBQTtZQUNBLElBQUEsVUFBQSxLQUFBO1lBQ0EsSUFBQSxPQUFBLE1BQUEsU0FBQSxHQUFBO2dCQUNBLFVBQUEsT0FBQSxNQUFBLE9BQUEsTUFBQSxTQUFBLEdBQUEsT0FBQTs7O1lBR0EsT0FBQTtTQUNBOztRQUVBLE9BQUEsYUFBQSxTQUFBLEtBQUE7WUFDQSxHQUFBLEtBQUE7Z0JBQ0EsT0FBQSxPQUFBLElBQUEsTUFBQTs7aUJBRUE7Z0JBQ0EsT0FBQTs7O1FBR0E7O1FBRUEsVUFBQSxlQUFBLFlBQUE7UUFDQSxPQUFBO1lBQ0EsWUFBQTtZQUNBLGFBQUE7WUFDQSxVQUFBO1lBQ0EsT0FBQTtnQkFDQSxPQUFBO2dCQUNBLFNBQUE7Z0JBQ0EsT0FBQTs7Ozs7OztBQzdFQSxDQUFBLFlBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEsWUFBQSxRQUFBLGdDQUFBLFVBQUEsYUFBQTtRQUNBLElBQUEsUUFBQSxVQUFBLGlCQUFBO1FBQ0E7WUFDQSxLQUFBLGtCQUFBOztZQUVBLElBQUEsT0FBQTs7WUFFQSxLQUFBLFlBQUEsU0FBQTtZQUNBO2dCQUNBLEtBQUEsU0FBQTs7Z0JBRUEsS0FBQSxPQUFBLE9BQUEsS0FBQSxPQUFBLE9BQUE7O2dCQUVBLEtBQUEsT0FBQSxTQUFBLEtBQUEsT0FBQSxPQUFBLE9BQUE7Z0JBQ0EsS0FBQSxPQUFBLEtBQUEsS0FBQSxPQUFBLE9BQUE7Z0JBQ0EsS0FBQSxPQUFBLEtBQUEsS0FBQSxPQUFBLE9BQUE7O2dCQUVBLEtBQUEsT0FBQSxNQUFBLGFBQUEsY0FBQSxNQUFBLGNBQUEsTUFBQTtnQkFDQSxLQUFBLE9BQUEsTUFBQSxhQUFBLGNBQUEsTUFBQSxjQUFBLE1BQUE7Z0JBQ0EsS0FBQSxPQUFBLFFBQUEsS0FBQSxPQUFBLE1BQUEsS0FBQSxPQUFBOztnQkFFQSxLQUFBLE9BQUEsYUFBQSxjQUFBLGNBQUE7Z0JBQ0EsS0FBQSxPQUFBLGFBQUEsY0FBQSxjQUFBOztnQkFFQSxLQUFBLE9BQUEsY0FBQSxjQUFBLGNBQUE7Z0JBQ0EsS0FBQSxPQUFBLGNBQUEsY0FBQSxlQUFBO2dCQUNBLEtBQUEsT0FBQSxZQUFBLGNBQUEsWUFBQTs7Z0JBRUEsS0FBQSxPQUFBLHFCQUFBLGNBQUEsc0JBQUE7OztZQUdBLEtBQUEsU0FBQTtZQUNBO2dCQUNBLEtBQUEsT0FBQSxHQUFBLE9BQUEsTUFBQSxLQUFBO3FCQUNBLE9BQUE7cUJBQ0EsS0FBQSxTQUFBO3FCQUNBLEtBQUEsU0FBQSxLQUFBLE9BQUE7cUJBQ0EsS0FBQSxVQUFBLEtBQUEsT0FBQTs7Z0JBRUEsS0FBQSxLQUFBLE9BQUE7cUJBQ0EsS0FBQSxTQUFBO3FCQUNBLEtBQUEsTUFBQSxLQUFBLE9BQUE7cUJBQ0EsS0FBQSxNQUFBLEtBQUEsT0FBQTtxQkFDQSxLQUFBLEtBQUEsS0FBQSxPQUFBO3FCQUNBLE1BQUEsUUFBQTs7OztnQkFJQSxLQUFBLEtBQUEsT0FBQTtxQkFDQSxLQUFBLE1BQUEsS0FBQSxPQUFBO3FCQUNBLEtBQUEsTUFBQSxLQUFBLE9BQUE7cUJBQ0EsS0FBQSxLQUFBLE1BQUEsS0FBQSxPQUFBO3FCQUNBLE1BQUEsUUFBQTtxQkFDQSxNQUFBLFVBQUE7cUJBQ0EsTUFBQSxnQkFBQTs7Z0JBRUEsS0FBQSxJQUFBLFlBQUEsS0FBQSxPQUFBO2dCQUNB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QUFBLGdDQUFBLFVBQUEsYUFBQTtRQUNBLE9BQUE7WUFDQSwwQkFBQSxTQUFBLElBQUE7Z0JBQ0EsSUFBQSxNQUFBLEdBQUE7b0JBQ0EsSUFBQSxNQUFBLE1BQUE7d0JBQ0EsT0FBQSxJQUFBLFFBQUEsS0FBQTs7b0JBRUEsSUFBQSxPQUFBLFFBQUEsTUFBQSxLQUFBLE1BQUE7d0JBQ0EsT0FBQSxDQUFBLElBQUEsTUFBQSxRQUFBLEtBQUE7O29CQUVBLE9BQUEsQ0FBQSxJQUFBLEtBQUEsTUFBQSxRQUFBLEtBQUE7O2dCQUVBLE9BQUE7O1lBRUEsNEJBQUEsU0FBQSxJQUFBLFNBQUE7Ozs7O2dCQUtBLElBQUEsTUFBQSxHQUFBO29CQUNBLElBQUEsTUFBQSxNQUFBO3dCQUNBLE9BQUEsSUFBQSxRQUFBLFlBQUE7O29CQUVBLElBQUEsT0FBQSxRQUFBLE1BQUEsS0FBQSxNQUFBO3dCQUNBLE9BQUEsQ0FBQSxJQUFBLE1BQUEsUUFBQSxZQUFBOztvQkFFQSxJQUFBLE9BQUEsS0FBQSxRQUFBLE1BQUEsS0FBQSxLQUFBLE1BQUE7d0JBQ0EsT0FBQSxDQUFBLElBQUEsS0FBQSxNQUFBLFFBQUEsWUFBQTs7b0JBRUEsSUFBQSxPQUFBLEtBQUEsS0FBQSxRQUFBLE1BQUEsS0FBQSxLQUFBLEtBQUEsTUFBQTt3QkFDQSxPQUFBLENBQUEsSUFBQSxLQUFBLEtBQUEsTUFBQSxRQUFBLFlBQUE7O29CQUVBLE9BQUEsQ0FBQSxJQUFBLEtBQUEsS0FBQSxLQUFBLE1BQUEsUUFBQSxZQUFBOztnQkFFQSxPQUFBOztZQUVBLGlCQUFBLFlBQUE7Z0JBQ0EsSUFBQSxJQUFBO29CQUNBLElBQUE7b0JBQ0EsSUFBQSxFQUFBO29CQUNBLElBQUEsU0FBQTtvQkFDQSxJQUFBLEVBQUEsY0FBQSxFQUFBLGVBQUEsRUFBQTtvQkFDQSxJQUFBLEVBQUEsZUFBQSxFQUFBLGdCQUFBLEVBQUE7O2dCQUVBLE9BQUE7b0JBQ0EsT0FBQTtvQkFDQSxRQUFBOzs7WUFHQSxtQkFBQSxVQUFBLE9BQUEsTUFBQSxXQUFBO2dCQUNBLElBQUEs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QUFBOzs7UUFHQSxPQUFBLGNBQUEsWUFBQTtZQUNBLE9BQUEsY0FBQSxZQUFBLENBQUEsT0FBQSxjQUFBO1lBQ0EsT0FBQSxxQkFBQSxZQUFBLE9BQUEsY0FBQTtZQUNBLE9BQUEsVUFBQTtZQUNBLGVBQUEsY0FBQSxPQUFBLHNCQUFBLEtBQUEsU0FBQSxLQUFBO2dCQUNBLE9BQUEsdUJBQUE7Z0JBQ0EsT0FBQSxnQkFBQSxPQUFBLG9CQUFBLE9BQUEscUJBQUE7Z0JBQ0EsT0FBQSxVQUFBO2VBQ0EsTUFBQSxVQUFBLE9BQUE7Z0JBQ0EsUUFBQSxJQUFBO2dCQUNBLE9BQUEsU0FBQTtnQkFDQSxPQUFBLFVBQUE7Ozs7UUFJQSxPQUFBLHNCQUFBLFNBQUEsVUFBQTtZQUNBLE9BQUEsWUFBQSxZQUFBOzs7UUFHQSxPQUFBLDBCQUFBLFNBQUEsUUFBQTtZQUNBLE9BQUEsUUFBQSxZQUFBLFdBQUE7OztRQUdBLElBQUEsaUJBQUEsVUFBQSxJQUFBO1lBQ0EsT0FBQSxPQUFBLElBQUEsSUFBQTs7O1FBR0EsSUFBQSxjQUFBLFlBQUE7WUFDQSxlQUFBLGtCQUFBLEtBQUEsVUFBQSxNQUFBO2dCQUNBLE9BQUEsV0FBQSxLQUFBO2dCQUNBLE9BQUEsYUFBQSxFQUFBLE1BQUEsS0FBQSxTQUFBO2dCQUNBLE9BQUEsZUFBQSxLQUFBO2dCQUNBLElBQUEsT0FBQSxvQkFBQTtvQkFDQSxPQUFBLFlBQUEsT0FBQTt1QkFDQTtvQkFDQSxPQUFBLFVBQUE7O2dCQUVBLFFBQUEsT0FBQTtxQkFDQSxJQUFBO3dCQUNBLE9BQUE7d0JBQ0EsYUFBQTt3QkFDQSxVQUFBLFlBQUE7NEJBQ0EsSUFBQSxPQUFBLGVBQUE7Z0NBQ0EsSUFBQSxNQUFBLEVBQUEsUUFBQSxPQUFBLFlBQUEsT0FBQSxjQUFBO2dDQUNBLElBQUEsTUFBQSxHQUFBO29DQUNBLE9BQUEsWUFBQSxPQUFBLFdBQUEsTUFBQTs7Ozt1QkFJQSxJQUFBO3dCQUNBLE9BQUE7d0JBQ0EsYUFBQTt3QkFDQSxVQUFBLFlBQUE7NEJBQ0EsSUFBQSxPQUFBLGVBQUE7Z0NBQ0EsSUFBQSxNQUFBLEVBQUEsUUFBQSxPQUFBLFlBQUEsT0FBQSxjQUFBO2dDQUNBLElBQUEsT0FBQSxPQUFBLFdBQUEsU0FBQSxJQUFBO29DQUNBLE9BQUEsWUFBQSxPQUFBLFdBQUEsTUFBQTs7Ozs7ZUFLQSxNQUFBLFVBQUEsT0FBQTtnQkFDQSxRQUFBLElBQUE7Z0JBQ0EsT0FBQSxVQUFBOzs7O1FBSUEsSUFBQSxvQkFBQSxVQUFBLElBQUE7WUFDQSxPQUFBLFVBQUE7WUFDQSxlQUFBLGtCQUFBLElBQUEsS0FBQSxVQUFBLE1BQUE7Z0JBQ0EsT0FBQSx1QkFBQTtnQkFDQSxPQUFBLCtCQUFBLEVBQUEsTUFBQSxLQUFBO2dCQUNBLE9BQUEsZ0JBQUEsT0FBQSxvQkFBQSxPQUFBLHFCQUFBOztnQkFFQSxPQUFBLHNCQUFBO2dCQUNBLE9BQUEsb0JBQUEsRUFBQSxLQUFBLEtBQUEsY0FBQSxZQUFBLFNBQUE7Z0JBQ0EsSUFBQSxPQUFBLG1CQUFBO29CQUNBLEVBQUEsUUFBQSxLQUFBLGNBQUEsWUFBQSxVQUFBLFlBQUE7d0JBQ0EsSUFBQSxRQUFBLEVBQUEsS0FBQSxLQUFBLFFBQUEsUUFBQTs0QkFDQSxXQUFBLEVBQUEsT0FBQSxLQUFBLGNBQUEsWUFBQTt3QkFDQSxPQUFBLG9CQUFBLEtBQUEsQ0FBQSxNQUFBLFVBQUEsTUFBQTs7Ozs7Z0JBS0EsSUFBQSxjQUFBLEtBQUE7b0JBQ0EsV0FBQSxLQUFBOztnQkFFQSxPQUFBLHFCQUFBOztnQkFFQSxPQUFBLGNBQUE7b0JBQ0EsV0FBQSxZQUFBLE1BQUE7b0JBQ0EsV0FBQSxTQUFBOztnQkFFQSxPQUFBLGVBQUE7b0JBQ0EsV0FBQSxZQUFBLE9BQUE7b0JBQ0EsV0FBQSxTQUFBOztnQkFFQSxPQUFBLGVBQUE7b0JBQ0EsV0FBQSxZQUFBLE9BQUE7b0JBQ0EsV0FBQSxTQUFBOztlQUVBLE1BQUEsVUFBQSxPQUFBO2dCQUNBLFFBQUEsSUFBQTtlQUNBLFFBQUEsWUFBQTtnQkFDQSxPQUFBLFVBQUE7Ozs7UUFJQSxJQUFBLGFBQUEsWUFBQTtZQUNBO1lB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QSxPQUFBOzs7Ozs7Ozs7O1FBVUEsT0FBQSxVQUFBLFVBQUEsT0FBQTs7WUFFQSxPQUFBLGdCQUFBO1lBQ0EsUUFBQSxJQUFBO1lBQ0EsV0FBQSxhQUFBLE9BQUEsS0FBQSxVQUFBLE1BQUE7Z0JBQ0EsT0FBQSxjQUFBLEtBQUEsU0FBQSxRQUFBLE1BQUEsS0FBQSxTQUFBO2dCQUNBLE9BQUEsZUFBQSxLQUFBO2dCQUNBLElBQUEsZ0JBQUEsVUFBQSxLQUFBO29CQUNBLFdBQUE7b0JBQ0EsYUFBQTtvQkFDQSxPQUFBO29CQUNBLE1BQUE7b0JBQ0EsYUFBQTs7Ozs7UUFLQSxPQUFBLGdCQUFBLFlBQUE7WUFDQSxFQUFBLFFBQUEsRUFBQSxNQUFBLEtBQUEsYUFBQSxVQUFBLE9BQUE7Z0JBQ0EsVUFBQSxPQUFBLE1BQUEsSUFBQSxNQUFBOztZQUVBLE9BQUEsVUFBQTtZQUNBLEtBQUE7OztRQUdBLE9BQUEsY0FBQSxVQUFBLFlBQUE7WUFDQSxhQUFBLGNBQUEsRUFBQSxTQUFBLE9BQUEsa0JBQUEsZUFBQSxPQUFBLE9BQUEsaUJBQUE7WUFDQSxPQUFBLGdCQUFBO1lBQ0EsT0FBQSxVQUFBO1lBQ0EsWUFBQSxZQUFBLFlBQUEsS0FBQSxZQUFBO2dCQUNBLE9BQUEsV0FBQTtnQkFDQSxLQUFBO2VBQ0EsTUFBQSxVQUFBLE9BQUE7Z0JBQ0EsT0FBQSxTQUFBO2dCQUNBLFFBQUEsSUFBQTtnQkFDQSxPQUFBLFVBQUE7Ozs7UUFJQSxPQUFBLFlBQUEsVUFBQSxLQUFBO1lBQ0EsT0FBQSxnQkFBQTtZQUNBLE9BQUEsVUFBQTtZQUNBLElBQUEsaUJBQUEsSUFBQTtZQUNBLElBQUEsU0FBQTtZQUNBLFdBQUEsVUFBQSxJQUFBLElBQUEsRUFBQSxRQUFBLGNBQUEsS0FBQSxVQUFBLE1BQUE7Z0JBQ0EsT0FBQSxXQUFBO2dCQUNBLElBQUEsU0FBQTtlQUNBLE1BQUEsVUFBQSxPQUFBO2dCQUNBLE9BQUEsU0FBQTtnQkFDQSxRQUFBLElBQUE7Z0JBQ0EsSUFBQSxTQUFBO2VBQ0EsUUFBQSxZQUFBO2dCQUNBLE9BQUEsVUFBQTs7OztRQUlBLEtBQUEsVUFBQSxZQUFBO1lBQ0EsV0FBQSxZQUFBLEtBQUEsWUFBQSxLQUFBLFVBQUEsTUFBQTtnQkFDQSxPQUFBLFdBQUEsS0FBQTtnQkFDQSxPQUFBLFlBQUEsYUFBQSxLQUFBO2dCQUNBLE9BQUEsWUFBQSxPQUFBLEtBQUE7ZUFDQSxNQUFBLFVBQUEsT0FBQTtnQkFDQSxRQUFBLElBQUE7ZUFDQSxRQUFBLFlBQUE7Z0JBQ0EsT0FBQSxVQUFBOzs7O1FBSUEsS0FBQSxjQUFBLFlBQUE7WUFDQSxlQUFBLGtCQUFBLEtBQUEsVUFBQSxNQUFBO2dCQUNBLE9BQUEsZ0JBQUEsS0FBQTtnQkFDQSxPQUFBLGNBQUEsUUFBQSxFQUFBLE1BQUEsWUFBQSxPQUFBLFlBQUEsU0FBQSxJQUFBLElBQUE7Ozs7Ozs7O2dCQVFBLEtBQUEsUUFBQSxLQUFBO2VBQ0EsTUFBQSxVQUFBLE9BQUE7Z0JBQ0EsT0FBQSxVQUFBO2dCQUNBLFFBQUEsSUFBQTs7OztRQUlBLEtBQUEsYUFBQSxZQUFBO1lBQ0EsSUFBQSxPQUFBLFdBQUEsWUFBQSxhQUFBOztnQkFFQSxJQUFBLENBQUEsS0FBQSxXQUFBLE9BQUE7b0JBQ0EsS0FBQSxXQUFBLFFBQUE7b0JBQ0EsVUFBQSxPQUFBLFNBQUEsS0FBQSxXQUFBLE9BQUE7O2dCQUVBLElBQUEsQ0FBQSxLQUFBLFdBQUEsV0FBQTtvQkFDQSxLQUFBLFdBQUEsWUFBQSxPQUFBLFlBQUE7b0JBQ0EsVUFBQSxPQUFBLGFBQUEsS0FBQSxXQUFBLFdBQUE7O2dCQUVBLElBQUEsQ0FBQSxLQUFBLFdBQUEsU0FBQTtvQkFDQSxLQUFBLFdBQUEsVUFBQSxPQUFBLElBQUEsT0FBQSxtQkFBQTtvQkFDQSxVQUFBLE9BQUEsV0FBQSxLQUFBLFdBQUEsU0FBQTs7Z0JBRUEsSUFBQSxDQUFBLEtBQUEsV0FBQSxPQUFBO29CQUNBLEtBQUEsV0FBQSxRQUFBLE9BQUEsSUFBQSxPQUFBLGtCQUFBO29CQUNBLFVBQUEsT0FBQSxTQUFBLEtBQUEsV0FBQSxPQUFBOzs7WUFHQSxLQUFBO1lBQ0EsV0FBQSxPQUFBLFlBQUE7O1lBRUEsSUFBQSxXQUFBLE1BQUE7Z0JBQ0EsT0FBQSxXQUFBOztZQUVBLFdBQUEsZUFBQTs7O1FBR0EsS0FBQTs7UUFFQSxRQUFBLFFBQUEsVUFBQSxNQUFBLFlBQUE7O1lBRUEsSUFBQSxXQUFBLGFBQUE7Z0JBQ0EsU0FBQSxZQUFBLGVBQUEsWUFBQTtnQkFDQSxnQkFBQSxTQUFBLFNBQUE7O1lBRUEsT0FBQSxZQUFBLGFBQUEsZ0JBQUEscUJBQUEsZ0JBQUE7Ozs7O0FDMVVBLENBQUEsVUFBQTtJQUNBLFFBQUEsT0FBQSxZQUFBLFdBQUEsbUhBQUEsU0FBQSxRQUFBLFdBQUEsVUFBQSxVQUFBLHFCQUFBLGFBQUE7UUFDQTtRQUNBLElBQUEsYUFBQSxVQUFBOztZQUVBLE9BQUEsY0FBQTs7WUFFQSxPQUFBLGNBQUE7O1lBRUEsT0FBQSxPQUFBLGFBQUEsVUFBQSxVQUFBLFVBQUE7Z0JBQ0EsSUFBQSxPQUFBLFdBQUE7b0JBQ0Esb0JBQUEsT0FBQSxPQUFBLFVBQUEsSUFBQSxLQUFBLE1BQUEsTUFBQSxTQUFBLE9BQUE7O3dCQUVBLElBQUEsWUFBQSxPQUFBO3dCQUNBLEdBQUEsT0FBQSxVQUFBOzRCQUNBLElBQUEsTUFBQSxFQUFBLFNBQUEsSUFBQSxLQUFBOzRCQUNBLE9BQUEsYUFBQSxDQUFBLElBQUEsY0FBQSxJQUFBLEtBQUEsbUJBQUEsSUFBQSxLQUFBOzRCQUNBLEdBQUEsT0FBQSxjQUFBLEVBQUEsRUFBQSxPQUFBLGNBQUE7NEJBQ0EsT0FBQSxVQUFBOytCQUNBOzRCQUNBLElBQUEsT0FBQSxjQUFBLE9BQUEsZUFBQSxJQUFBO2dDQUNBLE9BQUEsb0JBQUEsT0FBQTs7NEJBRUEsT0FBQSxjQUFBOzs7OztZQUtBLE9BQUEsT0FBQSxXQUFBLFVBQUEsVUFBQSxVQUFBO2dCQUNBLElBQUEsT0FBQSxTQUFBO29CQUNBLEdBQUEsT0FBQSxlQUFBLE9BQUEsY0FBQSxFQUFBO3dCQUNBLFNBQUEsVUFBQTs0QkFDQSxPQUFBLGNBQUE7NEJBQ0EsSUFBQSxhQUFBLEVBQUEsU0FBQSxJQUFBLEtBQUEsU0FBQSxLQUFBOzRCQUNBLEVBQUEsU0FBQSxJQUFBLEtBQUEsU0FBQSxVQUFBOzJCQUNBOzs7Ozs7UUFNQSxPQUFBLGFBQUEsU0FBQSxLQUFBO2dCQUNBLFFBQUEsSUFBQTs7O1FBR0EsT0FBQSxnQkFBQSxVQUFBO1lBQ0EsUUFBQSxJQUFBOzs7UUFHQTs7UUFFQSxVQUFBLG1CQUFBLFlBQUE7UUFDQSxPQUFBO1lBQ0EsWUFBQTtZQUNBLGFBQUE7WUFDQSxVQUFBO1lBQ0EsT0FBQTtnQkFDQSxXQUFBOzs7Ozs7QUN6REEsQ0FBQSxZQUFBO0lBQ0E7O0lBRUEsUUFBQSxPQUFBLFlBQUEsV0FBQSxxRUFBQSxVQUFBLFlBQUEsUUFBQSxnQkFBQTtRQUNBLE9BQUEsbUJBQUE7UUFDQSxPQUFBLGlCQUFBO1FBQ0EsT0FBQSx1QkFBQTtRQUNBLE9BQUEsWUFBQTs7UUFFQSxJQUFBLG1CQUFBLFlBQUE7WUFDQSxlQUFBLGlCQUFBLE1BQUEsTUFBQSxPQUFBLFVBQUEsTUFBQSxLQUFBLE1BQUEsTUFBQSxVQUFBLE1BQUE7Z0JBQ0EsSUFBQSxLQUFBLFdBQUE7b0JBQ0EsT0FBQSxpQkFBQTtvQkFDQSxPQUFBLGdCQUFBLEtBQUE7b0JBQ0EsT0FBQSxRQUFBO29CQUNBLE9BQUEsU0FBQTs7b0JBRUEsSUFBQSxjQUFBO3dCQUNBLFdBQUE7O29CQUVBLEVBQUEsUUFBQSxLQUFBLFNBQUEsVUFBQSxRQUFBO3dCQUNBLGNBQUEsT0FBQTt3QkFDQSxPQUFBLFFBQUEsT0FBQSxRQUFBLFlBQUE7d0JBQ0EsT0FBQSxTQUFBLE9BQUEsU0FBQSxZQUFBO3dCQUNBLFNBQUEsS0FBQSxPQUFBOzs7b0JBR0EsSUFBQSxjQUFBO3dCQUNBLGlCQUFBO3dCQUNBLGVBQUE7d0JBQ0Esb0JBQUE7O29CQUVBLEVBQUEsUUFBQSxVQUFBLFVBQUEsR0FBQTt3QkFDQSxFQUFBLFFBQUEsR0FBQSxVQUFBLE1BQUE7NEJBQ0EsSUFBQSxLQUFBLFdBQUEsVUFBQTtnQ0FDQSxpQkFBQSxpQkFBQSxLQUFBO21DQUNBLElBQUEsS0FBQSxXQUFBLFFBQUE7Z0NBQ0EsZUFBQSxlQUFBLEtBQUE7bUNBQ0EsSUFBQSxLQUFBLFdBQUEsYUFBQTtnQ0FDQSxvQkFBQSxvQkFBQSxLQUFBOzs7OztvQkFLQSxJQUFBLGlCQUFBLEtBQUEsZUFBQSxLQUFBLG9CQUFBLEdBQUE7d0JBQ0EsSUFBQSxpQkFBQSxHQUFBOzRCQUNBLFlBQUEsS0FBQTtnQ0FDQSxRQUFBO2dDQUNBLE9BQUE7Ozt3QkFHQSxJQUFBLGVBQUEsR0FBQTs0QkFDQSxZQUFBLEtBQUE7Z0NBQ0EsUUFBQTtnQ0FDQSxPQUFBOzs7d0JBR0EsSUFBQSxvQkFBQSxHQUFBOzRCQUNBLFlBQUEsS0FBQTtnQ0FDQSxRQUFBO2dDQUNBLE9BQUE7Ozs7O29CQUtBLE9BQUEsWUFBQTt3QkFDQSxXQUFBLE9BQUEsVUFBQSxJQUFBLElBQUEsTUFBQSxDQUFBLENBQUEsT0FBQSxTQUFBLE9BQUEsU0FBQSxLQUFBLFFBQUE7d0JBQ0EsV0FBQTs7O29CQUdBLElBQUEsT0FBQSxlQUFBO3dCQUNBLFdBQUEsV0FBQSxpQkFBQSxPQUFBOzt1QkFFQTtvQkFDQSxJQUFBLEtBQUEsY0FBQSxLQUFBLGVBQUEsSUFBQTt3QkFDQSxPQUFBLHVCQUFBLEtBQUE7O29CQUVBLE9BQUEsaUJBQUE7O2dCQUVBLE9BQUEsbUJBQUE7Ozs7UUFJQTtRQUNBLFVBQUEsZ0JBQUEsVUFBQTs7OztRQUlBLE9BQUE7WUFDQSxZQUFBO1lBQ0EsYUFBQTtZQUNBLFVBQUE7WUFDQSxPQUFBO2dCQUNBLFVBQUE7Z0JBQ0EsZUFBQTtnQkFDQSxpQkFBQTs7Ozs7QUMvRkEsQ0FBQSxZQUFBO0lBQ0E7O0lBRUEsUUFBQSxPQUFBLFlBQUEsV0FBQSxrRkFBQSxVQUFBLFlBQUEsUUFBQSxnQkFBQTs7bURBRUEsVUFBQSx1QkFBQSxVQUFBOzs7O1FBSUEsT0FBQTtZQUNBLFlBQUE7WUFDQSxhQUFBO1lBQ0EsVUFBQTtZQUNBLE9BQUE7Z0JBQ0Esa0JBQUE7Ozs7OztBQ2RBLENBQUEsWUFBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFFBQUEsa0RBQUEsVUFBQSxhQUFBLFNBQUEsY0FBQTtRQUNBLElBQUEsTUFBQSxVQUFBLElBQUEsVUFBQSxPQUFBLE9BQUEsUUFBQSxVQUFBLFVBQUEsU0FBQSxXQUFBLGVBQUEsY0FBQSxrQkFBQSxtQkFBQSxTQUFBLFFBQUEsU0FBQSxPQUFBLG9CQUFBLGVBQUE7WUFDQSxLQUFBLEtBQUE7WUFDQSxLQUFBLFdBQUEsUUFBQSxZQUFBO1lBQ0EsS0FBQSxRQUFBO1lBQ0EsS0FBQSxRQUFBO1lBQ0EsS0FBQSxTQUFBO1lBQ0EsS0FBQSxXQUFBO1lBQ0EsS0FBQSxXQUFBO1lBQ0EsS0FBQSxVQUFBO1lBQ0EsS0FBQSxZQUFBO1lBQ0EsS0FBQSxnQkFBQTtZQUNBLEtBQUEsZUFBQTtZQUNBLEtBQUEsbUJBQUE7WUFDQSxLQUFBLG9CQUFBO1lBQ0EsS0FBQSxVQUFBO1lBQ0EsS0FBQSxvQkFBQSxPQUFBLElBQUEsU0FBQTtZQUNBLEtBQUEsU0FBQTtZQUNBLEtBQUEsVUFBQTtZQUNBLEtBQUEsUUFBQTtZQUNBLEtBQUEscUJBQUE7WUFDQSxLQUFBLGdCQUFBO1lBQ0EsS0FBQSwwQkFBQSxPQUFBLElBQUEsZUFBQTs7OztRQUlBLElBQUEsWUFBQTtZQUNBLGFBQUEsWUFBQTtnQkFDQSxJQUFBLFFBQUEsS0FBQTtvQkFDQSxNQUFBLEtBQUEsUUFBQSxLQUFBLFFBQUEsT0FBQSxNQUFBO2dCQUNBLE9BQUEsYUFBQSxrQkFBQSxPQUFBOzs7OztRQUtBLElBQUEsUUFBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLE1BQUE7Z0JBQ0EsT0FBQSxJQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7OztZQUdBLE9BQUEsSUFBQTs7O1FBR0EsSUFBQSxjQUFBLFVBQUEsTUFBQTtZQUNBLElBQUEsUUFBQSxRQUFBLE9BQUE7Z0JBQ0EsT0FBQTtxQkFDQSxJQUFBLElBQUE7cUJBQ0EsT0FBQTs7WUFFQSxPQUFBLElBQUEsTUFBQTs7O1FBR0EsT0FBQTs7OztBQzFFQSxDQUFBLFlBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEsWUFBQSxRQUFBLHlDQUFBLFVBQUEsb0JBQUE7UUFDQSxJQUFBLGlCQUFBLFVBQUEsSUFBQSxNQUFBLE1BQUEsVUFBQTtZQUNBLEtBQUEsS0FBQTtZQUNBLEtBQUEsT0FBQTtZQUNBLEtBQUEsT0FBQSxtQkFBQSxZQUFBO1lBQ0EsS0FBQSxXQUFBOzs7O1FBSUEsZUFBQSxZQUFBOzs7OztRQUtBLGVBQUEsUUFBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLE1BQUE7Z0JBQ0EsT0FBQSxJQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7OztZQUdBLE9BQUEsSUFBQTs7O1FBR0EsZUFBQSxjQUFBLFVBQUEsTUFBQTtZQUNBLElBQUEsUUFBQSxRQUFBLE9BQUE7Z0JBQ0EsT0FBQTtxQkFDQSxJQUFBLGVBQUE7cUJBQ0EsT0FBQTs7WUFFQSxPQUFBLGVBQUEsTUFBQTs7O1FBR0EsT0FBQTs7OztBQ3RDQSxDQUFBLFlBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEsWUFBQSxRQUFBLHNCQUFBLFlBQUE7UUFDQSxJQUFBLHFCQUFBLFVBQUEsSUFBQSxNQUFBLFdBQUEsU0FBQSxVQUFBLGVBQUE7WUFDQSxLQUFBLEtBQUE7WUFDQSxLQUFBLE9BQUE7WUFDQSxLQUFBLFlBQUE7WUFDQSxLQUFBLFVBQUE7WUFDQSxLQUFBLFdBQUE7WUFDQSxLQUFBLGdCQUFBOzs7O1FBSUEsbUJBQUEsWUFBQTs7Ozs7UUFLQSxtQkFBQSxRQUFBLFVBQUEsTUFBQTtZQUNBLElBQUEsTUFBQTtnQkFDQSxPQUFBLElBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNB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QUFBLFFBQUE7WUFDQSxLQUFBLFFBQUEsZUFBQSxZQUFBO1lBQ0EsS0FBQSxLQUFBO1lBQ0EsS0FBQSxXQUFBLGFBQUEsWUFBQTtZQUNBLEtBQUEsV0FBQSxRQUFBLFlBQUE7WUFDQSxLQUFBLGdCQUFBO1lBQ0EsS0FBQSxxQkFBQTtZQUNBLEtBQUEsWUFBQTtZQUNBLEtBQUEsZUFBQTtZQUNBLEtBQUEsV0FBQTtZQUNBLEtBQUEsV0FBQTtZQUNBLEtBQUEsV0FBQSxRQUFBLFlBQUE7WUFDQSxLQUFBLFVBQUEsT0FBQSxZQUFBO1lBQ0EsS0FBQSxVQUFBO2dCQUNBLGFBQUEsb0JBQUEsWUFBQSxRQUFBO2dCQUNBLFNBQUEsUUFBQTs7WUFFQSxLQUFBLGNBQUE7WUFDQSxLQUFBLFNBQUE7WUFDQSxLQUFBLFVBQUE7Ozs7UUFJQSxJQUFBLG9CQUFBLFNBQUEsWUFBQSxZQUFBO1lBQ0EsRUFBQSxRQUFBLFlBQUEsU0FBQSxJQUFBO2dCQUNBLElBQUEsV0FBQTtnQkFDQSxHQUFBLENBQUEsSUFBQSxNQUFBLEVBQUEsSUFBQSxRQUFBOztnQkFFQSxHQUFBLElBQUEsV0FBQSxJQUFBLFVBQUEsRUFBQTtvQkFDQSxXQUFBLENBQUEsSUFBQTs7cUJBRUEsR0FBQSxJQUFBLFlBQUEsSUFBQSxTQUFBLFNBQUEsRUFBQTs7b0JBRUEsV0FBQSxJQUFBOztnQkFFQSxFQUFBLFFBQUEsVUFBQSxTQUFBLFFBQUE7b0JBQ0EsSUFBQSxTQUFBLEVBQUEsS0FBQSxhQUFBLENBQUEsSUFBQTtvQkFDQSxHQUFBLE9BQUE7d0JBQ0EsSUFBQSxNQUFBOzRCQUNBO2dDQUNBLFdBQUEsT0FBQTtnQ0FDQSxLQUFBLE9BQUE7Z0NBQ0EsU0FBQSxPQUFBO2dDQUNBLGVBQUEsT0FBQTtnQ0FDQSxxQkFBQSxhQUFBLDJCQUFBLE9BQUE7Ozs7OztZQU1BLE9BQUE7OztRQUdBLElBQUEscUJBQUEsU0FBQSxhQUFBLFNBQUEsU0FBQTtZQUNBLEVBQUEsUUFBQSxhQUFBLFNBQUEsSUFBQTtnQkFDQSxJQUFBLFdBQUE7Z0JBQ0EsSUFBQSxTQUFB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LEtBQUEsZUFBQSxFQUFBLFVBQUE7b0JBQ0EsY0FBQSxFQUFBLE1BQUEsS0FBQSxnQkFBQSxFQUFBLFVBQUE7b0JBQ0EsY0FBQSxFQUFBLE1BQUEsS0FBQSxnQkFBQSxFQUFBLFVBQUE7O2dCQUVBLElBQUEsYUFBQSxFQUFBLEtBQUEsS0FBQSxlQUFBLFVBQUEsZ0JBQUEsRUFBQSxPQUFBO29CQUNBLFVBQUEsRUFBQSxJQUFBLFlBQUE7b0JBQ0EsU0FBQSxXQUFBLFNBQUEsSUFBQSxVQUFBLFdBQUEsUUFBQSxXQUFBO29CQUNBLGVBQUEsV0FBQSxJQUFBLElBQUEsTUFBQSxDQUFBLENBQUEsVUFBQSxVQUFBLEtBQUEsUUFBQTtvQkFDQSxjQUFBLEVBQUEsS0FBQSxLQUFBLGdCQUFBLFVBQUEsZ0JBQUEsRUFBQSxPQUFBO29CQUNBLFdBQUEsRUFBQSxJQUFBLGFBQUE7b0JBQ0EsVUFBQSxZQUFBLFNBQUEsSUFBQSxXQUFBLFlBQUEsUUFBQSxZQUFBO29CQUNBLGdCQUFBLFlBQUEsSUFBQSxJQUFBLE1BQUEsQ0FBQSxDQUFBLFdBQUEsV0FBQSxLQUFBLFFBQUE7b0JBQ0EsY0FBQSxFQUFBLEtBQUEsS0FBQSxnQkFBQSxVQUFBLGdCQUFBLEVBQUEsT0FBQTtvQkFDQSxXQUFBLEVBQUEsSUFBQSxhQUFBO29CQUNBLFVBQUEsWUFBQSxTQUFBLElBQUEsV0FBQSxZQUFBLFFBQUEsWUFBQTtvQkFDQSxnQkFBQSxZQUFBLElBQUEsSUFBQSxNQUFBLENBQUEsQ0FBQSxXQUFBLFdBQUEsS0FBQSxRQUFBOztnQkFFQSxPQUFBO29CQUNBLE9BQUE7d0JBQ0EsTUFBQTt3QkFDQSxRQUFBO3dCQUNBLFdBQUEsV0FBQTt3QkFDQSxPQUFBOztvQkFFQSxRQUFBO3dCQUNBLE1BQUE7d0JBQ0EsUUFBQTt3QkFDQSxXQUFBLFlBQUE7d0JBQ0EsT0FBQTs7b0JBRUEsUUFBQTt3QkFDQSxNQUFBO3dCQUNBLFFBQUE7d0JBQ0EsV0FBQSxZQUFBO3dCQUNBLE9BQUE7Ozs7WUFJQSxhQUFBLFlBQUE7Z0JBQ0EsSUFBQSxVQUFBLEVBQUEsTUFBQSxLQUFBLGVBQUEsRUFBQSxVQUFBO29CQUNBLGdCQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsU0FBQTtvQkFDQSxXQUFBLEVBQUEsTUFBQSxLQUFBLGdCQUFBLEVBQUEsVUFBQTtvQkFDQSxpQkFBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLFVBQUE7b0JBQ0EsV0FBQSxFQUFBLE1BQUEsS0FBQSxnQkFBQSxFQUFBLFVBQUE7b0JBQ0EsaUJBQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxVQUFBOztnQkFFQSxJQUFBLG1CQUFBLFVBQUEsWUFBQTtvQkFDQSxJQUFBLFlBQUE7b0JBQ0EsRUFBQSxRQUFBLFlBQUEsVUFBQSxVQUFBO3dCQUNBLEVBQUEsUUFBQSxVQUFBLFVBQUEsS0FBQTs0QkFDQSxVQUFBLEtBQUEsRUFBQSxRQUFBLElBQUEsVUFBQSxPQUFBLElBQUE7OztvQkFHQSxPQUFBOzs7Z0JBR0EsT0FBQTtvQkFDQSxPQUFBLGlCQUFBO29CQUNBLFFBQUEsaUJBQUE7b0JBQ0EsUUFBQSxpQkFBQTs7Ozs7O1FBTUEsZUFBQSxRQUFBLFVBQUEsTUFBQTtZQUNBLElBQUEsTUFBQTtnQkFDQSxPQUFBLElBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTs7O1lBR0EsT0FBQSxJQUFBOzs7UUFHQSxlQUFBLGNBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxRQUFBLFFBQUEsT0FBQTtnQkFDQSxPQUFBO3FCQUNBLElBQUEsZUFBQTs7WUFFQSxPQUFBLGVBQUEsTUFBQTs7O1FBR0EsT0FBQTs7O0FDcEtBLENBQUEsWUFBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFFBQUEsMENBQUEsVUFBQSxRQUFBLGFBQUE7UUFDQSxJQUFBLGVBQUEsVUFBQSxJQUFBLE1BQUEsT0FBQSxhQUFBLFVBQUEsU0FBQSxlQUFBO1lBQ0EsS0FBQSxLQUFBO1lBQ0EsS0FBQSxPQUFBO1lBQ0EsS0FBQSxRQUFBO1lBQ0EsS0FBQSxjQUFBO1lBQ0EsS0FBQSxXQUFBO1lBQ0EsS0FBQSxVQUFBO1lBQ0EsS0FBQSxvQkFBQSxVQUFBLE9BQUEsSUFBQSxTQUFBLGdCQUFBO1lBQ0EsS0FBQSxnQkFBQTtZQUNBLEtBQUEsMEJBQUEsZ0JBQUEsT0FBQSxJQUFBLGVBQUEsZ0JBQUE7Ozs7UUFJQSxhQUFBLFlBQUE7Ozs7O1FBS0EsYUFBQSxRQUFBLFVBQUEsTUFBQTtZQUNBLElBQUEsTUFBQTtnQkFDQSxPQUFBLElBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTs7O1lBR0EsT0FBQSxJQUFBOzs7UUFHQSxhQUFBLGNBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxRQUFBLFFBQUEsT0FBQTtnQkFDQSxPQUFBO3FCQUNBLElBQUEsYUFBQTtxQkFDQSxPQUFBOztZQUVBLE9BQUEsYUFBQSxNQUFBOzs7UUFHQSxPQUFBOzs7O0FDOUNBLENBQUEsWUFBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFFBQUEsdUJBQUEsWUFBQTtRQUNBLElBQUEsc0JBQUEsVUFBQSxTQUFBLFlBQUE7WUFDQSxLQUFBLFVBQUE7WUFDQSxLQUFBLGFBQUE7Ozs7UUFJQSxvQkFBQSxZQUFBOzs7OztRQUtBLG9CQUFBLFFBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxNQUFBO2dCQUNBLE9BQUEsSUFBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7OztZQUdBLE9BQUEsSUFBQTs7O1FBR0Esb0JBQUEsY0FBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLFFBQUEsUUFBQSxPQUFBO2dCQUNBLE9BQUE7cUJBQ0EsSUFBQSxvQkFBQTtxQkFDQSxPQUFBOztZQUVBLE9BQUEsb0JBQUEsTUFBQTs7O1FBR0EsT0FBQTs7O0FDbENBLENBQUEsWUFBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFFBQUEsb0NBQUEsVUFBQSxhQUFBO1FBQ0EsSUFBQSxtQkFBQSxVQUFBLGFBQUEsVUFBQSxNQUFBLE1BQUE7WUFDQSxLQUFBLGNBQUE7WUFDQSxLQUFBLFdBQUE7WUFDQSxLQUFBLE9BQUE7WUFDQSxLQUFBLE9BQUE7Ozs7UUFJQSxpQkFBQSxZQUFBOzs7OztRQUtBLGlCQUFBLFFBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxNQUFBO2dCQUNBLE9BQUEsSUFBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBOzs7WUFHQSxPQUFBLElBQUE7OztRQUdBLGlCQUFBLGNBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxRQUFBLFFBQUEsT0FBQTtnQkFDQSxPQUFBO3FCQUNBLElBQUEsaUJBQUE7O1lBRUEsT0FBQSxpQkFBQSxNQUFBOzs7UUFHQSxPQUFBOzs7QUNyQ0EsQ0FBQSxZQUFBO0lBQ0E7O0lBRUEsUUFBQSxPQUFBLFlBQUEsUUFBQSw2RUFBQSxVQUFBLGFBQUEsa0JBQUEsbUJBQUE7UUFDQSxJQUFBLG1CQUFBLFVBQUEsU0FBQSxTQUFBLG1CQUFBLFlBQUEsYUFBQTtZQUNBLEtBQUEsVUFBQTtZQUNBLEtBQUEsVUFBQTtZQUNBLEtBQUEsb0JBQUE7WUFDQSxLQUFBLGFBQUEsaUJBQUEsWUFBQTtZQUNBLEtBQUEsY0FBQSxrQkFBQSxZQUFBOzs7O1FBSUEsaUJBQUEsWUFBQTtZQUNBLFNBQUEsWUFBQTtnQkFDQSxPQUFBLEtBQUEsV0FBQSxzQkFBQSxLQUFBLFdBQUEsU0FBQSxzQkFBQSxZQUFBLGtCQUFBOzs7OztRQUtBLGlCQUFBLFFBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxNQUFBO2dCQUNBLE9BQUEsSUFBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7OztZQUdBLE9BQUEsSUFBQTs7O1FBR0EsaUJBQUEsY0FBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLFFBQUEsUUFBQSxPQUFBO2dCQUNBLE9BQUE7cUJBQ0EsSUFBQSxpQkFBQTtxQkFDQSxPQUFBOztZQUVBLE9BQUEsaUJBQUEsTUFBQTs7O1FBR0EsT0FBQTs7OztBQzFDQSxDQUFBLFlBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEsWUFBQSxRQUFBLHFCQUFBLFlBQUE7UUFDQSxJQUFBLG9CQUFBLFVBQUEsTUFBQSxNQUFBLFVBQUEsWUFBQTtZQUNBLEtBQUEsT0FBQTtZQUNBLEtBQUEsT0FBQTtZQUNBLEtBQUEsV0FBQTtZQUNBLEtBQUEsYUFBQTs7OztRQUlBLGtCQUFBLFlBQUE7Ozs7O1FBS0Esa0JBQUEsUUFBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLE1BQUE7Z0JBQ0EsT0FBQSxJQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7OztZQUdBLE9BQUEsSUFBQTs7O1FBR0Esa0JBQUEsY0FBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLFFBQUEsUUFBQSxPQUFBO2dCQUNBLE9BQUE7cUJBQ0EsSUFBQSxrQkFBQTtxQkFDQSxPQUFBOztZQUVBLE9BQUEsa0JBQUEsTUFBQTs7O1FBR0EsT0FBQTs7O0FDdENBLENBQUEsWUFBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFFBQUEsNERBQUEsVUFBQSxhQUFBLFNBQUEsY0FBQTtRQUNBLElBQUEsZ0JBQUEsVUFBQSxVQUFBLFlBQUE7WUFDQSxLQUFBLFdBQUEsUUFBQSxZQUFBO1lBQ0EsS0FBQSxhQUFBO1lBQ0EsS0FBQSxjQUFBLEVBQUEsS0FBQSxZQUFBLFVBQUE7WUFDQSxLQUFBLGNBQUEsS0FBQSxpQkFBQTs7OztRQUlBLGNBQUEsWUFBQTtZQUNBLFVBQUEsWUFBQTtnQkFDQSxPQUFBOztZQUVBLGdCQUFBLFlBQUE7Z0JBQ0EsSUFBQSxZQUFBLEVBQUEsTUFBQSxLQUFBLFlBQUEsRUFBQSxVQUFBOztnQkFFQSxJQUFBLFlBQUEsRUFBQSxLQUFBLEtBQUEsWUFBQSxVQUFBLGdCQUFBLEVBQUEsT0FBQTtvQkFDQSxTQUFBLEVBQUEsSUFBQSxXQUFBO29CQUNBLFFBQUEsVUFBQSxTQUFBLElBQUEsU0FBQSxVQUFBLFFBQUEsVUFBQTtvQkFDQSxjQUFBLFVBQUEsSUFBQSxJQUFBLE1BQUEsQ0FBQSxDQUFBLFNBQUEsU0FBQSxLQUFBLFFBQUE7b0JBQ0EseUJBQUE7O2dCQUVBLElBQUEsZUFBQSxNQUFBLFFBQUEsR0FBQTtvQkFDQSx5QkFBQTt1QkFDQSxJQUFBLGNBQUEsTUFBQSxlQUFBLE1BQUEsUUFBQSxHQUFBO29CQUNBLHlCQUFBO3VCQUNBLElBQUEsVUFBQSxLQUFBLENBQUEsS0FBQSxhQUFBO29CQUNBLHlCQUFBOzs7Z0JBR0EsT0FBQTtvQkFDQSxNQUFBO29CQUNBLGlCQUFBO29CQUNBLFFBQUE7b0JBQ0EsV0FBQSxVQUFBO29CQUNBLE9BQUE7OztZQUdBLFlBQUEsWUFBQTtnQkFDQSxPQUFBLEVBQUEsS0FBQSxLQUFBLFlBQUEsVUFBQSxjQUFBLEVBQUEsT0FBQTs7WUFFQSxhQUFBLFlBQUE7Z0JBQ0EsSUFBQSxTQUFBLEVBQUEsTUFBQSxLQUFBLFlBQUEsRUFBQSxVQUFBO29CQUNBLGVBQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxRQUFBOztnQkFFQSxJQUFBLG1CQUFBLFVBQUEsWUFBQTtvQkFDQSxJQUFBLFlBQUE7b0JBQ0EsRUFBQSxRQUFBLFlBQUEsVUFBQSxVQUFBO3dCQUNBLEVBQUEsUUFBQSxVQUFBLFVBQUEsS0FBQTs0QkFDQSxVQUFBLEtBQUEsRUFBQSxRQUFBLElBQUEsVUFBQSxPQUFBLElBQUE7OztvQkFHQSxPQUFBOzs7Z0JBR0EsT0FBQSxpQkFBQTs7WUFFQSxhQUFBLFlBQUE7Z0JBQ0EsSUFBQSxTQUFBLEtBQUEsaUJBQUE7Z0JBQ0EsSUFBQSxXQUFBLFdBQUE7b0JBQ0EsT0FBQSxZQUFBLE9BQUE7dUJBQ0EsSUFBQSxXQUFBLFdBQUE7b0JBQ0EsT0FBQSxZQUFBLE9BQUE7dUJBQ0EsSUFBQSxXQUFBLFNBQUE7b0JBQ0EsT0FBQSxZQUFBLE9BQUE7dUJBQ0EsSUFBQSxXQUFBLGNBQUE7b0JBQ0EsT0FBQSxZQUFBLE9BQUE7OztZQUdBLGlCQUFBLFlBQUE7Z0JBQ0EsSUFBQSxVQUFBLEtBQUE7Z0JBQ0EsSUFBQSxRQUFBLFFBQUEsR0FBQTtvQkFDQSxPQUFBLFFBQUEsWUFBQSxtQkFBQTs7Z0JBRUEsT0FBQTs7WUFFQSxzQkFBQSxZQUFBO2dCQUNBLE9BQUEsS0FBQSxhQUFBLFFBQUEsSUFBQSxLQUFBLGFBQUEsUUFBQTs7WUFFQSxjQUFBLFlBQUE7Z0JBQ0EsSUFBQSxjQUFBLEtBQUE7Z0JBQ0EsT0FBQSxjQUFBLFlBQUE7O1lBRUEsY0FBQSxZQUFBO2dCQUNBLElBQUEsY0FBQSxLQUFBO2dCQUNBLE9BQUEsZ0JBQUEsWUFBQTs7WUFFQSxvQkFBQSxZQUFBO2dCQUNBOzs7OztRQUtBLGNBQUEsUUFBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLE1BQUE7Z0JBQ0EsT0FBQSxJQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTs7O1lBR0EsT0FBQSxJQUFBOzs7UUFHQSxjQUFBLGNBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxRQUFBLFFBQUEsT0FBQTtnQkFDQSxPQUFBO3FCQUNBLElBQUEsY0FBQTtxQkFDQSxPQUFBOztZQUVBLE9BQUEsY0FBQSxNQUFBOzs7UUFHQSxPQUFBOzs7O0FDbkhBLENBQUEsV0FBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFFBQUEsc0RBQUEsVUFBQSxTQUFBLGNBQUEsYUFBQTtRQUNBLElBQUEsVUFBQSxVQUFBLElBQUEsV0FBQSxXQUFBLFlBQUEsV0FBQSxXQUFBLFlBQUEsTUFBQSxLQUFBLFNBQUEsU0FBQSxjQUFBLFlBQUEsVUFBQSxjQUFBLFdBQUEsV0FBQSxlQUFBLGdCQUFBLGNBQUEsV0FBQSxhQUFBLFVBQUEsS0FBQSxTQUFBLFFBQUEsY0FBQTtZQUNBLEtBQUEsS0FBQTtZQUNBLEtBQUEsWUFBQTtZQUNBLEtBQUEsWUFBQTtZQUNBLEtBQUEsYUFBQTtZQUNBLEtBQUEsWUFBQTtZQUNBLEtBQUEscUJBQUEsS0FBQTtZQUNBLEtBQUEsWUFBQTtZQUNBLEtBQUEsYUFBQTtZQUNBLEtBQUEsT0FBQTtZQUNBLEtBQUEsTUFBQTtZQUNBLEtBQUEsVUFBQTtZQUNBLEtBQUEsb0JBQUEsVUFBQSxPQUFBLElBQUEsU0FBQSxnQkFBQTtZQUNBLEtBQUEsVUFBQTtZQUNBLEtBQUEsZUFBQTtZQUNBLEtBQUEsYUFBQTtZQUNBLEtBQUEsV0FBQTtZQUNBLEtBQUEsZUFBQTtZQUNBLEtBQUEsWUFBQTtZQUNBLEtBQUEsWUFBQTtZQUNBLEtBQUEsZ0JBQUE7WUFDQSxLQUFBLDBCQUFBLGdCQUFBLE9BQUEsSUFBQSxlQUFBLGdCQUFBO1lBQ0EsS0FBQSxpQkFBQTtZQUNBLEtBQUEsdUJBQUEsaUJBQUEsZ0JBQUE7WUFDQSxLQUFBLGVBQUE7WUFDQSxLQUFBLFlBQUE7WUFDQSxLQUFBLGNBQUE7WUFDQSxLQUFBLFdBQUEsUUFBQSxZQUFBO1lBQ0EsS0FBQSxNQUFBO1lBQ0EsS0FBQSxVQUFBO1lBQ0EsS0FBQSxTQUFBO1lBQ0EsS0FBQSxlQUFBOzs7O1FBSUEsUUFBQSxZQUFBO1lBQ0EsYUFBQSxZQUFBO2dCQUNBLE9BQUEsT0FBQSxJQUFBLEtBQUEsZUFBQSxLQUFBLE9BQUEsSUFBQSxLQUFBOztZQUVBLHFCQUFBLFlBQUE7Z0JBQ0EsT0FBQSxhQUFBLDJCQUFBLEtBQUE7Ozs7O1FBS0EsUUFBQSxRQUFBLFVBQUEsTUFBQTtZQUNBLElBQUEsTUFBQTtnQkFDQSxPQUFBLElBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7OztZQUdBLE9BQUEsSUFBQTs7O1FBR0EsUUFBQSxjQUFBLFVBQUEsTUFBQTtZQUNBLElBQUEsUUFBQSxRQUFBLE9BQUE7Z0JBQ0EsT0FBQTtxQkFDQSxJQUFBLFFBQUE7cUJBQ0EsT0FBQTs7WUFFQSxPQUFBLFFBQUEsTUFBQTs7O1FBR0EsT0FBQTs7OztBQzdGQSxDQUFBLFlBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEsWUFBQSxRQUFBLHlEQUFBLFVBQUEsYUFBQSxjQUFBLFNBQUE7UUFDQSxJQUFBLGFBQUEsVUFBQSxPQUFBLGlCQUFBLFVBQUE7WUFDQSxLQUFBLFFBQUE7WUFDQSxLQUFBLGtCQUFBO1lBQ0EsS0FBQSxXQUFBLFFBQUEsWUFBQTs7OztRQUlBLFdBQUEsWUFBQTtZQUNBLGFBQUEsWUFBQTtnQkFDQSxPQUFBLGFBQUEsa0JBQUEsS0FBQSxpQkFBQSxPQUFBLE1BQUE7O1lBRUEsU0FBQSxZQUFBO2dCQUNBLElBQUEsZ0JBQUEsRUFBQSxLQUFBLFlBQUEsVUFBQSxTQUFBLEtBQUEsU0FBQTtnQkFDQSxJQUFBLGVBQUE7b0JBQ0EsT0FBQSxjQUFBOztnQkFFQSxPQUFBLFlBQUE7Ozs7O1FBS0EsV0FBQSxRQUFBLFVBQUEsTUFBQTtZQUNBLElBQUEsTUFBQTtnQkFDQSxPQUFBLElBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7OztZQUdBLE9BQUEsSUFBQTs7O1FBR0EsV0FBQSxjQUFBLFVBQUEsTUFBQTtZQUNBLElBQUEsUUFBQSxRQUFBLE9BQUE7Z0JBQ0EsT0FBQTtxQkFDQSxJQUFBLFdBQUE7cUJBQ0EsT0FBQTs7WUFFQSxPQUFBLFdBQUEsTUFBQTs7O1FBR0EsT0FBQTs7O0FDN0NBLENBQUEsWUFBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFFBQUEsaURBQUEsVUFBQSxhQUFBLGNBQUE7UUFDQSxJQUFBLGdCQUFBLFVBQUEsT0FBQSxlQUFBLGtCQUFBLFlBQUEsYUFBQSxZQUFBO1lBQ0EsS0FBQSxRQUFBO1lBQ0EsS0FBQSxnQkFBQTtZQUNBLEtBQUEsbUJBQUE7WUFDQSxLQUFBLGFBQUE7WUFDQSxLQUFBLGNBQUE7WUFDQSxLQUFBLGFBQUE7Ozs7UUFJQSxjQUFBLFlBQUE7WUFDQSxhQUFBLFlBQUE7Z0JBQ0EsT0FBQSxhQUFBLGtCQUFBLEtBQUEsYUFBQSxLQUFBOztZQUVBLFNBQUEsWUFBQTtnQkFDQSxJQUFBLGdCQUFBLEVBQUEsS0FBQSxZQUFBLFVBQUEsU0FBQSxLQUFBO2dCQUNBLElBQUEsZUFBQTtvQkFDQSxPQUFBLGNBQUE7O2dCQUVBLE9BQUEsWUFBQTs7Ozs7UUFLQSxjQUFBLFFBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxNQUFBO2dCQUNBLE9BQUEsSUFBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTs7O1lBR0EsT0FBQSxJQUFBOzs7UUFHQSxjQUFBLGNBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxRQUFBLFFBQUEsT0FBQTtnQkFDQSxPQUFBO3FCQUNBLElBQUEsY0FBQTtxQkFDQSxPQUFBOztZQUVBLE9BQUEsY0FBQSxNQUFBOzs7UUFHQSxPQUFBOzs7O0FDbkRBLENBQUEsWUFBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFFBQUEsZ0hBQUEsVUFBQSxPQUFBLElBQUEsV0FBQSxRQUFBLGFBQUEsY0FBQSxpQkFBQTs7UUFFQSxJQUFBLHlCQUFBLFVBQUEsWUFBQSxVQUFBLFFBQUE7WUFDQSxJQUFBLFNBQUE7Z0JBQ0EsTUFBQTtnQkFDQSxXQUFBOztZQUVBLElBQUEsWUFBQSxPQUFBLGNBQUEsT0FBQSxZQUFBO1lBQ0EsSUFBQSxZQUFBLE9BQUEsU0FBQSxPQUFBLFlBQUE7O1lBRUEsSUFBQSxhQUFBLGNBQUEsSUFBQTtnQkFDQSxPQUFBLGFBQUE7O1lBRUEsT0FBQTs7O1FBR0EsT0FBQTtZQUNBLGtCQUFBLFVBQUEsWUFBQSxVQUFBLFFBQUE7Z0JBQ0EsSUFBQSxnQkFBQTtvQkFDQSxJQUFBLEdBQUE7O2dCQUVBLElBQUEsU0FBQSx1QkFBQSxZQUFBLFVBQUE7Z0JBQ0EsTUFBQTtvQkFDQSxLQUFBLFlBQUEsS0FBQSxZQUFBO29CQUNBLFFBQUE7b0JBQ0EsUUFBQTttQkFDQSxRQUFBLFVBQUEsTUFBQTtvQkFDQSxjQUFBLGFBQUEsYUFBQSxZQUFBLEtBQUE7b0JBQ0EsY0FBQSxRQUFBLEtBQUE7b0JBQ0EsRUFBQSxRQUFBO21CQUNBLE1BQUEsVUFBQSxPQUFBO29CQUNBLEVBQUEsT0FBQTs7Z0JBRUEsT0FBQSxFQUFBOztZQUVBLHdCQUFBLFVBQUEsSUFBQTtnQkFDQSxJQUFBLElBQUEsR0FBQTs7Z0JBRUEsTUFBQSxJQUFBLFlBQUEsS0FBQSxZQUFBLG9CQUFBLEtBQUEsS0FBQSxRQUFBLFVBQUEsTUFBQTtvQkFDQSxFQUFBLFFBQUEsYUFBQSxZQUFBO21CQUNBLE1BQUEsVUFBQSxPQUFBO29CQUNBLEVBQUEsT0FBQTs7Z0JBRUEsT0FBQSxFQUFBOztZQUVBLFlBQUEsU0FBQSxPQUFBO2dCQUNBLElBQUEsSUFBQSxHQUFBOztnQkFFQSxNQUFBLElBQUEsWUFBQSxLQUFBLFlBQUEsb0JBQUEsU0FBQSxVQUFBLFFBQUEsVUFBQSxNQUFBO29CQUNBLEVBQUEsUUFBQTttQkFDQSxNQUFBLFVBQUEsT0FBQTtvQkFDQSxFQUFBLE9BQUE7O2dCQUVBLE9BQUEsRUFBQTs7WUFFQSxRQUFBLFNBQUEsT0FBQTtnQkFDQSxJQUFBLE1BQUEsT0FBQSxZQUFBLEtBQUEsWUFBQSxvQkFBQSxTQUFBOzs7OztnQkFLQSxJQUFBLDBCQUFBLFVBQUE7Z0JBQ0EsSUFBQSx3QkFBQSxPQUFBLElBQUEseUJBQUE7d0JBQ0EsT0FBQSxZQUFBLGNBQUE7OztnQkFHQSxPQUFBLHNCQUFBLFFBQUEsS0FBQSxNQUFBLE1BQUEsVUFBQSxRQUFBO29CQUNBLEdBQUEsT0FBQSxVQUFBO3dCQUNBLE9BQUEsZ0JBQUEsZ0JBQUEsWUFBQTt3QkFDQSxHQUFBLE9BQUEsY0FBQSxXQUFBLGVBQUEsT0FBQSxjQUFBLFdBQUEsU0FBQTs0QkFDQSxzQkFBQTs7d0JBRUEsT0FBQTsyQkFDQTt3QkFDQSxzQkFBQTt3QkFDQSxPQUFBOzs7Ozs7Ozs7QUM5RUEsQ0FBQSxZQUFBO0lBQ0E7O0lBRUEsUUFBQSxPQUFBLFlBQUEsUUFBQSx3SEFBQSxTQUFBLE9BQUEsSUFBQSxXQUFBLGFBQUEsS0FBQSxZQUFBLFlBQUEsUUFBQSxlQUFBOztRQUVBLElBQUEsZ0JBQUEsVUFBQSxNQUFBLFdBQUEsU0FBQSxPQUFBLE9BQUEsUUFBQSxhQUFBLGVBQUEsbUJBQUEsS0FBQTtZQUNBLE9BQUE7Z0JBQ0EsTUFBQTtnQkFDQSxXQUFBO2dCQUNBLFNBQUE7Z0JBQ0EsT0FBQTtnQkFDQSxPQUFBO2dCQUNBLFFBQUE7Z0JBQ0EsYUFBQTtnQkFDQSxlQUFBO2dCQUNBLG1CQUFBO2dCQUNBLEtBQUE7Ozs7UUFJQSxJQUFBLG1CQUFBLFVBQUEsUUFBQTtZQUNBLE9BQUE7Z0JBQ0EsUUFBQTs7OztRQUlBLE9BQUE7WUFDQSxTQUFBLFVBQUEsUUFBQTtnQkFDQSxTQUFBLFVBQUE7Z0JBQ0EsT0FBQSxNQUFBLE9BQUEsTUFBQSxPQUFBLE1BQUEsWUFBQSxLQUFBLFlBQUE7O2dCQUVBLElBQUEsZUFBQSxVQUFBLE9BQUEsS0FBQTtvQkFDQSxhQUFBLGNBQUEsVUFBQSxjQUFBLFlBQUEsY0FBQTs7Z0JBRUEsT0FBQSxXQUFBLFFBQUEsS0FBQSxNQUFBLE1BQUEsVUFBQSxNQUFBO29CQUNBLElBQUEsS0FBQSxXQUFBO3dCQUNBLEtBQUEsVUFBQSxJQUFBLFlBQUEsS0FBQTsyQkFDQTt3QkFDQSxXQUFBOztvQkFFQSxPQUFBOzs7WUFHQSxhQUFBLFVBQUEsUUFBQTtnQkFDQSxTQUFBLFVBQUE7Z0JBQ0EsSUFBQSxJQUFBLEdBQUE7O2dCQUVBLE1BQUE7b0JBQ0EsS0FBQSxPQUFBLE1BQUEsT0FBQSxNQUFBLFlBQUEsS0FBQSxZQUFBO29CQUNBLFFBQUE7b0JBQ0EsUUFBQTttQkFDQSxRQUFBLFVBQUEsTUFBQTtvQkFDQSxLQUFBLFVBQUEsSUFBQSxZQUFBLEtBQUE7b0JBQ0EsRUFBQSxRQUFBO21CQUNBLE1BQUEsVUFBQSxPQUFBO29CQUNBLEVBQUEsT0FBQTs7O2dCQUdBLE9BQUEsRUFBQTs7WUFFQSxzQkFBQSxVQUFBLE1BQUE7Z0JBQ0EsT0FBQSxRQUFBO2dCQUNBLElBQUEsSUFBQSxHQUFBOztnQkFFQSxNQUFBLElBQUEsWUFBQSxLQUFBLHFCQUFBLE9BQUEsUUFBQSxVQUFBLE1BQUE7b0JBQ0EsRUFBQSxRQUFBO21CQUNBLE1BQUEsVUFBQSxPQUFBO29CQUNBLEVBQUEsT0FBQTs7Z0JBRUEsT0FBQSxFQUFBOztZQUVBLGNBQUEsVUFBQSxJQUFBO2dCQUNBLElBQUEsSUFBQSxHQUFBO2dCQUNBLE1BQUEsSUFBQSxZQUFBLEtBQUEsWUFBQSxVQUFBLEtBQUEsS0FBQSxRQUFBLFVBQUEsTUFBQTtvQkFDQSxFQUFBLFFBQUEsV0FBQSxZQUFBO21CQUNBLE1BQUEsVUFBQSxPQUFBO29CQUNBLEVBQUEsT0FBQTs7Z0JBRUEsT0FBQSxFQUFBOztZQUVBLGdCQUFBLFVBQUEsWUFBQSxVQUFBO2dCQUNBLElBQUEsU0FBQTtvQkFDQSxZQUFBO29CQUNBLFVBQUE7O2dCQUVBLElBQUEsc0JBQUEsVUFBQSxZQUFBLEtBQUEsWUFBQSxzQkFBQTtvQkFDQSxvQkFBQSxjQUFBLFVBQUEscUJBQUEsWUFBQSxjQUFBOztnQkFFQSxPQUFBLGtCQUFBLFFBQUEsS0FBQSxNQUFBLE1BQUEsVUFBQSxNQUFBO29CQUNBLElBQUEsS0FBQSxXQUFBO3dCQUNBLEtBQUEsVUFBQSxXQUFBLFlBQUEsS0FBQTsyQkFDQTt3QkFDQSxrQkFBQTs7b0JBRUEsT0FBQTs7O1lBR0Esb0JBQUEsVUFBQSxZQUFBLFVBQUE7Z0JBQ0EsSUFBQSxTQUFBO29CQUNBLFlBQUE7b0JBQ0EsVUFBQTs7Z0JBRUEsSUFBQSxJQUFBLEdBQUE7O2dCQUVBLE1BQUEsSUFBQSxZQUFBLEtBQUEsWUFBQSxzQkFBQSxRQUFBLFFBQUEsVUFBQSxNQUFBO29CQUNBLEtBQUEsVUFBQSxXQUFBLFlBQUEsS0FBQTtvQkFDQSxFQUFBLFFBQUE7bUJBQ0EsTUFBQSxVQUFBLE9BQUE7b0JBQ0EsRUFBQSxPQUFBOztnQkFFQSxPQUFBLEVBQUE7O1lBRUEsV0FBQSxVQUFBLElBQUEsTUFBQTtnQkFDQSxPQUFBLFFBQUE7Z0JBQ0EsSUFBQSxJQUFBLEdBQUE7O2dCQUVBLE1BQUE7b0JBQ0EsS0FBQSxZQUFBLEtBQUEsWUFBQSxVQUFBLEtBQUE7b0JBQ0EsUUFBQTtvQkFDQSxNQUFBO21CQUNBLFFBQUEsVUFBQSxRQUFBO29CQUNBLEVBQUEsUUFBQTttQkFDQSxNQUFBLFVBQUEsT0FBQTtvQkFDQSxFQUFBLE9BQUE7OztnQkFHQSxPQUFBLEVBQUE7Ozs7OztBQzlIQSxDQUFBLFlBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEsWUFBQSxRQUFBLHFKQUFBLFVBQUEsT0FBQSxJQUFBLFdBQUEsUUFBQSxlQUFBLGFBQUEsWUFBQSxTQUFBLGdCQUFBLGVBQUE7Ozs7Ozs7Ozs7Ozs7OztRQWVBLElBQUEseUJBQUEsVUFBQSxNQUFBLFdBQUEsU0FBQSxPQUFBO1lBQ0EsSUFBQSxTQUFBOztZQUVBLElBQUEsTUFBQSxFQUFBLE9BQUEsT0FBQTtZQUNBLElBQUEsV0FBQSxFQUFBLE9BQUEsWUFBQTtZQUNBLElBQUEsU0FBQSxFQUFBLE9BQUEsVUFBQTtZQUNBLElBQUEsT0FBQSxFQUFBLE9BQUEsUUFBQTs7WUFFQSxPQUFBOzs7UUFHQSxPQUFBO1lBQ0EsYUFBQSxVQUFBLE9BQUE7Z0JBQ0EsSUFBQSxTQUFBO29CQUNBLE9BQUEsU0FBQSxDQUFBLE9BQUE7OztnQkFHQSxJQUFBLG1CQUFBLFVBQUEsWUFBQSxLQUFBLFlBQUEsY0FBQTtvQkFDQSxpQkFBQSxjQUFBLFVBQUEsa0JBQUEsWUFBQSxjQUFBOztnQkFFQSxPQUFBLGVBQUEsUUFBQSxLQUFBLE1BQUEsTUFBQSxVQUFBLE1BQUE7b0JBQ0EsSUFBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBa0NBLEtBQUEsVUFBQSxRQUFBLFlBQUEsS0FBQTt3QkFDQSxPQUFBOzJCQUNBO3dCQUNBLGVBQUE7d0JBQ0EsT0FBQTs7OztZQUlBLGlCQUFBLFVBQUEsT0FBQTtnQkFDQSxRQUFBLFNBQUEsQ0FBQSxPQUFBOztnQkFFQSxJQUFBLElBQUEsR0FBQTs7Z0JBRUEsTUFBQTtvQkFDQSxLQUFBLFlBQUEsS0FBQSxZQUFBO29CQUNBLFFBQUE7b0JBQ0EsUUFBQSxFQUFBLE9BQUE7bUJBQ0EsUUFBQSxVQUFBLE1BQUE7b0JBQ0EsS0FBQSxVQUFBLFFBQUEsWUFBQSxLQUFBO29CQUNBLEVBQUEsUUFBQTttQkFDQSxNQUFBLFVBQUEsT0FBQTtvQkFDQSxFQUFBLE9BQUE7O2dCQUVBLE9BQUEsRUFBQTs7WUFFQSxrQkFBQSxVQUFBLE1BQUEsV0FBQSxTQUFBLE9BQUE7Z0JBQ0EsSUFBQSxTQUFBLHVCQUFBLE1BQUEsV0FBQSxTQUFBOztnQkFFQSxJQUFBLHdCQUFBLFVBQUEsWUFBQSxLQUFBLFlBQUEscUJBQUE7b0JBQ0Esc0JBQUEsY0FBQSxVQUFBLHVCQUFBLFlBQUEsY0FBQTs7Z0JBRUEsT0FBQSxvQkFBQSxRQUFBLEtBQUEsTUFBQSxNQUFBLFVBQUEsTUFBQTtvQkFDQSxJQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFzQkEsS0FBQSxVQUFBLGNBQUEsWUFBQSxLQUFBOzJCQUNBO3dCQUNBLG9CQUFBOztvQkFFQSxPQUFBOzs7WUFHQSxzQkFBQSxVQUFBLE1BQUEsV0FBQSxTQUFBLE9BQUE7Z0JBQ0EsSUFBQSxJQUFBLEdBQUE7b0JBQ0EsU0FBQSx1QkFBQSxNQUFBLFdBQUEsU0FBQTs7Z0JBRUEsTUFBQTtvQkFDQSxLQUFBLFlBQUEsS0FBQSxZQUFBO29CQUNBLFFBQUE7b0JBQ0EsUUFBQTttQkFDQSxRQUFBLFVBQUEsTUFBQTtvQkFDQSxLQUFBLFVBQUEsY0FBQSxZQUFBLEtBQUE7b0JBQ0EsRUFBQSxRQUFBO21CQUNBLE1BQUEsVUFBQSxPQUFBO29CQUNBLEVBQUEsT0FBQTs7Z0JBRUEsT0FBQSxFQUFBOztZQUVBLG1CQUFBLFVBQUEsSUFBQTtnQkFDQSxJQUFBLElBQUEsR0FBQTtnQkFDQSxNQUFBLElBQUEsWUFBQSxLQUFBLFlBQUEsZUFBQSxLQUFBLEtBQUEsUUFBQSxVQUFBLE1BQUE7b0JBQ0EsRUFBQSxRQUFBLGVBQUEsWUFBQTttQkFDQSxNQUFBLFVBQUEsT0FBQTtvQkFDQSxFQUFBLE9BQUE7O2dCQUVBLE9BQUEsRUFBQTs7WUFFQSxlQUFBLFVBQUEsS0FBQTtnQkFDQSxJQUFBLGlCQUFBLFNBQUEsS0FBQTtvQkFDQSxPQUFBO3dCQUNBLGdCQUFBLEtBQUE7d0JBQ0EsV0FBQSxLQUFBOzs7Z0JBR0EsSUFBQSxjQUFBLGVBQUE7Z0JBQ0EsSUFBQSxJQUFBLEdBQUE7O2dCQUVBLE1BQUE7b0JBQ0EsS0FBQSxZQUFBLEtBQUEsWUFBQSxlQUFBLEtBQUEsS0FBQTtvQkFDQSxRQUFBO29CQUNBLE1BQUE7bUJBQ0EsUUFBQSxVQUFBLFFBQUE7b0JBQ0EsRUFBQSxRQUFBLGVBQUEsWUFBQTttQkFDQSxNQUFBLFVBQUEsT0FBQTtvQkFDQSxFQUFBLE9BQUE7O2dCQUVBLE9BQUEsRUFBQTs7Ozs7O0FDbExBLENBQUEsWUFBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFdBQUEsd0tBQUEsU0FBQSxRQUFBLFdBQUEsY0FBQSxZQUFBLGFBQUEsaUJBQUEsYUFBQSxlQUFBLGFBQUEsYUFBQTtRQUNBLE9BQUEsVUFBQTtRQUNBLE9BQUEsbUJBQUE7UUFDQSxPQUFBLHlCQUFBO1FBQ0EsT0FBQSxjQUFBO1FBQ0EsT0FBQSxZQUFBO1FBQ0EsT0FBQSxjQUFBLFlBQUEsWUFBQTtRQUNBLGNBQUEsZUFBQTs7UUFFQSxPQUFBLFVBQUEsVUFBQSxZQUFBLFVBQUE7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O2dCQUNBLFFBQUEsRUFBQSxNQUFBLGlCQUFBO2dCQUNBLE9BQUE7Z0JBQ0EsVUFBQSxPQUFBO2dCQUNBLGdCQUFBO2dCQUNBLGlCQUFBOztZQUVBLEtBQUE7Ozs7UUFJQSxPQUFBLGtCQUFBLFVBQUEsYUFBQTtZQUNBLEVBQUEsT0FBQSxPQUFBLFVBQUEsVUFBQSxLQUFBO2dCQUNBLE9BQUEsS0FBQSxVQUFBLFNBQUEsS0FBQSxVQUFBOztZQUVBLEtBQUE7OztRQUdBLE9BQUEsbUJBQUEsVUFBQSxPQUFBO1lBQ0EsT0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLE9BQUEsaUJBQUE7OztRQUdBLE9BQUEsMEJBQUEsWUFBQTs7WUFFQSxPQUFBLGlCQUFBOztZQUVBLE9BQUEsMEJBQUE7WUFDQSxPQUFBLHFCQUFBO1lBQ0EsT0FBQSxrQkFBQTs7WUFFQSxPQUFBLFVBQUE7O1lBRUEsSUFBQSxDQUFBLE9BQUEsaUJBQUEsUUFBQSxPQUFBLGlCQUFBLFNBQUEsSUFBQTtnQkFDQSxPQUFBLG1CQUFBO2dCQUNBLEtBQUE7bUJBQ0E7Z0JBQ0EsS0FBQSxtQkFBQSxPQUFBOzs7Ozs7Ozs7Ozs7OztRQWNBLE9BQUEsb0JBQUEsWUFBQTtZQUNBLE9BQUEsT0FBQSxlQUFBLFNBQUE7Ozs7Ozs7Ozs7UUFVQSxPQUFBLHFCQUFBLFVBQUEsU0FBQTtZQUNBLE9BQUEsZUFBQTtZQUNBLE9BQUEsZUFBQSxZQUFBLFlBQUEsZ0JBQUE7WUFDQSxPQUFBLGVBQUEsWUFBQSxZQUFBLGdCQUFBO1lBQ0EsS0FBQTs7O1FBR0EsT0FBQSxrQkFBQSxVQUFBLE1BQUE7WUFDQSxPQUFBLFlBQUE7WUFDQSxPQUFBLG1CQUFBLEVBQUEsV0FBQTtZQUNBLE9BQUEsV0FBQSxTQUFBLFFBQUEsZ0JBQUE7WUFDQSxPQUFBLFlBQUEsU0FBQSxTQUFBLGdCQUFBO1lBQ0EsT0FBQSxZQUFBLFNBQUEsU0FBQSxnQkFBQTtZQUNBLE9BQUEsY0FBQSxTQUFBLFdBQUEsZ0JBQUE7WUFDQSxPQUFBLGVBQUEsU0FBQSxZQUFBLGdCQUFBO1lBQ0EsS0FBQTs7O1FBR0EsT0FBQSxpQkFBQSxZQUFBO1lBQ0EsT0FBQSxrQkFBQSxDQUFBLE9BQUE7WUFDQSxJQUFBLE9BQUEsaUJBQUE7Z0JBQ0EsT0FBQSxnQkFBQTttQkFDQTtnQkFDQSxPQUFBLGdCQUFBOzs7O1FBSUEsS0FBQSxhQUFBLFlBQUE7WUFDQSxXQUFBLGVBQUE7WUFDQSxLQUFBOzs7Ozs7Ozs7Ozs7OztRQWNBLEtBQUEsZUFBQSxZQUFBO1lBQ0EsZUFBQSxlQUFBLEtBQUEsVUFBQSxRQUFBO2dCQUNBLE9BQUEscUJBQUEsT0FBQTtlQUNBLE1BQUEsVUFBQSxPQUFBO2dCQUNBLFFBQUEsSUFBQTtnQkFDQSxPQUFBLFNBQUE7Ozs7UUFJQSxLQUFBLGNBQUEsVUFBQSxJQUFBO1lBQ0EsZUFBQSxtQkFBQSxJQUFBLEtBQUEsVUFBQSxRQUFBO2dCQUNBLE9BQUEsbUNBQUEsT0FBQTtlQUNBLE1BQUEsVUFBQSxPQUFBO2dCQUNBLFFBQUEsSUFBQTs7OztRQUlBLEtBQUEscUJBQUEsVUFBQSxVQUFBO1lBQ0EsZUFBQSxtQkFBQSxTQUFBLE1BQUEsS0FBQSxVQUFBLFFBQUE7Z0JBQ0EsT0FBQSwwQkFBQTtnQkFDQSxFQUFBLFFBQUEsT0FBQSxTQUFBLFVBQUEsUUFBQTtvQkFDQSxPQUFBLHFCQUFBLE9BQUEsbUJBQUEsV0FBQSxJQUFBLEVBQUEsV0FBQSxPQUFBLFNBQUEsT0FBQSxxQkFBQSxPQUFBLEVBQUEsV0FBQSxPQUFBOztnQkFFQSxPQUFBLGtCQUFBLEVBQUEsWUFBQSxPQUFBLFNBQUEsQ0FBQSxRQUFBLFlBQUEsQ0FBQSxNQUFBOztnQkFFQSxJQUFBLHlCQUFBO2dCQUNBLEVBQUEsUUFBQSxPQUFBLGlCQUFBLFVBQUEsUUFBQTtvQkFDQSx1QkFBQSxLQUFBO3dCQUNBLE9BQUEsT0FBQSxVQUFBLE9BQUEsUUFBQSxNQUFBLE9BQUEsVUFBQSxPQUFBO3dCQUNBLE9BQUEsT0FBQSxVQUFBLE9BQUEsUUFBQSxNQUFBLE9BQUEsVUFBQSxPQUFBO3dCQUNBLE9BQUEsT0FBQTs7O2dCQUdBLE9BQUEseUJBQUE7Z0JBQ0EsT0FBQSxVQUFBLEVBQUEsWUFBQSxPQUFBLFNBQUEsQ0FBQSxVQUFBLENBQUE7Z0JBQ0EsT0FBQSxTQUFBLE9BQUE7OztnQkFHQSxJQUFBLHNCQUFBO29CQUNBLGVBQUEsRUFBQSxNQUFBLEVBQUEsUUFBQSxPQUFBLFNBQUE7Z0JBQ0EsRUFBQSxRQUFBLGNBQUEsVUFBQSxPQUFBO29CQUNBLElBQUEsU0FBQTt3QkFDQSxPQUFBLEVBQUEsS0FBQSxPQUFBLFFBQUEsRUFBQSxNQUFBLE1BQUEsTUFBQTt3QkFDQSxVQUFBOztvQkFFQSxFQUFBLFFBQUEsTUFBQSxJQUFBLFVBQUEsUUFBQTt3QkFDQSxJQUFBLFFBQUE7NEJBQ0EsT0FBQSxPQUFBOzRCQUNBLE9BQUEsT0FBQTs0QkFDQSxPQUFBLE9BQUE7O3dCQUVBLE9BQUEsU0FBQSxLQUFBOztvQkFFQSxvQkFBQSxLQUFBOztnQkFFQSxvQkFBQSxRQUFBO29CQUNBLE9BQUE7b0JBQ0EsT0FBQTtvQkFDQSxPQUFBOztnQkFFQSxPQUFBLHNCQUFBO2VBQ0EsTUFBQSxVQUFBLE1BQUE7Z0JBQ0EsUUFBQSxJQUFBO2dCQUNBLE9BQUEsU0FBQTs7OztRQUlBLEtBQUE7O1FBRUEsT0FBQSxPQUFBLGdCQUFBLFVBQUEsT0FBQTtZQUNBLFFBQUEsSUFBQTs7OztRQUlBLEtBQUEsWUFBQSxZQUFBOzs7WUFHQSxZQUFBO1lBQ0EsSUFBQSxXQUFBO2dCQUNBLGNBQUE7WUFDQSxFQUFBLFFBQUEsUUFBQSxVQUFBLEtBQUEsS0FBQTtnQkFDQSxJQUFBLE1BQUEsR0FBQTtvQkFDQSxTQUFBLEtBQUEsSUFBQTs7O1lBR0EsRUFBQSxRQUFBLE9BQUEsV0FBQSxVQUFBLEdBQUE7Z0JBQ0EsY0FBQSxZQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxnQkFBQTs7OztZQUlBLEVBQUEsUUFBQSxVQUFBLFVBQUEsU0FBQTtnQkFDQSxJQUFBLGFBQUEsRUFBQSxLQUFBLGFBQUEsVUFBQSxNQUFBO29CQUNBLE9BQUEsU0FBQTs7Z0JBRUEsSUFBQSxDQUFBLFlBQUE7b0JB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QUEsWUFBQSxRQUFBLFVBQUEsTUFBQTtvQkFDQSxFQUFBLFFBQUE7bUJBQ0EsTUFBQSxVQUFBLE9BQUE7b0JBQ0EsRUFBQSxPQUFBOztnQkFFQSxPQUFBLEVBQUE7O1lBRUEsb0JBQUEsVUFBQSxJQUFBO2dCQUNBLElBQUEsSUFBQSxHQUFBO2dCQUNBLE1BQUEsSUFBQSxZQUFBLEtBQUEsWUFBQSxhQUFBLEtBQUEsS0FBQSxRQUFBLFVBQUEsTUFBQTtvQkFDQSxFQUFBLFFBQUE7bUJBQ0EsTUFBQSxVQUFBLE9BQUE7b0JBQ0EsRUFBQSxPQUFBOztnQkFFQSxPQUFBLEVBQUE7O1lBRUEsb0JBQUEsVUFBQSxNQUFBO2dCQUNBLElBQUEsSUFBQSxHQUFBO2dCQUNBLElBQUEsTUFBQSxZQUFBLEtBQUEsWUFBQSxhQUFBLE9BQUE7Z0JBQ0EsTUFBQSxJQUFBLEtBQUEsUUFBQSxVQUFBLE1BQUE7b0JBQ0EsRUFBQSxRQUFBO21CQUNBLE1BQUEsVUFBQSxPQUFBO29CQUNBLEVBQUEsT0FBQTs7Z0JBRUEsT0FBQSxFQUFBOztZQUVBLGFBQUEsVUFBQSxRQUFBO2dCQUNBLElBQUEsU0FBQSxVQUFBO29CQUNBLElBQUEsR0FBQTs7Z0JBRUEsTUFBQTtvQkFDQSxRQUFBO29CQUNBLEtBQUEsWUFBQSxLQUFBLFlBQUEsYUFBQSxPQUFBLFdBQUE7b0JBQ0EsUUFBQTttQkFDQSxRQUFBLFVBQUEsTUFBQTtvQkFDQSxFQUFBLFFBQUE7bUJBQ0EsTUFBQSxVQUFBLE9BQUE7b0JBQ0EsRUFBQSxPQUFBOzs7Z0JBR0EsT0FBQSxFQUFBOztZQUVBLHNCQUFBLFVBQUEsS0FBQTtnQkFDQSxJQUFBLElBQUEsR0FBQTs7Z0JBRUEsSUFBQSxZQUFBO29CQUNBLE9BQUE7b0JBQ0EsTUFBQTtvQkFDQSxVQUFBO29CQUNBLFNBQUE7OztnQkFHQSxJQUFBLFVBQUEsT0FBQSxJQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsT0FBQSxJQUFBLElBQUEsT0FBQSxVQUFBLE9BQUE7O2dCQUVBLEVBQUEsUUFBQSxJQUFBLE1BQUEsaUJBQUEsVUFB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QUFBLFdBQUE7b0JBQ0EsT0FBQSxhQUFBO21CQUNBLE1BQUEsU0FBQSxNQUFBO21CQUNBLFFBQUEsSUFBQTs7ZUFFQSxNQUFBLFVBQUEsT0FBQTtnQkFDQSxRQUFBLElBQUE7ZUFDQSxRQUFBLFlBQUE7Z0JBQ0EsT0FBQSxzQkFBQTs7OztRQUlBLEtBQUEsYUFBQSxZQUFBO1lBQ0EsV0FBQSxlQUFBO1lBQ0EsV0FBQSxPQUFBLFlBQUE7O1lBRUEsS0FBQSxnQkFBQSxPQUFBOzs7OztRQUtBLE9BQUEsWUFBQSxVQUFBLEtBQUE7WUFDQSxFQUFBLE1BQUEsT0FBQSxXQUFBO1lBQ0EsT0FBQSxZQUFBO1lBQ0EsRUFBQSxNQUFBLE9BQUEsV0FBQTs7O1FBR0EsS0FBQTs7OztBQzlDQSxDQUFBLFVBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEsWUFBQSxXQUFBLHNMQUFBLFNBQUEsUUFBQSxNQUFBLFdBQUEsY0FBQSxXQUFBLFlBQUEsZUFBQSxZQUFBLGVBQUEsZ0JBQUEsYUFBQTs7UUFFQSxPQUFBLE9BQUEsSUFBQTtRQUNBLE9BQUEsVUFBQTtRQUNBLE9BQUEsZUFBQSxTQUFBLGFBQUE7O1FBRUEsT0FBQSxnQkFBQTs7UUFFQSxPQUFBLGNBQUEsWUFBQSxZQUFBO1FBQ0EsY0FBQSxlQUFBOztRQUVBLE9BQUEsUUFBQSxDQUFBLFNBQUEsU0FBQTtRQUNBLE9BQUEsb0JBQUE7UUFDQSxPQUFBLFdBQUE7O1FBRUEsSUFBQSxjQUFBLFlBQUE7WUFDQSxlQUFBLGtCQUFBLEtBQUEsVUFBQSxNQUFBO2dCQUNBLE9BQUEsZ0JBQUE7ZUFDQSxNQUFBLFVBQUEsT0FBQTtnQkFDQSxRQUFBLElBQUE7ZUFDQSxRQUFBLFlBQUE7Z0JBQ0EsT0FBQSxVQUFBOzs7O1FBSUEsT0FBQSxhQUFBLFVBQUEsTUFBQTtXQUNBLElBQUEsZ0JBQUEsVUFBQSxLQUFBO2FBQ0EsV0FBQSxPQUFBO2FBQ0EsYUFBQTthQUNBLE9BQUE7YUFDQSxNQUFBOzs7V0FHQSxjQUFBLE9BQUEsS0FBQSxZQUFBO2FBQ0EsT0FBQSxXQUFBLE9BQUE7Y0FD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QkFDQSxXQUFBLGdCQUFBO2dCQUNBLEVBQUEsUUFBQSxPQUFBLFFBQUEsS0FBQSxTQUFBLFVBQUEsS0FBQTtvQkFDQSxJQUFBLE9BQUEsT0FBQSxJQUFBOztnQkFFQSxXQUFBLGdCQUFBLE9BQUEsUUFBQSxLQUFBLFFBQUE7Z0JBQ0EsSUFBQSxVQUFBO2dCQUNBLEVBQUEsUUFBQSxhQUFBLFVBQUEsS0FBQTtvQkFDQSxRQUFBLEtBQUEsSUFBQSxLQUFBLGNBQUEsU0FBQSxNQUFBLElBQUEsUUFBQSxJQUFBOztnQkFFQSxrQkFBQTs7OztRQUlBLE9BQUEsVUFBQSxVQUFBLFFBQUEsWUFBQSxVQUFBLEtBQUE7WUFDQSxPQUFBLFVBQUE7WUFDQSxjQUFBLFdBQUEsUUFBQSxZQUFBLFVBQUEsS0FBQSxLQUFBLFVBQUEsTUFBQTtnQkFDQSxJQUFBLFVBQUE7Z0JBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLE9BQUEsWUFBQSxvQkFBQSxLQUFBO29CQUNBLElBQUEsS0FBQSxRQUFBLElBQUE7d0JBQ0EsUUFBQSxLQUFBLEtBQUEsUUFBQTs7O2dCQUdBLE9BQUEsWUFBQSxPQUFBO2dCQUNBLE9BQUEsWUFBQSxhQUFBLEtBQUE7Z0JBQ0EsT0FBQSxXQUFBO2dCQUNBLGlCQUFBO2VBQ0EsTUFBQSxVQUFBLE9BQUE7Z0JBQ0EsUUFBQSxJQUFBO2VBQ0EsUUFBQSxZQUFBO2dCQUNBLE9BQUEsVUFBQTs7OztRQUlBLE9BQUEsZ0JBQUEsWUFBQTtZQUNBLEVBQUEsUUFBQSxFQUFBLE1BQUEsZ0JBQUEsVUFBQSxPQUFBO2dCQUNBLFVBQUEsT0FBQSxNQUFBLElBQUEsTUFBQTs7WUFFQSxPQUFBLFVBQUE7WUFDQTs7O1FBR0EsSUFBQSxhQUFBLFlBQUE7WUFDQSxjQUFBLFdBQUEsZUFBQSxLQUFBLFVBQUEsTUFBQTtnQkFDQSxPQUFBLGNBQUE7Z0JBQ0EsT0FBQSxZQUFBLGFBQUEsS0FBQTtnQkFDQSxPQUFBLFlBQUEsT0FBQSxLQUFBO2VBQ0EsTUFBQSxVQUFBLE9BQUE7Z0JBQ0EsUUFBQSxJQUFBO2VBQ0EsUUFB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QUEsU0FBQSxLQUFBO2dCQUNBLE9BQUEsc0JBQUE7OztZQUdBLE9BQUEsT0FBQSxjQUFBLFVBQUEsVUFBQSxVQUFBO2dCQUNBLElBQUEsT0FBQSxZQUFBO29CQUNBLElBQUEsQ0FBQSxPQUFBLFdBQUEsTUFBQSxPQUFBLFdBQUEsT0FBQSxHQUFBO3dCQUNBLE9BQUEsT0FBQTs7b0JBRUEsRUFBQSxRQUFBLE9BQUEsV0FBQSxXQUFBLE1BQUEsVUFBQSxLQUFBLEtBQUE7d0JBQ0EsR0FBQSxDQUFBLElBQUEsU0FBQSxzQkFBQSxPQUFBLFdBQUEsVUFBQTs0QkFDQSxJQUFBLGNBQUEsRUFBQSxLQUFBLE9BQUEsV0FBQSxXQUFBLENBQUEsTUFBQSxJQUFBLFNBQUEsTUFBQSxTQUFBLElBQUEsU0FBQTs0QkFDQSxPQUFBLFdBQUEsV0FBQSxLQUFBLEtBQUEsV0FBQTs7Ozs7O29CQU1BLEdBQUEsT0FBQSxXQUFBLGdCQUFBLE9BQUEsV0FBQSxhQUFBLGlCQUFBLE9BQUEsV0FBQSxhQUFBLGNBQUEsYUFBQSxPQUFBLFdBQUEsYUFBQSxjQUFBLFVBQUEsV0FBQTt3QkFDQSxPQUFBLGtCQUFBLFlBQUEsT0FBQSxXQUFBLGFBQUEsY0FBQSxVQUFBLFdBQUEsS0FBQTs7O29CQUdBO29CQUNBO29CQUNBLFVBQUEsT0FBQTs7O1lBR0EsR0FBQSxXQUFBLEtBQUE7Z0JBQ0EsT0FBQSxXQUFBOzs7O1FBSUEsSUFBQSxZQUFBLFlBQUE7Ozs7O1lBS0EsU0FBQSxVQUFBO2dCQUNBLElBQUEsSUFBQSxHQUFBO2dCQUNBLElBQUEsSUFBQSxHQUFBLE1BQUE7Z0JBQ0EsSUFBQSxJQUFBLEdBQUEsTUFBQTtnQkFDQSxJQUFBLFFBQUEsU0FBQSxJQUFBLE1BQUEsU0FBQSxRQUFBLE1BQUE7Z0JBQ0EsSUFBQSxTQUFBLFNBQUEsSUFBQSxNQUFBLFVBQUEsUUFBQSxNQUFBOztnQkFFQSxNQUFBLEtBQUEsYUFBQSxlQUFBLFFBQUEsSUFBQSxNQUFBLFNBQUEsSUFBQSx3QkFBQSxDQUFBLElBQUEsTUFBQSxDQUFBLElBQUE7Ozs7Z0JB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QUEsV0FBQSxHQUFBLE1BQUEsT0FBQTtvQkFDQSxPQUFBOzs7OztZQUtBLEVBQUEsTUFBQSxZQUFBO2dCQUNBLE1BQUEsS0FBQSxRQUFBOzs7Z0JBR0EsSUFBQSxZQUFBLEtBQUE7Z0JBQ0EsSUFBQSxhQUFBLE1BQUEsUUFBQSxRQUFBO2dCQUNBLElBQUEsY0FBQSxNQUFBLFFBQUEsU0FBQTtnQkFDQSxJQUFBLFFBQUEsU0FBQSxJQUFBLE1BQUEsU0FBQSxRQUFBLE1BQUE7Z0JBQ0EsSUFBQSxTQUFBLFNBQUEsSUFBQSxNQUFBLFVBQUEsUUFBQSxNQUFBOzs7OztnQkFLQSxZQUFBO2dCQUNBLEdBQUEsWUFBQSxFQUFBOztvQkFFQSxJQUFBLFlBQUEsQ0FBQSxFQUFBO29CQUNBLEtBQUEsVUFBQTtvQkFDQSxLQUFBLE1BQUE7b0JBQ0EsS0FBQSxNQUFBLFdBQUEsSUFBQSxhQUFBLFNBQUEsT0FBQSxHQUFBLE9BQUE7Ozs7Z0JBSUEsR0FBQSxPQUFBLFlBQUE7b0JBQ0EsRUFBQSxNQUFBLE9BQUEsWUFBQSxNQUFBLFNBQUE7Ozs7O1FBS0EsSUFBQSxnQkFBQSxVQUFBLEtBQUEsWUFBQTtZQUNBLElBQUEsVUFBQTs7WUFFQSxFQUFBLFFBQUEsT0FBQSxXQUFBLFdBQUEsTUFBQSxVQUFBLEtBQUEsS0FBQTtnQkFDQSxJQUFBLElBQUEsU0FBQSxNQUFBO29CQUNBLEVBQUEsUUFBQSxJQUFBLGNBQUEsVUFBQSxZQUFBLEtBQUE7d0JBQ0EsSUFBQSxXQUFBLFNBQUEsTUFBQTs0QkFDQSxFQUFBLFFBQUEsV0FBQSxhQUFBLFVBQUEsTUFBQSxLQUFBO2dDQUNBLElBQUEsS0FBQSxXQUFBLFlBQUE7b0NBQ0EsUUFBQSxLQUFBO3dDQUNBLE1BQUEsSUFBQTt3Q0FDQSxRQUFBLEtBQUE7d0NBQ0EsT0FBQSxLQUFBOzs7Ozs7OztZQVFBLE9BQUE7OztRQUdBOztRQUVBLFVBQUEsNkJBQUEsWUFBQTtRQUNBOzs7O1FBSUEsT0FBQTtZQUNBLFlBQUE7WUFDQSxhQUFBO1lBQ0EsVUFBQTtZQUNBLE9BQUE7Z0JBQ0EsWUFBQTtnQkFDQSxRQUFBO2dCQUNBLFlBQUE7Z0JBQ0EsV0FBQTtnQkFDQSxjQUFBOztZQUVBLE1BQUEsVUFBQSxPQUFBO2dCQUNBLFFBQUEsUUFBQSxVQUFBLE1BQUEsWUFBQTtvQkFDQSxJQUFBLFdBQUEsU0FBQSx1QkFBQSx1QkFBQSxHQUFBO29CQUNBLE1BQUEsa0JBQUEsTUFBQSxRQUFBLGtCQUFBLE1BQUEsUUFBQSxrQkFBQSxXQUFBO29CQUNBLE1BQUEsdUJBQUEsYUFBQSxNQUFBLGtCQUFBLHFCQUFBLE1BQUEsa0JBQUE7Ozs7Ozs7O0FDcDVCQSxDQUFBLFlBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEsWUFBQSxRQUFBLHlDQUFBLFVBQUEsWUFBQSxjQUFBO1FBQ0EsSUFBQSxTQUFBLFVBQUEsSUFBQSxTQUFBLFdBQUEsZUFBQSxhQUFBO1lBQ0EsS0FBQSxLQUFBO1lBQ0EsS0FBQSxVQUFBO1lBQ0EsS0FBQSxZQUFBO1lBQ0EsS0FBQSxnQkFBQTtZQUNBLEtBQUEsY0FBQSxXQUFBLFlBQUE7Ozs7UUFJQSxPQUFBLFlBQUE7WUFDQSxhQUFBLFlBQUE7Z0JBQ0EsT0FBQSxhQUFBLGtCQUFBLEtBQUEsU0FBQSxLQUFBOzs7OztRQUtBLE9BQUEsUUFBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLE1BQUE7Z0JBQ0EsT0FBQSxJQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTs7O1lBR0EsT0FBQSxJQUFBOzs7UUFHQSxPQUFBLGNBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxRQUFBLFFBQUEsT0FBQTtnQkFDQSxPQUFBO3FCQUNBLElBQUEsT0FBQTtxQkFDQSxPQUFBOztZQUVBLE9BQUEsT0FBQSxNQUFBOzs7UUFHQSxPQUFBOzs7QUMxQ0EsQ0FBQSxZQUFBO0lBQ0E7O0lBRUEsUUFBQSxPQUFBLFlBQUEsUUFBQSxjQUFBLFlBQUE7UUFDQSxJQUFBLGFBQUEsVUFBQSxZQUFBLFNBQUEsY0FBQTtZQUNBLEtBQUEsYUFBQTtZQUNBLEtBQUEsVUFBQTtZQUNBLEtBQUEsZUFBQTs7OztRQUlBLFdBQUEsUUFBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLE1BQUE7Z0JBQ0EsT0FBQSxJQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBOzs7WUFHQSxPQUFBLElBQUE7OztRQUdBLFdBQUEsY0FBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLFFBQUEsUUFBQSxPQUFBO2dCQUNBLE9BQUE7cUJBQ0EsSUFBQSxXQUFBO3FCQUNBLE9BQUE7O1lBRUEsT0FBQSxXQUFBLE1BQUE7OztRQUdBLE9BQUE7OztBQy9CQSxDQUFBLFlBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEsWUFBQSxRQUFBLCtIQUFBLFVBQUEsWUFBQSxzQkFBQSxZQUFBLGtCQUFBLG9CQUFBLGFBQUE7UUFDQSxJQUFBLGdCQUFBLFVBQUEsSUFBQSxTQUFBLFdBQUEsZUFBQSxNQUFBLGFBQUEsaUJBQUEsTUFBQTtZQUNBLEtBQUEsS0FBQTtZQUNBLEtBQUEsVUFBQTtZQUNBLEtBQUEsWUFBQTtZQUNBLEtBQUEsc0JBQUEsS0FBQSxZQUFBLE9BQUEsSUFBQSxLQUFBLFdBQUEsZ0JBQUEsS0FBQTtZQUNBLEtBQUEsZ0JBQUE7WUFDQSxLQUFBLE9BQUEsV0FBQSxZQUFBO1lBQ0EsS0FBQSxjQUFBLFdBQUEsWUFBQTtZQUNBLEtBQUEsa0JBQUEsaUJBQUEsWUFBQTtZQUNBLEtBQUEsT0FBQSxtQkFBQSxZQUFBOzs7O1FBSUEsY0FBQSxRQUFBLFVBQUEsTUFBQTtZQUNBLElBQUEsTUFBQTtnQkFDQSxPQUFBLElBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBOzs7WUFHQSxPQUFBLElBQUE7OztRQUdBLGNBQUEsY0FBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLFFBQUEsUUFBQSxPQUFBO2dCQUNBLE9BQUE7cUJBQ0EsSUFBQSxjQUFBO3FCQUNBLE9BQUE7O1lBRUEsT0FBQSxjQUFBLE1BQUE7OztRQUdBLE9BQUE7Ozs7QUMxQ0EsQ0FBQSxZQUFBO0lBQ0E7O0lBRUEsUUFBQSxPQUFBLFlBQUEsUUFBQSx5QkFBQSxVQUFBLFNBQUE7UUFDQSxJQUFBLFlBQUEsVUFBQSxJQUFBLFFBQUEsVUFBQTtZQUNBLEtBQUEsS0FBQTtZQUNBLEtBQUEsU0FBQTtZQUNBLEtBQUEsV0FBQSxRQUFBLFlBQUE7Ozs7UUFJQSxVQUFBLFFBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxNQUFBO2dCQUNBLE9BQUEsSUFBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTs7O1lBR0EsT0FBQSxJQUFBOzs7UUFHQSxVQUFBLGNBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxRQUFBLFFBQUEsT0FBQTtnQkFDQSxPQUFBO3FCQUNBLElBQUEsVUFBQTtxQkFDQSxPQUFBOztZQUVBLE9BQUEsVUFBQSxNQUFBOzs7UUFHQSxPQUFBOzs7QUMvQkEsQ0FBQSxZQUFBO0lBQ0E7O0lBRUEsUUFBQSxPQUFBLFlBQUEsUUFBQSxvQ0FBQSxVQUFBLFdBQUE7UUFDQSxJQUFBLHFCQUFBLFVBQUEsVUFBQSxLQUFBO1lBQ0EsS0FBQSxXQUFBO1lBQ0EsS0FBQSxNQUFBLFVBQUEsWUFBQTs7OztRQUlBLG1CQUFBLFFBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxNQUFBO2dCQUNBLE9BQUEsSUFBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7OztZQUdBLE9BQUEsSUFBQTs7O1FBR0EsbUJBQUEsY0FBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLFFBQUEsUUFBQSxPQUFBO2dCQUNBLE9BQUE7cUJBQ0EsSUFBQSxtQkFBQTtxQkFDQSxPQUFBOztZQUVBLE9BQUEsbUJBQUEsTUFBQTs7O1FBR0EsT0FBQTs7O0FDN0JBLENBQUEsWUFBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFFBQUEsc0RBQUEsVUFBQSxhQUFBLHNCQUFBO1FBQ0EsSUFBQSxhQUFBLFVBQUEsSUFBQSxNQUFBLFNBQUEsT0FBQSxhQUFBLFdBQUEsWUFBQSxjQUFBLFVBQUEsZUFBQSxVQUFBLGNBQUE7WUFDQSxLQUFBLEtBQUE7WUFDQSxLQUFBLE9BQUE7WUFDQSxLQUFBLFVBQUE7WUFDQSxLQUFBLFFBQUE7WUFDQSxLQUFBLGNBQUE7WUFDQSxLQUFBLFlBQUE7WUFDQSxLQUFBLGFBQUEsYUFBQSxxQkFBQSxZQUFBLGNBQUEsSUFBQTtZQUNBLEtBQUEsZUFBQTtZQUNBLEtBQUEsVUFBQTtZQUNBLEtBQUEsZ0JBQUE7WUFDQSxLQUFBLFdBQUE7WUFDQSxLQUFBLGVBQUE7WUFDQSxLQUFBLFdBQUE7Ozs7UUFJQSxXQUFBLFFBQUEsVUFBQSxNQUFBO1lBQ0EsR0FBQSxLQUFBO2dCQUNBLE9BQUEsSUFBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTs7O1lBR0EsT0FBQSxJQUFBOzs7UUFHQSxXQUFBLGNBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxRQUFBLFFBQUEsT0FBQTtnQkFDQSxPQUFBLEtBQUEsSUFBQSxXQUFBOztZQUVBLE9BQUEsV0FBQSxNQUFBOzs7UUFHQSxPQUFBOzs7O0FDaERBLENBQUEsWUFBQTtJQUNBOztJQUVBLFFBQUEsT0FBQSxZQUFBLFFBQUEsdUZBQUEsVUFBQSxhQUFBLHlCQUFBLGtCQUFBOztRQUVBLElBQUEsT0FBQTs7UUFFQSxJQUFBLHVCQUFBLFVBQUEsWUFBQSxTQUFBLE1BQUE7WUFDQSxLQUFBLGFBQUEsYUFBQSxpQkFBQSxZQUFBLGNBQUE7WUFDQSxLQUFBLFVBQUEsV0FBQTtZQUNBLEtBQUEsT0FBQSxPQUFBLHdCQUFBLFlBQUEsUUFBQTs7O1FBR0EsSUFBQSxhQUFBLFNBQUEsTUFBQSxRQUFBO1lBQ0EsSUFBQSxVQUFBO1lBQ0EsSUFBQSxXQUFBLEVBQUEsS0FBQSxNQUFBLEVBQUEsUUFBQTtZQUNBLElBQUEsTUFBQTtZQUNBLE1BQUEsU0FBQTtnQkFDQSxVQUFBLFVBQUEsTUFBQTtnQkFDQSxXQUFBLEVBQUEsS0FBQSxNQUFBLEVBQUEsUUFBQTtnQkFDQTs7WUFFQSxPQUFBOzs7O1FBSUEscUJBQUEsWUFBQTtZQUNBLFFBQUEsVUFBQSxTQUFBO2dCQUNBLElBQUEsUUFBQSxXQUFBLEtBQUEsTUFBQSxRQUFBO2dCQUNBLFFBQUEsSUFBQTtnQkFDQSxJQUFBLE1BQUE7b0JBQ0EsY0FBQTtvQkFDQSxlQUFBO29CQUNBLE1BQUE7b0JBQ0EsYUFBQSxRQUFBO29CQUNBLFVBQUE7O2dCQUVBLEtBQUEsS0FBQSxLQUFBOzs7OztRQUtBLHFCQUFBLFFBQUEsVUFBQSxNQUFBO1lBQ0EsR0FBQSxLQUFBO2dCQUNBLE9BQUEsSUFBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTs7O1lBR0EsT0FBQSxJQUFBOzs7UUFHQSxxQkFBQSxjQUFBLFVBQUEsTUFBQTtZQUNBLElBQUEsUUFBQSxRQUFBLE9BQUE7Z0JBQ0EsT0FBQTtxQkFDQSxJQUFBLHFCQUFBOztZQUVBLE9BQUEscUJBQUEsTUFBQTs7O1FBR0EsT0FBQTs7OztBQzdEQSxDQUFBLFVBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEsWUFBQSxRQUFBLDZEQUFBLFVBQUEsYUFBQSxnQkFBQTs7UUFFQSxJQUFBLDBCQUFBLFVBQUEsZUFBQSxNQUFBLFVBQUEsY0FBQTtZQUNBLEtBQUEsZ0JBQUE7WUFDQSxLQUFBLE9BQUE7WUFDQSxLQUFBLFdBQUE7Ozs7O1lBS0EsS0FBQSxlQUFBLGdCQUFBOzs7O1FBSUEsd0JBQUEsUUFBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLE1BQUE7Z0JBQ0EsT0FBQSxJQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7OztZQUdBLE9BQUEsSUFBQTs7O1FBR0Esd0JBQUEsY0FBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLFFBQUEsUUFBQSxPQUFBO2dCQUNBLE9BQUE7cUJBQ0EsSUFBQSx3QkFBQTs7WUFFQSxPQUFBLHdCQUFBLE1BQUE7Ozs7UUFJQSxPQUFBOzs7OztBQ3RDQSxDQUFBLFlBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEsWUFBQSxRQUFBLDhFQUFBLFVBQUEsYUFBQSxzQkFBQSxnQkFBQTtRQUNBLElBQUEsbUJBQUEsVUFBQSxJQUFBLE1BQUEsU0FBQSxPQUFBLGFBQUEsV0FBQSxZQUFBLFNBQUEsZUFBQSxVQUFBLGNBQUEsV0FBQTtZQUNBLEtBQUEsS0FBQTtZQUNBLEtBQUEsT0FBQTtZQUNBLEtBQUEsVUFBQTtZQUNBLEtBQUEsUUFBQTtZQUNBLEtBQUEsY0FBQTtZQUNBLEtBQUEsWUFBQTtZQUNBLEtBQUEsYUFBQSxxQkFBQSxZQUFBO1lBQ0EsS0FBQSxVQUFBO1lBQ0EsS0FBQSxnQkFBQTtZQUNBLEtBQUEsV0FBQTtZQUNBLEtBQUEsZUFBQTtZQUNBLEtBQUEsWUFBQSxlQUFBLFlBQUE7WUFDQSxLQUFBLFdBQUE7Ozs7UUFJQSxpQkFBQSxRQUFBLFVBQUEsTUFBQTtZQUNBLElBQUEsTUFBQTtnQkFDQSxPQUFBLElBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7OztZQUdBLE9BQUEsSUFBQTs7O1FBR0EsaUJBQUEsY0FBQSxVQUFBLE1BQUE7WUFDQSxJQUFBLFFBQUEsUUFBQSxPQUFBO2dCQUNBLE9BQUE7cUJBQ0EsSUFBQSxpQkFBQTs7WUFFQSxPQUFBLGlCQUFBLE1BQUE7OztRQUdBLE9BQUE7Ozs7QUNqREEsQ0FBQSxZQUFBO0lBQ0E7O0lBRUEsUUFBQSxPQUFBLFlBQUEsUUFBQSxpREFBQSxVQUFBLHNCQUFBOztRQUVBLElBQUEsOEJBQUEsU0FBQSxLQUFBO1lBQ0EsSUFBQSxVQUFBO1lBQ0EsRUFBQSxRQUFBLE1BQUEsU0FBQSxJQUFBO2VBQ0EsUUFBQSxLQUFBO21CQUNBLGVBQUEsSUFBQTttQkFDQSxNQUFBLElBQUE7bUJBQ0EsVUFBQTt1QkFDQSxNQUFBLElBQUEsU0FBQTt1QkFDQSxTQUFBLElBQUEsU0FBQTs7bUJBRUEsY0FBQSxJQUFBOzs7WUFHQSxPQUFBOztRQUVBLElBQUEsdUJBQUEsVUFBQSxJQUFBLE1BQUEsU0FBQSxPQUFBLGFBQUEsWUFBQSxjQUFBO1lBQ0EsR0FBQSxHQUFBO2dCQUNBLEtBQUEsS0FBQTs7WUFFQSxLQUFBLE9BQUE7WUFDQSxLQUFBLFVBQUE7WUFDQSxLQUFBLFFBQUE7WUFDQSxLQUFBLGNBQUE7O1lBRUEsS0FBQSxhQUFBO2dCQUNBLFlBQUEsV0FBQTtnQkFDQSxTQUFBLFdBQUE7Z0JBQ0EsTUFBQSw0QkFBQSxXQUFBOztZQUVBLEtBQUEsZUFBQTs7OztRQUlBLHFCQUFBLFFBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxNQUFBO2dCQUNBLE9BQUEsSUFBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBO29CQUNBLEtBQUE7b0JBQ0EsS0FBQTtvQkFDQSxLQUFBOzs7WUFHQSxPQUFBLElBQUE7OztRQUdBLHFCQUFBLGNBQUEsVUFBQSxNQUFBO1lBQ0EsSUFBQSxRQUFBLFFBQUEsT0FBQTtnQkFDQSxPQUFBO3FCQUNBLElBQUEscUJBQUE7O1lBRUEsT0FBQSxxQkFBQSxNQUFBOzs7UUFHQSxPQUFBOzs7QUM3REEsQ0FBQSxZQUFBO0lBQ0E7Ozs7SUFJQSxRQUFBLE9BQUEsWUFBQSxRQUFBLGlKQUFBLFVBQUEsT0FBQSxJQUFBLFVBQUEsYUFBQSxZQUFBLGtCQUFBLFFBQUEsZUFBQSxzQkFBQTtRQUNBLElBQUEsbUJBQUEsVUFBQSxNQUFBLFdBQUEsU0FBQSxPQUFBLE9BQUEsV0FBQSxnQkFBQSxrQkFBQSxLQUFBO1lBQ0EsT0FBQTtnQkFDQSxNQUFBO2dCQUNBLFdBQUE7Z0JBQ0EsU0FBQTtnQkFDQSxPQUFBO2dCQUNBLE9BQUE7Z0JBQ0EsV0FBQTtnQkFDQSxnQkFBQTtnQkFDQSxrQkFBQTtnQkFDQSxLQUFBOzs7O1FBSUEsT0FBQTtZQUNBLGdCQUFBLFlBQUE7Z0JBQ0EsSUFBQSxJQUFBLEdBQUE7Z0JBQ0EsTUFBQSxJQUFBLFlBQUEsS0FBQSxZQUFBLGlCQUFBLFFBQUEsVUFBQSxNQUFBO29CQUNBLEVBQUEsUUFBQSxXQUFBLFlBQUEsS0FBQTttQkFDQSxNQUFBLFVBQUEsT0FBQTtvQkFDQSxFQUFBLE9BQUE7O2dCQUVBLE9BQUEsRUFBQTs7O1lBR0EscUJBQUEsVUFBQSxJQUFBO2NBQ0EsSUFBQSxJQUFBLEdBQUE7O2NBRUEsTUFBQSxJQUFBLFlBQUEsS0FBQSxZQUFBLGtCQUFBLEtBQUEsS0FBQSxRQUFBLFVBQUEsTUFBQTtnQkFDQSxJQUFBLGFBQUEsaUJBQUEsWUFBQTtnQkFDQSxFQUFBLFFBQUE7O2NBRUEsT0FBQSxFQUFBOzs7WUFHQSxZQUFBLFVBQUEsUUFBQTtnQkFDQSxTQUFBLFVBQUE7Z0JBQ0EsSUFBQSxJQUFBLEdBQUE7O2dCQUVBLE1BQUE7b0JBQ0EsS0FBQSxPQUFBLE1BQUEsT0FBQSxNQUFBLFlBQUEsS0FBQSxZQUFBO29CQUNBLFFBQUE7b0JBQ0EsUUFBQTttQkFDQSxRQUFBLFVBQUEsTUFBQTtvQkFDQSxLQUFBLFVBQUEsT0FBQSxZQUFBLEtBQUE7b0JBQ0EsRUFBQSxRQUFBO21CQUNBLE1BQUEsVUFBQSxPQUFBO29CQUNBLEVBQUEsT0FBQTs7O2dCQUdBLE9BQUEsRUFBQTs7O1lBR0Esa0JBQUEsVUFBQSxJQUFBO2dCQUNBLElBQUEsSUFBQSxHQUFBO2dCQUNBLE1BQUEsSUFBQSxZQUFBLEtBQUEsWUFBQSxhQUFBLEtBQUEsS0FBQSxRQUFBLFVBQUEsTUFBQTtvQkFDQSxJQUFBLFNBQUEsY0FBQSxZQUFBO29CQUNBLEVBQUEsUUFBQTttQkFDQSxNQUFBLFVBQUEsT0FBQTtvQkFDQSxFQUFBLE9BQUE7O2dCQUVBLE9BQUEsRUFBQTs7O1lBR0EsZ0JBQUEsU0FBQSxZQUFBO2dCQUNBLElBQUEsSUFBQSxHQUFBO2dCQUNBLElBQUEsa0JBQUEscUJBQUEsWUFBQTs7Z0JBRUEsR0FBQSxDQUFBLGdCQUFBLEdBQUE7b0JBQ0EsTUFBQSxLQUFBLFlBQUEsS0FBQSxZQUFBLGlCQUFBLGlCQUFBLFFBQUEsVUFBQSxRQUFBO3dCQUNBLFdBQUEsS0FBQTt3QkFDQSxFQUFBLFFBQUE7dUJBQ0EsTUFBQSxTQUFBLE1BQUE7d0JBQ0EsRUFBQSxPQUFBOzt1QkFFQTtvQkFDQSxNQUFBLE1BQUEsWUFBQSxLQUFBLFlBQUEsa0JBQUEsZ0JBQUEsS0FBQSxLQUFBLGlCQUFBLFFBQUEsVUFBQSxRQUFBO3dCQUNBLGFBQUE7d0JBQ0EsRUFBQSxRQUFBO3VCQUNBLE1BQUEsU0FBQSxNQUFBO3dCQUNBLEVBQUEsT0FBQTs7OztnQkFJQSxPQUFBLEVBQUE7OztZQUdBLG9CQUFBLFVBQUEsWUFBQTtnQkFDQSxJQUFBLElBQUEsR0FBQTtnQkFDQSxJQUFBLGtCQUFBLHFCQUFBLFlBQUE7O2dCQUVBLE1BQUEsS0FBQSxZQUFBLEtBQUEsWUFBQSw0QkFBQSxpQkFBQSxRQUFBLFVBQUEsUUFBQTtvQkFDQSxFQUFBLFFBQUE7bUJBQ0EsTUFBQSxTQUFBLE1BQUE7b0JBQ0EsRUFBQSxPQUFBOzs7Z0JBR0EsT0FBQSxFQUFBOzs7Ozs7QUN2R0EsQ0FBQSxZQUFBO0lBQ0E7O0lBRUEsUUFBQSxPQUFBLFlBQUEsUUFBQSxpRUFBQSxTQUFBLE9BQUEsSUFBQSxXQUFBLGFBQUE7O1FBRUEsT0FBQTtZQUNBLGVBQUEsWUFBQTtnQkFDQSxJQUFBLElBQUEsR0FBQTtnQkFDQSxJQUFBLE1BQUEsWUFBQSxLQUFBLFlBQUE7O2dCQUVBLE1BQUE7b0JBQ0EsS0FBQTtvQkFDQSxRQUFBO21CQUNBLFFBQUEsVUFBQSxNQUFBO29CQUNBLEVBQUEsUUFBQSxLQUFBO21CQUNBLE1BQUEsVUFBQSxPQUFBO29CQUNBLEVBQUEsT0FBQTs7Z0JBRUEsT0FBQSxFQUFBOzs7Ozs7Ozs7Ozs7OztDQ2JBLElBQUEsZUFBQSxVQUFBOzs7OztJQUtBLFFBQUEsSUFBQTs7O0NBR0EsT0FBQSxXQUFBOztBQUVBLEdBQUEsUUFBQSxXQUFBO0lBQ0EsSUFBQSx1QkFBQTtJQUNBLElBQUEseUJBQUE7O0lBRUEsSUFBQSxTQUFBO0VBQ0EsTUFBQTtFQUNBLFFBQUE7RUFDQSxTQUFBO0VBQ0EsT0FBQTs7SUFFQSxJQUFBLGtCQUFBLEdBQUEsS0FBQSxJQUFBLE9BQUEsSUFBQSxPQUFBLENBQUE7SUFDQSxJQUFBLGdCQUFBLEdBQUEsS0FBQSxLQUFBLE9BQUEsSUFBQSxPQUFBLENBQUE7SUFDQSxJQUFBLGlCQUFBO0lBQ0EsSUFBQSxZQUFBO0lBQ0EsSUFBQSxhQUFBO0lBQ0EsSUFBQSxTQUFBLFNBQUEsS0FBQSxlQUFBLE9BQUEsTUFBQSxPQUFBLE9BQUE7SUFDQSxJQUFBLFFBQUEsU0FBQSxLQUFBLGNBQUEsT0FBQSxRQUFBLE9BQUEsS0FBQTtDQUNBLElBQUEsV0FBQTtDQUNBLElBQUEsUUFBQTtDQUNBLElBQUEsUUFBQTs7SUFFQSxJQUFBLGFBQUE7O0lBRUEsSUFBQSxjQUFBLFNBQUEsR0FBQTtFQUNBLE9BQUEsRUFBQSxTQUFBLEVBQUEsV0FBQSxFQUFBOzs7SUFHQSxJQUFBLGdCQUFBLFNBQUEsR0FBQTtFQUNBLE9BQUEsZUFBQSxFQUFBLEVBQUEsVUFBQSxNQUFBLEVBQUEsRUFBQSxZQUFBOzs7SUFHQSxJQUFBLElBQUEsR0FBQSxLQUFBLFFBQUEsT0FBQSxFQUFBLGlCQUFBLGlCQUFBLE1BQUEsRUFBQSxHQUFBLFNBQUEsTUFBQTs7SUFFQSxJQUFBLElBQUEsR0FBQSxNQUFBLFVBQUEsT0FBQSxXQUFBLGdCQUFBLEVBQUEsR0FBQSxTQUFBLE9BQUEsTUFBQSxPQUFBLFVBQUE7O0lBRUEsSUFBQSxRQUFBLEdBQUEsSUFBQSxPQUFBLE1BQUEsR0FBQSxPQUFBLFVBQUEsV0FBQSxHQUFBLEtBQUEsT0FBQSxhQUFBLGNBQUE7TUFDQSxTQUFBLEdBQUEsWUFBQTs7SUFFQSxJQUFBLFFBQUEsR0FBQSxJQUFBLE9BQUEsTUFBQSxHQUFBLE9BQUEsUUFBQSxTQUFBOztJQUVBLElBQUEsaUJBQUEsU0FBQSxPQUFBO0NBQ0EsSUFBQSxtQkFBQSxzQkFBQTtLQUNBLElBQUEsVUFBQSxhQUFBLE1BQUEsU0FBQSxHQUFBO0VBQ0Esa0JBQUEsR0FBQSxLQUFBLElBQUEsT0FBQSxJQUFBLFFBQUEsQ0FBQTtFQUNBLGdCQUFBLEdBQUEsS0FBQSxLQUFBLE9BQUEsSUFBQSxRQUFBLENBQUE7RUFDQTs7S0FFQSxNQUFBLEtBQUEsU0FBQSxHQUFBLEdBQUE7RUFDQSxPQUFBLEVBQUEsU0FBQSxFQUFBOztLQUVBLGdCQUFBLE1BQUEsTUFBQSxTQUFBLEdBQUE7S0FDQSxNQUFBLEtBQUEsU0FBQSxHQUFBLEdBQUE7RUFDQSxPQUFBLEVBQUEsU0FBQSxFQUFBOztLQUVBLGtCQUFBLE1BQUEsR0FBQTs7OztJQUlBLElBQUEsV0FBQSxXQUFBO0NBQ0EsSUFBQSxHQUFBLEtBQUEsUUFBQSxPQUFBLEVBQUEsaUJBQUEsaUJBQUEsTUFBQSxFQUFBLEdBQUEsU0FBQSxNQUFBO0NBQ0EsSUFBQSxHQUFBLE1BQUEsVUFBQSxPQUFBLFdBQUEsZ0JBQUEsRUFBQSxHQUFBLFNBQUEsT0FBQSxNQUFBLE9BQUEsVUFBQTtDQUNBLFFBQUEsR0FBQSxJQUFBLE9BQUEsTUFBQSxHQUFBLE9BQUEsVUFBQSxNQUFBLEtBQUEsS0FBQSxNQUFBLE1BQUEsV0FBQSxHQUFBLEtBQUEsT0FBQSxhQUFBLGNBQUE7R0FDQSxTQUFBLEdBQUEsWUFBQTs7Q0FFQSxRQUFBLEdBQUEsSUFBQSxPQUFBLE1BQUEsR0FBQSxPQUFBLFFBQUEsU0FBQTs7O0lBR0EsU0FBQSxNQUFBLE9BQUE7O0NBRUEsZUFBQTtDQUNBOztDQUVBLElBQUEsTUFBQSxHQUFBLE9BQUE7RUFDQSxPQUFBO0VBQ0EsS0FBQSxTQUFBO0VBQ0EsS0FBQSxTQUFBLFFBQUEsT0FBQSxPQUFBLE9BQUE7RUFDQSxLQUFBLFVBQUEsU0FBQSxPQUFBLE1BQUEsT0FBQTtFQUNBLE9BQUE7U0FDQSxLQUFBLFNBQUE7RUFDQSxLQUFBLFNBQUEsUUFBQSxPQUFBLE9BQUEsT0FBQTtFQUNBLEtBQUEsVUFBQSxTQUFBLE9BQUEsTUFBQSxPQUFBO0VBQ0EsS0FBQSxhQUFBLGVBQUEsT0FBQSxPQUFBLE9BQUEsT0FBQSxNQUFBOztNQUVBLElBQUEsVUFBQTtHQUNBLEtBQUEsT0FBQSxhQUFBO0dBQ0EsT0FBQTtHQUNBLEtBQUEsTUFBQTtVQUNBLEtBQUEsTUFBQTtHQUNBLEtBQUEsU0FBQSxTQUFBLEVBQUE7TUFDQSxHQUFBLFdBQUEsRUFBQSxXQUFBLEtBQUEsRUFBQSxPQUFBO01BQ0EsT0FBQSxXQUFBLEVBQUE7O0dBRUEsS0FBQSxLQUFBO0dBQ0EsS0FBQSxhQUFBO0dBQ0EsS0FBQSxVQUFBLFNBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQTtHQUNBLEtBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxRQUFBLEVBQUEsRUFBQSxVQUFBLEVBQUEsRUFBQTs7OztFQUlBLElBQUEsT0FBQTtHQUNBLEtBQUEsU0FBQTtHQUNBLEtBQUEsYUFBQSxtQkFBQSxTQUFBLE9BQUEsTUFBQSxPQUFBLFVBQUE7R0FDQTtHQUNBLEtBQUE7O0VBRUEsSUFBQSxPQUFBLEtBQUEsS0FBQSxTQUFBLFVBQUEsYUFBQSxLQUFBOztFQUVBLE9BQUE7O0tBRUE7O0lBRUEsTUFBQSxTQUFBLFNBQUEsT0FBQTtRQUNBLFFBQUEsSUFBQTtDQUNBLGVBQUE7Q0FDQTs7UUFFQSxJQUFBLE1BQUEsR0FBQSxPQUFBOztRQUVBLElBQUEsa0JBQUEsSUFBQSxPQUFBO1FBQ0EsSUFBQSxPQUFBLGdCQUFBLFVBQUEsUUFBQSxLQUFBLE9BQUE7O1FBRUEsS0FBQTtVQUNBLE9BQUEsT0FBQTtVQUNBLEtBQUEsTUFBQTtVQUNBLEtBQUEsTUFBQTtHQUNBLEtBQUEsU0FBQSxTQUFBLEVBQUE7TUFDQSxHQUFBLFdBQUEsRUFBQSxXQUFBLEtBQUEsRUFBQSxPQUFBO01BQ0EsT0FBQSxXQUFBLEVBQUE7O0dBRUE7R0FDQSxLQUFBLEtBQUE7R0FDQSxLQUFBLGFBQUE7R0FDQSxLQUFBLFVBQUEsU0FBQSxHQUFBLEVBQUEsT0FBQSxFQUFBO0lBQ0EsS0FBQSxTQUFBLFNBQUEsR0FBQTtNQUNBLFFBQUEsRUFBQSxFQUFBLFVBQUEsRUFBQSxFQUFBOzs7UUFHQSxLQUFBO1dBQ0EsS0FBQSxhQUFBO0dBQ0EsS0FBQSxVQUFBLFNBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQTtHQUNBLEtBQUEsU0FBQSxTQUFBLEdBQUE7TUFDQSxRQUFBLEVBQUEsRUFBQSxVQUFBLEVBQUEsRUFBQTs7O0NBR0EsS0FBQSxPQUFBOztDQUVBLElBQUEsT0FBQSxNQUFBLGFBQUEsS0FBQTtDQUNBLElBQUEsT0FBQSxNQUFBLGFBQUEsS0FBQTs7Q0FFQSxPQUFBOzs7SUFHQSxNQUFBLFNBQUEsU0FBQSxPQUFBO0NBQ0EsSUFBQSxDQUFBLFVBQUE7S0FDQSxPQUFBO0NBQ0EsU0FBQTtDQUNBLE9BQUE7OztJQUdBLE1BQUEsYUFBQSxTQUFBLE9BQUE7Q0FDQSxJQUFBLENBQUEsVUFBQTtLQUNBLE9BQUEsRUFBQSxpQkFBQTtDQUNBLGtCQUFBLENBQUEsTUFBQSxJQUFBLGdCQUFBLENBQUEsTUFBQTtDQUNBLE9BQUE7Ozs7Ozs7O0lBUUEsTUFBQSxpQkFBQSxTQUFBLE9BQUE7Q0FDQSxJQUFBLENBQUEsVUFBQTtLQUNBLE9BQUE7UUFDQSxpQkFBQTtRQUNBLE9BQUE7Ozs7SUFJQSxNQUFBLFlBQUEsU0FBQSxPQUFBO0NBQ0EsSUFBQSxDQUFBLFVBQUE7S0FDQSxPQUFBO0NBQ0EsWUFBQTtDQUNBLE9BQUE7OztJQUdBLE1BQUEsYUFBQSxTQUFBLE9BQUE7Q0FDQSxJQUFBLENBQUEsVUFBQTtLQUNBLE9BQUE7Q0FDQSxhQUFBO0NBQ0EsT0FBQTs7O0NBR0EsTUFBQSxRQUFBLFNBQUEsTUFBQTtFQUNBLEdBQUEsQ0FBQSxVQUFBLE9BQUE7R0FDQSxPQUFBOztFQUVBLFFBQUE7RUFDQSxPQUFBOzs7Q0FHQSxNQUFBLFFBQUEsU0FBQSxNQUFBO0VBQ0EsR0FBQSxDQUFBLFVBQUEsT0FBQTtHQUNBLE9BQUE7O0VBRUEsUUFBQTtFQUNBLE9BQUE7OztJQUdBLE1BQUEsUUFBQSxTQUFBLE9BQUE7Q0FDQSxJQUFBLENBQUEsVUFBQTtLQUNBLE9BQUE7Q0FDQSxRQUFBLENBQUE7Q0FDQSxPQUFBOzs7SUFHQSxNQUFBLFNBQUEsU0FBQSxPQUFBO0NBQ0EsSUFBQSxDQUFBLFVBQUE7S0FDQSxPQUFBO0NBQ0EsU0FBQSxDQUFBO0NBQ0EsT0FBQTs7O0lBR0EsTUFBQSxhQUFBLFNBQUEsT0FBQTtDQUNBLElBQUEsQ0FBQSxVQUFBO0tBQ0EsT0FBQTtDQUNBLGFBQUE7Q0FDQSxPQUFBOzs7Q0FHQSxNQUFBLFdBQUEsU0FBQSxPQUFBO0VBQ0EsR0FBQSxDQUFBLFVBQUEsT0FBQTtHQUNBLE9BQUE7O0VBRUEsV0FBQTtFQUNBLE9BQUE7Ozs7O0lBS0EsT0FBQTs7O0FDaFFBLFNBQUEsTUFBQSxpQkFBQTtBQUNBO0lBQ0EsS0FBQSxrQkFBQTs7SUFFQSxJQUFBLE9BQUE7O0lBRUEsS0FBQSxZQUFBLFNBQUE7SUFDQTtRQUNBLEtBQUEsU0FBQTs7UUFFQSxLQUFBLE9BQUEsT0FBQSxLQUFBLE9BQUEsT0FBQTs7UUFFQSxLQUFBLE9BQUEsU0FBQSxLQUFBLE9BQUEsT0FBQSxPQUFBO1FBQ0EsS0FBQSxPQUFBLEtBQUEsS0FBQSxPQUFBLE9BQUE7UUFDQSxLQUFBLE9BQUEsS0FBQSxLQUFBLE9BQUEsT0FBQTs7UUFFQSxLQUFBLE9BQUEsTUFBQSxhQUFBLGNBQUEsTUFBQSxjQUFBLE1BQUE7UUFDQSxLQUFBLE9BQUEsTUFBQSxhQUFBLGNBQUEsTUFBQSxjQUFBLE1BQUE7UUFDQSxLQUFBLE9BQUEsUUFBQSxLQUFBLE9BQUEsTUFBQSxLQUFBLE9BQUE7O1FBRUEsS0FBQSxPQUFBLGFBQUEsY0FBQSxjQUFBO1FBQ0EsS0FBQSxPQUFBLGFBQUEsY0FBQSxjQUFBOztRQUVBLEtBQUEsT0FBQSxjQUFBLGNBQUEsY0FBQTtRQUNBLEtBQUEsT0FBQSxjQUFBLGNBQUEsZUFBQTtRQUNBLEtBQUEsT0FBQSxZQUFBLGNBQUEsWUFBQTs7UUFFQSxLQUFBLE9BQUEscUJBQUEsY0FBQSxzQkFBQTs7O0lBR0EsS0FBQSxTQUFBO0lBQ0E7UUFDQSxLQUFBLE9BQUEsR0FBQSxPQUFBLE1BQUEsS0FBQTthQUNBLE9BQUE7YUFDQSxLQUFBLFNBQUE7YUFDQSxLQUFBLFNBQUEsS0FBQSxPQUFBO2FBQ0EsS0FBQSxVQUFBLEtBQUEsT0FBQTs7UUFFQSxLQUFBLEtBQUEsT0FBQTthQUNBLEtBQUEsU0FBQTthQUNBLEtBQUEsTUFBQSxLQUFBLE9BQUE7YUFDQSxLQUFBLE1BQUEsS0FBQSxPQUFBO2FBQ0EsS0FBQSxLQUFBLEtBQUEsT0FBQSxTQUFBO2FBQ0EsTUFBQSxRQUFBOzs7O1FBSUEsS0FBQSxLQUFBLE9BQUE7YUFDQSxLQUFBLE1BQUEsS0FBQSxPQUFBO2FBQ0EsS0FBQSxNQUFBLEtBQUEsT0FBQTthQUNBLEtBQUEsS0FBQSxNQUFBLEtBQUEsT0FBQTthQUNBLE1BQUEsUUFBQTthQUNBLE1BQUEsVUFBQTthQUNBLE1BQUEsZ0JBQUE7O1FBRUEsS0FBQSxJQUFBLFlBQUEsS0FBQSxPQUFBO1FBQ0E7WUFDQSxLQUFBLFNBQUEsS0FBQSxPQUFBLFdBQUEsVUFBQSxNQUFBLEtBQUEsT0FBQSxXQUFBLFVBQUEsSUFBQSxLQUFBLE9BQUE7OztRQUdBLEtBQUEsSUFBQSxhQUFBLEtBQUEsT0FBQTtRQUNBO1lBQ0EsS0FBQSxTQUFBLEtBQUEsT0FBQSxZQUFBLFdBQUEsTUFBQSxLQUFBLE9BQUEsWUFBQSxXQUFBLElBQUEsS0FBQSxPQUFBOzs7UUFHQSxLQUFBLElBQUEsVUFBQSxLQUFBLE9BQUE7UUFDQTtZQUNBLEtBQUEsU0FBQSxLQUFBLE9BQUEsU0FBQSxRQUFBLE1BQUEsS0FBQSxPQUFBLFNBQUEsUUFBQSxJQUFBLEtBQUEsT0FBQTs7O1FBR0EsSUFBQSxXQUFBOztRQUVBLElBQUEsYUFBQSxLQUFBLE9BQUE7UUFDQTtZQUNBLFdBQUEsS0FBQSxNQUFBLEtBQUEsT0FBQSxPQUFBO1lBQ0EsS0FBQSxLQUFBLE9BQUE7aUJBQ0EsS0FBQSxLQUFBLEtBQUEsT0FBQTtpQkFDQSxLQUFBLEtBQUEsS0FBQSxPQUFBLEtBQUEsSUFBQSxXQUFBO2lCQUNBLEtBQUEsTUFBQSxXQUFBO2lCQUNBLEtBQUEsZUFBQTtpQkFDQSxLQUFBLEtBQUEsT0FBQTtpQkFDQSxNQUFBLGFBQUEsV0FBQTtpQkFDQSxNQUFBLFFBQUE7aUJBQ0EsTUFBQSxnQkFBQTs7O1FBR0EsV0FBQSxLQUFBLE1BQUEsS0FBQSxPQUFBLE9BQUE7UUFDQSxJQUFBLGFBQUEsS0FBQSxPQUFBLFNBQUEsS0FBQSxPQUFBLGFBQUE7UUFDQSxLQUFBLElBQUEsUUFBQSxLQUFBLE9BQUEsS0FBQSxTQUFBLEtBQUEsT0FBQSxLQUFBLFNBQUE7UUFDQTtZQUNBLElBQUEsYUFBQSxhQUFBLEtBQUEsT0FBQTtnQkFDQSxTQUFBO2dCQUNBLFNBQUE7WUFDQSxLQUFBLElBQUEsUUFBQSxRQUFBLFlBQUEsUUFBQSxLQUFBLElBQUEsUUFBQSxZQUFBLEtBQUEsT0FBQSxNQUFBLFNBQUE7WUFDQTtnQkFDQSxTQUFBLEtBQUEsYUFBQSxPQUFBO2dCQUNBLFNBQUEsS0FBQSxhQUFBLE9BQUE7O2dCQUVBLEtBQUEsS0FBQSxPQUFBO3FCQUNBLEtBQUEsTUFBQSxPQUFBO3FCQUNBLEtBQUEsTUFBQSxPQUFBO3FCQUNBLEtBQUEsTUFBQSxPQUFBO3FCQUNBLEtBQUEsTUFBQSxPQUFBO3FCQUNBLE1BQUEsVUFBQTtxQkFDQSxNQUFBLGdCQUFBOzs7WUFHQSxTQUFBLEtBQUEsYUFBQSxPQUFBO1lBQ0EsU0FBQSxLQUFBLGFBQUEsT0FBQTs7WUFFQSxLQUFBLEtBQUEsT0FBQTtpQkFDQSxLQUFBLE1BQUEsT0FBQTtpQkFDQSxLQUFBLE1BQUEsT0FBQTtpQkFDQSxLQUFBLE1BQUEsT0FBQTtpQkFDQSxLQUFBLE1BQUEsT0FBQTtpQkFDQSxNQUFBLFVBQUE7aUJBQ0EsTUFBQSxnQkFBQTs7WUFFQSxJQUFBLFNBQUEsS0FBQSxPQUFBLE9BQUEsU0FBQSxLQUFBLE9BQUE7WUFDQTtnQkFDQSxJQUFBLFFBQUEsS0FBQSxhQUFBLE9BQUE7O2dCQUVBLEtBQUEsS0FBQSxPQUFBO3FCQUNBLEtBQUEsS0FBQSxNQUFBO3FCQUNBLEtBQUEsS0FBQSxNQUFBO3FCQUNBLEtBQUEsTUFBQSxXQUFBO3FCQUNBLEtBQUEsZUFBQSxTQUFBLEtBQUEsT0FBQSxNQUFBLFVBQUE7cUJBQ0EsS0FBQTtxQkFDQSxNQUFBLGFBQUEsV0FBQTtxQkFDQSxNQUFBLFFBQUE7cUJBQ0EsTUFBQSxnQkFBQTs7OztRQUlBLElBQUEsbUJBQUEsS0FBQSxLQUFBLE9BQUEsU0FBQSxLQUFBLFNBQUE7O1FBRUEsSUFBQSxXQUFBLENBQUEsS0FBQSxPQUFBLE1BQUEsS0FBQSxPQUFBLE9BQUE7O1FBRUEsSUFBQSxjQUFBLEtBQUEsaUJBQUE7O1FBRUEsSUFBQSxjQUFBLEdBQUEsSUFBQTthQUNBLEVBQUEsU0FBQSxHQUFBLEVBQUEsT0FBQSxFQUFBO2FBQ0EsRUFBQSxTQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUE7YUFDQSxZQUFBOztRQUVBLGlCQUFBLFVBQUE7YUFDQSxLQUFBLENBQUE7YUFDQTthQUNBLE9BQUE7YUFDQSxLQUFBLEtBQUE7YUFDQSxNQUFBLFFBQUE7O1FBRUEsaUJBQUEsT0FBQTthQUNBLEtBQUEsTUFBQSxLQUFBLE9BQUE7YUFDQSxLQUFBLE1BQUEsS0FBQSxPQUFBO2FBQ0EsS0FBQSxLQUFBLE9BQUEsS0FBQSxPQUFBO2FBQ0EsTUFBQSxRQUFBOztRQUVBLFdBQUEsS0FBQSxNQUFBLEtBQUEsT0FBQSxPQUFBO1FBQ0EsaUJBQUEsVUFBQTthQUNBLEtBQUEsQ0FBQTthQUNBO2FBQ0EsT0FBQTthQUNBLEtBQUEsS0FBQSxLQUFBLE9BQUE7YUFDQSxLQUFBLEtBQUEsS0FBQSxPQUFBLE9BQUEsS0FBQSxPQUFBLEtBQUEsSUFBQTthQUNBLEtBQUEsTUFBQSxXQUFBO2FBQ0EsS0FBQSxlQUFBO2FBQ0EsTUFBQSxhQUFBLFdBQUE7YUFDQSxNQUFBLFFBQUE7YUFDQSxNQUFBLGdCQUFBOztRQUVBLEtBQUEsT0FBQSxLQUFBLE9BQUEsS0FBQTs7O0lBR0EsS0FBQSxtQkFBQSxTQUFBO0lBQ0E7UUFDQSxJQUFBLFFBQUEsS0FBQSxPQUFBLFFBQUE7O1FBRUEsSUFBQSxPQUFBLGFBQUEsT0FBQTtRQUNBLElBQUEsUUFBQSxhQUFBLFFBQUEsT0FBQTtRQUNBLElBQUEsUUFBQSxhQUFBLFFBQUEsT0FBQTs7UUFFQSxJ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QUEsRUFBQSxLQUFBLFdBQUEsRUFBQSxJQUFBLG1CQUFBLEtBQUEsY0FBQSxzQkFBQSxLQUFBLGVBQUEsS0FBQSxLQUFBLGVBQUEsS0FBQSxLQUFBLFNBQUEscXBCQUFBLEtBQUEsaUJBQUEsSUFBQSxLQUFBLHNCQUFBLDZCQUFBLEtBQUEsS0FBQSxDQUFBLGVBQUEsYUFBQSxXQUFBLFVBQUEsWUFBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLFNBQUEsRUFBQSxFQUFBLENBQUEsSUFBQSxFQUFBLENBQUEsUUFBQSxJQUFBLE1BQUEsSUFBQSxLQUFBLElBQUEsTUFBQSxJQUFBLEdBQUEsSUFBQSxLQUFBLElBQUEsU0FBQSxJQUFBLFVBQUEsS0FBQSxFQUFBLEVBQUEsTUFBQSxLQUFBLElBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsSUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLFdBQUEsRUFBQSxVQUFBLFNBQUEsUUFBQSxRQUFBLEVBQUEsRUFBQSxHQUFBLFVBQUEsRUFBQSxHQUFBLFFBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxPQUFBLEVBQUEsS0FBQSxPQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEtBQUEsTUFBQSxhQUFBLE1BQUEsRUFBQSxDQUFBLEdBQUEsS0FBQSxZQUFBLEVBQUEsS0FBQSxTQUFBLEVBQUEsS0FBQSxPQUFBLEVBQUEsS0FBQSxRQUFBLEVBQUEsS0FBQSxXQUFBLEVBQUEsS0FBQSxVQUFBLEtBQUEsU0FBQSxHQUFBLENBQUEsSUFBQSxJQUFBLEVBQUEsRUFBQSxRQUFBLE9BQUEsS0FBQSxDQUFBLElBQUEsRUFBQSxFQUFBLFFBQUEsR0FBQSxHQUFBLENBQUEsRUFBQSxZQUFBLEVBQUEsSUFBQSxTQUFBLEdBQUEsQ0FBQSxFQUFBLFlBQUEsQ0FBQSxFQUFBLFlBQUEsRUFBQSxhQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxZQUFBLEVBQUEsS0FBQSxDQUFBLFFBQUEsU0FBQSxlQUFBLEVBQUEsT0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLElBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsSUFBQSxFQUFBLEVBQUEsQ0FBQSxRQUFBLFNBQUEsWUFBQSxFQUFBLE9BQUEsVUFBQSxTQUFBLEtBQUEsR0FBQSxHQUFBLG9CQUFBLElBQUEsRUFBQSxFQUFBLFlBQUEsRUFBQSxFQUFBLFNBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLFdBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxFQUFBLE9BQUEsYUFBQSxVQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxpQkFBQSxRQUFBLFlBQUEsS0FBQSxFQUFBLGlCQUFBLEtBQUEsSUFBQSxJQUFBLEVBQUEsQ0FBQSxHQUFBLFlBQUEsT0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLGFBQUEsUUFBQSxFQUFBLElBQUEsSUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxjQUFBLEVBQUEsRUFBQSxRQUFBLEVBQUEsSUFBQSxDQUFBLElBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsU0FBQSxFQUFBLENBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsUUFBQSxFQUFBLFdBQUEsRUFBQSxFQUFBLFNBQUEsY0FBQSxHQUFBLENBQUEsSUFBQSxFQUFBLFVBQUEsS0FBQSxRQUFBLGVBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxPQUFBLElBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsSUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsTUFBQSxHQUFBLEVBQUEsRUFBQSxNQUFBLEtBQUEsYUFBQSxVQUFBLE9BQUEsRUFBQSxVQUFBLEtBQUEsRUFBQSxFQUFBLEdBQUEsR0FBQSxVQUFBLEtBQUEsRUFBQSxFQUFBLElBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxPQUFBLEVBQUEsUUFBQSxLQUFBLEdBQUEsRUFBQSxTQUFBLEVBQUEsRUFBQSxDQUFBLElBQUEsRUFBQSxhQUFBLEVBQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxVQUFBLE9BQUEsR0FBQSxRQUFBLFFBQUEsR0FBQSxDQUFBLElBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxLQUFBLEVBQUEsRUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsUUFBQSxRQUFBLEVBQUEsSUFBQSxPQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsUUFBQSxHQUFBLE1BQUEsT0FBQSxFQUFBLEVBQUEsUUFBQSxHQUFBLE1BQUEsT0FBQSxFQUFBLFFBQUEsR0FBQSxNQUFBLFFBQUEsR0FBQSxHQUFBLEVBQUEsUUFBQSxPQUFBLEVBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLFNBQUEsRUFBQSxFQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsT0FBQSxFQUFBLFFBQUEsSUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxRQUFBLE9BQUEsSUFBQSxHQUFBLEVBQUEsRUFBQSxRQUFBLEdBQUEsRUFBQSxNQUFBLFFBQUEsR0FBQSxDQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsQ0FBQSxFQUFBLFNBQUEsRUFBQSxFQUFBLENBQUEsT0FBQSxFQUFBLE9BQUEsSUFBQSxFQUFBLEVBQUEsS0FBQSxHQUFBLEVBQUEsSUFBQSxXQUFBLFVBQUEsQ0FBQSxJQUFBLElBQUEsRUFBQSxFQUFBLEVBQUEsS0FBQSxPQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsS0FBQSxVQUFBLENBQUEsSUFBQSxTQUFBLEVBQUEsQ0FBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLFVBQUEsT0FBQSxFQUFBLEVBQUEsTUFBQSxLQUFBLFdBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxLQUFBLEtBQUEsR0FBQSxPQUFBLFNBQUEsRUFBQSxFQUFBLENBQUEsT0FBQSxTQUFBLEVBQUEsRUFBQSxDQUFBLEdBQUEsYUFBQSxNQUFBLENBQUEsSUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLFNBQUEsRUFBQSxDQUFBLEVBQUEsTUFBQSxNQUFBLElBQUEsRUFBQSxPQUFBLFVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLFVBQUEsVUFBQSxhQUFBLFNBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxDQUFBLElBQUEsRUFBQSxVQUFBLEtBQUEsUUFBQSxlQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxpQkFBQSxRQUFBLEVBQUEsaUJBQUEsRUFBQSxVQUFBLE9BQUEsVUFBQSxDQUFBLEdBQUEsT0FBQSxLQUFBLFVBQUEsQ0FBQSxJQUFBLElBQUEsRUFBQSxLQUFBLE1BQUEsR0FBQSxFQUFBLEVBQUEsTUFBQSxRQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsSUFBQSxLQUFBLFVBQUEsRUFBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxHQUFBLEVBQUEsWUFBQSxDQUFBLEVBQUEsRUFBQSxNQUFBLEtBQUEsY0FBQSxFQUFBLE9BQUEsS0FBQSxlQUFBLEVBQUEsT0FBQSxLQUFBLGVBQUEsRUFBQSxpQkFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEdBQUEsS0FBQSxZQUFBLEVBQUEsSUFBQSxzQkFBQSxTQUFBLEVBQUEsRUFBQSxDQUFBLElBQUEsR0FBQSxFQUFBLFNBQUEsUUFBQSxRQUFBLEVBQUEsUUFBQSxTQUFBLEVBQUEsQ0FBQSxJQUFBLEVBQUEsRUFBQSxHQUFBLENBQUEsVUFBQSxPQUFBLEdBQUEsYUFBQSxVQUFBLEVBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsQ0FBQSxFQUFBLEVBQUEsTUFBQSxLQUFBLE9BQUEsS0FBQSxrQkFBQSxDQUFBLElBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxRQUFBLFFBQUEsS0FBQSxVQUFBLEVBQUEsS0FBQSxpQkFBQSxLQUFBLHNCQUFBLEdBQUEsQ0FBQSxJQUFBLEdBQUEsSUFBQSxFQUFBLG1CQUFBLEVBQUEsRUFBQSxNQUFBLFFBQUEsUUFBQSxHQUFBLE9BQUEsRUFBQSxHQUFBLElBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLFNBQUEsS0FBQSxTQUFBLGlCQUFBLEVBQUEsa0JBQUEsS0FBQSxrQkFBQSxpQkFBQSxLQUFBLGlCQUFBLHNCQUFBLEtBQUEsc0JBQUEsV0FBQSxLQUFBLFdBQUEsYUFBQSxFQUFBLGNBQUEsS0FBQSxlQUFBLE9BQUEsT0FBQSxVQUFBLFNBQUEsQ0FBQSxVQUFBLFNBQUEsRUFBQSxDQUFBLE1BQUEsQ0FBQSxTQUFBLElBQUEsS0FBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsSUFBQSxFQUFBLEVBQUEsUUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsU0FBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLFVBQUEsT0FBQSxFQUFBLGNBQUEsRUFBQSxjQUFBLE1BQUEsVUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsQ0FBQSxNQUFBLEVBQUEsWUFBQSxFQUFBLGtCQUFBLFNBQUEsRUFBQSxPQUFBLEVBQUEsYUFBQSxRQUFBLE1BQUEsRUFBQSxLQUFBLFdBQUEsVUFBQSxDQUFBLEVBQUEsSUFBQSxVQUFBLElBQUEsQ0FBQSxVQUFBLFNBQUEsRUFBQSxRQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxPQUFBLEVBQUEsaUJBQUEsS0FBQSxFQUFBLGlCQUFBLEVBQUEsRUFBQSxDQUFBLEdBQUEsS0FBQSxFQUFBLFlBQUEsS0FBQSxFQUFBLEdBQUEsU0FBQSxFQUFBLEVBQUEsQ0FBQSxHQUFBLFlBQUEsRUFBQSxLQUFBLENBQUEsSUFBQSxFQUFBLE9BQUEsYUFBQSxFQUFBLE9BQUEsT0FBQSxFQUFBLFdBQUEsRUFBQSxFQUFBLGVBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxPQUFBLE9BQUEsYUFBQSxFQUFBLE9BQUEsY0FBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsT0FBQSxFQUFBLE9BQUEsS0FBQSxPQUFBLEVBQUEsT0FBQSxLQUFBLEtBQUEsU0FBQSxFQUFBLEVBQUEsQ0FBQSxJQUFBLEVBQUEsR0FBQSxPQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsU0FBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsS0FBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLEtBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxFQUFBLENBQUEsT0FBQSxFQUFBLGVBQUEsS0FBQSxFQUFBLGlCQUFBLEtBQUEsRUFBQSxZQUFBLENBQUEsR0FBQSxTQUFBLEVBQUEsRUFBQSxDQUFBLE9BQUEsRUFBQSxnQkFBQSxLQUFBLEVBQUEsa0JBQUEsS0FBQSxFQUFBLGFBQUEsQ0FBQSxHQUFBLFNBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxTQUFBLEdBQUEsUUFBQSxHQUFBLE9BQUEsR0FBQSxRQUFBLEVBQUEsU0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsSUFBQSxJQUFBLEtBQUEsRUFBQSxFQUFBLElBQUEsSUFBQSxHQUFBLEVBQUEsZUFBQSxLQUFBLEVBQUEsRUFBQSxJQUFBLEdBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLE9BQUEsSUFBQSxFQUFBLElBQUEsR0FBQSxVQUFBLFlBQUEsWUFBQSxHQUFBLEVBQUEsU0FBQSxFQUFBLFdBQUEsRUFBQSxTQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsTUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLEVBQUEsUUFBQSxTQUFBLFNBQUEsRUFBQSxNQUFBLE1BQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLElBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLElBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxFQUFBLElBQUEsR0FBQSxZQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxVQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsR0FBQSxPQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxDQUFBLElBQUEsRUFBQSxVQUFBLEVBQUEsT0FBQSxHQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxPQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsV0FBQSxHQUFBLFNBQUEsRUFBQSxFQUFBLENBQUEsU0FBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsR0FBQSxJQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxLQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEdBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxLQUFBLEdBQUEsQ0FBQSxFQUFBLFdBQUEsR0FBQSxNQUFBLEdBQUEsSUFBQSxTQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsV0FBQSxHQUFBLE9BQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLFdBQUEsR0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsR0FBQSxFQUFBLFNBQUEsWUFBQSxHQUFBLENBQUEsRUFBQSxTQUFBLENBQUEsRUFBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLFlBQUEsQ0FBQSxJQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxDQUFBLEdBQUEsSUFBQSxFQUFBLFdBQUEsR0FBQSxPQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsR0FBQSxPQUFBLEVBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLGFBQUEsRUFBQSxFQUFBLFFBQUEsRUFBQSxXQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsS0FBQSxDQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxTQUFBLEVBQUEsRUFBQSxDQUFBLFVBQUEsT0FBQSxFQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUEsU0FBQSxJQUFBLEVBQUEsRUFBQSxHQUFBLEdBQUEsRUFBQSxNQUFBLFNBQUEsRUFBQSxNQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxHQUFBLEtBQUEsRUFBQSxVQUFBLEVBQUEsRUFBQSxHQUFBLEdBQUEsU0FBQSxHQUFBLENBQUEsYUFBQSxHQUFBLEVBQUEsV0FBQSxFQUFBLEtBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxTQUFBLEVBQUEsRUFBQSxDQUFBLE9BQUEsVUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxLQUFBLFNBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxVQUFBLElBQUEsRUFBQSxFQUFBLElBQUEsV0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsQ0FBQSxJQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxRQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsV0FBQSxFQUFBLElBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxRQUFBLE9BQUEsS0FBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLE1BQUEsS0FBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxXQUFBLEVBQUEsS0FBQSxFQUFBLFdBQUEsRUFBQSxNQUFBLEdBQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxVQUFBLENBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxFQUFBLEdBQUEsS0FBQSxFQUFBLFdBQUEsRUFBQSxLQUFBLEVBQUEsVUFBQSxRQUFBLENBQUEsU0FBQSxFQUFBLFVBQUEsRUFBQSxVQUFBLE9BQUEsRUFBQSxPQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxLQUFBLElBQUEsRUFBQSxLQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxhQUFBLEdBQUEsT0FBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLFdBQUEsR0FBQSxFQUFBLFdBQUEsR0FBQSxJQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsV0FBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsTUFBQSxFQUFBLEtBQUEsSUFBQSxFQUFBLEVBQUEsR0FBQSxRQUFBLElBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxJQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLFNBQUEsRUFBQSxFQUFBLEdBQUEsTUFBQSxFQUFBLEdBQUEsVUFBQSxHQUFBLEVBQUEsRUFBQSxHQUFBLFNBQUEsRUFBQSxFQUFBLEdBQUEsT0FBQSxJQUFBLEVBQUEsWUFBQSxFQUFBLE1BQUEsRUFBQSxFQUFBLE1BQUEsR0FBQSxFQUFBLElBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLFdBQUEsRUFBQSxNQUFBLEVBQUEsY0FBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsSUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxXQUFBLEdBQUEsRUFBQSxFQUFBLFVBQUEsR0FBQSxFQUFBLEVBQUEsUUFBQSxHQUFBLElBQUEsSUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLFlBQUEsRUFBQSxNQUFBLEdBQUEsUUFBQSxHQUFBLFFBQUEsR0FBQSxPQUFBLEdBQUEsTUFBQSxHQUFBLFdBQUEsR0FBQSxNQUFBLEdBQUEsUUFBQSxHQUFBLFNBQUEsR0FBQSxXQUFBLEdBQUEsTUFBQSxHQUFBLE9BQUEsR0FBQSxPQUFBLEdBQUEsS0FBQSxHQUFBLFFBQUEsR0FBQSxPQUFBLEdBQUEsTUFBQSxHQUFBLE1BQUEsR0FBQSxPQUFBLEdBQUEsT0FBQSxJQUFBLFFBQUEsRUFBQSxDQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLEtBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxFQUFBLENBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLEVBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxFQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLElBQUEsSUFBQSxNQUFBLEVBQUEsQ0FBQSxPQUFBLE1BQUEsUUFBQSxPQUFBLFNBQUEsUUFBQSxPQUFBLE1BQUEsS0FBQSxJQUFBLElBQUEsdUJBQUEsS0FBQSxVQUFBLFVBQUEsT0FBQSxRQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxVQUFBLEtBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLElBQUEsRUFBQSxLQUFBLE9BQUEsRUFBQSxhQUFBLE1BQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxjQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxHQUFBLEVBQUEsVUFBQSxPQUFBLFNBQUEsRUFBQSxFQUFBLENBQUEsSUFBQSxFQUFBLEtBQUEsT0FBQSxFQUFBLEtBQUEsS0FBQSxFQUFBLEVBQUEsVUFBQSxHQUFBLElBQUEsRUFBQSxVQUFBLFFBQUEsU0FBQSxFQUFBLEVBQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLElBQUEsSUFBQSxFQUFBLFdBQUEsRUFBQSxJQUFBLEdBQUEsR0FBQSxHQUFBLEdBQUEsRUFBQSxVQUFBLE1BQUEsVUFBQSxDQUFBLElBQUEsRUFBQSxLQUFBLE9BQUEsRUFBQSxXQUFBLEdBQUEsRUFBQSxXQUFBLEdBQUEsR0FBQSxFQUFBLFVBQUEsYUFBQSxTQUFBLEVBQUEsRUFBQSxDQUFBLElBQUEsRUFBQSxLQUFBLE1BQUEsQ0FBQSxJQUFBLEVBQUEsVUFBQSxLQUFBLFFBQUEsZUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLFFBQUEsQ0FBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLFVBQUEsRUFBQSxTQUFBLFlBQUEsRUFBQSxTQUFBLEVBQUEsbUJBQUEsRUFBQSxVQUFBLFVBQUEsVUFBQSxDQUFBLElBQUEsRUFBQSxLQUFBLE9BQUEsRUFBQSxXQUFBLE1BQUEsRUFBQSxZQUFBLEVBQUEsS0FBQSxVQUFBLENBQUEsSUFBQSxFQUFBLEVBQUEsR0FBQSxJQUFBLElBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEtBQUEsRUFBQSxHQUFBLFNBQUEsRUFBQSxDQUFBLE9BQUEsVUFBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLE1BQUEsRUFBQSxhQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsVUFBQSxFQUFBLGFBQUEsT0FBQSxRQUFBLE9BQUEsVUFBQSxPQUFBLFFBQUEsR0FBQSxZQUFBLE9BQUEsUUFBQSxPQUFBLEtBQUEsT0FBQSxVQUFBLENBQUEsT0FBQSxLQUFBLE9BQUE7QUNOQSxDQUFBLFlBQUE7SUFDQTs7SUFFQSxRQUFBLE9BQUEsWUFBQSxvQkFBQSxVQUFBLFVBQUE7UUFDQSxTQUFBLFVBQUEsZ0JBQUEsUUFBQSxLQUFBLElBQUE7UUFDQSxzREFBQSxVQUFBLGNBQUEsYUFBQSxnQkFBQTs7UUFFQSxJQUFBLFVBQUEsVUFBQSxLQUFBO1lBQ0EsSUFBQSxVQUFBLElBQUE7WUFDQSxRQUFBLEtBQUEsT0FBQSxLQUFBO1lBQ0EsUUFBQSxLQUFBO1lBQ0EsT0FBQSxDQUFBLFFBQUEsUUFBQSxRQUFBLFVBQUE7Ozs7UUFJQSxJQUFBLG9CQUFBO1FBQ0EsSUFBQSxjQUFBLElBQUEsT0FBQSxNQUFBLFlBQUEsS0FBQSxZQUFBLFdBQUE7UUFDQSxhQUFBLFFBQUEsYUFBQSxRQUFBLFlBQUE7WUFDQSxPQUFBLFFBQUE7Ozs7UUFJQSxJQUFBLDJCQUFBO1FBQ0EsSUFBQSxxQkFBQSxJQUFBLE9BQUEsTUFBQSxZQUFBLEtBQUEsWUFBQSxxQkFBQTtRQUNBLGFBQUEsUUFBQSxvQkFBQSxRQUFBLFlBQUE7WUFDQSxPQUFBLFFBQUE7Ozs7UUFJQSxJQUFBLHNCQUFBO1FBQ0EsSUFBQSxnQkFBQSxJQUFBLE9BQUEsTUFBQSxZQUFBLEtBQUEsWUFBQSxjQUFBO1FBQ0EsYUFBQSxRQUFBLGVBQUEsUUFBQSxZQUFBO1lBQ0EsT0FBQSxRQUFBOzs7O1FBSUEsSUFBQSx3QkFBQTtRQUNBLElBQUEsa0JBQUEsSUFBQSxPQUFBLE1BQUEsWUFBQSxLQUFBLFlBQUEsaUJBQUE7UUFDQSxhQUFBLFFBQUEsaUJBQUEsUUFBQSxZQUFBO1lBQ0EsT0FBQSxRQUFBOzs7O1FBSUEsSUFBQSxlQUFBLElBQUEsT0FBQSxNQUFBLFlBQUEsS0FBQSxZQUFBLFNBQUE7UUFDQSxhQUFBLFFBQUEsY0FBQSxRQUFBLFlBQUE7WUFDQSxJQUFBLFdBQUEsT0FBQSxNQUFBLE1BQUEsS0FBQSxLQUFBLE9BQUEsTUFBQSxTQUFBLEdBQUEsS0FBQSxRQUFBLE1BQUE7WUFDQSxJQUFBLFlBQUEsT0FBQSxNQUFBLFNBQUEsR0FBQSxLQUFBLFFBQUE7WUFDQSxJQUFBLE9BQUE7Z0JBQ0EsT0FBQTtnQkFDQSxNQUFBO2dCQUNBLFVBQUE7Z0JBQ0EsU0FBQTs7O1lBR0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLEtBQUEsT0FBQSxLQUFBO2dCQUNBLEtBQUEsUUFBQSxLQUFBO29CQUNBLE1BQUEsT0FBQSxJQUFBLFdBQUEsSUFBQSxHQUFBLEtBQUE7b0JBQ0EsZUFBQSxLQUFBLE1BQUEsS0FBQSxZQUFBLE1BQUEsS0FBQSxNQUFBO29CQUNBLGNBQUEsS0FBQSxNQUFBLEtBQUEsWUFBQSxNQUFBLEtBQUEsTUFBQTtvQkFDQSxlQUFBLEtBQUEsTUFBQSxLQUFBLFlBQUEsTUFBQSxLQUFBLE1BQUE7Ozs7WUFJQSxPQUFBLENBQUEsS0FBQSxNQUFBOzs7O1FBSUEsYUFBQSxRQUFBLFVBQUE7UUFDQSxhQUFBLFNBQUEsVUFBQTs7S0FFQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnLCBbXG4gICAgICAgICdzY2FsZUNvbmZpZ01vZHVsZScsXG4gICAgICAgICduZ1Jlc291cmNlJyxcbiAgICAgICAgJ25nU2FuaXRpemUnLFxuICAgICAgICAnbmdSb3V0ZScsXG4gICAgICAgICdlbWd1by5wb2xsZXInLFxuICAgICAgICAndWkuYm9vdHN0cmFwJyxcbiAgICAgICAgJ3VpLmdyaWQnLFxuICAgICAgICAndWkuZ3JpZC5zZWxlY3Rpb24nLFxuICAgICAgICAndWkuZ3JpZC5wYWdpbmF0aW9uJyxcbiAgICAgICAgJ3VpLmdyaWQucmVzaXplQ29sdW1ucycsXG4gICAgICAgICdjZnAuaG90a2V5cydcbiAgICBdKTtcblxuICAgIGFwcC5jb25maWcoZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIsICRyZXNvdXJjZVByb3ZpZGVyLCBwb2xsZXJDb25maWcpIHtcbiAgICAgICAgLy8gc3RvcCBwb2xsZXJzIHdoZW4gcm91dGUgY2hhbmdlc1xuICAgICAgICBwb2xsZXJDb25maWcuc3RvcE9uUm91dGVDaGFuZ2UgPSB0cnVlO1xuICAgICAgICBwb2xsZXJDb25maWcuc21hcnQgPSB0cnVlO1xuXG4gICAgICAgIC8vIHByZXNlcnZlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICAgICAgJHJlc291cmNlUHJvdmlkZXIuZGVmYXVsdHMuc3RyaXBUcmFpbGluZ1NsYXNoZXMgPSBmYWxzZTtcblxuICAgICAgICAvL3JvdXRpbmdcbiAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC53aGVuKCcvJywge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdvdkNvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9vdmVydmlldy9wYXJ0aWFscy9vdlRlbXBsYXRlLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9hZG1pbi9sb2dpbicse1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdhZG1pbkxvZ2luQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL2FkbWluL3BhcnRpYWxzL2FkbWluTG9naW5UZW1wbGF0ZS5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvYWRtaW4vbG9nb3V0Jyx7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2xvZ291dENvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9hZG1pbi9wYXJ0aWFscy9hZG1pbkxvZ2luVGVtcGxhdGUuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL2Fib3V0Jywge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdhYm91dENvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9hYm91dC9wYXJ0aWFscy9hYm91dFRlbXBsYXRlLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9mZWVkJywge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdmZWVkRGV0YWlsc0NvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9mZWVkL3BhcnRpYWxzL2ZlZWREZXRhaWxzVGVtcGxhdGUuaHRtbCcsXG4gICAgICAgICAgICAgICAgcmVsb2FkT25TZWFyY2g6IGZhbHNlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9mZWVkL2luZ2VzdHMnLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2luZ2VzdFJlY29yZHNDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvZmVlZC9wYXJ0aWFscy9pbmdlc3RSZWNvcmRzVGVtcGxhdGUuaHRtbCcsXG4gICAgICAgICAgICAgICAgcmVsb2FkT25TZWFyY2g6IGZhbHNlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9tZXRyaWNzJywge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtZXRyaWNzQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL21ldHJpY3MvcGFydGlhbHMvbWV0cmljc1RlbXBsYXRlLmh0bWwnLFxuICAgICAgICAgICAgICAgIHJlbG9hZE9uU2VhcmNoOiBmYWxzZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvbm9kZXMnLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ25vZGVzQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL25vZGVzL3BhcnRpYWxzL25vZGVzVGVtcGxhdGUuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL25vZGVzLzppZCcsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbm9kZURldGFpbHNDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvbm9kZXMvcGFydGlhbHMvbm9kZURldGFpbHNUZW1wbGF0ZS5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvbG9hZCcsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbG9hZENvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9sb2FkL3BhcnRpYWxzL2xvYWRUZW1wbGF0ZS5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvbG9hZC9ydW5uaW5nJywge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdxdWV1ZVJ1bm5pbmdDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvbG9hZC9wYXJ0aWFscy9xdWV1ZVJ1bm5pbmdUZW1wbGF0ZS5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvbG9hZC9kZXB0aCcsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnbG9hZERlcHRoQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL2xvYWQvcGFydGlhbHMvbG9hZERlcHRoVGVtcGxhdGUuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL3JlY2lwZXMnLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3JlY2lwZXNDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvcmVjaXBlcy9wYXJ0aWFscy9yZWNpcGVzVGVtcGxhdGUuaHRtbCcsXG4gICAgICAgICAgICAgICAgcmVsb2FkT25TZWFyY2g6IGZhbHNlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9yZWNpcGVzL3JlY2lwZS86aWQnLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3JlY2lwZURldGFpbHNDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvcmVjaXBlcy9wYXJ0aWFscy9yZWNpcGVEZXRhaWxzVGVtcGxhdGUuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL3JlY2lwZXMvdHlwZXMvOmlkPycsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncmVjaXBlVHlwZXNDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvcmVjaXBlcy9wYXJ0aWFscy9yZWNpcGVUeXBlc1RlbXBsYXRlLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9yZWNpcGVzL2J1aWxkZXInLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3JlY2lwZUVkaXRvckNvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9yZWNpcGVzL3BhcnRpYWxzL3JlY2lwZUVkaXRvclRlbXBsYXRlLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9yZWNpcGVzL2J1aWxkZXIvOmlkJywge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdyZWNpcGVFZGl0b3JDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvcmVjaXBlcy9wYXJ0aWFscy9yZWNpcGVFZGl0b3JUZW1wbGF0ZS5odG1sJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvam9icycsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnam9ic0NvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9qb2JzL3BhcnRpYWxzL2pvYnNUZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgICAgICAgICByZWxvYWRPblNlYXJjaDogZmFsc2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL2pvYnMvam9iLzppZCcsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnam9iRGV0YWlsQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL2pvYnMvcGFydGlhbHMvam9iRGV0YWlsVGVtcGxhdGUuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL2pvYnMvdHlwZXMvOmlkPycsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnam9iVHlwZXNDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvam9icy9wYXJ0aWFscy9qb2JUeXBlc1RlbXBsYXRlLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9qb2JzL2V4ZWN1dGlvbnMnLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2pvYkV4ZWN1dGlvbnNDb250cm9sbGVyJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvam9icy9wYXJ0aWFscy9qb2JFeGVjdXRpb25zVGVtcGxhdGUuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL2pvYnMvZXhlY3V0aW9ucy86aWQnLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2pvYkV4ZWN1dGlvbkRldGFpbENvbnRyb2xsZXInLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9qb2JzL3BhcnRpYWxzL2pvYkV4ZWN1dGlvbkRldGFpbFRlbXBsYXRlLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm90aGVyd2lzZSh7XG4gICAgICAgICAgICAgICAgcmVkaXJlY3RUbzogJy8nXG4gICAgICAgICAgICB9KTtcbiAgICB9KVxuICAgIC52YWx1ZSgnbW9tZW50Jywgd2luZG93Lm1vbWVudClcbiAgICAudmFsdWUoJ2xvY2FsU3RvcmFnZScsIHdpbmRvdy5sb2NhbFN0b3JhZ2UpXG4gICAgLnZhbHVlKCdYTUxIdHRwUmVxdWVzdCcsIHdpbmRvdy5YTUxIdHRwUmVxdWVzdClcbiAgICAudmFsdWUoJ3RvYXN0cicsIHdpbmRvdy50b2FzdHIpO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQ29uZmlnTW9kdWxlJywgW10pLnByb3ZpZGVyKCdzY2FsZUNvbmZpZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNjYWxlQ29uZmlnID0ge30sXG4gICAgICAgICAgICBzY2FsZUNvbmZpZ0xvY2FsID0ge307XG5cbiAgICAgICAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbmZpZyA9ICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICAgICAgICAgICAgdXJsOiAnY29uZmlnL3NjYWxlQ29uZmlnLmpzb24nLFxuICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhc3luYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNvbmZpZy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIHNjYWxlQ29uZmlnID0gY29uZmlnLnJlc3BvbnNlSlNPTi5zY2FsZUNvbmZpZztcblxuICAgICAgICAgICAgICAgIHZhciBjb25maWdMb2NhbCA9ICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdjb25maWcvc2NhbGVDb25maWcubG9jYWwuanNvbicsXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnTG9jYWwuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVDb25maWdMb2NhbCA9IGNvbmZpZ0xvY2FsLnJlc3BvbnNlSlNPTi5zY2FsZUNvbmZpZ0xvY2FsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF8ubWVyZ2Uoc2NhbGVDb25maWcsIHNjYWxlQ29uZmlnTG9jYWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc2NhbGVDb25maWc7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmNvbnRyb2xsZXIoJ2Fpc0hlYWRlckNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCBzdWJuYXZTZXJ2aWNlKSB7XG4gICAgICAgICRzY29wZS5kYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgJHNjb3BlLmN1cnJlbnRQYXRoID0gc3VibmF2U2VydmljZS5nZXRDdXJyZW50UGF0aCgpO1xuICAgIH0pXG4gICAgLmRpcmVjdGl2ZSgnYWlzSGVhZGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVXNhZ2U6IDxhaXMtaGVhZGVyIG5hbWU9e25hbWV9PjwvYWlzLWhlYWRlcj5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnYWlzSGVhZGVyQ29udHJvbGxlcicsXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL2hlYWRlci9oZWFkZXJUZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogJz0nLFxuICAgICAgICAgICAgICAgIGhpZGVUaXRsZTogJz0nLFxuICAgICAgICAgICAgICAgIGxvYWRpbmc6ICc9JywgLy8gb3B0aW9uYWwgLSB3aWxsIG92ZXJsYXkgYSBsb2FkaW5nIHNwaW5uZXIgb24gdGhlIHBhZ2UgYmFzZWQgb24gdGhlIHBhc3NlZC1pbiB2YWx1ZVxuICAgICAgICAgICAgICAgIHNob3dTdWJuYXY6ICc9JyxcbiAgICAgICAgICAgICAgICBzdWJuYXZMaW5rczogJz0nXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmRpcmVjdGl2ZSgnc2NhbGVOYXZpZ2F0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9uYXZpZ2F0aW9uL3BhcnRpYWxzL25hdlRlbXBsYXRlLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ25hdkNvbnRyb2xsZXInXG4gICAgICAgIH07XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5jb250cm9sbGVyKCdhYm91dENvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsICRsb2NhdGlvbiwgJHdpbmRvdywgbmF2U2VydmljZSkge1xuICAgICAgICB2YXIgaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbmF2U2VydmljZS51cGRhdGVMb2NhdGlvbignYWJvdXQnKTtcbiAgICAgICAgfTtcbiAgICAgICAgaW5pdGlhbGl6ZSgpO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuY29udHJvbGxlcignYWRtaW5Mb2dpbkNvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHRpbWVvdXQsICRyb290U2NvcGUsICRsb2NhdGlvbiwgdXNlclNlcnZpY2UpIHtcblxuICAgICAgICB2YXIgaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUudXNlciA9IHVzZXJTZXJ2aWNlLmdldFVzZXJDcmVkcygpO1xuICAgICAgICAgICAgaWYoISRyb290U2NvcGUudXNlcil7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS51c2VyID0gdXNlclNlcnZpY2UubG9naW4oJ2FkbWluJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCRyb290U2NvcGUudXNlcik7XG5cbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLy8gQW55IGNvZGUgaW4gaGVyZSB3aWxsIGF1dG9tYXRpY2FsbHkgaGF2ZSBhbiAkc2NvcGUuYXBwbHkoKSBydW4gYWZ0ZXJ3YXJkc1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGluaXRpYWxpemUoKTtcbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5jb250cm9sbGVyKCdsb2dvdXRDb250cm9sbGVyJywgZnVuY3Rpb24gKCR0aW1lb3V0LCAkcm9vdFNjb3BlLCAkbG9jYXRpb24sIHVzZXJTZXJ2aWNlKSB7XG5cbiAgICAgICAgdmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB1c2VyU2VydmljZS5sb2dvdXQoKTtcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLy8gQW55IGNvZGUgaW4gaGVyZSB3aWxsIGF1dG9tYXRpY2FsbHkgaGF2ZSBhbiAkc2NvcGUuYXBwbHkoKSBydW4gYWZ0ZXJ3YXJkc1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKFwiL1wiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGluaXRpYWxpemUoKTtcbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5jb250cm9sbGVyKCdhaXNEYXRhRmVlZENvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHNjb3BlLCBzY2FsZUNvbmZpZywgbG9hZFNlcnZpY2UsIHNjYWxlU2VydmljZSkge1xuICAgICAgICAkc2NvcGUuZGF5cyA9IFtdO1xuICAgICAgICAkc2NvcGUuaG91cnMgPSBbMCwxLDIsMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOSwyMCwyMSwyMiwyM107XG4gICAgICAgICRzY29wZS52YWx1ZXMgPSB7fTtcbiAgICAgICAgdmFyIHByb2Nlc3NOZXdGZWVkID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHZhciBjdXJyZW50RGF5ID0gbW9tZW50LnV0YygpO1xuICAgICAgICAgICAgJHNjb3BlLmRheXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBkYXkgPSAnJztcbiAgICAgICAgICAgIGlmKCRzY29wZS5mZWVkKXtcbiAgICAgICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLmZlZWQudmFsdWVzLCBmdW5jdGlvbih2YWwpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsZGF5ID0gbW9tZW50LnV0Yyh2YWwudGltZSkuZm9ybWF0KHNjYWxlQ29uZmlnLmRhdGVGb3JtYXRzLmRheSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxob3VyID0gbW9tZW50LnV0Yyh2YWwudGltZSkuaG91cigpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSB2YWxkYXkgKyAnXycgKyB2YWxob3VyO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmFsdWVzW2lkXSA9IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgaWYodmFsZGF5ICE9PSBkYXkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF5ID0gdmFsZGF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRheXMucHVzaCh2YWxkYXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnVpbGRUYWJsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBidWlsZFRhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGN1cnJEYXkgPSBtb21lbnQoKS51dGMoKS5mb3JtYXQoc2NhbGVDb25maWcuZGF0ZUZvcm1hdHMuZGF5KTtcbiAgICAgICAgICAgIHZhciBjdXJySG91ciA9IG1vbWVudCgpLnV0YygpLmhvdXIoKTtcblxuICAgICAgICAgICAgdmFyIHRhYmxlX2h0bWwgPSAnPGRpdiBjbGFzcz1cInRhYmxlLXJlc3BvbnNpdmVcIj48dGFibGU+JztcbiAgICAgICAgICAgIHRhYmxlX2h0bWwgKz0gJzx0cj48dGg+SG91ciAoVVRDKTwvdGg+JztcbiAgICAgICAgICAgIGZvcihkYXkgaW4gJHNjb3BlLmRheXMpe1xuICAgICAgICAgICAgICAgIHRhYmxlX2h0bWwgKz0gJzx0ZCBjbGFzcz1cImRheS1sYWJlbFwiIHRpdGxlPVwiJyArICRzY29wZS5kYXlzW2RheV0gKyAnXCI+PGRpdiBjbGFzcz1cImRheS1vZi13ZWVrXCI+JyArIHNjYWxlU2VydmljZS5nZXREYXlTdHJpbmcobW9tZW50KCRzY29wZS5kYXlzW2RheV0pLmRheSgpKSArICc8L2Rpdj4nICsgbW9tZW50KCRzY29wZS5kYXlzW2RheV0pLmZvcm1hdCgnTU0vREQnKSArICc8L3RkPic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YWJsZV9odG1sICs9ICc8L3RyPic7XG4gICAgICAgICAgICBmb3IodmFyIGhvdXIgaW4gJHNjb3BlLmhvdXJzKXtcbiAgICAgICAgICAgICAgICBob3VyID0gMjMtaG91cjtcbiAgICAgICAgICAgICAgICB0YWJsZV9odG1sICs9ICc8dHI+JztcbiAgICAgICAgICAgICAgICB0YWJsZV9odG1sICs9ICc8dGggdGl0bGU9XCInICsgJHNjb3BlLmhvdXJzW2hvdXJdICsgJzowMFwiPicgKyAkc2NvcGUuaG91cnNbaG91cl0gKyAnPC90aD4nO1xuXG4gICAgICAgICAgICAgICAgZm9yKHZhciBkYXkgaW4gJHNjb3BlLmRheXMpe1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gICRzY29wZS5kYXlzW2RheV0gKyAnXycgKyAkc2NvcGUuaG91cnNbaG91cl07XG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWxlcyA9ICRzY29wZS52YWx1ZXNba2V5XS5maWxlcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNpemUgPSAkc2NvcGUudmFsdWVzW2tleV0uc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNscyA9ICdnb29kJztcbiAgICAgICAgICAgICAgICAgICAgaWYoJHNjb3BlLmRheXNbZGF5XSA9PT0gY3VyckRheSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUuaG91cnNbaG91cl0gPT09IGN1cnJIb3VyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHMgPSAnY3VycmVudCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKCRzY29wZS5ob3Vyc1tob3VyXSA+IGN1cnJIb3VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xzID0gJ2Z1dHVyZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoZmlsZXMgPT09IDAgJiYgc2l6ZSA9PT0gMCAmJiBjbHMgIT09ICdjdXJyZW50JyAmJiBjbHMgIT09ICdmdXR1cmUnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNscyA9ICd1bmtub3duJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlX2h0bWwgKz0gJzx0ZCBpZD1cIicgKyBrZXkgKyAnXCIgdGl0bGU9XCInICsgJHNjb3BlLmRheXNbZGF5XSArICcgJyArICRzY29wZS5ob3Vyc1tob3VyXSArICc6MDBcIj4nO1xuICAgICAgICAgICAgICAgICAgICBpZihjbHMgPT09ICdmdXR1cmUnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGFibGVfaHRtbCArPSAnPHNwYW4gY2xhc3M9XCInICsgY2xzICsgJ1wiIGlkPVwic3Bhbl8nICsgJHNjb3BlLmRheXNbZGF5XSArICdfJyArICRzY29wZS5ob3Vyc1tob3VyXSArICdcIiBzdHlsZT1cImRpc3BsYXk6IGJsb2NrO1wiPjxkaXYgY2xhc3M9XCJmaWxlLWNvdW50XCI+Jm5ic3A7PC9kaXY+PGRpdiBjbGFzcz1cImZpbGUtc2l6ZVwiPiZuYnNwOzwvZGl2Pjwvc3Bhbj48L3RkPic7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZV9odG1sICs9ICc8c3BhbiBjbGFzcz1cIicgKyBjbHMgKyAnXCIgaWQ9XCJzcGFuXycgKyAkc2NvcGUuZGF5c1tkYXldICsgJ18nICsgJHNjb3BlLmhvdXJzW2hvdXJdICsgJ1wiIHN0eWxlPVwiZGlzcGxheTogYmxvY2s7XCI+Jm5ic3A7PC9zcGFuPjwvdGQ+JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgLy90YWJsZV9odG1sICs9ICc8c3BhbiBjbGFzcz1cIicgKyBjbHMgKyAnXCIgaWQ9XCJzcGFuXycgKyAkc2NvcGUuZGF5c1tkYXldICsgJ18nICsgJHNjb3BlLmhvdXJzW2hvdXJdICsgJ1wiIHN0eWxlPVwiZGlzcGxheTogYmxvY2s7XCI+PGRpdiBjbGFzcz1cImZpbGUtY291bnRcIj4nICsgZmlsZXMgKyAnPC9kaXY+PGRpdiBjbGFzcz1cImZpbGUtc2l6ZVwiPicgKyBzY2FsZVNlcnZpY2UuY2FsY3VsYXRlRmlsZVNpemVGcm9tQnl0ZXMoc2l6ZSwxKSArICc8L2Rpdj48L3NwYW4+PC90ZD4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy90YWJsZV9odG1sICs9ICc8c3BhbiBjbGFzcz1cIicgKyBjbHMgKyAnXCIgaWQ9XCJzcGFuXycgKyAkc2NvcGUuZGF5c1tkYXldICsgJ18nICsgJHNjb3BlLmhvdXJzW2hvdXJdICsgJ1wiIHN0eWxlPVwiZGlzcGxheTogYmxvY2s7XCI+PHNwYW4gY2xhc3M9XCJmaWxlLWNvdW50XCI+JyArIGZpbGVzICsgJzwvc3Bhbj4gLyA8c3BhbiBjbGFzcz1cImZpbGUtc2l6ZVwiPicgKyBzY2FsZVNlcnZpY2UuY2FsY3VsYXRlRmlsZVNpemVGcm9tQnl0ZXMoc2l6ZSwxKSArICc8L3NwYW4+PC9zcGFuPjwvdGQ+JztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlX2h0bWwgKz0gJzxzcGFuIGNsYXNzPVwiJyArIGNscyArICdcIiBpZD1cInNwYW5fJyArICRzY29wZS5kYXlzW2RheV0gKyAnXycgKyAkc2NvcGUuaG91cnNbaG91cl0gKyAnXCIgc3R5bGU9XCJkaXNwbGF5OiBibG9jaztcIj4nICsgc2NhbGVTZXJ2aWNlLmNhbGN1bGF0ZUZpbGVTaXplRnJvbUJ5dGVzKHNpemUsMSkgKyAnIC8gJyArIGZpbGVzICsgJzwvc3Bhbj48L3RkPic7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YWJsZV9odG1sICs9ICc8L3RyPic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YWJsZV9odG1sICs9ICc8L3RhYmxlPjwvZGl2Pic7XG4gICAgICAgICAgICAkKCcjaGlzdG9yeScpLmh0bWwodGFibGVfaHRtbCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAkc2NvcGUuJHdhdGNoKCdmZWVkJywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYoJHNjb3BlLmZlZWQpe1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzTmV3RmVlZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGluaXRpYWxpemUoKTtcbiAgICB9KS5kaXJlY3RpdmUoJ2Fpc0RhdGFGZWVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ2Fpc0RhdGFGZWVkQ29udHJvbGxlcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvY2hhcnRzL2RhdGFGZWVkL2RhdGFGZWVkVGVtcGxhdGUuaHRtbCcsXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBmZWVkOiAnPScgLy8gRmVlZCBkYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmNvbnRyb2xsZXIoJ2Fpc0RvbnV0Q29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsIHNjYWxlQ29uZmlnKSB7XG4gICAgICAgIHZhciBjaGFydCA9IG51bGw7XG5cbiAgICAgICAgdmFyIGdlbkNoYXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgLy9jaGFydC5kYXRhKClcbiAgICAgICAgICAgICAgICAvLyRzY29wZS5jb2xEYXRhXG4gICAgICAgICAgICAgICAgdmFyIG9sZERhdGEgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlSWRzID0gW107XG5cbiAgICAgICAgICAgICAgICAvLyByZWFzc2VtYmxlIGN1cnJlbnRseSBkaXNwbGF5ZWQgZGF0YSB0byBtYXRjaCAkc2NvcGUuY29sRGF0YVxuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChjaGFydC5kYXRhKCksIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9sZERhdGEucHVzaChbZC52YWx1ZXNbMF0uaWQsIGQudmFsdWVzWzBdLnZhbHVlXSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggZWxlbWVudHMgdG8gcmVtb3ZlXG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKG9sZERhdGEsIGZ1bmN0aW9uIChvZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2VlcCA9IF8uZmluZCgkc2NvcGUuY29sRGF0YSwgZnVuY3Rpb24gKGNkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2RbMF0gPT09IG9kWzBdO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFrZWVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVJZHMucHVzaChvZFswXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBjaGFydFxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoJHNjb3BlLmNvbERhdGEpKTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHJlbW92ZUlkcykpO1xuICAgICAgICAgICAgICAgIGNoYXJ0LmxvYWQoe1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiAkc2NvcGUuY29sRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgdW5sb2FkOiByZW1vdmVJZHNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hhcnQgPSBjMy5nZW5lcmF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGJpbmR0bzogJGVsZW1lbnRbMF0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnM6ICRzY29wZS5jb2xEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJHNjb3BlLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3duOiBzY2FsZUNvbmZpZy5jb2xvcnMuY2hhcnRfcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5pbmc6IHNjYWxlQ29uZmlnLmNvbG9ycy5jaGFydF95ZWxsb3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXA6IHNjYWxlQ29uZmlnLmNvbG9ycy5jaGFydF9ncmVlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21wbGV0ZWQ6IHNjYWxlQ29uZmlnLmNvbG9ycy5jaGFydF9ncmVlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb25lOiAnIzM2ODFiZicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUXVldWU6IHNjYWxlQ29uZmlnLmNvbG9ycy5jaGFydF95ZWxsb3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRmFpbGVkOiBzY2FsZUNvbmZpZy5jb2xvcnMuY2hhcnRfcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFsZ29yaXRobTogJyM0NDQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGE6ICcjODg4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTeXN0ZW06ICcjY2NjJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPZmZsaW5lOiBzY2FsZUNvbmZpZy5jb2xvcnMuY2hhcnRfcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdIaWdoIEZhaWx1cmUgUmF0ZSc6IHNjYWxlQ29uZmlnLmNvbG9ycy5jaGFydF9vcmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGF1c2VkOiBzY2FsZUNvbmZpZy5jb2xvcnMuY2hhcnRfeWVsbG93XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA3MDBcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcGllOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogZDMuZm9ybWF0KCcsJylcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZG9udXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiAkc2NvcGUuc2hvd0xhYmVsID8gZDMuZm9ybWF0KCcsJykgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICRzY29wZS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAkc2NvcGUubmFtZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZDMuZm9ybWF0KCcsJylcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAkc2NvcGUuc2l6ZSB8fCAzMjBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJGVsZW1lbnRbMF0uc3R5bGUucG9zaXRpb24gPSAnc3RhdGljJztcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgaW5pdENvbHVtbkRhdGEgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgJHNjb3BlLmNvbERhdGEgPSBbXTtcbiAgICAgICAgICAgICRzY29wZS5kYXRhLmZvckVhY2goZnVuY3Rpb24ob2JqKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY29sRGF0YS5wdXNoKFtvYmouc3RhdHVzLG9iai5jb3VudF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGluaXRDb2x1bW5EYXRhKCk7XG4gICAgICAgICAgICBnZW5DaGFydCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkKCRlbGVtZW50WzBdKS5lbXB0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgd2luZG93Lm9ucmVzaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHdpZHRoID0gJCgkZWxlbWVudFswXSkud2lkdGgoKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyh3aWR0aCk7XG4gICAgICAgICAgZ2VuQ2hhcnQoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuZGlyZWN0aXZlKCdhaXNEb251dCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdhaXNEb251dENvbnRyb2xsZXInLFxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgZGF0YTogJz0nLFxuICAgICAgICAgICAgICAgIHR5cGU6ICc9JyxcbiAgICAgICAgICAgICAgICBzaXplOiAnPScsXG4gICAgICAgICAgICAgICAgc2hvd0xhYmVsOiAnPScsXG4gICAgICAgICAgICAgICAgd2lkdGg6ICc9JyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnPSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmNvbnRyb2xsZXIoJ2Fpc0dyaWRDaGFydENvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHNjb3BlLCAkbG9jYXRpb24sICR1aWJNb2RhbCwgdXNlclNlcnZpY2UsIHNjYWxlQ29uZmlnKSB7XG4gICAgICAgIHZhciBzdmcgPSBudWxsLFxuICAgICAgICAgICAgcmVjdCA9IG51bGwsXG4gICAgICAgICAgICBzY2FsZSA9IHBhcnNlRmxvYXQoJHNjb3BlLnNjYWxlKSxcbiAgICAgICAgICAgIHRpcCA9IGQzLnRpcCgpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2QzLXRpcCcpXG4gICAgICAgICAgICAgICAgLm9mZnNldChbLTEwLCAwXSlcbiAgICAgICAgICAgICAgICAuaHRtbChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnRpdGxlICsgJyAnICsgZC52ZXJzaW9uICsgJzxiciAvPicgKyBnZXRDZWxsRXJyb3IoZCkgKyAnPGJyIC8+JyArIGdldENlbGxUb3RhbChkKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUubG9hZGluZyA9IHRydWU7XG4gICAgICAgICRzY29wZS5kYXRhVmFsdWVzID0gW107XG4gICAgICAgICRzY29wZS5jZWxsV2lkdGggPSA1MCAqIHNjYWxlO1xuICAgICAgICAkc2NvcGUuY2VsbEhlaWdodCA9IDUwICogc2NhbGU7XG4gICAgICAgICRzY29wZS5lbmFibGVab29tID0gdHlwZW9mICRzY29wZS5tb2RlICE9PSAndW5kZWZpbmVkJyA/ICRzY29wZS5tb2RlID09PSAnem9vbScgOiB0cnVlO1xuICAgICAgICAkc2NvcGUuZW5hYmxlVG9vbHRpcCA9IHR5cGVvZiAkc2NvcGUubW9kZSAhPT0gJ3VuZGVmaW5lZCcgPyAkc2NvcGUubW9kZSA9PT0gJ3Rvb2x0aXAnIDogZmFsc2U7XG4gICAgICAgICRzY29wZS5lbmFibGVSZXZlYWwgPSB0eXBlb2YgJHNjb3BlLnJldmVhbCAhPT0gJ3VuZGVmaW5lZCcgPyAkc2NvcGUucmV2ZWFsIDogdHJ1ZTtcbiAgICAgICAgJHNjb3BlLnVzZXIgPSB1c2VyU2VydmljZS5nZXRVc2VyQ3JlZHMoKTtcbiAgICAgICAgJHNjb3BlLnBhdXNlUmVhc29uID0gJyc7XG4gICAgICAgICRzY29wZS5ncmlkRGF0YSA9IFtdO1xuICAgICAgICAkc2NvcGUuZ3JpZENsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICRzY29wZS5pY29ucyA9PT0gdHJ1ZSA/ICdpY29ucycgOiAnJztcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgd2lkdGggPSAkKCcuZ3JpZC1jaGFydCcpLndpZHRoKCksXG4gICAgICAgICAgICBoZWlnaHQgPSAkc2NvcGUucm93cyA/ICgkc2NvcGUuY2VsbEhlaWdodCAqICRzY29wZS5yb3dzKSArIDEwIDogKCRzY29wZS5jZWxsSGVpZ2h0ICogNikgKyAxMCwgLy8gbXVsdGlwbHkgY2VsbCBoZWlnaHQgYnkgOCAoaGlnaGVzdCB6b29tIHNjYWxlIGV4dGVudCB2YWx1ZSkgcGx1cyBzb21lIGJyZWF0aGluZyByb29tXG4gICAgICAgICAgICBjb2xzID0gMCxcbiAgICAgICAgICAgIHJvd3MgPSAwLFxuICAgICAgICAgICAgY2VsbEZvbnRMZyA9IC40LFxuICAgICAgICAgICAgY2VsbEZvbnRTbSA9IC4zO1xuXG4gICAgICAgIHZhciBnZXREYXRhVmFsdWVzID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICRzY29wZS5ncmlkRGF0YSA9IFtdO1xuICAgICAgICAgICAgJHNjb3BlLmRhdGFWYWx1ZXMgPSBbXTtcbiAgICAgICAgICAgIGlmIChkYXRhLmRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YVR5cGUgPSBkYXRhLmRhdGEudG9TdHJpbmcoKS5zcGxpdCgnLCcpWzBdO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhVHlwZSA9PT0gJ0pvYlR5cGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhVmFsdWVzID0gXy5zb3J0QnlPcmRlcihfLnZhbHVlcyhkYXRhLmRhdGEpLCBbJ25hbWUnXSwgWydhc2MnXSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFzc29jaWF0ZSBKb2JUeXBlIHdpdGggSm9iVHlwZVN0YXR1c1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLmRhdGFWYWx1ZXMsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbC5zdGF0dXMgPSBfLmZpbmQoZGF0YS5zdGF0dXMsICdqb2JfdHlwZS5pZCcsIHZhbC5pZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YVZhbHVlcyA9IF8uc29ydEJ5T3JkZXIoXy52YWx1ZXMoZGF0YS5kYXRhKSwgWydzdGF0dXMuaGFzX3J1bm5pbmcnLCAnc3RhdHVzLmRlc2NyaXB0aW9uJywgJ25hbWUnXSwgWydhc2MnLCAnYXNjJywgJ2FzYyddKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFUeXBlID09PSAnTm9kZScpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFWYWx1ZXMgPSBfLnNvcnRCeU9yZGVyKF8udmFsdWVzKGRhdGEuZGF0YSksIFsnaG9zdG5hbWUnXSwgWydhc2MnXSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFzc29jaWF0ZSBOb2RlIHdpdGggTm9kZVN0YXR1c1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLmRhdGFWYWx1ZXMsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbC5zdGF0dXMgPSBfLmZpbmQoZGF0YS5zdGF0dXMsICdub2RlLmlkJywgdmFsLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhVmFsdWVzID0gXy5zb3J0QnlPcmRlcigkc2NvcGUuZGF0YVZhbHVlcywgWydob3N0bmFtZSddLCBbJ2FzYyddKTsgLy8gc29ydCBieSBob3N0TmFtZSBhc2NcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YVZhbHVlcyA9IGRhdGEuZGF0YTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb2xzID0gJHNjb3BlLmNvbHVtbnMgPyAkc2NvcGUuY29sdW1ucyA6IE1hdGguZmxvb3Iod2lkdGggLyAkc2NvcGUuY2VsbFdpZHRoKTtcbiAgICAgICAgICAgICAgICByb3dzID0gJHNjb3BlLnJvd3MgPyAkc2NvcGUucm93cyA6IE1hdGguY2VpbCgkc2NvcGUuZGF0YVZhbHVlcy5sZW5ndGggLyBjb2xzKTtcblxuICAgICAgICAgICAgICAgIGQzLnJhbmdlKHJvd3MpLm1hcChmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgIGQzLnJhbmdlKGNvbHMpLm1hcChmdW5jdGlvbiAoY29sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sIDw9ICRzY29wZS5kYXRhVmFsdWVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YU9iaiA9ICRzY29wZS5kYXRhVmFsdWVzWyhjb2xzICogcm93KSArIGNvbF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YU9iai5jb29yZHMgPSBbY29sICogJHNjb3BlLmNlbGxIZWlnaHQsIHJvdyAqICRzY29wZS5jZWxsV2lkdGhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ3JpZERhdGEucHVzaChkYXRhT2JqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJldmVhbERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5jZWxsLXRleHQnKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5jZWxsLXRleHQtZGV0YWlsJylcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLmNlbGwtcGF1c2UtcmVzdW1lLWljb24nKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdibG9jaycpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBoaWRlRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGQzLnNlbGVjdEFsbCgnLmNlbGwtdGV4dCcpXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gICAgICAgICAgICBkMy5zZWxlY3RBbGwoJy5jZWxsLXRleHQtZGV0YWlsJylcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgICAgZDMuc2VsZWN0QWxsKCcuY2VsbC1wYXVzZS1yZXN1bWUtaWNvbicpXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBjb2xzID0gJHNjb3BlLmNvbHVtbnMgPyAkc2NvcGUuY29sdW1ucyA6IE1hdGguZmxvb3Iod2lkdGggLyAkc2NvcGUuY2VsbFdpZHRoKTtcbiAgICAgICAgICAgIHJvd3MgPSAkc2NvcGUucm93cyA/ICRzY29wZS5yb3dzIDogTWF0aC5jZWlsKCRzY29wZS5kYXRhVmFsdWVzLmxlbmd0aCAvIGNvbHMpO1xuXG4gICAgICAgICAgICB2YXIgdGlja1ZhbHVlcyA9IEFycmF5LmFwcGx5KG51bGwsIHtsZW5ndGg6IHJvd3N9KS5tYXAoTnVtYmVyLmNhbGwsIE51bWJlcik7XG5cbiAgICAgICAgICAgIHZhciB6b29tID0gZDMuYmVoYXZpb3Iuem9vbSgpXG4gICAgICAgICAgICAgICAgLnNjYWxlRXh0ZW50KFsxLCA2XSlcbiAgICAgICAgICAgICAgICAvLy5jZW50ZXIoWzAsIDBdKVxuICAgICAgICAgICAgICAgIC5vbignem9vbScsIHpvb21lZCk7XG5cbiAgICAgICAgICAgIGlmICgkc2NvcGUuZW5hYmxlWm9vbSkge1xuICAgICAgICAgICAgICAgIHN2ZyA9IGQzLnNlbGVjdCgnLmdyaWQtY2hhcnQnKS5hcHBlbmQoJ3N2ZycpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAgICAgICAgICAgLmNhbGwoem9vbSlcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgnZycpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuZW5hYmxlVG9vbHRpcCkge1xuICAgICAgICAgICAgICAgIHN2ZyA9IGQzLnNlbGVjdCgnLmdyaWQtY2hhcnQnKS5hcHBlbmQoJ3N2ZycpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAgICAgICAgICAgLmNhbGwodGlwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3ZnID0gZDMuc2VsZWN0KCcuZ3JpZC1jaGFydCcpLmFwcGVuZCgnc3ZnJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgd2lkdGgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBoZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ2cnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3ZnLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ292ZXJsYXknKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBoZWlnaHQpO1xuXG4gICAgICAgICAgICBpZiAoJHNjb3BlLnNob3dBeGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAgICAgICAgICAgICAuZG9tYWluKFswLCByb3dzXSlcbiAgICAgICAgICAgICAgICAgICAgLnJhbmdlKFswLCBoZWlnaHQtMTBdKTtcblxuICAgICAgICAgICAgICAgIHZhciB5QXhpcyA9IGQzLnN2Zy5heGlzKClcbiAgICAgICAgICAgICAgICAgICAgLnNjYWxlKHkpXG4gICAgICAgICAgICAgICAgICAgIC5vcmllbnQoJ2xlZnQnKVxuICAgICAgICAgICAgICAgICAgICAudGlja1ZhbHVlcyh0aWNrVmFsdWVzKTtcblxuICAgICAgICAgICAgICAgIHN2Zy5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyAyNSArICcsJyArIDAgKyAnKScpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAneSBheGlzJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIDAgKyAnLCcgKyAkc2NvcGUuY2VsbEhlaWdodCAvIDIgKyAnKScpXG4gICAgICAgICAgICAgICAgICAgIC5jYWxsKHlBeGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0RGF0YVZhbHVlcyhkYXRhKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gem9vbWVkKCkge1xuICAgICAgICAgICAgICAgIHZhciBzID0gZDMuZXZlbnQuc2NhbGU7XG5cbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmVuYWJsZVJldmVhbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocyA+IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldmVhbERhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHMgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zaG93QXhlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgem9vbS50cmFuc2xhdGUoWzI1LCAwXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB6b29tLnRyYW5zbGF0ZShbMCwgMF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN2Zy5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyB6b29tLnRyYW5zbGF0ZSgpICsgJylzY2FsZSgnICsgZDMuZXZlbnQuc2NhbGUgKyAnKScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBkcmFnT2Zmc2V0WCA9IDAsXG4gICAgICAgICAgICBkcmFnT2Zmc2V0WSA9IDAsXG4gICAgICAgICAgICBjbGlja09mZnNldFggPSAwLFxuICAgICAgICAgICAgY2xpY2tPZmZzZXRZID0gMDtcblxuICAgICAgICB2YXIgZHJhZyA9IGQzLmJlaGF2aW9yLmRyYWcoKVxuICAgICAgICAgICAgLm9uKCdkcmFnc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJhY2sgb2Zmc2V0WCBhbmQgb2Zmc2V0WSB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIGRyYWcgYW5kIGNsaWNrXG4gICAgICAgICAgICAgICAgZHJhZ09mZnNldFggPSBkMy5ldmVudC5zb3VyY2VFdmVudC5vZmZzZXRYO1xuICAgICAgICAgICAgICAgIGRyYWdPZmZzZXRZID0gZDMuZXZlbnQuc291cmNlRXZlbnQub2Zmc2V0WTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBnZXRDZWxsRmlsbCA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICBpZiAoZCAmJiBkLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnN0YXR1cy5nZXRDZWxsRmlsbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICdub25lJztcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0Q2VsbFRleHQgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgaWYgKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5nZXRDZWxsVGV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnZXRDZWxsQWN0aXZpdHkgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgaWYgKGQgJiYgZC5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5zdGF0dXMuZ2V0Q2VsbEFjdGl2aXR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldENlbGxQYXVzZVJlc3VtZSA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICBpZiAoZCAmJiBkLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnN0YXR1cy5nZXRDZWxsUGF1c2VSZXN1bWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0Q2VsbEFjdGl2aXR5VG90YWwgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgaWYgKGQgJiYgZC5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5zdGF0dXMuZ2V0Q2VsbEFjdGl2aXR5VG90YWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0Q2VsbFRpdGxlID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIGlmIChkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQuZ2V0Q2VsbFRpdGxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldENlbGxFcnJvciA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICBpZiAoZCAmJiBkLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnN0YXR1cy5nZXRDZWxsRXJyb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnRmFpbGVkOiBVbmF2YWlsYWJsZSc7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldENlbGxUb3RhbCA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICBpZiAoZCAmJiBkLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnN0YXR1cy5nZXRDZWxsVG90YWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnQ29tcGxldGVkOiBVbmF2YWlsYWJsZSc7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldENlbGxTdGF0dXMgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgaWYgKGQgJiYgZC5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZC50b1N0cmluZygpID09PSAnTm9kZScpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc3RhdHVzLmdldENlbGxTdGF0dXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJ1N0YXR1cyBVbmF2YWlsYWJsZSc7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldENlbGxKb2JzID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIGlmIChkICYmIGQuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGQudG9TdHJpbmcoKSA9PT0gJ05vZGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnN0YXR1cy5nZXRDZWxsSm9icygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2VsbENsaWNrSGFuZGxlciA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgIC8vIHRyYWNrIG9mZnNldFggYW5kIG9mZnNldFkgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiBkcmFnIGFuZCBjbGlja1xuICAgICAgICAgICAgY2xpY2tPZmZzZXRYID0gZDMuZXZlbnQub2Zmc2V0WDtcbiAgICAgICAgICAgIGNsaWNrT2Zmc2V0WSA9IGQzLmV2ZW50Lm9mZnNldFk7XG4gICAgICAgICAgICBpZiAoZHJhZ09mZnNldFggPT09IGNsaWNrT2Zmc2V0WCAmJiBkcmFnT2Zmc2V0WSA9PT0gY2xpY2tPZmZzZXRZKSB7XG4gICAgICAgICAgICAgICAgLy8gb2Zmc2V0cyBhcmUgdGhlIHNhbWU7IG5vIGRyYWdnaW5nIG9jY3VycmVkOyBwcm9jZXNzIGFzIGNsaWNrIGV2ZW50XG4gICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQudG9TdHJpbmcoKSA9PT0gJ0pvYlR5cGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2pvYnMnKS5zZWFyY2goJ2pvYl90eXBlX2lkJywgdGFyZ2V0LmlkKS5zZWFyY2goJ3N0YXR1cycsIHRhcmdldC5zdGF0dXMuaGFzX3J1bm5pbmcuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQudG9TdHJpbmcoKSA9PT0gJ05vZGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL25vZGVzLycgKyB0YXJnZXQuaWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIERBVEEgSk9JTlxuICAgICAgICAgICAgLy8gSm9pbiBuZXcgZGF0YSB3aXRoIG9sZCBlbGVtZW50cywgaWYgYW55LlxuICAgICAgICAgICAgaWYgKCRzY29wZS5lbmFibGVUb29sdGlwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lckdyb3VwID0gc3ZnLnNlbGVjdEFsbCgnLmNlbGwtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZGF0YSgkc2NvcGUuZ3JpZERhdGEsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvb3JkczsgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCB0aXAuc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsIHRpcC5oaWRlKVxuICAgICAgICAgICAgICAgICAgICAub24oJ2NsaWNrJywgdGlwLmhpZGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyR3JvdXAgPSBzdmcuc2VsZWN0QWxsKCcuY2VsbC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKCRzY29wZS5ncmlkRGF0YSwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29vcmRzOyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVVBEQVRFXG4gICAgICAgICAgICAvLyBVcGRhdGUgb2xkIGVsZW1lbnRzIGFzIG5lZWRlZC5cbiAgICAgICAgICAgIGNvbnRhaW5lckdyb3VwLnNlbGVjdEFsbCgnLmNlbGwnKVxuICAgICAgICAgICAgICAgIC5kYXRhKCRzY29wZS5ncmlkRGF0YSwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29vcmRzOyB9KVxuICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAuZHVyYXRpb24oNzUwKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQgPyAnI2ZmZicgOiAnbm9uZSc7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2VsbEZpbGwoZCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lckdyb3VwLnNlbGVjdEFsbCgnLmNlbGwtdGV4dCcpXG4gICAgICAgICAgICAgICAgLmRhdGEoJHNjb3BlLmdyaWREYXRhLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb29yZHM7IH0pXG4gICAgICAgICAgICAgICAgLmh0bWwoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldENlbGxUZXh0KGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250YWluZXJHcm91cC5zZWxlY3RBbGwoJy5jZWxsLXRvdGFsLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgLmRhdGEoJHNjb3BlLmdyaWREYXRhLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb29yZHM7IH0pXG4gICAgICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQudG9TdHJpbmcoKSA9PT0gJ0pvYlR5cGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2VsbEFjdGl2aXR5VG90YWwoZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29udGFpbmVyR3JvdXAuc2VsZWN0QWxsKCcuY2VsbC1wYXVzZS1yZXN1bWUtaWNvbicpXG4gICAgICAgICAgICAgICAgLmRhdGEoJHNjb3BlLmdyaWREYXRhLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb29yZHM7IH0pXG4gICAgICAgICAgICAgICAgLmh0bWwoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldENlbGxQYXVzZVJlc3VtZShkKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29udGFpbmVyR3JvdXAuc2VsZWN0QWxsKCcuY2VsbC1hY3Rpdml0eS1pY29uJylcbiAgICAgICAgICAgICAgICAuZGF0YSgkc2NvcGUuZ3JpZERhdGEsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvb3JkczsgfSlcbiAgICAgICAgICAgICAgICAuaHRtbChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2VsbEFjdGl2aXR5KGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250YWluZXJHcm91cC5zZWxlY3RBbGwoJy5jZWxsLXRpdGxlJylcbiAgICAgICAgICAgICAgICAuZGF0YSgkc2NvcGUuZ3JpZERhdGEsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvb3JkczsgfSlcbiAgICAgICAgICAgICAgICAuaHRtbChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2VsbFRpdGxlKGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250YWluZXJHcm91cC5zZWxlY3RBbGwoJy5jZWxsLWVycm9yJylcbiAgICAgICAgICAgICAgICAuZGF0YSgkc2NvcGUuZ3JpZERhdGEsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvb3JkczsgfSlcbiAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2VsbEVycm9yKGQsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250YWluZXJHcm91cC5zZWxlY3RBbGwoJy5jZWxsLXRvdGFsJylcbiAgICAgICAgICAgICAgICAuZGF0YSgkc2NvcGUuZ3JpZERhdGEsIGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvb3JkczsgfSlcbiAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2VsbFRvdGFsKGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250YWluZXJHcm91cC5zZWxlY3RBbGwoJy5jZWxsLXN0YXR1cycpXG4gICAgICAgICAgICAgICAgLmRhdGEoJHNjb3BlLmdyaWREYXRhLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb29yZHM7IH0pXG4gICAgICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldENlbGxTdGF0dXMoZCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lckdyb3VwLnNlbGVjdEFsbCgnLmNlbGwtam9icycpXG4gICAgICAgICAgICAgICAgLmRhdGEoJHNjb3BlLmdyaWREYXRhLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb29yZHM7IH0pXG4gICAgICAgICAgICAgICAgLmh0bWwoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldENlbGxKb2JzKGQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250YWluZXJHcm91cC5zZWxlY3RBbGwoJy5jZWxsLW92ZXJsYXknKVxuICAgICAgICAgICAgICAgIC5kYXRhKCRzY29wZS5ncmlkRGF0YSwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29vcmRzOyB9KVxuICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGxDbGlja0hhbmRsZXIodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gRU5URVJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgZWxlbWVudHMgYXMgbmVlZGVkLlxuICAgICAgICAgICAgdmFyIGNlbGxHcm91cCA9IGNvbnRhaW5lckdyb3VwLmVudGVyKClcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCdnJylcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2VsbC1ncm91cCcpO1xuXG4gICAgICAgICAgICBjZWxsR3JvdXAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2VsbCcpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgJHNjb3BlLmNlbGxXaWR0aClcbiAgICAgICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgJHNjb3BlLmNlbGxIZWlnaHQpXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldENlbGxGaWxsKGQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZCA/ICcjZmZmJyA6ICdub25lJztcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAuZHVyYXRpb24oNzUwKTtcblxuICAgICAgICAgICAgY2VsbEdyb3VwLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NlbGwtdGV4dCcpXG4gICAgICAgICAgICAgICAgLmh0bWwoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldENlbGxUZXh0KGQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCAkc2NvcGUuY2VsbFdpZHRoIC8gMilcbiAgICAgICAgICAgICAgICAuYXR0cigneScsICgkc2NvcGUuY2VsbEhlaWdodCAvIDIpICsgMTIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJHNjb3BlLmVuYWJsZVJldmVhbCA/ICdibG9jaycgOiAnbm9uZScpO1xuXG4gICAgICAgICAgICBjZWxsR3JvdXAuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2VsbC10b3RhbC1hY3RpdmUnKVxuICAgICAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkLnRvU3RyaW5nKCkgPT09ICdKb2JUeXBlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldENlbGxBY3Rpdml0eVRvdGFsKGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnZW5kJylcbiAgICAgICAgICAgICAgICAuYXR0cigneCcsICRzY29wZS5jZWxsV2lkdGggLSAyKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgJHNjb3BlLmNlbGxIZWlnaHQgLSA1KVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsICRzY29wZS5lbmFibGVSZXZlYWwgPyAnYmxvY2snIDogJ25vbmUnKTtcblxuICAgICAgICAgICAgY2VsbEdyb3VwLmFwcGVuZCgnZycpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NlbGwtYWN0aXZpdHknKVxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjZWxsLWFjdGl2aXR5LWljb24nKVxuICAgICAgICAgICAgICAgIC5odG1sKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRDZWxsQWN0aXZpdHkoZCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnZW5kJylcbiAgICAgICAgICAgICAgICAuYXR0cigneCcsICRzY29wZS5jZWxsV2lkdGggLSAyKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgMTQpO1xuXG4gICAgICAgICAgICB2YXIgZGV0YWlsID0gY2VsbEdyb3VwLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NlbGwtdGV4dC1kZXRhaWwnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgJHNjb3BlLmNlbGxXaWR0aCAvIDIpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBNYXRoLmZsb29yKCRzY29wZS5jZWxsSGVpZ2h0ICouMTUpKSAvLyAxNSUgZnJvbSB0b3Agb2YgY2VsbFxuICAgICAgICAgICAgICAgIC5hdHRyKCdkeScsIDApXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJHNjb3BlLmVuYWJsZVJldmVhbCA/ICdub25lJyA6ICdibG9jaycpO1xuXG4gICAgICAgICAgICBkZXRhaWwuYXBwZW5kKCd0c3BhbicpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NlbGwtdGl0bGUnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgJHNjb3BlLmNlbGxXaWR0aCAvIDIpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBNYXRoLmZsb29yKCRzY29wZS5jZWxsSGVpZ2h0ICogLjE1KSkgLy8gMTUlIGZyb20gdG9wIG9mIGNlbGxcbiAgICAgICAgICAgICAgICAuYXR0cignZHknLCAwKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgY2VsbEZvbnRTbSAqIHNjYWxlICsgJ2VtJylcbiAgICAgICAgICAgICAgICAuaHRtbChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2VsbFRpdGxlKGQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhbGwod3JhcCk7XG5cbiAgICAgICAgICAgIGRldGFpbC5hcHBlbmQoJ3RzcGFuJylcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2VsbC1lcnJvcicpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCAkc2NvcGUuY2VsbFdpZHRoIC8gMilcbiAgICAgICAgICAgICAgICAuYXR0cigneScsIE1hdGguZmxvb3IoJHNjb3BlLmNlbGxIZWlnaHQgKi4zKSkgLy8gMzAlIGZyb20gdG9wIG9mIGNlbGxcbiAgICAgICAgICAgICAgICAuYXR0cignZHknLCAwKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgY2VsbEZvbnRTbSAqIHNjYWxlICsgJ2VtJylcbiAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2VsbEVycm9yKGQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhbGwod3JhcCk7XG5cbiAgICAgICAgICAgIGRldGFpbC5hcHBlbmQoJ3RzcGFuJylcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2VsbC10b3RhbCcpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCAkc2NvcGUuY2VsbFdpZHRoIC8gMilcbiAgICAgICAgICAgICAgICAuYXR0cigneScsIE1hdGguZmxvb3IoJHNjb3BlLmNlbGxIZWlnaHQgKi40KSkgLy8gNDAlIGZyb20gdG9wIG9mIGNlbGxcbiAgICAgICAgICAgICAgICAuYXR0cignZHknLCAwKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgY2VsbEZvbnRTbSAqIHNjYWxlICsgJ2VtJylcbiAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2VsbFRvdGFsKGQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhbGwod3JhcCk7XG5cbiAgICAgICAgICAgIGRldGFpbC5hcHBlbmQoJ3RzcGFuJylcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2VsbC1zdGF0dXMnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgJHNjb3BlLmNlbGxXaWR0aCAvIDIpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBNYXRoLmZsb29yKCRzY29wZS5jZWxsSGVpZ2h0ICogLjU1KSkgLy8gNTUlIGZyb20gdG9wIG9mIGNlbGxcbiAgICAgICAgICAgICAgICAuYXR0cignZHknLCAwKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgY2VsbEZvbnRMZyAqIHNjYWxlICsgJ2VtJylcbiAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2VsbFN0YXR1cyhkKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZGV0YWlsLmFwcGVuZCgndHNwYW4nKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjZWxsLWpvYnMnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgJHNjb3BlLmNlbGxXaWR0aCAvIDIpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBNYXRoLmZsb29yKCRzY29wZS5jZWxsSGVpZ2h0ICogLjc1KSkgLy8gNzUlIGZyb20gdG9wIG9mIGNlbGxcbiAgICAgICAgICAgICAgICAuYXR0cignZHknLCAwKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgY2VsbEZvbnRTbSAqIHNjYWxlICsgJ2VtJylcbiAgICAgICAgICAgICAgICAuaHRtbChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2VsbEpvYnMoZCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2FsbCh3cmFwKTtcblxuICAgICAgICAgICAgY2VsbEdyb3VwLmFwcGVuZCgncmVjdCcpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NlbGwtb3ZlcmxheScpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgJHNjb3BlLmNlbGxXaWR0aClcbiAgICAgICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgJHNjb3BlLmNlbGxIZWlnaHQpXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkMy5zZWxlY3QodGhpcylbMF1bMF0ucGFyZW50RWxlbWVudC5jaGlsZHJlblswXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgJzAuNzUnKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdChkMy5zZWxlY3QodGhpcylbMF1bMF0ucGFyZW50RWxlbWVudC5jaGlsZHJlblswXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgJzEuMCcpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGxDbGlja0hhbmRsZXIoZCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2FsbChkcmFnKTtcblxuICAgICAgICAgICAgaWYgKCRzY29wZS51c2VyICYmICRzY29wZS51c2VyLmlzX2FkbWluKSB7XG4gICAgICAgICAgICAgICAgY2VsbEdyb3VwLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjZWxsLXBhdXNlLXJlc3VtZS1pY29uJylcbiAgICAgICAgICAgICAgICAgICAgLmh0bWwoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRDZWxsUGF1c2VSZXN1bWUoZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdzdGFydCcpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgNSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3knLCAyMClcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJHNjb3BlLmVuYWJsZVJldmVhbCA/ICdub25lJyA6ICdibG9jaycpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzEuM2VtJylcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2N1cnNvcicsICdwb2ludGVyJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBzY2FsZUNvbmZpZy5jb2xvcnMuY2hhcnRfYmx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAnd2hpdGUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXVzZVJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0RGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LnN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREYXRhID0gdGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREYXRhLnN0YXR1cy5wYXVzZVJlc3VtZUNlbGwoJHNjb3BlLnBhdXNlUmVhc29uKS50aGVuKGZ1bmN0aW9uICh1cGRhdGVkRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldERhdGEudG9TdHJpbmcoKSA9PT0gJ05vZGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRhcmdldCBkYXRhIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldERhdGEuaXNfcGF1c2VkID0gdXBkYXRlZERhdGEuaXNfcGF1c2VkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldERhdGEucGF1c2VfcmVhc29uID0gdXBkYXRlZERhdGEucGF1c2VfcmVhc29uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldERhdGEuc3RhdHVzLm5vZGUgPSB1cGRhdGVkRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3VwZGF0ZU5vZGVIZWFsdGgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBncmlkIGNlbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNlbGxGaWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVQYXVzZVJlc3VtZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ2VsbFN0YXR1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IHByb21wdCBmb3IgcmVhc29uIHdoZW4gcGF1c2luZyAobm90IHJlc3VtaW5nKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQuaXNfcGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXVzZURpYWxvZy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGU6ICRzY29wZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlUmVzdW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlUmVzdW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFTlRFUiArIFVQREFURVxuICAgICAgICAgICAgLy8gQXBwZW5kaW5nIHRvIHRoZSBlbnRlciBzZWxlY3Rpb24gZXhwYW5kcyB0aGUgdXBkYXRlIHNlbGVjdGlvbiB0byBpbmNsdWRlXG4gICAgICAgICAgICAvLyBlbnRlcmluZyBlbGVtZW50czsgc28sIG9wZXJhdGlvbnMgb24gdGhlIHVwZGF0ZSBzZWxlY3Rpb24gYWZ0ZXIgYXBwZW5kaW5nIHRvXG4gICAgICAgICAgICAvLyB0aGUgZW50ZXIgc2VsZWN0aW9uIHdpbGwgYXBwbHkgdG8gYm90aCBlbnRlcmluZyBhbmQgdXBkYXRpbmcgbm9kZXMuXG4gICAgICAgICAgICBjb250YWluZXJHcm91cC50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAuZHVyYXRpb24oNzUwKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgZC5jb29yZHMgKyAnKSc7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciB1cGRhdGVDZWxsRmlsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXJHcm91cC5zZWxlY3RBbGwoJy5jZWxsJylcbiAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oMjUwKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZCA/ICcjZmZmJyA6ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRDZWxsRmlsbChkKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgdXBkYXRlUGF1c2VSZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyR3JvdXAuc2VsZWN0QWxsKCcuY2VsbC1wYXVzZS1yZXN1bWUtaWNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5odG1sKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2VsbFBhdXNlUmVzdW1lKGQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciB1cGRhdGVDZWxsU3RhdHVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lckdyb3VwLnNlbGVjdEFsbCgnLmNlbGwtc3RhdHVzJylcbiAgICAgICAgICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRDZWxsU3RhdHVzKGQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIEVYSVRcbiAgICAgICAgICAgIC8vIFJlbW92ZSBvbGQgZWxlbWVudHMgYXMgbmVlZGVkLlxuICAgICAgICAgICAgY29udGFpbmVyR3JvdXAuZXhpdCgpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2NlbGwtZXhpdCcpXG4gICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgICAgIC5kdXJhdGlvbig3NTApXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMCwwKScpXG4gICAgICAgICAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB3cmFwICh0ZXh0LCB3aWR0aCkge1xuICAgICAgICAgICAgICAgIHRleHQuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gZDMuc2VsZWN0KHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgd29yZHMgPSB0ZXh0LnRleHQoKS5zcGxpdCgvXFxzKy8pLnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQgPSAxLjEsXG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gdGV4dC5hdHRyKCd5JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBkeSA9IHBhcnNlRmxvYXQodGV4dC5hdHRyKCdkeScpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRzcGFuID0gdGV4dC50ZXh0KG51bGwpLmFwcGVuZCgndHNwYW4nKS5hdHRyKCd4JywgJHNjb3BlLmNlbGxXaWR0aCAvIDIpLmF0dHIoJ3knLCB5KS5hdHRyKCdkeScsIGR5ICsgJ2VtJyk7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh3b3JkID0gd29yZHMucG9wKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3b3JkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUucHVzaCh3b3JkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0c3Bhbi50ZXh0KGxpbmUuam9pbignICcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHNwYW4ubm9kZSgpLmdldENvbXB1dGVkVGV4dExlbmd0aCgpID4gKCRzY29wZS5jZWxsV2lkdGggLSAxMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHNwYW4udGV4dChsaW5lLmpvaW4oJyAnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgPSBbd29yZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRzcGFuID0gdGV4dC5hcHBlbmQoJ3RzcGFuJykuYXR0cigneCcsICRzY29wZS5jZWxsV2lkdGggLyAyKS5hdHRyKCd5JywgeSkuYXR0cignZHknLCArK2xpbmVOdW1iZXIgKiBsaW5lSGVpZ2h0ICsgZHkgKyAnZW0nKS50ZXh0KHdvcmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKF8ua2V5cyhkYXRhKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgJCgnLmdyaWQtY2hhcnQnKS5lbXB0eSgpO1xuICAgICAgICAgICAgICAgIGluaXRpYWxpemUoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kb24oJ3JlZHJhd0dyaWQnLCBmdW5jdGlvbiAoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIGdldERhdGFWYWx1ZXMoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuZGlyZWN0aXZlKCdhaXNHcmlkQ2hhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnYWlzR3JpZENoYXJ0Q29udHJvbGxlcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvY2hhcnRzL2dyaWQvZ3JpZENoYXJ0VGVtcGxhdGUuaHRtbCcsXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBkYXRhOiAnPScsXG4gICAgICAgICAgICAgICAgaWNvbnM6ICc9JywgLy8gaW5kaWNhdGVzIHdoZXRoZXIgY2VsbC10ZXh0IGlzIGVudGlyZWx5IG1hZGUgdXAgb2YgaWNvbnNcbiAgICAgICAgICAgICAgICBzY2FsZTogJz0nLCAvLyBtdWx0aXBsaWVyIHRvIGluY3JlYXNlIGNlbGwgc2l6ZVxuICAgICAgICAgICAgICAgIHJldmVhbDogJz0nLCAvLyBpZiB0cnVlLCBsZXNzIGRhdGEgd2lsbCBzaG93IHdoZW4gem9vbWVkIG91dFxuICAgICAgICAgICAgICAgIG1vZGU6ICdAJywgLy8gdmFsaWQgdmFsdWVzIGFyZSB6b29tIG9yIHRvb2x0aXBcbiAgICAgICAgICAgICAgICBjb2x1bW5zOiAnPScsXG4gICAgICAgICAgICAgICAgcm93czogJz0nLFxuICAgICAgICAgICAgICAgIHNob3dBeGVzOiAnPSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmNvbnRyb2xsZXIoJ2Fpc0hlYWx0aENvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHNjb3BlLCBnYXVnZUZhY3RvcnkpIHtcbiAgICAgICAgdmFyIGdhdWdlID0gbnVsbCxcbiAgICAgICAgICAgIGluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgc2NhbGUgPSAkc2NvcGUuc2NhbGUgfHwgMTtcbiAgICAgICAgICAgIC8vJHNjb3BlLmdhdWdlU2l6ZSA9IDE1MCAqIHNjYWxlO1xuICAgICAgICAgICAgLy8kc2NvcGUuZ2F1Z2VXaWR0aCA9IDI1ICogc2NhbGU7XG4gICAgICAgICAgICAkc2NvcGUuZG9udXRTaXplID0gMjc1ICogc2NhbGU7XG4gICAgICAgICAgICAkc2NvcGUuZG9udXRXaWR0aCA9IDI1ICogc2NhbGU7XG4gICAgICAgICAgICAvL2dhdWdlID0gZ2F1Z2VGYWN0b3J5LmNyZWF0ZUdhdWdlKCRzY29wZS50eXBlLCAnRmFpbHVyZSBSYXRlJylcbiAgICAgICAgfTtcblxuICAgICAgICAvKnZhciByZWRyYXdHYXVnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChnYXVnZSkge1xuICAgICAgICAgICAgICAgIGdhdWdlLnJlZHJhdygkc2NvcGUuZGF0YS5nYXVnZURhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9OyovXG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChfLmtleXMoZGF0YSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy9yZWRyYXdHYXVnZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuZGlyZWN0aXZlKCdhaXNIZWFsdGgnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnYWlzSGVhbHRoQ29udHJvbGxlcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvY2hhcnRzL2hlYWx0aC9oZWFsdGhUZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIG5hbWU6ICc9JyxcbiAgICAgICAgICAgICAgICBkYXRhOiAnPScsXG4gICAgICAgICAgICAgICAgc2NhbGU6ICc9JyxcbiAgICAgICAgICAgICAgICBlcnJvckxhYmVsOiAnPScsXG4gICAgICAgICAgICAgICAgdHlwZTogJz0nXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5jb250cm9sbGVyKCdhaXNKb2JMb2FkQ29udHJvbGxlcicsIGZ1bmN0aW9uICgkc2NvcGUsIHNjYWxlQ29uZmlnLCBzY2FsZVNlcnZpY2UsIGxvYWRTZXJ2aWNlKSB7XG4gICAgICAgIHZhciBjaGFydCA9IG51bGwsXG4gICAgICAgICAgICBjb2xBcnIgPSBbXSxcbiAgICAgICAgICAgIHhBcnIgPSBbXSxcbiAgICAgICAgICAgIHBlbmRpbmdBcnIgPSBbXSxcbiAgICAgICAgICAgIHF1ZXVlZEFyciA9IFtdLFxuICAgICAgICAgICAgcnVubmluZ0FyciA9IFtdLFxuICAgICAgICAgICAgcmVtb3ZlSWRzID0gW10sXG4gICAgICAgICAgICBsZWdlbmRIaWRlID0gW107XG5cbiAgICAgICAgJHNjb3BlLmZpbHRlclZhbHVlID0gMTtcbiAgICAgICAgJHNjb3BlLmZpbHRlckR1cmF0aW9uID0gJ3cnO1xuICAgICAgICAkc2NvcGUuZmlsdGVyRHVyYXRpb25zID0gWydNJywgJ3cnLCAnZCddO1xuICAgICAgICAkc2NvcGUuem9vbUVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLnpvb21DbGFzcyA9ICdidG4tZGVmYXVsdCc7XG4gICAgICAgICRzY29wZS56b29tVGV4dCA9ICdFbmFibGUgWm9vbSc7XG4gICAgICAgICRzY29wZS5qb2JMb2FkRGF0YSA9IHt9O1xuICAgICAgICAkc2NvcGUubG9hZGluZ0pvYkxvYWQgPSB0cnVlO1xuICAgICAgICAkc2NvcGUuam9iTG9hZEVycm9yID0gbnVsbDtcbiAgICAgICAgJHNjb3BlLmpvYkxvYWRFcnJvclN0YXR1cyA9IG51bGw7XG4gICAgICAgICRzY29wZS50b3RhbCA9IDA7XG4gICAgICAgICRzY29wZS5jaGFydFN0eWxlID0gJyc7XG5cbiAgICAgICAgdmFyIGpvYkxvYWRQYXJhbXMgPSB7XG4gICAgICAgICAgICBzdGFydGVkOiBtb21lbnQudXRjKCkuc3VidHJhY3QoJHNjb3BlLmZpbHRlclZhbHVlLCAkc2NvcGUuZmlsdGVyRHVyYXRpb24pLnN0YXJ0T2YoJ2QnKS50b0RhdGUoKSwgZW5kZWQ6IG1vbWVudC51dGMoKS5lbmRPZignZCcpLnRvRGF0ZSgpLCBqb2JfdHlwZV9pZDogbnVsbCwgam9iX3R5cGVfbmFtZTogbnVsbCwgam9iX3R5cGVfY2F0ZWdvcnk6IG51bGwsIHVybDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS50b2dnbGVab29tID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLnpvb21FbmFibGVkID0gISRzY29wZS56b29tRW5hYmxlZDtcbiAgICAgICAgICAgIGNoYXJ0Lnpvb20uZW5hYmxlKCRzY29wZS56b29tRW5hYmxlZCk7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLnpvb21FbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnpvb21DbGFzcyA9ICdidG4tcHJpbWFyeSc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnpvb21UZXh0ID0gJ0Rpc2FibGUgWm9vbSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRzY29wZS56b29tQ2xhc3MgPSAnYnRuLWRlZmF1bHQnO1xuICAgICAgICAgICAgICAgICRzY29wZS56b29tVGV4dCA9ICdFbmFibGUgWm9vbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGluaXRDaGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbEFyciA9IFtdO1xuICAgICAgICAgICAgeEFyciA9IFtdO1xuICAgICAgICAgICAgcGVuZGluZ0FyciA9IFtdO1xuICAgICAgICAgICAgcXVldWVkQXJyID0gW107XG4gICAgICAgICAgICBydW5uaW5nQXJyID0gW107XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAvLyB4IGF4aXMgdmFsdWVzXG4gICAgICAgICAgICB2YXIgbnVtSG91cnMgPSBtb21lbnQudXRjKGpvYkxvYWRQYXJhbXMuZW5kZWQpLmRpZmYobW9tZW50LnV0Yyhqb2JMb2FkUGFyYW1zLnN0YXJ0ZWQpLCAnaCcpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1Ib3VyczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgeEFyci5wdXNoKG1vbWVudC51dGMoam9iTG9hZFBhcmFtcy5zdGFydGVkKS5hZGQoaSwgJ2gnKS5zdGFydE9mKCdoJykudG9EYXRlKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkYXRhIHZhbHVlc1xuICAgICAgICAgICAgXy5mb3JFYWNoKHhBcnIsIGZ1bmN0aW9uICh4RGF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhT2JqID0gXy5maW5kKCRzY29wZS5qb2JMb2FkRGF0YS5yZXN1bHRzLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tZW50LnV0YyhkLnRpbWUpLnN0YXJ0T2YoJ2gnKS5pc1NhbWUoeERhdGUsICdob3VyJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gcHVzaCAwIGlmIGRhdGEgZm9yIHhEYXRlIGlzIG5vdCBwcmVzZW50IGluIHF1ZXJ5RGF0ZXNcbiAgICAgICAgICAgICAgICBwZW5kaW5nQXJyLnB1c2goZGF0YU9iaiA/IGRhdGFPYmoucGVuZGluZ19jb3VudCA6IDApO1xuICAgICAgICAgICAgICAgIHF1ZXVlZEFyci5wdXNoKGRhdGFPYmogPyBkYXRhT2JqLnF1ZXVlZF9jb3VudCA6IDApO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmdBcnIucHVzaChkYXRhT2JqID8gZGF0YU9iai5ydW5uaW5nX2NvdW50IDogMCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgeEFyci51bnNoaWZ0KCd4Jyk7XG4gICAgICAgICAgICBwZW5kaW5nQXJyLnVuc2hpZnQoJ1BlbmRpbmcnKTtcbiAgICAgICAgICAgIHF1ZXVlZEFyci51bnNoaWZ0KCdRdWV1ZWQnKTtcbiAgICAgICAgICAgIHJ1bm5pbmdBcnIudW5zaGlmdCgnUnVubmluZycpO1xuICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgeEFyciA9IF8ucGx1Y2soJHNjb3BlLmpvYkxvYWREYXRhLnJlc3VsdHMsICd0aW1lJyk7XG4gICAgICAgICAgICBfLmZvckVhY2goeEFyciwgZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgICAgICAgICAgICB4QXJyW2ldID0gbW9tZW50LnV0YyhkKS50b0RhdGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgeEFyci51bnNoaWZ0KCd4Jyk7XG5cbiAgICAgICAgICAgIHZhciBwZW5kaW5nQXJyID0gXy5wbHVjaygkc2NvcGUuam9iTG9hZERhdGEucmVzdWx0cywgJ3BlbmRpbmdfY291bnQnKSxcbiAgICAgICAgICAgICAgICBxdWV1ZWRBcnIgPSBfLnBsdWNrKCRzY29wZS5qb2JMb2FkRGF0YS5yZXN1bHRzLCAncXVldWVkX2NvdW50JyksXG4gICAgICAgICAgICAgICAgcnVubmluZ0FyciA9IF8ucGx1Y2soJHNjb3BlLmpvYkxvYWREYXRhLnJlc3VsdHMsICdydW5uaW5nX2NvdW50Jyk7XG5cbiAgICAgICAgICAgIHBlbmRpbmdBcnIudW5zaGlmdCgnUGVuZGluZycpO1xuICAgICAgICAgICAgcXVldWVkQXJyLnVuc2hpZnQoJ1F1ZXVlZCcpO1xuICAgICAgICAgICAgcnVubmluZ0Fyci51bnNoaWZ0KCdSdW5uaW5nJyk7XG5cbiAgICAgICAgICAgIC8vIGFkZCB0byBjb2xBcnJcbiAgICAgICAgICAgIGNvbEFyciA9IFt4QXJyLCBwZW5kaW5nQXJyLCBxdWV1ZWRBcnIsIHJ1bm5pbmdBcnJdO1xuXG4gICAgICAgICAgICB2YXIgdHlwZXMgPSB7fSxcbiAgICAgICAgICAgICAgICB0eXBlID0ge30sXG4gICAgICAgICAgICAgICAgZ3JvdXBzID0gW107XG5cbiAgICAgICAgICAgIF8uZm9yRWFjaChjb2xBcnIsIGZ1bmN0aW9uKGNvbCl7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbFswXSAhPT0gJ3gnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlW2NvbFswXV0gPSAnYXJlYSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cHMucHVzaChjb2xbMF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodHlwZXMsIHR5cGUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vaWYgKGNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBjaGFydC5ncm91cHMoW2dyb3Vwc10pO1xuICAgICAgICAgICAgICAgIGNoYXJ0LmxvYWQoe1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBjb2xBcnIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGVzOiB0eXBlcyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgY2hhcnQuZmxvdyh7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnM6IGNvbEFyclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvL30gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY2hhcnQpIHtcbiAgICAgICAgICAgICAgICBjaGFydC5mbHVzaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGNoYXJ0IGNvbmZpZ1xuICAgICAgICAgICAgICAgIGNoYXJ0ID0gYzMuZ2VuZXJhdGUoe1xuICAgICAgICAgICAgICAgICAgICBiaW5kdG86ICcjam9iLWxvYWQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiAneCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBjb2xBcnIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlczogdHlwZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cHM6IFtncm91cHNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGVuZGluZzogc2NhbGVDb25maWcuY29sb3JzLmNoYXJ0X3BpbmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUXVldWVkOiBzY2FsZUNvbmZpZy5jb2xvcnMuY2hhcnRfcHVycGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJ1bm5pbmc6IHNjYWxlQ29uZmlnLmNvbG9ycy5jaGFydF9ibHVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA3MDBcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQudXRjKHgpLnN0YXJ0T2YoJ2gnKS5mb3JtYXQoc2NhbGVDb25maWcuZGF0ZUZvcm1hdHMuZGF5X3NlY29uZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBheGlzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RpbWVzZXJpZXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpY2s6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbWVudC51dGMoZCkuZm9ybWF0KHNjYWxlQ29uZmlnLmRhdGVGb3JtYXRzLmRheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmdKb2JMb2FkID0gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldEpvYkxvYWQgPSBmdW5jdGlvbiAoc2hvd1BhZ2VMb2FkKSB7XG4gICAgICAgICAgICBpZiAoc2hvd1BhZ2VMb2FkKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nSm9iTG9hZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqb2JMb2FkUGFyYW1zLnN0YXJ0ZWQgPSBtb21lbnQudXRjKCkuc3VidHJhY3QoJHNjb3BlLmZpbHRlclZhbHVlLCAkc2NvcGUuZmlsdGVyRHVyYXRpb24pLnN0YXJ0T2YoJ2QnKS50b0RhdGUoKTtcbiAgICAgICAgICAgIGpvYkxvYWRQYXJhbXMuZW5kZWQgPSBtb21lbnQudXRjKGpvYkxvYWRQYXJhbXMuc3RhcnRlZCkuYWRkKDEsICRzY29wZS5maWx0ZXJEdXJhdGlvbikuZW5kT2YoJ2QnKS50b0RhdGUoKTtcbiAgICAgICAgICAgIGpvYkxvYWRQYXJhbXMucGFnZV9zaXplID0gMTAwMDtcblxuICAgICAgICAgICAgbG9hZFNlcnZpY2UuZ2V0Sm9iTG9hZChqb2JMb2FkUGFyYW1zKS50aGVuKG51bGwsIG51bGwsIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LiRyZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuam9iTG9hZERhdGEgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIGluaXRDaGFydCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzVGV4dCAmJiByZXN1bHQuc3RhdHVzVGV4dCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5qb2JMb2FkRXJyb3JTdGF0dXMgPSByZXN1bHQuc3RhdHVzVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuam9iTG9hZEVycm9yID0gJ1VuYWJsZSB0byByZXRyaWV2ZSBqb2IgbG9hZC4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2hvd1BhZ2VMb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kcGFyZW50LmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZ0pvYkxvYWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUudXBkYXRlSm9iTG9hZFJhbmdlID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gJ29sZGVyJykge1xuICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJWYWx1ZSsrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09ICduZXdlcicpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmZpbHRlclZhbHVlID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyVmFsdWUtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gJ3RvZGF5Jykge1xuICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJWYWx1ZSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZXRKb2JMb2FkKHRydWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2ZpbHRlclZhbHVlJywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgJGpvYkxvYWROZXdlciA9ICQoJy5qb2ItbG9hZC1uZXdlcicpLFxuICAgICAgICAgICAgICAgICRqb2JMb2FkVG9kYXkgPSAkKCcuam9iLWxvYWQtdG9kYXknKTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlID4gMSkge1xuICAgICAgICAgICAgICAgICRqb2JMb2FkTmV3ZXIucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAkam9iTG9hZFRvZGF5LnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRqb2JMb2FkTmV3ZXIuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAkam9iTG9hZFRvZGF5LmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgaWYgKCRzY29wZS5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgICAvLyBzZXQgY2hhcnQgaGVpZ2h0XG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBzZXQgY29udGFpbmVyIGhlaWdodHMgZXF1YWwgdG8gYXZhaWxhYmxlIHBhZ2UgaGVpZ2h0XG4gICAgICAgICAgICAgICAgdmFyIHZpZXdwb3J0ID0gc2NhbGVTZXJ2aWNlLmdldFZpZXdwb3J0U2l6ZSgpLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBzY2FsZUNvbmZpZy5oZWFkZXJPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlck9mZnNldCA9ICQoJy5qb2ItbG9hZC1oZWFkZXInKS5oZWlnaHQoKSxcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kT2Zmc2V0ID0gJCgnLmpvYi1sb2FkLWxlZ2VuZC1sYWJlbCcpLmhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJPZmZzZXQgPSAkKCcuam9iLWxvYWQtZmlsdGVyJykub3V0ZXJIZWlnaHQodHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0TWF4SGVpZ2h0ID0gdmlld3BvcnQuaGVpZ2h0IC0gb2Zmc2V0IC0gaGVhZGVyT2Zmc2V0IC0gbGVnZW5kT2Zmc2V0IC0gZmlsdGVyT2Zmc2V0IC0gNTtcblxuICAgICAgICAgICAgICAgICRzY29wZS5jaGFydFN0eWxlID0gJ2hlaWdodDogJyArIGNoYXJ0TWF4SGVpZ2h0ICsgJ3B4OyBtYXgtaGVpZ2h0OiAnICsgY2hhcnRNYXhIZWlnaHQgKyAncHg7JztcbiAgICAgICAgICAgICAgICBnZXRKb2JMb2FkKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldEpvYkxvYWQoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuZGlyZWN0aXZlKCdhaXNKb2JMb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ2Fpc0pvYkxvYWRDb250cm9sbGVyJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbW9kdWxlcy9jaGFydHMvam9iTG9hZC9qb2JMb2FkVGVtcGxhdGUuaHRtbCcsXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBzaG93RmlsdGVyOiAnPScsIC8vIHNob3cgdGltZSByYW5nZSBmaWx0ZXIgVUlcbiAgICAgICAgICAgICAgICBjdWxsTGVnZW5kOiAnPScsIC8vIG9ubHkgc2hvdyBqb2IgdHlwZXMgaW4gbGVnZW5kIHdob3NlIHZhbHVlIGlzID4gMFxuICAgICAgICAgICAgICAgIGhpZGVUaXRsZTogJz0nLFxuICAgICAgICAgICAgICAgIGF1dG9IZWlnaHQ6ICc9J1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufSkoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuY29udHJvbGxlcignYWlzUmFkaWFsUGVyY2VudGFnZUNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCBzY2FsZUNvbmZpZykge1xuICAgIHZhciBpc0luaXRpYWxpemVkID0gZmFsc2UsXG4gICAgICAgIGZvcmVncm91bmQgPSAnJyxcbiAgICAgICAgdGV4dCA9ICcnLFxuICAgICAgICBhcmNUd2VlbiA9ICcnLFxuICAgICAgICB0ZXh0VHdlZW4gPSAnJztcblxuICAgIHZhciBnZXRGb3JlZ3JvdW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUZsb2F0KCRzY29wZS5wZXJjZW50YWdlKTtcbiAgICAgICAgaWYgKHZhbHVlID49IDc1KSB7XG4gICAgICAgICAgICByZXR1cm4gc2NhbGVDb25maWcuY29sb3JzLmNoYXJ0X2dyZWVuO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIDwgNzUgJiYgdmFsdWUgPj0gNTApIHtcbiAgICAgICAgICAgIHJldHVybiBzY2FsZUNvbmZpZy5jb2xvcnMuY2hhcnRfeWVsbG93O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNjYWxlQ29uZmlnLmNvbG9ycy5jaGFydF9yZWQ7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gaGFuZGxlIGlucHV0IGVpdGhlciAuODMgb3IgODNcbiAgICAgICAgdmFyIHBlcmNlbnRhZ2UgPSAkc2NvcGUucGVyY2VudGFnZSB8fCAwO1xuICAgICAgICBpZiAocGVyY2VudGFnZSA+IDEpIHtcbiAgICAgICAgICAgIHBlcmNlbnRhZ2UgLz0gMTAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2l6ZSB0aGUgY2hhcnQgdG8gdGhlIHBhcmVudCBjb250YWluZXIuIEl0J3Mgc3F1YXJlLCBzbyB0YWtlIHRoZVxuICAgICAgICAvLyBzbWFsbGVyIG9mIHdpZHRoL2hlaWdodFxuICAgICAgICB2YXIgc2l6ZSA9ICRlbGVtZW50WzBdLnBhcmVudE5vZGUuY2xpZW50V2lkdGg7XG4gICAgICAgIGlmICgkZWxlbWVudFswXS5wYXJlbnROb2RlLmNsaWVudEhlaWdodCA8IHNpemUpIHtcbiAgICAgICAgICAgIHNpemUgPSAkZWxlbWVudFswXS5wYXJlbnROb2RlLmNsaWVudEhlaWdodDtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgdmFyIGR1cmF0aW9uID0gMTAwMDtcbiAgICAgICAgdmFyIGZvcm1hdFBlcmNlbnQgPSBkMy5mb3JtYXQoJy4wJScpO1xuXG4gICAgICAgIHZhciBhcmMgPSBkMy5zdmcuYXJjKClcbiAgICAgICAgICAgIC5zdGFydEFuZ2xlKDApXG4gICAgICAgICAgICAub3V0ZXJSYWRpdXMoc2l6ZSAqIDAuOTUgLyAyKVxuICAgICAgICAgICAgLmlubmVyUmFkaXVzKHNpemUgKiAwLjgwIC8gMik7XG5cbiAgICAgICAgdmFyIHN2ZyA9IGQzLnNlbGVjdCgkZWxlbWVudFswXSkuYXBwZW5kKCdzdmcnKS5hdHRyKHtcbiAgICAgICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICAgICAgaGVpZ2h0OiBzaXplXG4gICAgICAgIH0pLmFwcGVuZCgnZycpLmF0dHIoe1xuICAgICAgICAgICAgJ3RyYW5zZm9ybSc6ICd0cmFuc2xhdGUoJyArIHNpemUgLyAyICsgJywnICsgc2l6ZSAvIDIgKyAnKScsXG4gICAgICAgICAgICAnY2xhc3MnOiAnYWlzUmFkaWFsJ1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgbWV0ZXIgPSBzdmcuYXBwZW5kKCdnJykuYXR0cih7XG4gICAgICAgICAgICAndHJhbnNmb3JtJzogJ3JvdGF0ZSgxODApJ1xuICAgICAgICB9KTtcbiAgICAgICAgbWV0ZXIuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgICAgIC5kYXR1bSh7XG4gICAgICAgICAgICAgICAgZW5kQW5nbGU6ICgyICogTWF0aC5QSSksXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2JhY2tncm91bmQnKVxuICAgICAgICAgICAgLmF0dHIoJ2QnLCBhcmMpO1xuXG4gICAgICAgIGZvcmVncm91bmQgPSBtZXRlci5hcHBlbmQoJ3BhdGgnKVxuICAgICAgICAgICAgLmRhdHVtKHtcbiAgICAgICAgICAgICAgICBlbmRBbmdsZTogMFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICAgICAnZCc6IGFyY1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Rm9yZWdyb3VuZCgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGV4dCA9IHN2Zy5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgICAgLmRhdHVtKHtcbiAgICAgICAgICAgICAgICBwZXJjZW50YWdlOiAwXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXG4gICAgICAgICAgICAuYXR0cignZHknLCAnLjM1ZW0nKTtcblxuXG4gICAgICAgIHRleHRUd2VlbiA9IGZ1bmN0aW9uKHRyYW5zaXRpb24sIG5ld1BlcmNlbnRhZ2UpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24uYXR0clR3ZWVuKCd0ZXh0JywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZCA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBpID0gZDMuaW50ZXJwb2xhdGUoZC5wZXJjZW50YWdlLCBuZXdQZXJjZW50YWdlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICBkLnBlcmNlbnRhZ2UgPSBpKHQpO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0LnRleHQoZm9ybWF0UGVyY2VudChpKHQpKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBhcmNUd2VlbiA9IGZ1bmN0aW9uKHRyYW5zaXRpb24sIG5ld0FuZ2xlKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uLmF0dHJUd2VlbignZCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IGQzLmludGVycG9sYXRlKGQuZW5kQW5nbGUsIG5ld0FuZ2xlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICBkLmVuZEFuZ2xlID0gaSh0KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyYyhkKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaXNJbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgICAgcmVkcmF3KHBlcmNlbnRhZ2UpO1xuXG4gICAgICAgIC8vIGdldCBwcm9ncmVzcy4uLlxuXG4gICAgICAgIC8vZm9yZWdyb3VuZC5hdHRyKCdkJywgYXJjLmVuZEFuZ2xlKChNYXRoLlBJICogMikgKiAwLjgzKSk7XG4gICAgICAgIC8vdGV4dC50ZXh0KGZvcm1hdFBlcmNlbnQocGVyY2VudGFnZSkpO1xuICAgIH07XG5cbiAgICB2YXIgcmVkcmF3ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB2YXIgcGVyY2VudGFnZSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKHBlcmNlbnRhZ2UgPiAxKSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudGFnZSAvPSAxMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdTZXR0aW5nIHBlcmNlbnRhZ2UgdG86ICcgKyBwZXJjZW50YWdlKTtcblxuICAgICAgICAgICAgLy9mb3JlZ3JvdW5kLnRyYW5zaXRpb24oKS5kdXJhdGlvbig1MDAwKS5hdHRyKCdkJywgYXJjKTtcbiAgICAgICAgICAgIGZvcmVncm91bmQudHJhbnNpdGlvbigpLmR1cmF0aW9uKDEwMDApXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Rm9yZWdyb3VuZCgpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhbGwoYXJjVHdlZW4sIChNYXRoLlBJICogMikgKiBwZXJjZW50YWdlKTtcbiAgICAgICAgICAgIC8vdGV4dC50ZXh0KGZvcm1hdFBlcmNlbnQocGVyY2VudGFnZSkpO1xuICAgICAgICAgICAgdGV4dC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMTAwMCkuY2FsbCh0ZXh0VHdlZW4sIHBlcmNlbnRhZ2UpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgICRzY29wZS4kd2F0Y2goJ3BlcmNlbnRhZ2UnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgJiYgIWlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIGluaXRpYWxpemUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlZHJhdyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9KVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmRpcmVjdGl2ZSgnYWlzUmFkaWFsUGVyY2VudGFnZScsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb250cm9sbGVyOiAnYWlzUmFkaWFsUGVyY2VudGFnZUNvbnRyb2xsZXInLFxuICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgcGVyY2VudGFnZTogJ0AnXG4gICAgICAgIH1cbiAgICB9O1xufSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmRpcmVjdGl2ZSgnYWlzTXVsdGlzZWxlY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgcmVxdWlyZTogJ15uZ01vZGVsJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgbXVsdGlzZWxlY3REYXRhUHJvdmlkZXI6ICc9JyxcbiAgICAgICAgICAgICAgICBlbmFibGVGaWx0ZXJpbmc6ICc9JyxcbiAgICAgICAgICAgICAgICBtYXhIZWlnaHQ6ICc9JyxcbiAgICAgICAgICAgICAgICBudW1iZXJEaXNwbGF5ZWQ6ICc9JyxcbiAgICAgICAgICAgICAgICBpbmNsdWRlU2VsZWN0QWxsT3B0aW9uOiAnPScsXG4gICAgICAgICAgICAgICAgbm9uU2VsZWN0ZWRUZXh0OiAnPScsXG4gICAgICAgICAgICAgICAgbmdNb2RlbDogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gJChlbGVtZW50WzBdKTtcblxuICAgICAgICAgICAgICAgIGVsZW1lbnQubXVsdGlzZWxlY3Qoe1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVGaWx0ZXJpbmc6IHNjb3BlLmVuYWJsZUZpbHRlcmluZyxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlQ2FzZUluc2Vuc2l0aXZlRmlsdGVyaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQ6IHNjb3BlLm1heEhlaWdodCB8fCAzMDAsXG4gICAgICAgICAgICAgICAgICAgIG51bWJlckRpc3BsYXllZDogc2NvcGUubnVtYmVyRGlzcGxheWVkIHx8IDMsXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVTZWxlY3RBbGxPcHRpb246IHNjb3BlLmluY2x1ZGVTZWxlY3RBbGxPcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIG5vblNlbGVjdGVkVGV4dDogc2NvcGUubm9uU2VsZWN0ZWRUZXh0IHx8ICdOb25lIFNlbGVjdGVkJyxcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIChvcHRpb25FbGVtZW50LCBjaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLm5nTW9kZWwgPSBlbGVtZW50LnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ211bHRpc2VsZWN0RGF0YVByb3ZpZGVyJywgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5lcXVhbHMobmV3VmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubXVsdGlzZWxlY3QoJ2RhdGFwcm92aWRlcicsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgLy8gV2F0Y2ggZm9yIGFueSBjaGFuZ2VzIHRvIHRoZSBsZW5ndGggb2Ygb3VyIHNlbGVjdCBlbGVtZW50XG4gICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRbMF07XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgICAgICAvL2VsZW1lbnQubXVsdGlzZWxlY3QoJ3NldE9wdGlvbnMnLCBlbGVtZW50WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgLy9lbGVtZW50Lm11bHRpc2VsZWN0KCdyZWJ1aWxkJyk7XG4gICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBXYXRjaCBmb3IgYW55IGNoYW5nZXMgZnJvbSBvdXRzaWRlIHRoZSBkaXJlY3RpdmUgYW5kIHJlZnJlc2hcbiAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0cmlidXRlcy5uZ01vZGVsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubXVsdGlzZWxlY3QoJ3JlZnJlc2gnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pXG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5jb250cm9sbGVyKCdhaXNUaW1lbGluZURpcmVjdGl2ZUNvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbWVudCwgc2NhbGVDb25maWcpIHtcblxuICAgICAgICB2YXIgZ2FudHQgPSBudWxsO1xuXG4gICAgICAgICRlbGVtZW50WzBdLm9ucmVzaXplID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlbGVtZW50IHJlc2l6ZScpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBpbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuJHdhdGNoKCd0YXNrcycsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGRyYXdUaW1lbGluZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGRyYXdUaW1lbGluZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZigkc2NvcGUudGFza3MgJiYgJHNjb3BlLnRhc2tzLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgICRzY29wZS50YXNrcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFbJHNjb3BlLmVuZGVkXSAtIGJbJHNjb3BlLmVuZGVkXTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICRzY29wZS50YXNrTmFtZXMgPSBfKCRzY29wZS50YXNrcykucGx1Y2soJ3Rhc2tOYW1lJykudW5pcSgpLnZhbHVlKCk7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9ICRzY29wZS50YXNrTmFtZXMubGVuZ3RoICogMzAgKyAyMDtcblxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9ICRlbGVtZW50WzBdLmNsaWVudFdpZHRoO1xuICAgICAgICAgICAgICAgIGlmICghd2lkdGggfHwgd2lkdGggPT09IDApIHsgd2lkdGggPSA2MDA7IH1cblxuXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRhc2tzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYVskc2NvcGUuc3RhcnRlZF0gLSBiWyRzY29wZS5zdGFydGVkXTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgbWluRGF0ZSA9ICRzY29wZS50YXNrc1swXVskc2NvcGUuc3RhcnRlZF07XG4gICAgICAgICAgICAgICAgdmFyIG1heERhdGUgPSAkc2NvcGUudGFza3NbJHNjb3BlLnRhc2tzLmxlbmd0aCAtIDFdWyRzY29wZS5lbmRlZF07XG4gICAgICAgICAgICAgICAgdmFyIGRheXNEaWZmID0gbW9tZW50LnV0YyhtYXhEYXRlKS5kaWZmKG1vbWVudC51dGMobWluRGF0ZSksJ2RheXMnKTtcbiAgICAgICAgICAgICAgICB2YXIgZm9ybWF0ID0gJyVIOiVNOiVTLiVtJztcbiAgICAgICAgICAgICAgICBpZihkYXlzRGlmZiA+IDApe1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXQgPSBcIiVtLyVkLyV5ICVIOiVNXCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZ2FudHQgPSBkMy5nYW50dCgpLnJlbmRlclRvKFwiI2Fpcy10aW1lbGluZVwiKS50YXNrVHlwZXMoJHNjb3BlLnRhc2tOYW1lcykudGFza1N0YXR1cyhzY2FsZUNvbmZpZy50YXNrU3RhdHVzU3R5bGVzKS50aWNrRm9ybWF0KGZvcm1hdCkuYmVnaW4oJHNjb3BlLnN0YXJ0ZWQpLmVuZGVkKCRzY29wZS5lbmRlZCkuaGVpZ2h0KGhlaWdodCkud2lkdGgod2lkdGgpO1xuXG4gICAgICAgICAgICAgICAgZ2FudHQudGltZURvbWFpbk1vZGUoXCJmaXRcIik7XG5cbiAgICAgICAgICAgICAgICBnYW50dCgkc2NvcGUudGFza3MpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0ZW5kKCkge1xuICAgICAgICAgICAgdmFyIGxhc3RlbmQgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgaWYgKCRzY29wZS50YXNrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGFzdGVuZCA9ICRzY29wZS50YXNrc1skc2NvcGUudGFza3MubGVuZ3RoIC0gMV1bJHNjb3BlLmVuZGVkXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGxhc3RlbmQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmZvcm1hdERhdGUgPSBmdW5jdGlvbihkYXRlKXtcbiAgICAgICAgICAgIGlmKGRhdGUpe1xuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQudXRjKGRhdGUpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaW5pdGlhbGl6ZSgpO1xuXG4gICAgfSkuZGlyZWN0aXZlKCdhaXNUaW1lbGluZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdhaXNUaW1lbGluZURpcmVjdGl2ZUNvbnRyb2xsZXInLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL2NoYXJ0cy90aW1lbGluZS90aW1lbGluZURpcmVjdGl2ZVRlbXBsYXRlLmh0bWwnLFxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgdGFza3M6ICc9JyxcbiAgICAgICAgICAgICAgICBzdGFydGVkOiAnPScsXG4gICAgICAgICAgICAgICAgZW5kZWQ6ICc9J1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdnYXVnZUZhY3RvcnknLCBmdW5jdGlvbiAoc2NhbGVDb25maWcpIHtcbiAgICAgICAgdmFyIEdhdWdlID0gZnVuY3Rpb24gKHBsYWNlaG9sZGVyTmFtZSwgY29uZmlndXJhdGlvbilcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlck5hbWUgPSBwbGFjZWhvbGRlck5hbWU7XG5cbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpczsgLy8gZm9yIGludGVybmFsIGQzIGZ1bmN0aW9uc1xuXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyZSA9IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWd1cmF0aW9uO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuc2l6ZSA9IHRoaXMuY29uZmlnLnNpemUgKiAwLjk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5yYWRpdXMgPSB0aGlzLmNvbmZpZy5zaXplICogMC45NyAvIDI7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuY3ggPSB0aGlzLmNvbmZpZy5zaXplIC8gMjtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5jeSA9IHRoaXMuY29uZmlnLnNpemUgLyAyO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcubWluID0gdW5kZWZpbmVkICE9IGNvbmZpZ3VyYXRpb24ubWluID8gY29uZmlndXJhdGlvbi5taW4gOiAwO1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm1heCA9IHVuZGVmaW5lZCAhPSBjb25maWd1cmF0aW9uLm1heCA/IGNvbmZpZ3VyYXRpb24ubWF4IDogMTAwO1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLnJhbmdlID0gdGhpcy5jb25maWcubWF4IC0gdGhpcy5jb25maWcubWluO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcubWFqb3JUaWNrcyA9IGNvbmZpZ3VyYXRpb24ubWFqb3JUaWNrcyB8fCA1O1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm1pbm9yVGlja3MgPSBjb25maWd1cmF0aW9uLm1pbm9yVGlja3MgfHwgMjtcblxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmdyZWVuQ29sb3IgXHQ9IGNvbmZpZ3VyYXRpb24uZ3JlZW5Db2xvciB8fCAnIzhmY2EwZSc7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcueWVsbG93Q29sb3IgPSBjb25maWd1cmF0aW9uLnllbGxvd0NvbG9yIHx8ICcjZmZjMzE3JztcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5yZWRDb2xvciBcdD0gY29uZmlndXJhdGlvbi5yZWRDb2xvciB8fCAnI2Y1NGQzNic7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy50cmFuc2l0aW9uRHVyYXRpb24gPSBjb25maWd1cmF0aW9uLnRyYW5zaXRpb25EdXJhdGlvbiB8fCA1MDA7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJvZHkgPSBkMy5zZWxlY3QoJyMnICsgdGhpcy5wbGFjZWhvbGRlck5hbWUpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3N2ZzpzdmcnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnZ2F1Z2UnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCB0aGlzLmNvbmZpZy5zaXplKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignaGVpZ2h0JywgdGhpcy5jb25maWcuc2l6ZSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmJvZHkuYXBwZW5kKCdzdmc6Y2lyY2xlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ291dGVyLWNpcmNsZScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjeCcsIHRoaXMuY29uZmlnLmN4KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3knLCB0aGlzLmNvbmZpZy5jeSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3InLCB0aGlzLmNvbmZpZy5yYWRpdXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsICcjY2NjJyk7XG4gICAgICAgICAgICAgICAgLyouc3R5bGUoJ3N0cm9rZScsICcjMDAwJylcbiAgICAgICAgICAgICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCAnMC41cHgnKTsqL1xuXG4gICAgICAgICAgICAgICAgdGhpcy5ib2R5LmFwcGVuZCgnc3ZnOmNpcmNsZScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdjeCcsIHRoaXMuY29uZmlnLmN4KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3knLCB0aGlzLmNvbmZpZy5jeSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3InLCAwLjkgKiB0aGlzLmNvbmZpZy5yYWRpdXMpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsICcjZmZmJylcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCAnI2UwZTBlMCcpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgJzJweCcpO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZ3JlZW5JZHggaW4gdGhpcy5jb25maWcuZ3JlZW5ab25lcylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0JhbmQodGhpcy5jb25maWcuZ3JlZW5ab25lc1tncmVlbklkeF0uZnJvbSwgdGhpcy5jb25maWcuZ3JlZW5ab25lc1tncmVlbklkeF0udG8sIHNlbGYuY29uZmlnLmdyZWVuQ29sb3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAodmFyIHllbGxvd0lkeCBpbiB0aGlzLmNvbmZpZy55ZWxsb3dab25lcylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0JhbmQodGhpcy5jb25maWcueWVsbG93Wm9uZXNbeWVsbG93SWR4XS5mcm9tLCB0aGlzLmNvbmZpZy55ZWxsb3dab25lc1t5ZWxsb3dJZHhdLnRvLCBzZWxmLmNvbmZpZy55ZWxsb3dDb2xvcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcmVkSWR4IGluIHRoaXMuY29uZmlnLnJlZFpvbmVzKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3QmFuZCh0aGlzLmNvbmZpZy5yZWRab25lc1tyZWRJZHhdLmZyb20sIHRoaXMuY29uZmlnLnJlZFpvbmVzW3JlZElkeF0udG8sIHNlbGYuY29uZmlnLnJlZENvbG9yKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZm9udFNpemUgPSAwO1xuXG4gICAgICAgICAgICAgICAgaWYgKHVuZGVmaW5lZCAhPSB0aGlzLmNvbmZpZy5sYWJlbClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplID0gTWF0aC5yb3VuZCh0aGlzLmNvbmZpZy5zaXplIC8gOSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm9keS5hcHBlbmQoJ3N2Zzp0ZXh0JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgdGhpcy5jb25maWcuY3gpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneScsIHRoaXMuY29uZmlnLmN5IC8gMiArIGZvbnRTaXplIC8gMilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkeScsIGZvbnRTaXplIC8gMilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQodGhpcy5jb25maWcubGFiZWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsIGZvbnRTaXplICsgJ3B4JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsICcjMzMzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgJzBweCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvbnRTaXplID0gTWF0aC5yb3VuZCh0aGlzLmNvbmZpZy5zaXplIC8gMTYpO1xuICAgICAgICAgICAgICAgIHZhciBtYWpvckRlbHRhID0gdGhpcy5jb25maWcucmFuZ2UgLyAodGhpcy5jb25maWcubWFqb3JUaWNrcyAtIDEpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG1ham9yID0gdGhpcy5jb25maWcubWluOyBtYWpvciA8PSB0aGlzLmNvbmZpZy5tYXg7IG1ham9yICs9IG1ham9yRGVsdGEpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWlub3JEZWx0YSA9IG1ham9yRGVsdGEgLyB0aGlzLmNvbmZpZy5taW5vclRpY2tzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQxID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50MiA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1pbm9yID0gbWFqb3IgKyBtaW5vckRlbHRhOyBtaW5vciA8IE1hdGgubWluKG1ham9yICsgbWFqb3JEZWx0YSwgdGhpcy5jb25maWcubWF4KTsgbWlub3IgKz0gbWlub3JEZWx0YSlcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQxID0gdGhpcy52YWx1ZVRvUG9pbnQobWlub3IsIDAuNzUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQyID0gdGhpcy52YWx1ZVRvUG9pbnQobWlub3IsIDAuODUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvZHkuYXBwZW5kKCdzdmc6bGluZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gxJywgcG9pbnQxLngpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kxJywgcG9pbnQxLnkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gyJywgcG9pbnQyLngpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kyJywgcG9pbnQyLnkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCAnIzY2NicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCAnMXB4Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwb2ludDEgPSB0aGlzLnZhbHVlVG9Qb2ludChtYWpvciwgMC43KTtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQyID0gdGhpcy52YWx1ZVRvUG9pbnQobWFqb3IsIDAuODUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm9keS5hcHBlbmQoJ3N2ZzpsaW5lJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MScsIHBvaW50MS54KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3kxJywgcG9pbnQxLnkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigneDInLCBwb2ludDIueClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5MicsIHBvaW50Mi55KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdzdHJva2UnLCAnIzMzMycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsICcycHgnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobWFqb3IgPT0gdGhpcy5jb25maWcubWluIHx8IG1ham9yID09IHRoaXMuY29uZmlnLm1heClcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvaW50ID0gdGhpcy52YWx1ZVRvUG9pbnQobWFqb3IsIDAuNjMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvZHkuYXBwZW5kKCdzdmc6dGV4dCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCBwb2ludC54KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgcG9pbnQueSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZHknLCBmb250U2l6ZSAvIDMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgbWFqb3IgPT0gdGhpcy5jb25maWcubWluID8gJ3N0YXJ0JyA6ICdlbmQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KG1ham9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgZm9udFNpemUgKyAncHgnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsICcjMzMzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsICcwcHgnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwb2ludGVyQ29udGFpbmVyID0gdGhpcy5ib2R5LmFwcGVuZCgnc3ZnOmcnKS5hdHRyKCdjbGFzcycsICdwb2ludGVyQ29udGFpbmVyJyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbWlkVmFsdWUgPSAodGhpcy5jb25maWcubWluICsgdGhpcy5jb25maWcubWF4KSAvIDI7XG5cbiAgICAgICAgICAgICAgICB2YXIgcG9pbnRlclBhdGggPSB0aGlzLmJ1aWxkUG9pbnRlclBhdGgobWlkVmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBvaW50ZXJMaW5lID0gZDMuc3ZnLmxpbmUoKVxuICAgICAgICAgICAgICAgICAgICAueChmdW5jdGlvbihkKSB7IHJldHVybiBkLnggfSlcbiAgICAgICAgICAgICAgICAgICAgLnkoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC55IH0pXG4gICAgICAgICAgICAgICAgICAgIC5pbnRlcnBvbGF0ZSgnYmFzaXMnKTtcblxuICAgICAgICAgICAgICAgIHBvaW50ZXJDb250YWluZXIuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEoW3BvaW50ZXJQYXRoXSlcbiAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgnc3ZnOnBhdGgnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZCcsIHBvaW50ZXJMaW5lKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAnIzg4OCcpO1xuXG4gICAgICAgICAgICAgICAgcG9pbnRlckNvbnRhaW5lci5hcHBlbmQoJ3N2ZzpjaXJjbGUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignY3gnLCB0aGlzLmNvbmZpZy5jeClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2N5JywgdGhpcy5jb25maWcuY3kpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdyJywgMC4wNyAqIHRoaXMuY29uZmlnLnJhZGl1cylcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgJyM4ODgnKTtcblxuICAgICAgICAgICAgICAgIGZvbnRTaXplID0gTWF0aC5yb3VuZCh0aGlzLmNvbmZpZy5zaXplIC8gMTApO1xuICAgICAgICAgICAgICAgIHBvaW50ZXJDb250YWluZXIuc2VsZWN0QWxsKCd0ZXh0JylcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEoW21pZFZhbHVlXSlcbiAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgnc3ZnOnRleHQnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneCcsIHRoaXMuY29uZmlnLmN4KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneScsIHRoaXMuY29uZmlnLnNpemUgLSB0aGlzLmNvbmZpZy5jeSAvIDQgLSBmb250U2l6ZSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2R5JywgZm9udFNpemUgLyAyKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBmb250U2l6ZSArICdweCcpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsICcjMDAwJylcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCAnMHB4Jyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJlZHJhdyh0aGlzLmNvbmZpZy5taW4sIDApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5idWlsZFBvaW50ZXJQYXRoID0gZnVuY3Rpb24odmFsdWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gdGhpcy5jb25maWcucmFuZ2UgLyAxMztcblxuICAgICAgICAgICAgICAgIHZhciBoZWFkID0gdmFsdWVUb1BvaW50KHZhbHVlLCAwLjg1KTtcbiAgICAgICAgICAgICAgICB2YXIgaGVhZDEgPSB2YWx1ZVRvUG9pbnQodmFsdWUgLSBkZWx0YSwgMC4xMik7XG4gICAgICAgICAgICAgICAgdmFyIGhlYWQyID0gdmFsdWVUb1BvaW50KHZhbHVlICsgZGVsdGEsIDAuMTIpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHRhaWxWYWx1ZSA9IHZhbHVlIC0gKHRoaXMuY29uZmlnLnJhbmdlICogKDEvKDI3MC8zNjApKSAvIDIpO1xuICAgICAgICAgICAgICAgIHZhciB0YWlsID0gdmFsdWVUb1BvaW50KHRhaWxWYWx1ZSwgMC4yOCk7XG4gICAgICAgICAgICAgICAgdmFyIHRhaWwxID0gdmFsdWVUb1BvaW50KHRhaWxWYWx1ZSAtIGRlbHRhLCAwLjEyKTtcbiAgICAgICAgICAgICAgICB2YXIgdGFpbDIgPSB2YWx1ZVRvUG9pbnQodGFpbFZhbHVlICsgZGVsdGEsIDAuMTIpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtoZWFkLCBoZWFkMSwgdGFpbDIsIHRhaWwsIHRhaWwxLCBoZWFkMiwgaGVhZF07XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB2YWx1ZVRvUG9pbnQodmFsdWUsIGZhY3RvcilcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2ludCA9IHNlbGYudmFsdWVUb1BvaW50KHZhbHVlLCBmYWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICBwb2ludC54IC09IHNlbGYuY29uZmlnLmN4O1xuICAgICAgICAgICAgICAgICAgICBwb2ludC55IC09IHNlbGYuY29uZmlnLmN5O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5kcmF3QmFuZCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIGNvbG9yKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmICgwID49IGVuZCAtIHN0YXJ0KSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB0aGlzLmJvZHkuYXBwZW5kKCdzdmc6cGF0aCcpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIGNvbG9yKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZCcsIGQzLnN2Zy5hcmMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0YXJ0QW5nbGUodGhpcy52YWx1ZVRvUmFkaWFucyhzdGFydCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZW5kQW5nbGUodGhpcy52YWx1ZVRvUmFkaWFucyhlbmQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmlubmVyUmFkaXVzKDAuNjUgKiB0aGlzLmNvbmZpZy5yYWRpdXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub3V0ZXJSYWRpdXMoMC44NSAqIHRoaXMuY29uZmlnLnJhZGl1cykpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbigpIHsgcmV0dXJuICd0cmFuc2xhdGUoJyArIHNlbGYuY29uZmlnLmN4ICsgJywgJyArIHNlbGYuY29uZmlnLmN5ICsgJykgcm90YXRlKDI3MCknIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5yZWRyYXcgPSBmdW5jdGlvbih2YWx1ZSwgdHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciBwb2ludGVyQ29udGFpbmVyID0gdGhpcy5ib2R5LnNlbGVjdCgnLnBvaW50ZXJDb250YWluZXInKTtcblxuICAgICAgICAgICAgICAgIHBvaW50ZXJDb250YWluZXIuc2VsZWN0QWxsKCd0ZXh0JykudGV4dChwYXJzZUZsb2F0KHZhbHVlKS50b0ZpeGVkKDIpICsgJyUnKTtcblxuICAgICAgICAgICAgICAgIHZhciBwb2ludGVyID0gcG9pbnRlckNvbnRhaW5lci5zZWxlY3RBbGwoJ3BhdGgnKTtcbiAgICAgICAgICAgICAgICBwb2ludGVyLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24odW5kZWZpbmVkICE9IHRyYW5zaXRpb25EdXJhdGlvbiA/IHRyYW5zaXRpb25EdXJhdGlvbiA6IHRoaXMuY29uZmlnLnRyYW5zaXRpb25EdXJhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgLy8uZGVsYXkoMClcbiAgICAgICAgICAgICAgICAgICAgLy8uZWFzZSgnbGluZWFyJylcbiAgICAgICAgICAgICAgICAgICAgLy8uYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24oZClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHJUd2VlbigndHJhbnNmb3JtJywgZnVuY3Rpb24oKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9pbnRlclZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPiBzZWxmLmNvbmZpZy5tYXgpIHBvaW50ZXJWYWx1ZSA9IHNlbGYuY29uZmlnLm1heCArIDAuMDIqc2VsZi5jb25maWcucmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA8IHNlbGYuY29uZmlnLm1pbikgcG9pbnRlclZhbHVlID0gc2VsZi5jb25maWcubWluIC0gMC4wMipzZWxmLmNvbmZpZy5yYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRSb3RhdGlvbiA9IChzZWxmLnZhbHVlVG9EZWdyZWVzKHBvaW50ZXJWYWx1ZSkgLSA5MCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFJvdGF0aW9uID0gc2VsZi5fY3VycmVudFJvdGF0aW9uIHx8IHRhcmdldFJvdGF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY3VycmVudFJvdGF0aW9uID0gdGFyZ2V0Um90YXRpb247XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzdGVwKVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3RhdGlvbiA9IGN1cnJlbnRSb3RhdGlvbiArICh0YXJnZXRSb3RhdGlvbi1jdXJyZW50Um90YXRpb24pKnN0ZXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHNlbGYuY29uZmlnLmN4ICsgJywgJyArIHNlbGYuY29uZmlnLmN5ICsgJykgcm90YXRlKCcgKyByb3RhdGlvbiArICcpJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgb3V0ZXJDaXJjbGUgPSB0aGlzLmJvZHkuc2VsZWN0KCcub3V0ZXItY2lyY2xlJylcbiAgICAgICAgICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAuZHVyYXRpb24oNzUwKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID49IDAgJiYgaSA8IDc1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLmdyZWVuQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPj0gNzUgJiYgaSA8IDkwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLnllbGxvd0NvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jb25maWcucmVkQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy52YWx1ZVRvRGVncmVlcyA9IGZ1bmN0aW9uKHZhbHVlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIHRoYW5rcyBAY2xvc2VhbGVydFxuICAgICAgICAgICAgICAgIC8vcmV0dXJuIHZhbHVlIC8gdGhpcy5jb25maWcucmFuZ2UgKiAyNzAgLSA0NTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgLyB0aGlzLmNvbmZpZy5yYW5nZSAqIDI3MCAtICh0aGlzLmNvbmZpZy5taW4gLyB0aGlzLmNvbmZpZy5yYW5nZSAqIDI3MCArIDQ1KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMudmFsdWVUb1JhZGlhbnMgPSBmdW5jdGlvbih2YWx1ZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZVRvRGVncmVlcyh2YWx1ZSkgKiBNYXRoLlBJIC8gMTgwO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy52YWx1ZVRvUG9pbnQgPSBmdW5jdGlvbih2YWx1ZSwgZmFjdG9yKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IFx0eDogdGhpcy5jb25maWcuY3ggLSB0aGlzLmNvbmZpZy5yYWRpdXMgKiBmYWN0b3IgKiBNYXRoLmNvcyh0aGlzLnZhbHVlVG9SYWRpYW5zKHZhbHVlKSksXG4gICAgICAgICAgICAgICAgICAgIHk6IHRoaXMuY29uZmlnLmN5IC0gdGhpcy5jb25maWcucmFkaXVzICogZmFjdG9yICogTWF0aC5zaW4odGhpcy52YWx1ZVRvUmFkaWFucyh2YWx1ZSkpIFx0XHR9O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gaW5pdGlhbGl6YXRpb25cbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJlKGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjcmVhdGVHYXVnZTogZnVuY3Rpb24gKG5hbWUsIGxhYmVsLCBtaW4sIG1heCwgc2l6ZSkge1xuICAgICAgICAgICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgICAgIHNpemU6IHNpemUgfHwgc2NhbGVDb25maWcuZGVmYXVsdEdhdWdlV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgbWluOiBtaW4gfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgbWF4OiBtYXggfHwgMTAwLFxuICAgICAgICAgICAgICAgICAgICBtaW5vclRpY2tzOiA1XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IGNvbmZpZy5tYXggLSBjb25maWcubWluO1xuICAgICAgICAgICAgICAgIGNvbmZpZy55ZWxsb3dab25lcyA9IFt7IGZyb206IGNvbmZpZy5taW4gKyByYW5nZSowLjc1LCB0bzogY29uZmlnLm1pbiArIHJhbmdlKjAuOSB9XTtcbiAgICAgICAgICAgICAgICBjb25maWcucmVkWm9uZXMgPSBbeyBmcm9tOiBjb25maWcubWluICsgcmFuZ2UqMC45LCB0bzogY29uZmlnLm1heCB9XTtcblxuICAgICAgICAgICAgICAgIHZhciBnYXVnZSA9IG5ldyBHYXVnZShuYW1lICsgJ0dhdWdlQ29udGFpbmVyJywgY29uZmlnKTtcbiAgICAgICAgICAgICAgICBnYXVnZS5yZW5kZXIoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2F1Z2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdncmlkRmFjdG9yeScsIGZ1bmN0aW9uICh1aUdyaWRDb25zdGFudHMpIHtcblxuICAgICAgICB2YXIgZ2V0U29ydENvbmZpZyA9IGZ1bmN0aW9uKG9yZGVyUGFyYW0pe1xuICAgICAgICAgICAgaWYob3JkZXJQYXJhbSl7XG4gICAgICAgICAgICAgICAgdmFyIHNvcnRGaWVsZCA9IG9yZGVyUGFyYW1cbiAgICAgICAgICAgICAgICB2YXIgc29ydERpcmVjdGlvbiA9ICdhc2MnO1xuICAgICAgICAgICAgICAgIGlmKF8uc3RhcnRzV2l0aChvcmRlclBhcmFtLCAnLScpKXtcbiAgICAgICAgICAgICAgICAgICAgc29ydERpcmVjdGlvbiA9ICdkZXNjJztcbiAgICAgICAgICAgICAgICAgICAgc29ydEZpZWxkID0gc29ydEZpZWxkWzBdLmxlbmd0aCA9PT0gMSA/IHNvcnRGaWVsZC5zdWJzdHJpbmcoMSkgOiBzb3J0RmllbGRbMF0uc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IHNvcnREaXJlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiBzb3J0RmllbGRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWZhdWx0R3JpZE9wdGlvbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVSb3dTZWxlY3Rpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZVJvd0hlYWRlclNlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZUhvcml6b250YWxTY3JvbGxiYXI6IHVpR3JpZENvbnN0YW50cy5zY3JvbGxiYXJzLk5FVkVSLFxuICAgICAgICAgICAgICAgICAgICBtdWx0aVNlbGVjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZUZpbHRlcmluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdXNlRXh0ZXJuYWxTb3J0aW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB1c2VFeHRlcm5hbEZpbHRlcmluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlU29ydGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbWluUm93c1RvU2hvdzogMTcsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25QYWdlU2l6ZXM6IFsyNSwgNTAsIDc1LCAxMDBdLFxuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uUGFnZVNpemU6IDI1LFxuICAgICAgICAgICAgICAgICAgICB1c2VFeHRlcm5hbFBhZ2luYXRpb246IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXBwbHlTb3J0Q29uZmlnOiBmdW5jdGlvbihjb2x1bW5EZWZzLCBncmlkUGFyYW1zKXtcbiAgICAgICAgICAgICAgICB2YXIgc29ydENvbmZpZyA9IGdldFNvcnRDb25maWcoZ3JpZFBhcmFtcy5vcmRlcik7XG4gICAgICAgICAgICAgICAgaWYoc29ydENvbmZpZy5maWVsZCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xEZWYgPSBfLmZpbmQoY29sdW1uRGVmcywge2ZpZWxkOiBzb3J0Q29uZmlnLmZpZWxkfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNvbERlZil7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xEZWYuc29ydCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IHNvcnRDb25maWcuZGlyZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW9yaXR5OiAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbkRlZnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ3BvbGxlckZhY3RvcnknLCBmdW5jdGlvbiAocG9sbGVyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZXdQb2xsZXI6IGZ1bmN0aW9uIChyZXNvdXJjZSwgaW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9sbGVyLmdldChyZXNvdXJjZSwge1xuICAgICAgICAgICAgICAgICAgICBkZWxheTogaW50ZXJ2YWwsXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoRXJyb3I6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ1N0YXR1cycsIGZ1bmN0aW9uIChTdGF0dXNNYXN0ZXIsIFN0YXR1c1NjaGVkdWxlciwgU3RhdHVzUmVzb3VyY2VzKSB7XG4gICAgICAgIHZhciBTdGF0dXMgPSBmdW5jdGlvbiAoJHJlc29sdmVkLCBtYXN0ZXIsIHNjaGVkdWxlciwgcXVldWVfZGVwdGgsIHJlc291cmNlcykge1xuICAgICAgICAgICAgdGhpcy4kcmVzb2x2ZWQgPSAkcmVzb2x2ZWQ7XG4gICAgICAgICAgICB0aGlzLm1hc3RlciA9IFN0YXR1c01hc3Rlci50cmFuc2Zvcm1lcihtYXN0ZXIpO1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBTdGF0dXNTY2hlZHVsZXIudHJhbnNmb3JtZXIoc2NoZWR1bGVyKTtcbiAgICAgICAgICAgIHRoaXMucXVldWVfZGVwdGggPSBxdWV1ZV9kZXB0aDtcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzID0gU3RhdHVzUmVzb3VyY2VzLnRyYW5zZm9ybWVyKHJlc291cmNlcyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgU3RhdHVzLnByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIGdldENwdVVzYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVzb3VyY2VzLnNjaGVkdWxlZC5jcHVzICYmIHRoaXMucmVzb3VyY2VzLnRvdGFsLmNwdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVzb3VyY2VzLnRvdGFsLmNwdXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCh0aGlzLnJlc291cmNlcy5zY2hlZHVsZWQuY3B1cyAvIHRoaXMucmVzb3VyY2VzLnRvdGFsLmNwdXMpICogMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAwLjAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE1lbVVzYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVzb3VyY2VzLnNjaGVkdWxlZC5tZW0gJiYgdGhpcy5yZXNvdXJjZXMudG90YWwubWVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlc291cmNlcy50b3RhbC5tZW0gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCh0aGlzLnJlc291cmNlcy5zY2hlZHVsZWQubWVtIC8gdGhpcy5yZXNvdXJjZXMudG90YWwubWVtKSAqIDEwMCkudG9GaXhlZCgyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gMC4wMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXREaXNrVXNhZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXNvdXJjZXMuc2NoZWR1bGVkLmRpc2sgJiYgdGhpcy5yZXNvdXJjZXMudG90YWwuZGlzaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXNvdXJjZXMudG90YWwuZGlzayA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoKHRoaXMucmVzb3VyY2VzLnNjaGVkdWxlZC5kaXNrIC8gdGhpcy5yZXNvdXJjZXMudG90YWwuZGlzaykgKiAxMDApLnRvRml4ZWQoMik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3RhdGljIG1ldGhvZHMsIGFzc2lnbmVkIHRvIGNsYXNzXG4gICAgICAgIFN0YXR1cy5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3RhdHVzKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLiRyZXNvbHZlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5tYXN0ZXIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2NoZWR1bGVyLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnF1ZXVlX2RlcHRoLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnJlc291cmNlc1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0YXR1cygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFN0YXR1cy50cmFuc2Zvcm1lciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgLm1hcChTdGF0dXMuYnVpbGQpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gU3RhdHVzLmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBTdGF0dXM7XG4gICAgfSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIFxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ1N0YXR1c01hc3RlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIFN0YXR1c01hc3RlciA9IGZ1bmN0aW9uIChpc19vbmxpbmUsIGhvc3RuYW1lLCBwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLmlzX29ubGluZSA9IGlzX29ubGluZTtcbiAgICAgICAgICAgIHRoaXMuaG9zdG5hbWUgPSBob3N0bmFtZTtcbiAgICAgICAgICAgIHRoaXMucG9ydCA9IHBvcnQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgU3RhdHVzTWFzdGVyLnByb3RvdHlwZSA9IHtcblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBTdGF0dXNNYXN0ZXIuYnVpbGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN0YXR1c01hc3RlcihcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pc19vbmxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaG9zdG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucG9ydFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0YXR1c01hc3RlcigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFN0YXR1c01hc3Rlci50cmFuc2Zvcm1lciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgLm1hcChTdGF0dXNNYXN0ZXIuYnVpbGQpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gU3RhdHVzTWFzdGVyLmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBTdGF0dXNNYXN0ZXI7XG4gICAgfSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuZmFjdG9yeSgnU3RhdHVzUmVzb3VyY2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBTdGF0dXNSZXNvdXJjZSA9IGZ1bmN0aW9uIChjcHVzLCBtZW0sIGRpc2spIHtcbiAgICAgICAgICAgIHRoaXMuY3B1cyA9IGNwdXM7XG4gICAgICAgICAgICB0aGlzLm1lbSA9IG1lbTtcbiAgICAgICAgICAgIHRoaXMuZGlzayA9IGRpc2s7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgU3RhdHVzUmVzb3VyY2UucHJvdG90eXBlID0ge1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3RhdGljIG1ldGhvZHMsIGFzc2lnbmVkIHRvIGNsYXNzXG4gICAgICAgIFN0YXR1c1Jlc291cmNlLmJ1aWxkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdGF0dXNSZXNvdXJjZShcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jcHVzLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm1lbSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kaXNrXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RhdHVzUmVzb3VyY2UoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBTdGF0dXNSZXNvdXJjZS50cmFuc2Zvcm1lciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgLm1hcChTdGF0dXNSZXNvdXJjZS5idWlsZClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBTdGF0dXNSZXNvdXJjZS5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gU3RhdHVzUmVzb3VyY2U7XG4gICAgfSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuZmFjdG9yeSgnU3RhdHVzUmVzb3VyY2VzJywgZnVuY3Rpb24gKFN0YXR1c1Jlc291cmNlKSB7XG4gICAgICAgIHZhciBTdGF0dXNSZXNvdXJjZXMgPSBmdW5jdGlvbiAodG90YWwsIHNjaGVkdWxlZCwgdXNlZCkge1xuICAgICAgICAgICAgdGhpcy50b3RhbCA9IFN0YXR1c1Jlc291cmNlLnRyYW5zZm9ybWVyKHRvdGFsKTtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVkID0gU3RhdHVzUmVzb3VyY2UudHJhbnNmb3JtZXIoc2NoZWR1bGVkKTtcbiAgICAgICAgICAgIHRoaXMudXNlZCA9IFN0YXR1c1Jlc291cmNlLnRyYW5zZm9ybWVyKHVzZWQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgICAgIFN0YXR1c1Jlc291cmNlcy5wcm90b3R5cGUgPSB7XG5cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzdGF0aWMgbWV0aG9kcywgYXNzaWduZWQgdG8gY2xhc3NcbiAgICAgICAgU3RhdHVzUmVzb3VyY2VzLmJ1aWxkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdGF0dXNSZXNvdXJjZXMoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudG90YWwsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2NoZWR1bGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnVzZWRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTdGF0dXNSZXNvdXJjZXMoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBTdGF0dXNSZXNvdXJjZXMudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoU3RhdHVzUmVzb3VyY2VzLmJ1aWxkKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFN0YXR1c1Jlc291cmNlcy5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gU3RhdHVzUmVzb3VyY2VzO1xuICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ1N0YXR1c1NjaGVkdWxlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIFN0YXR1c1NjaGVkdWxlciA9IGZ1bmN0aW9uIChpc19vbmxpbmUsIGlzX3BhdXNlZCwgaG9zdG5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuaXNfb25saW5lID0gaXNfb25saW5lO1xuICAgICAgICAgICAgdGhpcy5pc19wYXVzZWQgPSBpc19wYXVzZWQ7XG4gICAgICAgICAgICB0aGlzLmhvc3RuYW1lID0gaG9zdG5hbWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgU3RhdHVzU2NoZWR1bGVyLnByb3RvdHlwZSA9IHtcblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBTdGF0dXNTY2hlZHVsZXIuYnVpbGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN0YXR1c1NjaGVkdWxlcihcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pc19vbmxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaXNfcGF1c2VkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmhvc3RuYW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RhdHVzU2NoZWR1bGVyKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgU3RhdHVzU2NoZWR1bGVyLnRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgICAgICAgICAubWFwKFN0YXR1c1NjaGVkdWxlci5idWlsZClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBTdGF0dXNTY2hlZHVsZXIuYnVpbGQoZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFN0YXR1c1NjaGVkdWxlcjtcbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5zZXJ2aWNlKCdzY2FsZVNlcnZpY2UnLCBmdW5jdGlvbiAoc2NhbGVDb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNhbGN1bGF0ZUZpbGVTaXplRnJvbU1pYjogZnVuY3Rpb24obnVtKXtcbiAgICAgICAgICAgICAgICBpZiAobnVtID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobnVtIDwgMTAyNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bS50b0ZpeGVkKDIpICsgJyBNQic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bSA+PSAxMDI0ICYmIG51bSA8IDEwMjQqMTAyNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChudW0vMTAyNCkudG9GaXhlZCgyKSArICcgR0InO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAobnVtLzEwMjQvMTAyNCkudG9GaXhlZCgyKSArICcgVEInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGN1bGF0ZUZpbGVTaXplRnJvbUJ5dGVzOiBmdW5jdGlvbihudW0sZGVjaW1hbHMpe1xuICAgICAgICAgICAgICAgIC8vIGlmKHByZWNpc2lvbil7XG4gICAgICAgICAgICAgICAgLy8gICAgIC8vIHJvdW5kIG51bSB0byBzcGVjaWZpZWQgcHJlY2lzaW9uXG4gICAgICAgICAgICAgICAgLy8gICAgIG51bSA9IE1hdGgucm91bmQobnVtL3ByZWNpc2lvbik7XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmIChudW0gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW0gPCAxMDI0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtLnRvRml4ZWQoZGVjaW1hbHMpICsgJyBCeXRlcyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bSA+PSAxMDI0ICYmIG51bSA8IDEwMjQqMTAyNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChudW0vMTAyNCkudG9GaXhlZChkZWNpbWFscykgKyAnIEtCJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtID49IDEwMjQqMTAyNCAmJiBudW0gPCAxMDI0KjEwMjQqMTAyNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChudW0vMTAyNC8xMDI0KS50b0ZpeGVkKGRlY2ltYWxzKSArICcgTUInO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW0gPj0gMTAyNCoxMDI0KjEwMjQgJiYgbnVtIDwgMTAyNCoxMDI0KjEwMjQqMTAyNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChudW0vMTAyNC8xMDI0LzEwMjQpLnRvRml4ZWQoZGVjaW1hbHMpICsgJyBHQic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChudW0vMTAyNC8xMDI0LzEwMjQvMTAyNCkudG9GaXhlZChkZWNpbWFscykgKyAnIFRCJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRWaWV3cG9ydFNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdyA9IHdpbmRvdyxcbiAgICAgICAgICAgICAgICAgICAgZCA9IGRvY3VtZW50LFxuICAgICAgICAgICAgICAgICAgICBlID0gZC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGcgPSBkb2N1bWVudC5ib2R5LFxuICAgICAgICAgICAgICAgICAgICB4ID0gdy5pbm5lcldpZHRoIHx8IGUuY2xpZW50V2lkdGggfHwgZy5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgeSA9IHcuaW5uZXJIZWlnaHQgfHwgZS5jbGllbnRIZWlnaHQgfHwgZy5jbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogeCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB5XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxjdWxhdGVEdXJhdGlvbjogZnVuY3Rpb24gKHN0YXJ0LCBzdG9wLCBmb3JtYXRTdHIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG8gPSBtb21lbnQudXRjKHN0b3ApLFxuICAgICAgICAgICAgICAgICAgICBmcm9tID0gbW9tZW50LnV0YyhzdGFydCksXG4gICAgICAgICAgICAgICAgICAgIGRpZmYgPSB0by5kaWZmKGZyb20pO1xuXG4gICAgICAgICAgICAgICAgZm9ybWF0U3RyID0gZm9ybWF0U3RyIHx8ICdEW2RdLCBIW2hdLCBNW21dLCBzcyc7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbW9tZW50LmR1cmF0aW9uKGRpZmYsICdtaWxsaXNlY29uZHMnKS5mb3JtYXQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXREYXlTdHJpbmc6IGZ1bmN0aW9uKGRheU51bWJlcil7XG4gICAgICAgICAgICAgICAgdmFyIGRheUFyciA9IFsnU3VuZGF5JywnTW9uZGF5JywnVHVlc2RheScsJ1dlZG5lc2RheScsJ1RodXJzZGF5JywnRnJpZGF5JywnU2F0dXJkYXknXVxuICAgICAgICAgICAgICAgIHJldHVybiBkYXlBcnJbZGF5TnVtYmVyXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0lFOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICAgICAgICAgIG9sZElFID0gdWEuaW5kZXhPZignTVNJRScpLFxuICAgICAgICAgICAgICAgICAgICBuZXdJRSA9IHVhLmluZGV4T2YoJ1RyaWRlbnQvJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoKG9sZElFID4gLTEpIHx8IChuZXdJRSA+IC0xKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5zZXJ2aWNlKCdzY2hlZHVsZXJTZXJ2aWNlJywgZnVuY3Rpb24gKCRodHRwLCAkcSwgc2NhbGVDb25maWcpIHtcbiAgICAgICAgdmFyIGdldFVwZGF0ZVNjaGVkdWxlckRhdGEgPSBmdW5jdGlvbiAoaXNfcGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlzX3BhdXNlZDogaXNfcGF1c2VkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1cGRhdGVTY2hlZHVsZXI6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRhdGEgfHwgZ2V0VXBkYXRlU2NoZWR1bGVyRGF0YSgpO1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwKHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICdzY2hlZHVsZXIvJyxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5zZXJ2aWNlKCdzdGF0dXNTZXJ2aWNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSwgc2NhbGVDb25maWcsIHBvbGxlciwgcG9sbGVyRmFjdG9yeSwgU3RhdHVzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRTdGF0dXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzUmVzb3VyY2UgPSAkcmVzb3VyY2Uoc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnc3RhdHVzLycpLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNQb2xsZXIgPSBwb2xsZXJGYWN0b3J5Lm5ld1BvbGxlcihzdGF0dXNSZXNvdXJjZSwgc2NhbGVDb25maWcucG9sbEludGVydmFscy5zdGF0dXMpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXR1c1BvbGxlci5wcm9taXNlLnRoZW4obnVsbCwgbnVsbCwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LiRyZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gU3RhdHVzLnRyYW5zZm9ybWVyKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3Jlc3VsdCA9IGFuZ3VsYXIuZXh0ZW5kKHJlc3VsdCwgcmV0dXJuUmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1BvbGxlci5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLnNlcnZpY2UoJ3VzZXJTZXJ2aWNlJywgZnVuY3Rpb24gKCRyb290U2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldFVzZXJDcmVkczogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB2YXIgY3JlZHMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlckNyZWRzJyk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoY3JlZHMpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIHBhcnNpbmcgdXNlciBjcmVkZW50aWFscycpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlZHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFVzZXJDcmVkczogZnVuY3Rpb24odXNlcil7XG4gICAgICAgICAgICAgICAgaWYgKHVzZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXJDcmVkcycsIEpTT04uc3RyaW5naWZ5KHVzZXIpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnVzZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndXNlckNyZWRzJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9naW46IGZ1bmN0aW9uICh1c2VybmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciB1c2VyID0ge1xuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGlzX2FkbWluOiB0cnVlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFVzZXJDcmVkcyh1c2VyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsb2dvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VXNlckNyZWRzKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5jb250cm9sbGVyKCdmZWVkRGV0YWlsc0NvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsICRsb2NhdGlvbiwgc2NhbGVDb25maWcsIG5hdlNlcnZpY2UsIHN1Ym5hdlNlcnZpY2UsIGZlZWRTZXJ2aWNlLCBtb21lbnQpIHtcbiAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAkc2NvcGUuZmVlZERhdGEgPSB7fTtcbiAgICAgICAgJHNjb3BlLnN1Ym5hdkxpbmtzID0gc2NhbGVDb25maWcuc3VibmF2TGlua3MuZmVlZDtcbiAgICAgICAgJHNjb3BlLnVzZUluZ2VzdFRpbWUgPSAnZmFsc2UnO1xuICAgICAgICAkc2NvcGUuZmlsdGVyVmFsdWUgPSAxO1xuICAgICAgICAkc2NvcGUuZmlsdGVyRHVyYXRpb24gPSAndyc7XG5cbiAgICAgICAgJHNjb3BlLmNoYW5nZUZlZWRTZWxlY3Rpb24gPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2V0RmVlZFVybCgpO1xuICAgICAgICAgICAgLy9nZXRGZWVkKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmNoYW5nZUluZ2VzdFRpbWVTZWxlY3Rpb24gPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2V0RmVlZFVybCgpO1xuICAgICAgICAgICAgZ2V0RmVlZCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnZXRGZWVkUGFyYW1zID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7fTtcbiAgICAgICAgICAgIHZhciBzdHJpa2VJZCA9ICRzY29wZS5zZWxlY3RlZEZlZWQgPyAkc2NvcGUuc2VsZWN0ZWRGZWVkLnN0cmlrZS5pZCA6IG51bGw7XG4gICAgICAgICAgICB2YXIgdXNlSW5nZXN0VGltZSA9ICRzY29wZS51c2VJbmdlc3RUaW1lID8gJHNjb3BlLnVzZUluZ2VzdFRpbWUgOiBudWxsO1xuXG4gICAgICAgICAgICBwYXJhbXMuc3RhcnRlZCA9IG1vbWVudC51dGMoKS5zdWJ0cmFjdCgkc2NvcGUuZmlsdGVyVmFsdWUsICRzY29wZS5maWx0ZXJEdXJhdGlvbikuc3RhcnRPZignZCcpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICBwYXJhbXMuZW5kZWQgPSBtb21lbnQudXRjKHBhcmFtcy5zdGFydGVkKS5hZGQoMSwgJHNjb3BlLmZpbHRlckR1cmF0aW9uKS5lbmRPZignZCcpLnRvSVNPU3RyaW5nKCk7XG5cbiAgICAgICAgICAgIGlmIChzdHJpa2VJZCAhPSAkbG9jYXRpb24uc2VhcmNoKCkuc3RyaWtlX2lkKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnN0cmlrZV9pZCA9IHN0cmlrZUlkO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkbG9jYXRpb24uc2VhcmNoKCkuc3RyaWtlX2lkKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnN0cmlrZV9pZCA9ICRsb2NhdGlvbi5zZWFyY2goKS5zdHJpa2VfaWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1c2VJbmdlc3RUaW1lICE9ICRsb2NhdGlvbi5zZWFyY2goKS51c2VfaW5nZXN0X3RpbWUpIHtcbiAgICAgICAgICAgICAgIHBhcmFtcy51c2VfaW5nZXN0X3RpbWUgPSB1c2VJbmdlc3RUaW1lO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgkbG9jYXRpb24uc2VhcmNoKCkudXNlX2luZ2VzdF90aW1lKSB7XG4gICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0RmVlZFBhcmFtcyB1c2VfaW5nZXN0X3RpbWU6ICcgKyAkbG9jYXRpb24uc2VhcmNoKCkudXNlX2luZ2VzdF90aW1lKTtcbiAgICAgICAgICAgICAgIHBhcmFtcy51c2VfaW5nZXN0X3RpbWUgPSAkbG9jYXRpb24uc2VhcmNoKCkudXNlX2luZ2VzdF90aW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnZXRGZWVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKCRsb2NhdGlvbi5zZWFyY2goKS51c2VfaW5nZXN0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUudXNlSW5nZXN0VGltZSA9ICRsb2NhdGlvbi5zZWFyY2goKS51c2VfaW5nZXN0X3RpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZmVlZFBhcmFtcyA9IGdldEZlZWRQYXJhbXMoKTtcbiAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goZmVlZFBhcmFtcyk7XG4gICAgICAgICAgICBmZWVkU2VydmljZS5nZXRGZWVkKGZlZWRQYXJhbXMpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWxsRmVlZHMgPSBfLnNvcnRCeU9yZGVyKGRhdGEucmVzdWx0cywgWydzdHJpa2UubmFtZSddLCBbJ2FzYyddKTtcbiAgICAgICAgICAgICAgICB2YXIgc3RyaWtlSWQgPSAkbG9jYXRpb24uc2VhcmNoKCkuc3RyaWtlX2lkO1xuICAgICAgICAgICAgICAgIGlmKHN0cmlrZUlkKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHNlbGVjdGVkRmVlZCA9IG5ldyBmZWVkXG4gICAgICAgICAgICAgICAgICAgIHZhciBmZWVkID0gXy5maW5kKCRzY29wZS5hbGxGZWVkcywgZnVuY3Rpb24oZmVlZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmVlZC5zdHJpa2UuaWQgPT0gc3RyaWtlSWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRGZWVkID0gZmVlZCA/IGZlZWQgOiBudWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEZlZWQgPSAkc2NvcGUuYWxsRmVlZHNbMF07XG4gICAgICAgICAgICAgICAgICAgIHNldEZlZWRVcmwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS51cGRhdGVGZWVkUmFuZ2UgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoYWN0aW9uID09PSAnb2xkZXInKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlclZhbHVlKys7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gJ25ld2VyJykge1xuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZmlsdGVyVmFsdWUgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJWYWx1ZS0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSAndG9kYXknKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlclZhbHVlID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdldEZlZWQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgc2V0RmVlZFVybCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyBzZXQgcGFyYW0gaW4gVVJMXG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gZ2V0RmVlZFBhcmFtcygpO1xuICAgICAgICAgICAgJGxvY2F0aW9uLnNlYXJjaChwYXJhbXMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBpbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbmF2U2VydmljZS51cGRhdGVMb2NhdGlvbignZmVlZCcpO1xuICAgICAgICAgICAgc3VibmF2U2VydmljZS5zZXRDdXJyZW50UGF0aCgnZmVlZCcpO1xuICAgICAgICAgICAgZ2V0RmVlZCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGluaXRpYWxpemUoKTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdmaWx0ZXJWYWx1ZScsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyICRmZWVkTmV3ZXIgPSAkKCcuZmVlZC1uZXdlcicpLFxuICAgICAgICAgICAgICAgICRmZWVkVG9kYXkgPSAkKCcuZmVlZC10b2RheScpO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUgPiAxKSB7XG4gICAgICAgICAgICAgICAgJGZlZWROZXdlci5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICRmZWVkVG9kYXkucmVtb3ZlQXR0cignZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGZlZWROZXdlci5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICRmZWVkVG9kYXkuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5jb250cm9sbGVyKCdpbmdlc3RSZWNvcmRzQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJHJvb3RTY29wZSwgJGxvY2F0aW9uLCBzY2FsZUNvbmZpZywgc2NhbGVTZXJ2aWNlLCBncmlkRmFjdG9yeSwgbmF2U2VydmljZSwgc3VibmF2U2VydmljZSwgZmVlZFNlcnZpY2UpIHtcbiAgICAgICAgJHNjb3BlLnN1Ym5hdkxpbmtzID0gc2NhbGVDb25maWcuc3VibmF2TGlua3MuZmVlZDtcblxuICAgICAgICB2YXIgZ3JpZFBhcmFtcyA9IHtcbiAgICAgICAgICAgIHBhZ2U6IDEsIHBhZ2Vfc2l6ZTogMjUsIHN0YXJ0ZWQ6IG51bGwsIGVuZGVkOiBudWxsLCBvcmRlcjogJy10cmFuc2Zlcl9zdGFydGVkJywgc3RhdHVzOiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIGdyaWRQYXJhbXMgaW4gcXVlcnkgc3RyaW5nLCBhbmQgdXBkYXRlIGFzIG5lY2Vzc2FyeVxuICAgICAgICBfLmZvckVhY2goXy5wYWlycyhncmlkUGFyYW1zKSwgZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBfLmF0KCRsb2NhdGlvbi5zZWFyY2goKSwgcGFyYW1bMF0pO1xuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBncmlkUGFyYW1zW3BhcmFtWzBdXSA9IHZhbHVlLmxlbmd0aCA+IDEgPyB2YWx1ZSA6IHZhbHVlWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZmlsdGVyZWRCeVN0YXR1cyA9IGdyaWRQYXJhbXMuc3RhdHVzID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB2YXIgZmlsdGVyZWRCeU9yZGVyID0gZ3JpZFBhcmFtcy5vcmRlciA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgJHNjb3BlLmxhc3RNb2RpZmllZFN0YXJ0ID0gZ3JpZFBhcmFtcy5zdGFydGVkID8gbW9tZW50LnV0YyhncmlkUGFyYW1zLnN0YXJ0ZWQpLnRvRGF0ZSgpIDogbW9tZW50LnV0YygpLnN1YnRyYWN0KDEsICd3ZWVrcycpLnN0YXJ0T2YoJ2QnKS50b0RhdGUoKTtcblxuICAgICAgICAkc2NvcGUubGFzdE1vZGlmaWVkU3RhcnRQb3B1cCA9IHtcbiAgICAgICAgICAgIG9wZW5lZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLm9wZW5MYXN0TW9kaWZpZWRTdGFydFBvcHVwID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgJHNjb3BlLmxhc3RNb2RpZmllZFN0YXJ0UG9wdXAub3BlbmVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmxhc3RNb2RpZmllZFN0b3AgPSBncmlkUGFyYW1zLmVuZGVkID8gbW9tZW50LnV0YyhncmlkUGFyYW1zLmVuZGVkKS50b0RhdGUoKSA6IG1vbWVudC51dGMoKS5lbmRPZignZCcpLnRvRGF0ZSgpO1xuICAgICAgICAkc2NvcGUubGFzdE1vZGlmaWVkU3RvcFBvcHVwID0ge1xuICAgICAgICAgICAgb3BlbmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUub3Blbkxhc3RNb2RpZmllZFN0b3BQb3B1cCA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICRzY29wZS5sYXN0TW9kaWZpZWRTdG9wUG9wdXAub3BlbmVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmRhdGVNb2RlbE9wdGlvbnMgPSB7XG4gICAgICAgICAgICB0aW1lem9uZTogJyswMDAnXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnN0YXR1c1ZhbHVlcyA9IHNjYWxlQ29uZmlnLmluZ2VzdFN0YXR1cztcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkU3RhdHVzID0gZ3JpZFBhcmFtcy5zdGF0dXMgfHwgJHNjb3BlLnN0YXR1c1ZhbHVlc1swXTtcbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnc2VsZWN0ZWRTdGF0dXMnLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICgkc2NvcGUubG9hZGluZykge1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJlZEJ5U3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXR1cyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZEJ5U3RhdHVzID0gdmFsdWUgIT09ICdWSUVXIEFMTCc7XG4gICAgICAgICAgICAgICAgdXBkYXRlU3RhdHVzKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnbGFzdE1vZGlmaWVkU3RhcnQnLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghJHNjb3BlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICBncmlkUGFyYW1zLnN0YXJ0ZWQgPSB2YWx1ZS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJSZXN1bHRzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2xhc3RNb2RpZmllZFN0b3AnLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghJHNjb3BlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgZ3JpZFBhcmFtcy5lbmRlZCA9IHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlclJlc3VsdHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICB2YXIgdXBkYXRlU3RhdHVzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gZ3JpZFBhcmFtcy5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICBncmlkUGFyYW1zLnBhZ2UgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ3JpZFBhcmFtcy5zdGF0dXMgPSB2YWx1ZSA9PT0gJ1ZJRVcgQUxMJyA/IG51bGwgOiB2YWx1ZTtcbiAgICAgICAgICAgIGdyaWRQYXJhbXMucGFnZV9zaXplID0gJHNjb3BlLmdyaWRPcHRpb25zLnBhZ2luYXRpb25QYWdlU2l6ZTtcbiAgICAgICAgICAgIGlmICghJHNjb3BlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyUmVzdWx0cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBkZWZhdWx0Q29sdW1uRGVmcyA9IFtcbiAgICAgICAgICAgIHsgZmllbGQ6ICdmaWxlX25hbWUnLCBkaXNwbGF5TmFtZTogJ0ZpbGUgTmFtZScsIGVuYWJsZUZpbHRlcmluZzogZmFsc2UgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWVsZDogJ2ZpbGVfc2l6ZScsXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdGaWxlIFNpemUnLFxuICAgICAgICAgICAgICAgIGVuYWJsZUZpbHRlcmluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInVpLWdyaWQtY2VsbC1jb250ZW50c1wiPnt7IHJvdy5lbnRpdHkuZmlsZV9zaXplX2Zvcm1hdHRlZCB9fTwvZGl2PicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBmaWVsZDogJ3N0cmlrZS50aXRsZScsIGRpc3BsYXlOYW1lOiAnU3RyaWtlIFByb2Nlc3MnLCBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmllbGQ6ICdzdGF0dXMnLFxuICAgICAgICAgICAgICAgIGZpbHRlckhlYWRlclRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInVpLWdyaWQtZmlsdGVyLWNvbnRhaW5lclwiPjxzZWxlY3QgY2xhc3M9XCJmb3JtLWNvbnRyb2wgaW5wdXQtc21cIiBuZy1tb2RlbD1cImdyaWQuYXBwU2NvcGUuc2VsZWN0ZWRTdGF0dXNcIj48b3B0aW9uIG5nLXNlbGVjdGVkPVwie3sgZ3JpZC5hcHBTY29wZS5zdGF0dXNWYWx1ZXNbJGluZGV4XSA9PSBncmlkLmFwcFNjb3BlLnNlbGVjdGVkU3RhdHVzIH19XCIgdmFsdWU9XCJ7eyBncmlkLmFwcFNjb3BlLnN0YXR1c1ZhbHVlc1skaW5kZXhdIH19XCIgbmctcmVwZWF0PVwic3RhdHVzIGluIGdyaWQuYXBwU2NvcGUuc3RhdHVzVmFsdWVzIHRyYWNrIGJ5ICRpbmRleFwiPnt7IHN0YXR1cy50b1VwcGVyQ2FzZSgpIH19PC9vcHRpb24+PC9zZWxlY3Q+PC9kaXY+J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWVsZDogJ3RyYW5zZmVyX3N0YXJ0ZWQnLFxuICAgICAgICAgICAgICAgIGVuYWJsZUZpbHRlcmluZzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IGZpZWxkOiAndHJhbnNmZXJfZW5kZWQnLCBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmllbGQ6ICdpbmdlc3Rfc3RhcnRlZCcsXG4gICAgICAgICAgICAgICAgZW5hYmxlRmlsdGVyaW5nOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgZmllbGQ6ICdpbmdlc3RfZW5kZWQnLCBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlIH1cbiAgICAgICAgXTtcblxuICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMgPSBncmlkRmFjdG9yeS5kZWZhdWx0R3JpZE9wdGlvbnMoKTtcbiAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLnBhZ2luYXRpb25DdXJyZW50UGFnZSA9IHBhcnNlSW50KGdyaWRQYXJhbXMucGFnZSB8fCAxKTtcbiAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLnBhZ2luYXRpb25QYWdlU2l6ZSA9IHBhcnNlSW50KGdyaWRQYXJhbXMucGFnZV9zaXplKSB8fCAkc2NvcGUuZ3JpZE9wdGlvbnMucGFnaW5hdGlvblBhZ2VTaXplO1xuICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMuY29sdW1uRGVmcyA9IGdyaWRGYWN0b3J5LmFwcGx5U29ydENvbmZpZyhkZWZhdWx0Q29sdW1uRGVmcywgZ3JpZFBhcmFtcyk7XG4gICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy5kYXRhID0gW107XG4gICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy5vblJlZ2lzdGVyQXBpID0gZnVuY3Rpb24gKGdyaWRBcGkpIHtcbiAgICAgICAgICAgICAgICAvL3NldCBncmlkQXBpIG9uIHNjb3BlXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdyaWRBcGkgPSBncmlkQXBpO1xuICAgICAgICAgICAgICAgIC8vICRzY29wZS5ncmlkQXBpLnNlbGVjdGlvbi5vbi5yb3dTZWxlY3Rpb25DaGFuZ2VkKCRzY29wZSwgZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgIC8vICAgICBpZiAoJHNjb3BlLmFjdGlvbkNsaWNrZWQpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICRzY29wZS5hY3Rpb25DbGlja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgLy8gICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9mZWVkL2luZ2VzdHMvJyArIHJvdy5lbnRpdHkuaWQpO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgICAgICAgICRzY29wZS5ncmlkQXBpLnBhZ2luYXRpb24ub24ucGFnaW5hdGlvbkNoYW5nZWQoJHNjb3BlLCBmdW5jdGlvbiAoY3VycmVudFBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyaWRQYXJhbXMucGFnZSA9IGN1cnJlbnRQYWdlO1xuICAgICAgICAgICAgICAgICAgICBncmlkUGFyYW1zLnBhZ2Vfc2l6ZSA9IHBhZ2VTaXplO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZ3JpZEFwaS5wYWdpbmF0aW9uQ2hhbmdlZCcpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyUmVzdWx0cygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICRzY29wZS5ncmlkQXBpLmNvcmUub24uc29ydENoYW5nZWQoJHNjb3BlLCBmdW5jdGlvbiAoZ3JpZCwgc29ydENvbHVtbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5jb2xEZWZzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKCRzY29wZS5ncmlkQXBpLmdyaWQuY29sdW1ucywgZnVuY3Rpb24gKGNvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sLmNvbERlZi5zb3J0ID0gY29sLnNvcnQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmNvbERlZnMgPSAkc2NvcGUuZ3JpZEFwaS5ncmlkLm9wdGlvbnMuY29sdW1uRGVmcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvcnRBcnIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKHNvcnRDb2x1bW5zLCBmdW5jdGlvbiAoY29sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0QXJyLnB1c2goY29sLnNvcnQuZGlyZWN0aW9uID09PSAnZGVzYycgPyAnLScgKyBjb2wuZmllbGQgOiBjb2wuZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlT3JkZXIoc29ydEFycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5maWx0ZXJSZXN1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgXy5mb3JFYWNoKF8ucGFpcnMoZ3JpZFBhcmFtcyksIGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2gocGFyYW1bMF0sIHBhcmFtWzFdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZ2V0SW5nZXN0cygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciB1cGRhdGVPcmRlciA9IGZ1bmN0aW9uIChzb3J0QXJyKSB7XG4gICAgICAgICAgICBncmlkUGFyYW1zLm9yZGVyID0gc29ydEFyci5sZW5ndGggPiAwID8gc29ydEFyciA6IG51bGw7XG4gICAgICAgICAgICBmaWx0ZXJlZEJ5T3JkZXIgPSBzb3J0QXJyLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAkc2NvcGUuZmlsdGVyUmVzdWx0cygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnZXRJbmdlc3RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgZmVlZFNlcnZpY2UuZ2V0SW5nZXN0c09uY2UoZ3JpZFBhcmFtcykudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5pbmdlc3RzID0gZGF0YS5yZXN1bHRzO1xuICAgICAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy50b3RhbEl0ZW1zID0gZGF0YS5jb3VudDtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMuZGF0YSA9ICRzY29wZS5pbmdlc3RzO1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cblxuICAgICAgICB2YXIgaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5hdlNlcnZpY2UudXBkYXRlTG9jYXRpb24oJ2ZlZWQnKTtcbiAgICAgICAgICAgIHN1Ym5hdlNlcnZpY2Uuc2V0Q3VycmVudFBhdGgoJ2ZlZWQvaW5nZXN0cycpO1xuICAgICAgICAgICAgaWYgKCFncmlkUGFyYW1zLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbGFzdE1vZGlmaWVkU3RhcnQ6ICcgKyAkc2NvcGUubGFzdE1vZGlmaWVkU3RhcnQpO1xuICAgICAgICAgICAgICAgIGdyaWRQYXJhbXMuc3RhcnRlZCA9IG1vbWVudC51dGMoJHNjb3BlLmxhc3RNb2RpZmllZFN0YXJ0KS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ3N0YXJ0ZWQnLCBncmlkUGFyYW1zLnN0YXJ0ZWQpLnJlcGxhY2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZ3JpZFBhcmFtcy5lbmRlZCkge1xuICAgICAgICAgICAgICAgIGdyaWRQYXJhbXMuZW5kZWQgPSBtb21lbnQudXRjKCRzY29wZS5sYXN0TW9kaWZpZWRTdG9wKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ2VuZGVkJywgZ3JpZFBhcmFtcy5lbmRlZCkucmVwbGFjZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2V0SW5nZXN0cygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGluaXRpYWxpemUoKTtcblxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHNldCBjb250YWluZXIgaGVpZ2h0cyBlcXVhbCB0byBhdmFpbGFibGUgcGFnZSBoZWlnaHRcbiAgICAgICAgICAgIHZhciB2aWV3cG9ydCA9IHNjYWxlU2VydmljZS5nZXRWaWV3cG9ydFNpemUoKSxcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBzY2FsZUNvbmZpZy5oZWFkZXJPZmZzZXQgKyBzY2FsZUNvbmZpZy5kYXRlRmlsdGVyT2Zmc2V0LFxuICAgICAgICAgICAgICAgIGdyaWRNYXhIZWlnaHQgPSB2aWV3cG9ydC5oZWlnaHQgLSBvZmZzZXQ7XG5cbiAgICAgICAgICAgICRzY29wZS5ncmlkU3R5bGUgPSAnaGVpZ2h0OiAnICsgZ3JpZE1heEhlaWdodCArICdweDsgbWF4LWhlaWdodDogJyArIGdyaWRNYXhIZWlnaHQgKyAncHg7IG92ZXJmbG93LXk6IGF1dG87JztcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdGZWVkJywgZnVuY3Rpb24gKHNjYWxlQ29uZmlnKSB7XG4gICAgICAgIHZhciBGZWVkID0gZnVuY3Rpb24gKHZhbHVlLCBzdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgICAgIEZlZWQucHJvdG90eXBlID0ge1xuICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0ZlZWQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldENlbGxUZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q2VsbFRpdGxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBGZWVkLmJ1aWxkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGZWVkKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN0YXR1c1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZlZWQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBGZWVkLnRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgICAgICAgICAubWFwKEZlZWQuYnVpbGQpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gRmVlZC5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gRmVlZDtcbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ0ZlZWRTdGF0dXMnLCBmdW5jdGlvbiAoc2NhbGVDb25maWcpIHtcbiAgICAgICAgdmFyIEZlZWRTdGF0dXMgPSBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBwdWJsaWMgbWV0aG9kc1xuICAgICAgICBGZWVkU3RhdHVzLnByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdGZWVkU3RhdHVzJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRDZWxsRmlsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY2FsZUNvbmZpZy5jb2xvcnMuY2hhcnRfZ3JlZW47XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q2VsbEFjdGl2aXR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldENlbGxBY3Rpdml0eVRvdGFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldENlbGxFcnJvcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRDZWxsVG90YWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3RhdGljIG1ldGhvZHMsIGFzc2lnbmVkIHRvIGNsYXNzXG4gICAgICAgIEZlZWRTdGF0dXMuYnVpbGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZlZWRTdGF0dXMoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3RhdHVzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgRmVlZFN0YXR1cygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEZlZWRTdGF0dXMudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoRmVlZFN0YXR1cy5idWlsZClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBGZWVkU3RhdHVzLmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBGZWVkU3RhdHVzO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLnNlcnZpY2UoJ2ZlZWRTZXJ2aWNlJywgZnVuY3Rpb24gKCRsb2NhdGlvbiwgJHRpbWVvdXQsICRxLCAkaHR0cCwgc2NhbGVDb25maWcsIHNjYWxlU2VydmljZSwgRmVlZCwgRmVlZFN0YXR1cykge1xuXG4gICAgICAgIHZhciBnZXRGZWVkUGFyYW1zID0gZnVuY3Rpb24ocGFyYW1zKXtcbiAgICAgICAgICAgIGlmKCFwYXJhbXMpeyBwYXJhbXMgPSB7fTsgfVxuICAgICAgICAgICAgdmFyIHAgPSB7fTtcbiAgICAgICAgICAgIHAucGFnZV9zaXplID0gMTAwMDtcbiAgICAgICAgICAgIHAuc3RhcnRlZCA9IHBhcmFtcy5zdGFydGVkID8gcGFyYW1zLnN0YXJ0ZWQgOiBtb21lbnQudXRjKCkuYWRkKC03LCdkYXlzJykuc3RhcnRPZignZCcpLnRvRGF0ZSgpO1xuICAgICAgICAgICAgcC5lbmRlZCA9IHBhcmFtcy5lbmRlZCA/IHBhcmFtcy5lbmRlZCA6IG1vbWVudC51dGMoKS50b0RhdGUoKTtcbiAgICAgICAgICAgIHAudXNlX2luZ2VzdF90aW1lID0gcGFyYW1zLnVzZV9pbmdlc3RfdGltZSA/IHBhcmFtcy51c2VfaW5nZXN0X3RpbWUgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldEluZ2VzdHNQYXJhbXMgPSBmdW5jdGlvbihwYXJhbXMpe1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0RmVlZDogZnVuY3Rpb24ocGFyYW1zKXtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IGdldEZlZWRQYXJhbXMocGFyYW1zKTtcbiAgICAgICAgICAgICAgICAkaHR0cCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnaW5nZXN0cy9zdGF0dXMvJyxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICAgICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0SW5nZXN0c09uY2U6IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gZ2V0SW5nZXN0c1BhcmFtcyhwYXJhbXMpO1xuICAgICAgICAgICAgICAgICRodHRwKHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICdpbmdlc3RzLycsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goZGF0YS5yZXN1bHRzLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuZmlsZV9zaXplX2Zvcm1hdHRlZCA9IHNjYWxlU2VydmljZS5jYWxjdWxhdGVGaWxlU2l6ZUZyb21CeXRlcyhkLmZpbGVfc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuY29udHJvbGxlcignam9iRGV0YWlsQ29udHJvbGxlcicsIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCAkdWliTW9kYWwsIG5hdlNlcnZpY2UsIGpvYlNlcnZpY2UsIGpvYkV4ZWN1dGlvblNlcnZpY2UsIG5vZGVTZXJ2aWNlLCBsb2FkU2VydmljZSwgc2NhbGVDb25maWcsIHN1Ym5hdlNlcnZpY2UsIHVzZXJTZXJ2aWNlLCB0b2FzdHIpIHtcbiAgICAgICAgJHNjb3BlLmpvYiA9IHt9O1xuICAgICAgICAkc2NvcGUuam9iSWQgPSAkcm91dGVQYXJhbXMuaWQ7XG4gICAgICAgICRzY29wZS5zdWJuYXZMaW5rcyA9IHNjYWxlQ29uZmlnLnN1Ym5hdkxpbmtzLmpvYnM7XG4gICAgICAgIHN1Ym5hdlNlcnZpY2Uuc2V0Q3VycmVudFBhdGgoJ2pvYnMnKTtcbiAgICAgICAgJHNjb3BlLmxvYWRpbmdKb2JEZXRhaWwgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLmxhdGVzdEV4ZWN1dGlvbiA9IG51bGw7XG4gICAgICAgICRzY29wZS5leGVjdXRpb25Mb2cgPSBudWxsO1xuICAgICAgICAkc2NvcGUuZXhlY3V0aW9uRGV0YWlscyA9IG51bGw7XG4gICAgICAgICRzY29wZS5zZWxlY3RlZEV4ZWN0dWlvbkRldGFpbFZhbHVlcyA9IG51bGw7XG4gICAgICAgICRzY29wZS50aW1lbGluZSA9IFtdO1xuICAgICAgICAkc2NvcGUucmVhZG9ubHkgPSB0cnVlO1xuICAgICAgICAkc2NvcGUuam9iRXJyb3JDcmVhdGVkID0gJyc7XG4gICAgICAgICRzY29wZS5qb2JFcnJvckxhc3RNb2RpZmllZCA9ICcnO1xuICAgICAgICAkc2NvcGUubGFzdFN0YXR1c0NoYW5nZSA9ICcnO1xuICAgICAgICAkc2NvcGUudHJpZ2dlck9jY3VycmVkID0gJyc7XG5cbiAgICAgICAgJHNjb3BlLnNob3dMb2cgPSBmdW5jdGlvbiAoZXhlY3V0aW9uKSB7XG4gICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRFeGVjdXRpb25Mb2cgPSBleGVjdXRpb247XG4gICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzaG93TG9nLmh0bWwnLFxuICAgICAgICAgICAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICAgICAgICAgICAgLy9zaXplOiAnbGcnLFxuICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiAnbG9nLW1vZGFsLXdpbmRvdydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zaG93RXhlY3V0aW9uRGV0YWlscyA9IGZ1bmN0aW9uIChleGVjdXRpb25JZCkge1xuICAgICAgICAgICAgam9iRXhlY3V0aW9uU2VydmljZS5nZXRKb2JFeGVjdXRpb25EZXRhaWxzKGV4ZWN1dGlvbklkKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkRXhlY3V0aW9uRGV0YWlscyA9IGRhdGE7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkRXhlY3V0aW9uRGV0YWlsVmFsdWVzID0gXy5wYWlycyhkYXRhKTtcbiAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Nob3dFeGVjdXRpb25EZXRhaWxzLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUubWVkaWFUeXBlQ2xhc3MgPSBmdW5jdGlvbiAobWVkaWFUeXBlKSB7XG4gICAgICAgICAgICB2YXIgbWVkaWFUeXBlQ2ZnID0gXy5maW5kKHNjYWxlQ29uZmlnLm1lZGlhVHlwZXMsICdtaW1lVHlwZScsIG1lZGlhVHlwZSk7XG4gICAgICAgICAgICBpZiAobWVkaWFUeXBlQ2ZnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lZGlhVHlwZUNmZy5pY29uO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUucmVxdWV1ZUpvYiA9IGZ1bmN0aW9uIChqb2JJZCkge1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgbG9hZFNlcnZpY2UucmVxdWV1ZUpvYnMoeyBqb2JfaWRzOiBbam9iSWRdIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB0b2FzdHJbJ3N1Y2Nlc3MnXSgnUmVxdWV1ZWQgSm9iJyk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmpvYi5zdGF0dXMgPSBkYXRhLmpvYl9zdGF0dXM7XG4gICAgICAgICAgICAgICAgZ2V0Sm9iRGV0YWlsKGpvYklkKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRvYXN0clsnZXJyb3InXSgnUmVxdWV1ZSByZXF1ZXN0IGZhaWxlZCcpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuY2FuY2VsSm9iID0gZnVuY3Rpb24gKGpvYikge1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgJHNjb3BlLmFjdGlvbkNsaWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9yaWdpbmFsU3RhdHVzID0gam9iLnN0YXR1cztcbiAgICAgICAgICAgIGpvYi5zdGF0dXMgPSAnQ0FOQ0VMJztcbiAgICAgICAgICAgIGpvYlNlcnZpY2UudXBkYXRlSm9iKGpvYi5pZCwgeyBzdGF0dXM6ICdDQU5DRUxFRCcgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHRvYXN0clsnc3VjY2VzcyddKCdKb2IgQ2FuY2VsZWQnKTtcbiAgICAgICAgICAgICAgICBqb2Iuc3RhdHVzID0gJ0NBTkNFTEVEJztcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRvYXN0clsnZXJyb3InXShlcnJvcik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIGpvYi5zdGF0dXMgPSBvcmlnaW5hbFN0YXR1cztcbiAgICAgICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0Sm9iRGV0YWlsID0gZnVuY3Rpb24gKGpvYklkKSB7XG4gICAgICAgICAgICAkc2NvcGUubG9hZGluZ0pvYkRldGFpbCA9IHRydWU7XG4gICAgICAgICAgICBqb2JTZXJ2aWNlLmdldEpvYkRldGFpbChqb2JJZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5qb2IgPSBkYXRhO1xuICAgICAgICAgICAgICAgICRzY29wZS50aW1lbGluZSA9IGNhbGN1bGF0ZVRpbWVsaW5lKGRhdGEpO1xuICAgICAgICAgICAgICAgICRzY29wZS5wdWJsaXNoZWRQcm9kdWN0cyA9IF8ud2hlcmUoZGF0YS5wcm9kdWN0cywgeyAnaXNfcHVibGlzaGVkJzogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUudW5wdWJsaXNoZWRQcm9kdWN0cyA9IF8ud2hlcmUoZGF0YS5wcm9kdWN0cywgeyAnaXNfcHVibGlzaGVkJzogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnB1Ymxpc2hlZFByb2R1Y3RzR3JvdXBlZCA9IF8ucGFpcnMoXy5ncm91cEJ5KCRzY29wZS5wdWJsaXNoZWRQcm9kdWN0cywgJ2pvYl9leGUuaWQnKSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxhdGVzdEV4ZWN1dGlvbiA9IGRhdGEuZ2V0TGF0ZXN0RXhlY3V0aW9uKCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmpvYkVycm9yQ3JlYXRlZCA9IGRhdGEuZXJyb3IgPyBtb21lbnQudXRjKGRhdGEuZXJyb3IuY3JlYXRlZCkudG9JU09TdHJpbmcoKSA6ICcnO1xuICAgICAgICAgICAgICAgICRzY29wZS5sYXN0U3RhdHVzQ2hhbmdlID0gZGF0YS5sYXN0X3N0YXR1c19jaGFuZ2UgPyBtb21lbnQuZHVyYXRpb24obW9tZW50LnV0YyhkYXRhLmxhc3Rfc3RhdHVzX2NoYW5nZSkuZGlmZihtb21lbnQudXRjKCkpKS5odW1hbml6ZSh0cnVlKSA6ICcnO1xuICAgICAgICAgICAgICAgICRzY29wZS50cmlnZ2VyT2NjdXJyZWQgPSBkYXRhLmV2ZW50Lm9jY3VycmVkID8gbW9tZW50LmR1cmF0aW9uKG1vbWVudC51dGMoZGF0YS5ldmVudC5vY2N1cnJlZCkuZGlmZihtb21lbnQudXRjKCkpKS5odW1hbml6ZSh0cnVlKSA6ICcnO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmdKb2JEZXRhaWwgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjYWxjdWxhdGVUaW1lbGluZSA9IGZ1bmN0aW9uIChqb2IpIHtcbiAgICAgICAgICAgIHZhciB0bCA9IFtdO1xuICAgICAgICAgICAgdGwucHVzaCh7IHRhc2tOYW1lOiAnQ3JlYXRlZCcsIHN0YXJ0ZWQ6IGpvYi5jcmVhdGVkID8gbW9tZW50LnV0Yyhqb2IuY3JlYXRlZCkudG9EYXRlKCkgOiBqb2IuY3JlYXRlZCwgZW5kZWQ6IGpvYi5xdWV1ZWQgPyBtb21lbnQudXRjKGpvYi5xdWV1ZWQpLnRvRGF0ZSgpIDogam9iLnF1ZXVlZCB9KTtcbiAgICAgICAgICAgIHRsLnB1c2goeyB0YXNrTmFtZTogJ1F1ZXVlZCcsIHN0YXJ0ZWQ6IGpvYi5xdWV1ZWQgPyBtb21lbnQudXRjKGpvYi5xdWV1ZWQpLnRvRGF0ZSgpIDogam9iLnF1ZXVlZCwgZW5kZWQ6IGpvYi5zdGFydGVkID8gbW9tZW50LnV0Yyhqb2Iuc3RhcnRlZCkudG9EYXRlKCkgOiBqb2Iuc3RhcnRlZCB9KTtcbiAgICAgICAgICAgIHRsLnB1c2goeyB0YXNrTmFtZTogJ0V4ZWN1dGVkJywgc3RhcnRlZDogam9iLnN0YXJ0ZWQgPyBtb21lbnQudXRjKGpvYi5zdGFydGVkKS50b0RhdGUoKSA6IGpvYi5zdGFydGVkLCBlbmRlZDogam9iLmVuZGVkID8gbW9tZW50LnV0Yyhqb2IuZW5kZWQpLnRvRGF0ZSgpIDogam9iLmVuZGVkIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGw7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBuYXZTZXJ2aWNlLnVwZGF0ZUxvY2F0aW9uKCdqb2JzJyk7XG5cbiAgICAgICAgICAgICRyb290U2NvcGUudXNlciA9IHVzZXJTZXJ2aWNlLmdldFVzZXJDcmVkcygpO1xuICAgICAgICAgICAgaWYoJHJvb3RTY29wZS51c2VyKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVhZG9ubHkgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0Sm9iRGV0YWlsKCRzY29wZS5qb2JJZCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaW5pdGlhbGl6ZSgpO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuY29udHJvbGxlcignam9iRXhlY3V0aW9uRGV0YWlsQ29udHJvbGxlcicsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCBuYXZTZXJ2aWNlLCBqb2JFeGVjdXRpb25TZXJ2aWNlLCBub2RlU2VydmljZSwgc2NhbGVDb25maWcsIHN1Ym5hdlNlcnZpY2UpIHtcbiAgICAgICAgJHNjb3BlLmpvYkV4ZWN1dGlvbiA9IHt9O1xuICAgICAgICAkc2NvcGUuam9iRXhlY3V0aW9uSWQgPSAkcm91dGVQYXJhbXMuaWQ7XG4gICAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLnN1Ym5hdkxpbmtzID0gc2NhbGVDb25maWcuc3VibmF2TGlua3Muam9icztcbiAgICAgICAgc3VibmF2U2VydmljZS5zZXRDdXJyZW50UGF0aCgnam9icy9ydW5zJyk7XG5cbiAgICAgICAgdmFyIGdldEpvYkV4ZWN1dGlvbkRldGFpbCA9IGZ1bmN0aW9uIChqb2JFeGVjdXRpb25JZCkge1xuICAgICAgICAgICAgam9iRXhlY3V0aW9uU2VydmljZS5nZXRKb2JFeGVjdXRpb25EZXRhaWwoaWQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuam9iRXhlY3V0aW9uID0gZGF0YTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdldEpvYkV4ZWN1dGlvbkRldGFpbCgkcm91dGVQYXJhbXMuaWQpO1xuICAgICAgICAgICAgbmF2U2VydmljZS51cGRhdGVMb2NhdGlvbignam9icycpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGluaXRpYWxpemUoKTtcbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5jb250cm9sbGVyKCdqb2JFeGVjdXRpb25zQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJGxvY2F0aW9uLCBuYXZTZXJ2aWNlLCBzdGF0c1NlcnZpY2UsIGpvYkV4ZWN1dGlvblNlcnZpY2UsIGpvYlR5cGVTZXJ2aWNlLCB1aUdyaWRDb25zdGFudHMsIHNjYWxlQ29uZmlnLCBzdWJuYXZTZXJ2aWNlKSB7XG5cbiAgICAgICAgJHNjb3BlLmpvYkV4ZWN1dGlvbnMgPSBbXTtcbiAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAkc2NvcGUuam9iVHlwZVZhbHVlcyA9IFtdO1xuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRKb2JUeXBlID0gJyc7XG4gICAgICAgICRzY29wZS5qb2JTdGF0dXMgPSBzY2FsZUNvbmZpZy5qb2JTdGF0dXM7XG4gICAgICAgICRzY29wZS5zZWxlY3RlZEpvYlN0YXR1cyA9ICcnO1xuICAgICAgICAkc2NvcGUuc3VibmF2TGlua3MgPSBzY2FsZUNvbmZpZy5zdWJuYXZMaW5rcy5qb2JzO1xuICAgICAgICBzdWJuYXZTZXJ2aWNlLnNldEN1cnJlbnRQYXRoKCdqb2JzL2V4ZWN1dGlvbnMnKTtcblxuICAgICAgICB2YXIgZ3JpZEZpbHRlciA9IHt9LFxuICAgICAgICAgICAgZ3JpZFBhZ2VOdW1iZXIgPSAxO1xuXG4gICAgICAgICRzY29wZS5ncmlkT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGVuYWJsZVJvd1NlbGVjdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIGVuYWJsZVJvd0hlYWRlclNlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICBlbmFibGVIb3Jpem9udGFsU2Nyb2xsYmFyOiB1aUdyaWRDb25zdGFudHMuc2Nyb2xsYmFycy5ORVZFUixcbiAgICAgICAgICAgIG11bHRpU2VsZWN0OiBmYWxzZSxcbiAgICAgICAgICAgIGVuYWJsZUZpbHRlcmluZzogdHJ1ZSxcbiAgICAgICAgICAgIHVzZUV4dGVybmFsRmlsdGVyaW5nOiB0cnVlLFxuICAgICAgICAgICAgZW5hYmxlU29ydGluZzogdHJ1ZSxcbiAgICAgICAgICAgIG1pblJvd3NUb1Nob3c6IDE3LFxuICAgICAgICAgICAgcGFnaW5hdGlvblBhZ2VTaXplczogWzI1LDUwLDc1XSxcbiAgICAgICAgICAgIHBhZ2luYXRpb25QYWdlU2l6ZTogMjUsXG4gICAgICAgICAgICB1c2VFeHRlcm5hbFBhZ2luYXRpb246IHRydWUsXG4gICAgICAgICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZDogJ2pvYlR5cGVJZCcsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnSm9iIFR5cGUnLFxuICAgICAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidWktZ3JpZC1jZWxsLWNvbnRlbnRzXCI+PHNwYW4gbmctYmluZC1odG1sPVwicm93LmVudGl0eS5nZXRJY29uKClcIj48L3NwYW4+IHt7IHJvdy5lbnRpdHkuam9iLmpvYlR5cGUudGl0bGUgfX08L2Rpdj4nLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJIZWFkZXJUZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ1aS1ncmlkLWZpbHRlci1jb250YWluZXJcIj48c2VsZWN0IGNsYXNzPVwiZm9ybS1jb250cm9sIGlucHV0LXNtXCIgbmctbW9kZWw9XCJncmlkLmFwcFNjb3BlLnNlbGVjdGVkSm9iVHlwZVwiPjxvcHRpb24gdmFsdWU9XCJ7eyBncmlkLmFwcFNjb3BlLmpvYlR5cGVWYWx1ZXNbJGluZGV4XS5pZCB9fVwiIG5nLXJlcGVhdD1cImpvYlR5cGUgaW4gZ3JpZC5hcHBTY29wZS5qb2JUeXBlVmFsdWVzIHRyYWNrIGJ5ICRpbmRleFwiPnt7IGdyaWQuYXBwU2NvcGUuam9iVHlwZVZhbHVlc1skaW5kZXhdLm5hbWUgfX0ge3sgZ3JpZC5hcHBTY29wZS5qb2JUeXBlVmFsdWVzWyRpbmRleF0udmVyc2lvbiB9fTwvb3B0aW9uPjwvc2VsZWN0PidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHsgZmllbGQ6ICdjcmVhdGVkJywgZW5hYmxlRmlsdGVyaW5nOiBmYWxzZSwgY2VsbEZpbHRlcjogJ2RhdGU6XFwneXl5eS1NTS1kZCBISDptbTpzc1xcJycgfSxcbiAgICAgICAgICAgICAgICB7IGZpZWxkOiAnbGFzdE1vZGlmaWVkJywgZW5hYmxlRmlsdGVyaW5nOiBmYWxzZSwgY2VsbEZpbHRlcjogJ2RhdGU6XFwneXl5eS1NTS1kZCBISDptbTpzc1xcJycgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiAnc3RhdHVzJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVySGVhZGVyVGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidWktZ3JpZC1maWx0ZXItY29udGFpbmVyXCI+PHNlbGVjdCBjbGFzcz1cImZvcm0tY29udHJvbCBpbnB1dC1zbVwiIG5nLW1vZGVsPVwiZ3JpZC5hcHBTY29wZS5zZWxlY3RlZEpvYlN0YXR1c1wiPjxvcHRpb24gbmctcmVwZWF0PVwic3RhdHVzIGluIGdyaWQuYXBwU2NvcGUuam9iU3RhdHVzIHRyYWNrIGJ5ICRpbmRleFwiPnt7IHN0YXR1cy50b1VwcGVyQ2FzZSgpIH19PC9vcHRpb24+PC9zZWxlY3Q+J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeyBmaWVsZDogJ2lkJywgZGlzcGxheU5hbWU6ICdJRCcsIGVuYWJsZUZpbHRlcmluZzogZmFsc2UgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgb25SZWdpc3RlckFwaTogZnVuY3Rpb24gKGdyaWRBcGkpIHtcbiAgICAgICAgICAgICAgICAvL3NldCBncmlkQXBpIG9uIHNjb3BlXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdyaWRBcGkgPSBncmlkQXBpO1xuICAgICAgICAgICAgICAgICRzY29wZS5ncmlkQXBpLnNlbGVjdGlvbi5vbi5yb3dTZWxlY3Rpb25DaGFuZ2VkKCRzY29wZSwgZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vJGxvY2F0aW9uLnBhdGgoJy9qb2JleGVjdXRpb25zLycgKyByb3cuZW50aXR5LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJvdyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICRzY29wZS5ncmlkQXBpLnBhZ2luYXRpb24ub24ucGFnaW5hdGlvbkNoYW5nZWQoJHNjb3BlLCBmdW5jdGlvbiAoY3VycmVudFBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRQYWdlKGN1cnJlbnRQYWdlLCBwYWdlU2l6ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnc2VsZWN0ZWRKb2JUeXBlJywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoISRzY29wZS5sb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgZ3JpZEZpbHRlci5qb2JUeXBlSWQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0UGFnZShncmlkUGFnZU51bWJlciwgJHNjb3BlLmdyaWRPcHRpb25zLnBhZ2luYXRpb25QYWdlU2l6ZSwgZ3JpZEZpbHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ3NlbGVjdGVkSm9iU3RhdHVzJywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoISRzY29wZS5sb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgZ3JpZEZpbHRlci5qb2JTdGF0dXMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0UGFnZShncmlkUGFnZU51bWJlciwgJHNjb3BlLmdyaWRPcHRpb25zLnBhZ2luYXRpb25QYWdlU2l6ZSwgZ3JpZEZpbHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS5nZXRQYWdlID0gZnVuY3Rpb24gKHBhZ2VOdW1iZXIsIHBhZ2VTaXplKSB7XG4gICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICBncmlkUGFnZU51bWJlciA9IHBhZ2VOdW1iZXI7XG4gICAgICAgICAgICBqb2JFeGVjdXRpb25TZXJ2aWNlLmdldEpvYkV4ZWN1dGlvbnMocGFnZU51bWJlciwgcGFnZVNpemUsIGdyaWRGaWx0ZXIpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3RGF0YSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLmdyaWRPcHRpb25zLnBhZ2luYXRpb25QYWdlU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmV4ZWN1dGlvbnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGEucHVzaChkYXRhLmV4ZWN1dGlvbnNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy5kYXRhID0gbmV3RGF0YTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMudG90YWxJdGVtcyA9IGRhdGEuY291bnQ7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldEpvYkV4ZWN1dGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBqb2JFeGVjdXRpb25TZXJ2aWNlLmdldEpvYkV4ZWN1dGlvbnMoZ3JpZFBhZ2VOdW1iZXIsICRzY29wZS5ncmlkT3B0aW9ucy5wYWdpbmF0aW9uUGFnZVNpemUsIGdyaWRGaWx0ZXIpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlWydzY2FsZS1qb2JleGVjdXRpb25zLXRpbWUnXSA9IG1vbWVudC51dGMoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2VbJ3NjYWxlLWpvYmV4ZWN1dGlvbnMnXSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy50b3RhbEl0ZW1zID0gZGF0YS5jb3VudDtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMuZGF0YSA9IGRhdGEuZXhlY3V0aW9ucztcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGdldEpvYlR5cGVzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0Sm9iVHlwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBqb2JUeXBlU2VydmljZS5nZXRKb2JUeXBlc09uY2UoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmpvYlR5cGVWYWx1ZXMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmpvYlR5cGVWYWx1ZXMudW5zaGlmdCh7IG5hbWU6ICcnLCB2ZXJzaW9uOiAnJywgaWQ6IG51bGwgfSk7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGdldEpvYkV4ZWN1dGlvbnMoKTtcbiAgICAgICAgICAgIG5hdlNlcnZpY2UudXBkYXRlTG9jYXRpb24oJ2pvYnMnKTtcbiAgICAgICAgfTtcbiAgICAgICAgaW5pdGlhbGl6ZSgpO1xuICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmNvbnRyb2xsZXIoJ2pvYlR5cGVzQ29udHJvbGxlcicsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkc2NvcGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBob3RrZXlzLCBzY2FsZVNlcnZpY2UsIG5hdlNlcnZpY2UsIGpvYlR5cGVTZXJ2aWNlLCBzY2FsZUNvbmZpZywgc3VibmF2U2VydmljZSwgbm9kZVNlcnZpY2UsIGxvY2FsU3RvcmFnZSwgdXNlclNlcnZpY2UpIHtcbiAgICAgICAgJHNjb3BlLnJlcXVlc3RlZEpvYlR5cGVJZCA9IHBhcnNlSW50KCRyb3V0ZVBhcmFtcy5pZCk7XG4gICAgICAgICRzY29wZS5tYXN0ZXJDb250YWluZXJTdHlsZSA9ICcnO1xuICAgICAgICAkc2NvcGUuZGV0YWlsQ29udGFpbmVyU3R5bGUgPSAnJztcbiAgICAgICAgJHNjb3BlLmpvYlR5cGVzID0gW107XG4gICAgICAgICRzY29wZS5qb2JUeXBlSWRzID0gW107XG4gICAgICAgICRzY29wZS5qb2JUeXBlQ291bnQgPSAwO1xuICAgICAgICAkc2NvcGUuYWN0aXZlSm9iVHlwZURldGFpbHMgPSB7fTtcbiAgICAgICAgJHNjb3BlLmFjdGl2ZUpvYlR5cGVJbnRlcmZhY2VWYWx1ZXMgPSBbXTtcbiAgICAgICAgJHNjb3BlLmFjdGl2ZUpvYlR5cGVFcnJvcnMgPSBbXTtcbiAgICAgICAgJHNjb3BlLmFjdGl2ZUpvYlR5cGVTdGF0cyA9IHt9O1xuICAgICAgICAkc2NvcGUuc2hvd0pvYlR5cGVFcnJvcnMgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAkc2NvcGUuYWN0aXZlSm9iVHlwZSA9IG51bGw7XG4gICAgICAgICRzY29wZS5oZWFsdGhEYXRhNiA9IHt9O1xuICAgICAgICAkc2NvcGUuaGVhbHRoRGF0YTEyID0ge307XG4gICAgICAgICRzY29wZS5oZWFsdGhEYXRhMjQgPSB7fTtcbiAgICAgICAgJHNjb3BlLmFjdGl2aXR5SWNvbiA9ICc8aSBjbGFzcz1cImZhIGZhLXB1bHNlXCI+JiN4JyArIHNjYWxlQ29uZmlnLmFjdGl2aXR5SWNvbkNvZGUgKyAnPC9pPic7XG4gICAgICAgICRzY29wZS5zZWxlY3RKb2JDbGFzcyA9ICd2aXNpYmxlJztcbiAgICAgICAgJHNjb3BlLmpvYkRldGFpbHNDbGFzcyA9ICdpbnZpc2libGUnO1xuICAgICAgICAkc2NvcGUucGF1c2VCdG5DbGFzcyA9ICdmYS1wYXVzZSc7XG4gICAgICAgICRzY29wZS51c2VyID0gdXNlclNlcnZpY2UuZ2V0VXNlckNyZWRzKCk7XG4gICAgICAgICRzY29wZS5zdWJuYXZMaW5rcyA9IHNjYWxlQ29uZmlnLnN1Ym5hdkxpbmtzLmpvYnM7XG4gICAgICAgIHN1Ym5hdlNlcnZpY2Uuc2V0Q3VycmVudFBhdGgoJ2pvYnMvdHlwZXMnKTtcblxuICAgICAgICB2YXIgam9iVHlwZVN0YXRzID0ge307XG5cbiAgICAgICAgJHNjb3BlLnZpZXdEZXRhaWxzID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAkc2NvcGUuYWN0aXZlSm9iVHlwZSA9IF8uZmluZCgkc2NvcGUuam9iVHlwZXMsICdpZCcsIGlkKTtcbiAgICAgICAgICAgICRzY29wZS5hY3RpdmVKb2JUeXBlLmNyZWF0ZWQgPSBmb3JtYXREYXRlVGltZSgkc2NvcGUuYWN0aXZlSm9iVHlwZS5jcmVhdGVkKTtcbiAgICAgICAgICAgICRzY29wZS5hY3RpdmVKb2JUeXBlLmxhc3RNb2RpZmllZCA9IGZvcm1hdERhdGVUaW1lKCRzY29wZS5hY3RpdmVKb2JUeXBlLmxhc3RNb2RpZmllZCk7XG5cbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCdqb2JzL3R5cGVzLycgKyBpZCk7XG5cbiAgICAgICAgICAgIGdldEpvYlR5cGVEZXRhaWxzKCRzY29wZS5hY3RpdmVKb2JUeXBlLmlkKTtcblxuICAgICAgICAgICAgLy9mb3JtYXRKb2JUeXBlU3RhdHMoKTtcblxuICAgICAgICAgICAgJHNjb3BlLmpvYkRldGFpbHNDbGFzcyA9ICd2aXNpYmxlJztcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RKb2JDbGFzcyA9ICdpbnZpc2libGUnO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS50b2dnbGVQYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS5hY3RpdmVKb2JUeXBlLmlzX3BhdXNlZCA9ICEkc2NvcGUuYWN0aXZlSm9iVHlwZS5pc19wYXVzZWQ7XG4gICAgICAgICAgICAkc2NvcGUuYWN0aXZlSm9iVHlwZURldGFpbHMuaXNfcGF1c2VkID0gJHNjb3BlLmFjdGl2ZUpvYlR5cGUuaXNfcGF1c2VkO1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgam9iVHlwZVNlcnZpY2UudXBkYXRlSm9iVHlwZSgkc2NvcGUuYWN0aXZlSm9iVHlwZURldGFpbHMpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFjdGl2ZUpvYlR5cGVEZXRhaWxzID0gZGF0YTtcbiAgICAgICAgICAgICAgICAkc2NvcGUucGF1c2VCdG5DbGFzcyA9ICRzY29wZS5nZXRQYXVzZUJ1dHRvbkNsYXNzKCRzY29wZS5hY3RpdmVKb2JUeXBlRGV0YWlscy5pc19wYXVzZWQpO1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICAgICAgdG9hc3RyWydlcnJvciddKGVycm9yKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmdldFBhdXNlQnV0dG9uQ2xhc3MgPSBmdW5jdGlvbihpc19wYXVzZWQpe1xuICAgICAgICAgICAgcmV0dXJuIGlzX3BhdXNlZCA/ICdmYS1wbGF5JyA6ICdmYS1wYXVzZSc7XG4gICAgICAgIH1cblxuICAgICAgICAkc2NvcGUuZ2V0Sm9iVHlwZUxpc3RJdGVtQ2xhc3MgPSBmdW5jdGlvbihqb2JUeXBlKXtcbiAgICAgICAgICAgIHJldHVybiBqb2JUeXBlLmlzX3BhdXNlZCA/ICdwYXVzZWQnIDogJyc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZm9ybWF0RGF0ZVRpbWUgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICAgICAgICAgIHJldHVybiBtb21lbnQudXRjKGR0KS50b0lTT1N0cmluZygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnZXRKb2JUeXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGpvYlR5cGVTZXJ2aWNlLmdldEpvYlR5cGVzT25jZSgpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuam9iVHlwZXMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmpvYlR5cGVJZHMgPSBfLnBsdWNrKGRhdGEucmVzdWx0cywgJ2lkJyk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmpvYlR5cGVDb3VudCA9IGRhdGEuY291bnQ7XG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yZXF1ZXN0ZWRKb2JUeXBlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZpZXdEZXRhaWxzKCRzY29wZS5yZXF1ZXN0ZWRKb2JUeXBlSWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhvdGtleXMuYmluZFRvKCRzY29wZSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21ibzogJ2N0cmwrdXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQcmV2aW91cyBKb2IgVHlwZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYWN0aXZlSm9iVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWR4ID0gXy5pbmRleE9mKCRzY29wZS5qb2JUeXBlSWRzLCAkc2NvcGUuYWN0aXZlSm9iVHlwZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmlld0RldGFpbHMoJHNjb3BlLmpvYlR5cGVJZHNbaWR4IC0gMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KS5hZGQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tYm86ICdjdHJsK2Rvd24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdOZXh0IEpvYiBUeXBlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hY3RpdmVKb2JUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZHggPSBfLmluZGV4T2YoJHNjb3BlLmpvYlR5cGVJZHMsICRzY29wZS5hY3RpdmVKb2JUeXBlLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA8ICgkc2NvcGUuam9iVHlwZUlkcy5sZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZpZXdEZXRhaWxzKCRzY29wZS5qb2JUeXBlSWRzW2lkeCArIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnZXRKb2JUeXBlRGV0YWlscyA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgam9iVHlwZVNlcnZpY2UuZ2V0Sm9iVHlwZURldGFpbHMoaWQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWN0aXZlSm9iVHlwZURldGFpbHMgPSBkYXRhO1xuICAgICAgICAgICAgICAgICRzY29wZS5hY3RpdmVKb2JUeXBlSW50ZXJmYWNlVmFsdWVzID0gXy5wYWlycyhkYXRhLmpvYl90eXBlX2ludGVyZmFjZSk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBhdXNlQnRuQ2xhc3MgPSAkc2NvcGUuZ2V0UGF1c2VCdXR0b25DbGFzcygkc2NvcGUuYWN0aXZlSm9iVHlwZURldGFpbHMuaXNfcGF1c2VkKTtcbiAgICAgICAgICAgICAgICAvLyBmb3JtYXQgZXJyb3IgbWFwcGluZ1xuICAgICAgICAgICAgICAgICRzY29wZS5hY3RpdmVKb2JUeXBlRXJyb3JzID0gW107XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dKb2JUeXBlRXJyb3JzID0gXy5rZXlzKGRhdGEuZXJyb3JfbWFwcGluZy5leGl0X2NvZGVzKS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc2hvd0pvYlR5cGVFcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGRhdGEuZXJyb3JfbWFwcGluZy5leGl0X2NvZGVzLCBmdW5jdGlvbiAoZXJyb3JfbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gXy5maW5kKGRhdGEuZXJyb3JzLCAnbmFtZScsIGVycm9yX25hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXRDb2RlID0gXy5pbnZlcnQoZGF0YS5lcnJvcl9tYXBwaW5nLmV4aXRfY29kZXMpW2Vycm9yX25hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFjdGl2ZUpvYlR5cGVFcnJvcnMucHVzaCh7Y29kZTogZXhpdENvZGUsIGRhdGE6IGVycm9yfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGZvcm1hdCBqb2IgdHlwZSBzdGF0c1xuICAgICAgICAgICAgICAgIHZhciBwZXJmb3JtYW5jZSA9IGRhdGEuZ2V0UGVyZm9ybWFuY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgZmFpbHVyZXMgPSBkYXRhLmdldEZhaWx1cmVzKCk7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuYWN0aXZlSm9iVHlwZVN0YXRzID0gcGVyZm9ybWFuY2U7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuaGVhbHRoRGF0YTYgPSB7XG4gICAgICAgICAgICAgICAgICAgIGdhdWdlRGF0YTogcGVyZm9ybWFuY2UuaG91cjYucmF0ZSxcbiAgICAgICAgICAgICAgICAgICAgZG9udXREYXRhOiBmYWlsdXJlcy5ob3VyNlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJHNjb3BlLmhlYWx0aERhdGExMiA9IHtcbiAgICAgICAgICAgICAgICAgICAgZ2F1Z2VEYXRhOiBwZXJmb3JtYW5jZS5ob3VyMTIucmF0ZSxcbiAgICAgICAgICAgICAgICAgICAgZG9udXREYXRhOiBmYWlsdXJlcy5ob3VyMTJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICRzY29wZS5oZWFsdGhEYXRhMjQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGdhdWdlRGF0YTogcGVyZm9ybWFuY2UuaG91cjI0LnJhdGUsXG4gICAgICAgICAgICAgICAgICAgIGRvbnV0RGF0YTogZmFpbHVyZXMuaG91cjI0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdldEpvYlR5cGVzKCk7XG4gICAgICAgICAgICBuYXZTZXJ2aWNlLnVwZGF0ZUxvY2F0aW9uKCdqb2JzJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBzZXQgY29udGFpbmVyIGhlaWdodHMgZXF1YWwgdG8gYXZhaWxhYmxlIHBhZ2UgaGVpZ2h0XG4gICAgICAgICAgICB2YXIgdmlld3BvcnQgPSBzY2FsZVNlcnZpY2UuZ2V0Vmlld3BvcnRTaXplKCksXG4gICAgICAgICAgICAgICAgbWFzdGVyT2Zmc2V0ID0gc2NhbGVDb25maWcuaGVhZGVyT2Zmc2V0LFxuICAgICAgICAgICAgICAgIGRldGFpbE9mZnNldCA9IHNjYWxlQ29uZmlnLmhlYWRlck9mZnNldCArIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25hdi10YWJzJylbMF0uc2Nyb2xsSGVpZ2h0LFxuICAgICAgICAgICAgICAgIG1hc3Rlck1heEhlaWdodCA9IHZpZXdwb3J0LmhlaWdodCAtIG1hc3Rlck9mZnNldCxcbiAgICAgICAgICAgICAgICBkZXRhaWxNYXhIZWlnaHQgPSB2aWV3cG9ydC5oZWlnaHQgLSBkZXRhaWxPZmZzZXQ7XG5cbiAgICAgICAgICAgICRzY29wZS5tYXN0ZXJDb250YWluZXJTdHlsZSA9ICdoZWlnaHQ6ICcgKyBtYXN0ZXJNYXhIZWlnaHQgKyAncHg7IG1heC1oZWlnaHQ6ICcgKyBtYXN0ZXJNYXhIZWlnaHQgKyAncHg7IG92ZXJmbG93LXk6IGF1dG87JztcbiAgICAgICAgICAgICRzY29wZS5kZXRhaWxDb250YWluZXJTdHlsZSA9ICdoZWlnaHQ6ICcgKyBkZXRhaWxNYXhIZWlnaHQgKyAncHg7IG1heC1oZWlnaHQ6ICcgKyBkZXRhaWxNYXhIZWlnaHQgKyAncHg7IG92ZXJmbG93LXk6IGF1dG87JztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaW5pdGlhbGl6ZSgpO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuY29udHJvbGxlcignam9ic0NvbnRyb2xsZXInLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsICRsb2NhdGlvbiwgJHVpYk1vZGFsLCBuYXZTZXJ2aWNlLCBqb2JTZXJ2aWNlLCBqb2JUeXBlU2VydmljZSwgam9iRXhlY3V0aW9uU2VydmljZSwgdWlHcmlkQ29uc3RhbnRzLCBzY2FsZUNvbmZpZywgc3VibmF2U2VydmljZSwgZ3JpZEZhY3RvcnksIGxvYWRTZXJ2aWNlLCBzY2FsZVNlcnZpY2UsIHVzZXJTZXJ2aWNlLCBtb21lbnQsIHRvYXN0cikge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgc2VsZi5qb2JzUGFyYW1zID0ge1xuICAgICAgICAgICAgcGFnZTogbnVsbCwgcGFnZV9zaXplOiBudWxsLCBzdGFydGVkOiBudWxsLCBlbmRlZDogbnVsbCwgb3JkZXI6ICRyb290U2NvcGUuam9ic0NvbnRyb2xsZXJPcmRlciB8fCAnLWxhc3RfbW9kaWZpZWQnLCBzdGF0dXM6IG51bGwsIGpvYl90eXBlX2lkOiBudWxsLCBqb2JfdHlwZV9uYW1lOiBudWxsLCBqb2JfdHlwZV9jYXRlZ29yeTogbnVsbCwgdXJsOiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gY2hlY2sgZm9yIGpvYnNQYXJhbXMgaW4gcXVlcnkgc3RyaW5nLCBhbmQgdXBkYXRlIGFzIG5lY2Vzc2FyeVxuICAgICAgICBfLmZvckVhY2goXy5wYWlycyhzZWxmLmpvYnNQYXJhbXMpLCBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IF8uYXQoJGxvY2F0aW9uLnNlYXJjaCgpLCBwYXJhbVswXSk7XG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHNlbGYuam9ic1BhcmFtc1twYXJhbVswXV0gPSB2YWx1ZS5sZW5ndGggPiAxID8gdmFsdWUgOiB2YWx1ZVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGdyaWRQYWdlTnVtYmVyID0gc2VsZi5qb2JzUGFyYW1zLnBhZ2UgfHwgMSxcbiAgICAgICAgICAgIGZpbHRlcmVkQnlKb2JUeXBlID0gc2VsZi5qb2JzUGFyYW1zLmpvYl90eXBlX2lkID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgZmlsdGVyZWRCeUpvYlN0YXR1cyA9IHNlbGYuam9ic1BhcmFtcy5zdGF0dXMgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgICBmaWx0ZXJlZEJ5T3JkZXIgPSBzZWxmLmpvYnNQYXJhbXMub3JkZXIgPyB0cnVlIDogZmFsc2U7XG5cbiAgICAgICAgJHNjb3BlLmpvYnNEYXRhID0ge307XG4gICAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLmpvYlR5cGVWYWx1ZXMgPSBbXTtcbiAgICAgICAgJHNjb3BlLmpvYkV4ZWN1dGlvbiA9IG51bGw7XG4gICAgICAgICRzY29wZS5zZWxlY3RlZEpvYlR5cGUgPSBzZWxmLmpvYnNQYXJhbXMuam9iX3R5cGVfaWQgfHwgMDtcbiAgICAgICAgJHNjb3BlLmpvYlN0YXR1c1ZhbHVlcyA9IHNjYWxlQ29uZmlnLmpvYlN0YXR1cztcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkSm9iU3RhdHVzID0gc2VsZi5qb2JzUGFyYW1zLnN0YXR1cyB8fCAkc2NvcGUuam9iU3RhdHVzVmFsdWVzWzBdO1xuICAgICAgICAkc2NvcGUuc3VibmF2TGlua3MgPSBzY2FsZUNvbmZpZy5zdWJuYXZMaW5rcy5qb2JzO1xuICAgICAgICAkc2NvcGUuYWN0aW9uQ2xpY2tlZCA9IGZhbHNlO1xuICAgICAgICAkc2NvcGUuZ3JpZFN0eWxlID0gJyc7XG4gICAgICAgICRzY29wZS5yZWFkb25seSA9IHRydWU7XG4gICAgICAgICRzY29wZS5sYXN0TW9kaWZpZWRTdGFydCA9IHNlbGYuam9ic1BhcmFtcy5zdGFydGVkID8gbW9tZW50LnV0YyhzZWxmLmpvYnNQYXJhbXMuc3RhcnRlZCkudG9EYXRlKCkgOiBtb21lbnQudXRjKCkuc3VidHJhY3QoMSwgJ3dlZWtzJykuc3RhcnRPZignZCcpLnRvRGF0ZSgpO1xuICAgICAgICAkc2NvcGUubGFzdE1vZGlmaWVkU3RhcnRQb3B1cCA9IHtcbiAgICAgICAgICAgIG9wZW5lZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLm9wZW5MYXN0TW9kaWZpZWRTdGFydFBvcHVwID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgJHNjb3BlLmxhc3RNb2RpZmllZFN0YXJ0UG9wdXAub3BlbmVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmxhc3RNb2RpZmllZFN0b3AgPSBzZWxmLmpvYnNQYXJhbXMuZW5kZWQgPyBtb21lbnQudXRjKHNlbGYuam9ic1BhcmFtcy5lbmRlZCkudG9EYXRlKCkgOiBtb21lbnQudXRjKCkuZW5kT2YoJ2QnKS50b0RhdGUoKTtcbiAgICAgICAgJHNjb3BlLmxhc3RNb2RpZmllZFN0b3BQb3B1cCA9IHtcbiAgICAgICAgICAgIG9wZW5lZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLm9wZW5MYXN0TW9kaWZpZWRTdG9wUG9wdXAgPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAkc2NvcGUubGFzdE1vZGlmaWVkU3RvcFBvcHVwLm9wZW5lZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5kYXRlTW9kZWxPcHRpb25zID0ge1xuICAgICAgICAgICAgdGltZXpvbmU6ICcrMDAwJ1xuICAgICAgICB9O1xuXG4gICAgICAgIHN1Ym5hdlNlcnZpY2Uuc2V0Q3VycmVudFBhdGgoJ2pvYnMnKTtcblxuICAgICAgICB2YXIgZGVmYXVsdENvbHVtbkRlZnMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZmllbGQ6ICdqb2JfdHlwZScsXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdKb2IgVHlwZScsXG4gICAgICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInVpLWdyaWQtY2VsbC1jb250ZW50c1wiPjxzcGFuIG5nLWJpbmQtaHRtbD1cInJvdy5lbnRpdHkuam9iX3R5cGUuZ2V0SWNvbigpXCI+PC9zcGFuPiB7eyByb3cuZW50aXR5LmpvYl90eXBlLnRpdGxlIH19IHt7IHJvdy5lbnRpdHkuam9iX3R5cGUudmVyc2lvbiB9fTwvZGl2PicsXG4gICAgICAgICAgICAgICAgZmlsdGVySGVhZGVyVGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidWktZ3JpZC1maWx0ZXItY29udGFpbmVyXCI+PHNlbGVjdCBjbGFzcz1cImZvcm0tY29udHJvbCBpbnB1dC1zbVwiIG5nLW1vZGVsPVwiZ3JpZC5hcHBTY29wZS5zZWxlY3RlZEpvYlR5cGVcIj48b3B0aW9uIG5nLWlmPVwiZ3JpZC5hcHBTY29wZS5qb2JUeXBlVmFsdWVzWyRpbmRleF1cIiBuZy1zZWxlY3RlZD1cInt7IGdyaWQuYXBwU2NvcGUuam9iVHlwZVZhbHVlc1skaW5kZXhdLmlkID09IGdyaWQuYXBwU2NvcGUuc2VsZWN0ZWRKb2JUeXBlIH19XCIgdmFsdWU9XCJ7eyBncmlkLmFwcFNjb3BlLmpvYlR5cGVWYWx1ZXNbJGluZGV4XS5pZCB9fVwiIG5nLXJlcGVhdD1cImpvYlR5cGUgaW4gZ3JpZC5hcHBTY29wZS5qb2JUeXBlVmFsdWVzIHRyYWNrIGJ5ICRpbmRleFwiPnt7IGdyaWQuYXBwU2NvcGUuam9iVHlwZVZhbHVlc1skaW5kZXhdLnRpdGxlIH19IHt7IGdyaWQuYXBwU2NvcGUuam9iVHlwZVZhbHVlc1skaW5kZXhdLnZlcnNpb24gfX08L29wdGlvbj48L3NlbGVjdD48L2Rpdj4nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpZWxkOiAnY3JlYXRlZCcsXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdDcmVhdGVkJyxcbiAgICAgICAgICAgICAgICBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ1aS1ncmlkLWNlbGwtY29udGVudHNcIj57eyByb3cuZW50aXR5LmNyZWF0ZWRfZm9ybWF0dGVkIH19PC9kaXY+J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWVsZDogJ2xhc3RfbW9kaWZpZWQnLFxuICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnTGFzdCBNb2RpZmllZCcsXG4gICAgICAgICAgICAgICAgZW5hYmxlRmlsdGVyaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidWktZ3JpZC1jZWxsLWNvbnRlbnRzXCI+e3sgcm93LmVudGl0eS5sYXN0X21vZGlmaWVkX2Zvcm1hdHRlZCB9fTwvZGl2PidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IGZpZWxkOiAnZHVyYXRpb24nLCBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlLCBlbmFibGVTb3J0aW5nOiBmYWxzZSwgY2VsbFRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInVpLWdyaWQtY2VsbC1jb250ZW50c1wiPnt7IHJvdy5lbnRpdHkuZ2V0RHVyYXRpb24oKSB9fTwvZGl2PicgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWVsZDogJ3N0YXR1cycsXG4gICAgICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInVpLWdyaWQtY2VsbC1jb250ZW50c1wiPnt7IHJvdy5lbnRpdHkuc3RhdHVzIH19IDxidXR0b24gbmctc2hvdz1cIigoIWdyaWQuYXBwU2NvcGUucmVhZG9ubHkpICYmIChyb3cuZW50aXR5LnN0YXR1cyA9PT0gXFwnRkFJTEVEXFwnIHx8IHJvdy5lbnRpdHkuc3RhdHVzID09PSBcXCdDQU5DRUxFRFxcJykpXCIgbmctY2xpY2s9XCJncmlkLmFwcFNjb3BlLnJlcXVldWVKb2JzKHsgam9iX2lkczogW3Jvdy5lbnRpdHkuaWRdIH0pXCIgY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi1kZWZhdWx0XCIgdGl0bGU9XCJSZXF1ZXVlIEpvYlwiPjxpIGNsYXNzPVwiZmEgZmEtcmVwZWF0XCI+PC9pPjwvYnV0dG9uPiA8YnV0dG9uIG5nLXNob3c9XCIhZ3JpZC5hcHBTY29wZS5yZWFkb25seSAmJiByb3cuZW50aXR5LnN0YXR1cyAhPT0gXFwnQ09NUExFVEVEXFwnICYmIHJvdy5lbnRpdHkuc3RhdHVzICE9PSBcXCdDQU5DRUxFRFxcJ1wiIG5nLWNsaWNrPVwiZ3JpZC5hcHBTY29wZS5jYW5jZWxKb2Iocm93LmVudGl0eSlcIiBjbGFzcz1cImJ0biBidG4teHMgYnRuLWRlZmF1bHRcIiB0aXRsZT1cIkNhbmNlbCBKb2JcIj48aSBjbGFzcz1cImZhIGZhLWJhblwiPjwvaT48L2J1dHRvbj48L2Rpdj4nLFxuICAgICAgICAgICAgICAgIGZpbHRlckhlYWRlclRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInVpLWdyaWQtZmlsdGVyLWNvbnRhaW5lclwiPjxzZWxlY3QgY2xhc3M9XCJmb3JtLWNvbnRyb2wgaW5wdXQtc21cIiBuZy1tb2RlbD1cImdyaWQuYXBwU2NvcGUuc2VsZWN0ZWRKb2JTdGF0dXNcIj48b3B0aW9uIG5nLXNlbGVjdGVkPVwie3sgZ3JpZC5hcHBTY29wZS5qb2JTdGF0dXNWYWx1ZXNbJGluZGV4XSA9PSBncmlkLmFwcFNjb3BlLnNlbGVjdGVkSm9iU3RhdHVzIH19XCIgdmFsdWU9XCJ7eyBncmlkLmFwcFNjb3BlLmpvYlN0YXR1c1ZhbHVlc1skaW5kZXhdIH19XCIgbmctcmVwZWF0PVwic3RhdHVzIGluIGdyaWQuYXBwU2NvcGUuam9iU3RhdHVzVmFsdWVzIHRyYWNrIGJ5ICRpbmRleFwiPnt7IHN0YXR1cy50b1VwcGVyQ2FzZSgpIH19PC9vcHRpb24+PC9zZWxlY3Q+PC9kaXY+J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWVsZDogJ2lkJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogJ0xvZycsXG4gICAgICAgICAgICAgICAgZW5hYmxlRmlsdGVyaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzb3J0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDYwLFxuICAgICAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ1aS1ncmlkLWNlbGwtY29udGVudHMgdGV4dC1jZW50ZXJcIj48YnV0dG9uIG5nLWNsaWNrPVwiZ3JpZC5hcHBTY29wZS5zaG93TG9nKHJvdy5lbnRpdHkuaWQpXCIgY2xhc3M9XCJidG4gYnRuLXhzIGJ0bi1kZWZhdWx0XCI+PGkgY2xhc3M9XCJmYSBmYS1maWxlLXRleHRcIj48L2k+PC9idXR0b24+PC9kaXY+J1xuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuXG4gICAgICAgICRzY29wZS5ncmlkT3B0aW9ucyA9IGdyaWRGYWN0b3J5LmRlZmF1bHRHcmlkT3B0aW9ucygpO1xuICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMucGFnaW5hdGlvbkN1cnJlbnRQYWdlID0gcGFyc2VJbnQoc2VsZi5qb2JzUGFyYW1zLnBhZ2UgfHwgMSk7XG4gICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy5wYWdpbmF0aW9uUGFnZVNpemUgPSBwYXJzZUludChzZWxmLmpvYnNQYXJhbXMucGFnZV9zaXplKSB8fCAkc2NvcGUuZ3JpZE9wdGlvbnMucGFnaW5hdGlvblBhZ2VTaXplO1xuICAgICAgICB2YXIgY29sRGVmcyA9ICRyb290U2NvcGUuY29sRGVmcyA/ICRyb290U2NvcGUuY29sRGVmcyA6IGRlZmF1bHRDb2x1bW5EZWZzO1xuICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMuY29sdW1uRGVmcyA9IGdyaWRGYWN0b3J5LmFwcGx5U29ydENvbmZpZyhjb2xEZWZzLCBzZWxmLmpvYnNQYXJhbXMpO1xuICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMuZGF0YSA9IFtdO1xuICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMub25SZWdpc3RlckFwaSA9IGZ1bmN0aW9uIChncmlkQXBpKSB7XG4gICAgICAgICAgICAgICAgLy9zZXQgZ3JpZEFwaSBvbiBzY29wZVxuICAgICAgICAgICAgICAgICRzY29wZS5ncmlkQXBpID0gZ3JpZEFwaTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ3JpZEFwaS5zZWxlY3Rpb24ub24ucm93U2VsZWN0aW9uQ2hhbmdlZCgkc2NvcGUsIGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hY3Rpb25DbGlja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWN0aW9uQ2xpY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvam9icy9qb2IvJyArIHJvdy5lbnRpdHkuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICRzY29wZS5ncmlkQXBpLnBhZ2luYXRpb24ub24ucGFnaW5hdGlvbkNoYW5nZWQoJHNjb3BlLCBmdW5jdGlvbiAoY3VycmVudFBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuam9ic1BhcmFtcy5wYWdlID0gY3VycmVudFBhZ2U7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuam9ic1BhcmFtcy5wYWdlX3NpemUgPSBwYWdlU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2dyaWRBcGknKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlclJlc3VsdHMoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ3JpZEFwaS5jb3JlLm9uLnNvcnRDaGFuZ2VkKCRzY29wZSwgZnVuY3Rpb24gKGdyaWQsIHNvcnRDb2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuY29sRGVmcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCgkc2NvcGUuZ3JpZEFwaS5ncmlkLmNvbHVtbnMsIGZ1bmN0aW9uIChjb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbC5jb2xEZWYuc29ydCA9IGNvbC5zb3J0O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5jb2xEZWZzID0gJHNjb3BlLmdyaWRBcGkuZ3JpZC5vcHRpb25zLmNvbHVtbkRlZnM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3J0QXJyID0gW107XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChzb3J0Q29sdW1ucywgZnVuY3Rpb24gKGNvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc29ydEFyci5wdXNoKGNvbC5zb3J0LmRpcmVjdGlvbiA9PT0gJ2Rlc2MnID8gJy0nICsgY29sLmZpZWxkIDogY29sLmZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlSm9iT3JkZXIoc29ydEFycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgJHNjb3BlLnNob3dTdGF0dXMgPSBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5pbmNsdWRlcygkc2NvcGUuam9iU3RhdHVzVmFsdWVzLCBzdGF0dXMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYudXBkYXRlSm9iVHlwZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IHNlbGYuam9ic1BhcmFtcy5qb2JfdHlwZV9pZCkge1xuICAgICAgICAgICAgICAgIHNlbGYuam9ic1BhcmFtcy5wYWdlID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuam9ic1BhcmFtcy5qb2JfdHlwZV9pZCA9IHZhbHVlID09IDAgPyBudWxsIDogdmFsdWU7XG4gICAgICAgICAgICBzZWxmLmpvYnNQYXJhbXMucGFnZV9zaXplID0gJHNjb3BlLmdyaWRPcHRpb25zLnBhZ2luYXRpb25QYWdlU2l6ZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZWxlY3RlZEpvYlR5cGUnKTtcbiAgICAgICAgICAgIGlmICghJHNjb3BlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyUmVzdWx0cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ3NlbGVjdGVkSm9iVHlwZScsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCRzY29wZS5sb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcmVkQnlKb2JUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlSm9iVHlwZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZEJ5Sm9iVHlwZSA9IHZhbHVlICE9IDA7XG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGVKb2JUeXBlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2VsZi51cGRhdGVKb2JTdGF0dXMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBzZWxmLmpvYnNQYXJhbXMuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5qb2JzUGFyYW1zLnBhZ2UgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5qb2JzUGFyYW1zLnN0YXR1cyA9IHZhbHVlID09PSAnVklFVyBBTEwnID8gbnVsbCA6IHZhbHVlO1xuICAgICAgICAgICAgc2VsZi5qb2JzUGFyYW1zLnBhZ2Vfc2l6ZSA9ICRzY29wZS5ncmlkT3B0aW9ucy5wYWdpbmF0aW9uUGFnZVNpemU7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc2VsZWN0ZWRKb2JTdGF0dXMnKTtcbiAgICAgICAgICAgIGlmICghJHNjb3BlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyUmVzdWx0cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ3NlbGVjdGVkSm9iU3RhdHVzJywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRCeUpvYlN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZUpvYlN0YXR1cyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZEJ5Sm9iU3RhdHVzID0gdmFsdWUgIT09ICdWSUVXIEFMTCc7XG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGVKb2JTdGF0dXModmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBzZWxmLnVwZGF0ZUpvYk9yZGVyID0gZnVuY3Rpb24gKHNvcnRBcnIpIHtcbiAgICAgICAgICAgIHNlbGYuam9ic1BhcmFtcy5vcmRlciA9IHNvcnRBcnIubGVuZ3RoID4gMCA/IHNvcnRBcnIgOiBudWxsO1xuICAgICAgICAgICAgZmlsdGVyZWRCeU9yZGVyID0gc29ydEFyci5sZW5ndGggPiAwO1xuICAgICAgICAgICAgJHNjb3BlLmZpbHRlclJlc3VsdHMoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdsYXN0TW9kaWZpZWRTdGFydCcsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCEkc2NvcGUubG9hZGluZykge1xuICAgICAgICAgICAgICAgIHNlbGYuam9ic1BhcmFtcy5zdGFydGVkID0gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyUmVzdWx0cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdsYXN0TW9kaWZpZWRTdG9wJywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoISRzY29wZS5sb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5qb2JzUGFyYW1zLmVuZGVkID0gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyUmVzdWx0cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvKiRzY29wZS4kd2F0Y2goJ2dyaWRBcGknLCBmdW5jdGlvbiAoZ3JpZEFwaSkge1xuICAgICAgICAgICAgaWYgKGZpbHRlcmVkQnlPcmRlcikge1xuICAgICAgICAgICAgICAgIGdyaWRBcGkuY29yZS5yYWlzZS5zb3J0Q2hhbmdlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTsqL1xuXG4gICAgICAgICRzY29wZS5zaG93TG9nID0gZnVuY3Rpb24gKGpvYklkKSB7XG4gICAgICAgICAgICAvLyBzaG93IGxvZyBtb2RhbFxuICAgICAgICAgICAgJHNjb3BlLmFjdGlvbkNsaWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3Nob3cgbG9nIG1vZGFsJyk7XG4gICAgICAgICAgICBqb2JTZXJ2aWNlLmdldEpvYkRldGFpbChqb2JJZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEpvYiA9IGRhdGEuam9iX3R5cGUudGl0bGUgKyAnICcgKyBkYXRhLmpvYl90eXBlLnZlcnNpb247XG4gICAgICAgICAgICAgICAgJHNjb3BlLmpvYkV4ZWN1dGlvbiA9IGRhdGEuZ2V0TGF0ZXN0RXhlY3V0aW9uKCk7XG4gICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzaG93TG9nLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ2xvZy1tb2RhbC13aW5kb3cnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZmlsdGVyUmVzdWx0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF8uZm9yRWFjaChfLnBhaXJzKHNlbGYuam9ic1BhcmFtcyksIGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2gocGFyYW1bMF0sIHBhcmFtWzFdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgc2VsZi5nZXRKb2JzKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnJlcXVldWVKb2JzID0gZnVuY3Rpb24gKGpvYnNQYXJhbXMpIHtcbiAgICAgICAgICAgIGpvYnNQYXJhbXMgPSBqb2JzUGFyYW1zIHx8IHsgc3RhcnRlZDogJHNjb3BlLmxhc3RNb2RpZmllZFN0YXJ0LnRvSVNPU3RyaW5nKCksIGVuZGVkOiAkc2NvcGUubGFzdE1vZGlmaWVkU3RvcC50b0lTT1N0cmluZygpfTtcbiAgICAgICAgICAgICRzY29wZS5hY3Rpb25DbGlja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGxvYWRTZXJ2aWNlLnJlcXVldWVKb2JzKGpvYnNQYXJhbXMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRvYXN0clsnc3VjY2VzcyddKCdSZXF1ZXVlIFN1Y2Nlc3NmdWwnKTtcbiAgICAgICAgICAgICAgICBzZWxmLmdldEpvYnMoKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRvYXN0clsnZXJyb3InXSgnUmVxdWV1ZSByZXF1ZXN0IGZhaWxlZCcpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmNhbmNlbEpvYiA9IGZ1bmN0aW9uIChqb2IpIHtcbiAgICAgICAgICAgICRzY29wZS5hY3Rpb25DbGlja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvcmlnaW5hbFN0YXR1cyA9IGpvYi5zdGF0dXM7XG4gICAgICAgICAgICBqb2Iuc3RhdHVzID0gJ0NBTkNFTCc7XG4gICAgICAgICAgICBqb2JTZXJ2aWNlLnVwZGF0ZUpvYihqb2IuaWQsIHsgc3RhdHVzOiAnQ0FOQ0VMRUQnIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB0b2FzdHJbJ3N1Y2Nlc3MnXSgnSm9iIENhbmNlbGVkJyk7XG4gICAgICAgICAgICAgICAgam9iLnN0YXR1cyA9ICdDQU5DRUxFRCc7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0b2FzdHJbJ2Vycm9yJ10oZXJyb3IpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICBqb2Iuc3RhdHVzID0gb3JpZ2luYWxTdGF0dXM7XG4gICAgICAgICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5nZXRKb2JzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgam9iU2VydmljZS5nZXRKb2JzT25jZShzZWxmLmpvYnNQYXJhbXMpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuam9ic0RhdGEgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLnRvdGFsSXRlbXMgPSBkYXRhLmNvdW50O1xuICAgICAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy5kYXRhID0gZGF0YS5yZXN1bHRzO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuZ2V0Sm9iVHlwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBqb2JUeXBlU2VydmljZS5nZXRKb2JUeXBlc09uY2UoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmpvYlR5cGVWYWx1ZXMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmpvYlR5cGVWYWx1ZXMudW5zaGlmdCh7IG5hbWU6ICdWSUVXIEFMTCcsIHRpdGxlOiAnVklFVyBBTEwnLCB2ZXJzaW9uOiAnJywgaWQ6IDAgfSk7XG4gICAgICAgICAgICAgICAgLyppZiAoIWZpbHRlcmVkQnlKb2JUeXBlICYmICFmaWx0ZXJlZEJ5Sm9iU3RhdHVzICYmICFmaWx0ZXJlZEJ5T3JkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5nZXRKb2JzKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlcmVkQnlPcmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGVKb2JPcmRlcihzZWxmLmpvYnNQYXJhbXMub3JkZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSovXG4gICAgICAgICAgICAgICAgc2VsZi5nZXRKb2JzKHNlbGYuam9ic1BhcmFtcyk7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgJHJvb3RTY29wZS5jb2xEZWZzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIC8vIHJvb3QgY29sdW1uIGRlZnMgaGF2ZSBub3QgYmVlbiBhbHRlcmVkIGJ5IHVzZXIsIHNvIHNldCB1cCBkZWZhdWx0c1xuICAgICAgICAgICAgICAgIGlmICghc2VsZi5qb2JzUGFyYW1zLm9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuam9ic1BhcmFtcy5vcmRlciA9ICctbGFzdF9tb2RpZmllZCc7XG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ29yZGVyJywgc2VsZi5qb2JzUGFyYW1zLm9yZGVyKS5yZXBsYWNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghc2VsZi5qb2JzUGFyYW1zLnBhZ2Vfc2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmpvYnNQYXJhbXMucGFnZV9zaXplID0gJHNjb3BlLmdyaWRPcHRpb25zLnBhZ2luYXRpb25QYWdlU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnNlYXJjaCgncGFnZV9zaXplJywgc2VsZi5qb2JzUGFyYW1zLnBhZ2Vfc2l6ZSkucmVwbGFjZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYuam9ic1BhcmFtcy5zdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuam9ic1BhcmFtcy5zdGFydGVkID0gbW9tZW50LnV0Yygkc2NvcGUubGFzdE1vZGlmaWVkU3RhcnQpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ3N0YXJ0ZWQnLCBzZWxmLmpvYnNQYXJhbXMuc3RhcnRlZCkucmVwbGFjZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYuam9ic1BhcmFtcy5lbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmpvYnNQYXJhbXMuZW5kZWQgPSBtb21lbnQudXRjKCRzY29wZS5sYXN0TW9kaWZpZWRTdG9wKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdlbmRlZCcsIHNlbGYuam9ic1BhcmFtcy5lbmRlZCkucmVwbGFjZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuZ2V0Sm9iVHlwZXMoKTtcbiAgICAgICAgICAgICRyb290U2NvcGUudXNlciA9IHVzZXJTZXJ2aWNlLmdldFVzZXJDcmVkcygpO1xuXG4gICAgICAgICAgICBpZiAoJHJvb3RTY29wZS51c2VyKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlYWRvbmx5ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuYXZTZXJ2aWNlLnVwZGF0ZUxvY2F0aW9uKCdqb2JzJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5pbml0aWFsaXplKCk7XG5cbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBzZXQgY29udGFpbmVyIGhlaWdodHMgZXF1YWwgdG8gYXZhaWxhYmxlIHBhZ2UgaGVpZ2h0XG4gICAgICAgICAgICB2YXIgdmlld3BvcnQgPSBzY2FsZVNlcnZpY2UuZ2V0Vmlld3BvcnRTaXplKCksXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gc2NhbGVDb25maWcuaGVhZGVyT2Zmc2V0ICsgc2NhbGVDb25maWcuZGF0ZUZpbHRlck9mZnNldCxcbiAgICAgICAgICAgICAgICBncmlkTWF4SGVpZ2h0ID0gdmlld3BvcnQuaGVpZ2h0IC0gb2Zmc2V0O1xuXG4gICAgICAgICAgICAkc2NvcGUuZ3JpZFN0eWxlID0gJ2hlaWdodDogJyArIGdyaWRNYXhIZWlnaHQgKyAncHg7IG1heC1oZWlnaHQ6ICcgKyBncmlkTWF4SGVpZ2h0ICsgJ3B4OyBvdmVyZmxvdy15OiBhdXRvOyc7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpe1xuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmNvbnRyb2xsZXIoJ2pvYkV4ZWN1dGlvbkxvZ0NvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsICRsb2NhdGlvbiwgJGVsZW1lbnQsICR0aW1lb3V0LCBqb2JFeGVjdXRpb25TZXJ2aWNlLCBzY2FsZUNvbmZpZykge1xuICAgICAgICAndXNlIHN0cmljdCc7XG4gICAgICAgIHZhciBpbml0aWFsaXplID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgJHNjb3BlLmZvcmNlU2Nyb2xsID0gdHJ1ZTtcblxuICAgICAgICAgICAgJHNjb3BlLmpvYkxvZ0Vycm9yID0gbnVsbDtcblxuICAgICAgICAgICAgJHNjb3BlLiR3YXRjaCgnZXhlY3V0aW9uJywgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZXhlY3V0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGpvYkV4ZWN1dGlvblNlcnZpY2UuZ2V0TG9nKCRzY29wZS5leGVjdXRpb24uaWQpLnRoZW4obnVsbCwgbnVsbCwgZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldCBkaWZmZXJlbmNlIG9mIG1heCBzY3JvbGwgbGVuZ3RoIGFuZCBjdXJyZW50IHNjcm9sbCBsZW5ndGguXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9nUmVzdWx0ID0gcmVzdWx0LmV4ZWN1dGlvbl9sb2c7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuJHJlc29sdmVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGl2ID0gJCgkZWxlbWVudFswXSkuZmluZCgnLmJhc2gnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Nyb2xsRGlmZiA9IChkaXYuc2Nyb2xsVG9wKCkgKyBkaXYucHJvcCgnb2Zmc2V0SGVpZ2h0JykpIC0gZGl2LnByb3AoJ3Njcm9sbEhlaWdodCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5zY3JvbGxEaWZmID49IDApeyAkc2NvcGUuZm9yY2VTY3JvbGwgPSB0cnVlOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4ZWNMb2cgPSBsb2dSZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzVGV4dCAmJiByZXN1bHQuc3RhdHVzVGV4dCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmpvYkxvZ0Vycm9yU3RhdHVzID0gcmVzdWx0LnN0YXR1c1RleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5qb2JMb2dFcnJvciA9ICdVbmFibGUgdG8gcmV0cmlldmUgam9iIGxvZ3MuJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkc2NvcGUuJHdhdGNoKCdleGVjTG9nJywgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZXhlY0xvZykge1xuICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUuZm9yY2VTY3JvbGwgfHwgJHNjb3BlLnNjcm9sbERpZmYgPj0gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mb3JjZVNjcm9sbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JsSGVpZ2h0ID0gJCgkZWxlbWVudFswXSkuZmluZCgnLmJhc2gnKS5wcm9wKFwic2Nyb2xsSGVpZ2h0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJGVsZW1lbnRbMF0pLmZpbmQoJy5iYXNoJykuc2Nyb2xsVG9wKHNjcmxIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNjcm9sbGl0ZW0gPSBmdW5jdGlvbihpdGVtKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpdGVtKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuc3Rkb3V0Q2hhbmdlZCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc3Rkb3V0IGNoYW5nZWQuJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaW5pdGlhbGl6ZSgpO1xuXG4gICAgfSkuZGlyZWN0aXZlKCdqb2JFeGVjdXRpb25Mb2cnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnam9iRXhlY3V0aW9uTG9nQ29udHJvbGxlcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvam9icy9kaXJlY3RpdmVzL2pvYkV4ZWN1dGlvbkxvZ1RlbXBsYXRlLmh0bWwnLFxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgICAgZXhlY3V0aW9uOiAnPSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmNvbnRyb2xsZXIoJ2Fpc0pvYkhlYWx0aENvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHNjb3BlLCBqb2JUeXBlU2VydmljZSkge1xuICAgICAgICAkc2NvcGUubG9hZGluZ0pvYkhlYWx0aCA9IHRydWU7XG4gICAgICAgICRzY29wZS5qb2JIZWFsdGhFcnJvciA9IG51bGw7XG4gICAgICAgICRzY29wZS5qb2JIZWFsdGhFcnJvclN0YXR1cyA9IG51bGw7XG4gICAgICAgICRzY29wZS5qb2JIZWFsdGggPSB7fTtcblxuICAgICAgICB2YXIgZ2V0Sm9iVHlwZVN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGpvYlR5cGVTZXJ2aWNlLmdldEpvYlR5cGVTdGF0dXMobnVsbCwgbnVsbCwgJHNjb3BlLmR1cmF0aW9uLCBudWxsKS50aGVuKG51bGwsIG51bGwsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuJHJlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5qb2JIZWFsdGhFcnJvciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5qb2JUeXBlU3RhdHVzID0gZGF0YS5yZXN1bHRzO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmFpbGVkID0gMDtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcGVyZm9ybWFuY2UgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWx1cmVzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGRhdGEucmVzdWx0cywgZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVyZm9ybWFuY2UgPSBzdGF0dXMuZ2V0UGVyZm9ybWFuY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbCA9ICRzY29wZS50b3RhbCArIHBlcmZvcm1hbmNlLnRvdGFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZhaWxlZCA9ICRzY29wZS5mYWlsZWQgKyBwZXJmb3JtYW5jZS5mYWlsZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsdXJlcy5wdXNoKHN0YXR1cy5nZXRGYWlsdXJlcygpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGZhaWx1cmVEYXRhID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW1GYWlsdXJlcyA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhRmFpbHVyZXMgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtRmFpbHVyZXMgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChmYWlsdXJlcywgZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChmLCBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlLnN0YXR1cyA9PT0gJ1NZU1RFTScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3lzdGVtRmFpbHVyZXMgPSBzeXN0ZW1GYWlsdXJlcyArIHR5cGUuY291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlLnN0YXR1cyA9PT0gJ0RBVEEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFGYWlsdXJlcyA9IGRhdGFGYWlsdXJlcyArIHR5cGUuY291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlLnN0YXR1cyA9PT0gJ0FMR09SSVRITScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxnb3JpdGhtRmFpbHVyZXMgPSBhbGdvcml0aG1GYWlsdXJlcyArIHR5cGUuY291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzeXN0ZW1GYWlsdXJlcyA+IDAgfHwgZGF0YUZhaWx1cmVzID4gMCB8fCBhbGdvcml0aG1GYWlsdXJlcyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzeXN0ZW1GYWlsdXJlcyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsdXJlRGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnU1lTVEVNJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IHN5c3RlbUZhaWx1cmVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YUZhaWx1cmVzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWx1cmVEYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdEQVRBJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IGRhdGFGYWlsdXJlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsZ29yaXRobUZhaWx1cmVzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWx1cmVEYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdBTEdPUklUSE0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogYWxnb3JpdGhtRmFpbHVyZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5qb2JIZWFsdGggPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnYXVnZURhdGE6ICRzY29wZS50b3RhbCA9PT0gMCA/IDAgOiAxMDAgLSAoKCRzY29wZS5mYWlsZWQgLyAkc2NvcGUudG90YWwpICogMTAwKS50b0ZpeGVkKDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9udXREYXRhOiBmYWlsdXJlRGF0YVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYnJvYWRjYXN0RGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdqb2JUeXBlU3RhdHVzJywgJHNjb3BlLmpvYlR5cGVTdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzVGV4dCAmJiBkYXRhLnN0YXR1c1RleHQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuam9iSGVhbHRoRXJyb3JTdGF0dXMgPSBkYXRhLnN0YXR1c1RleHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmpvYkhlYWx0aEVycm9yID0gJ1VuYWJsZSB0byByZXRyaWV2ZSBqb2Igc3RhdGlzdGljcy4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZ0pvYkhlYWx0aCA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZ2V0Sm9iVHlwZVN0YXR1cygpO1xuICAgIH0pLmRpcmVjdGl2ZSgnYWlzSm9iSGVhbHRoJywgZnVuY3Rpb24oKXtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVzYWdlOiA8YWlzLWpvYi1oZWFsdGggLz5cbiAgICAgICAgICoqL1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udHJvbGxlcjogJ2Fpc0pvYkhlYWx0aENvbnRyb2xsZXInLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL2pvYnMvZGlyZWN0aXZlcy9qb2JIZWFsdGhUZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAnPScsXG4gICAgICAgICAgICAgICAgYnJvYWRjYXN0RGF0YTogJz0nLCAvLyBzZXQgdG8gdHJ1ZSB3aGVuIHVzaW5nIGFub3RoZXIgd2lkZ2V0IGluIHRoZSBzYW1lIHZpZXcgdGhhdCBhbHNvIGNhbGxzIGdldEpvYlR5cGVTdGF0dXNcbiAgICAgICAgICAgICAgICBzaG93RGVzY3JpcHRpb246ICc9J1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmNvbnRyb2xsZXIoJ2pvYlR5cGVJbnRlcmZhY2VEaXJlY3RpdmVDb250cm9sbGVyJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICRzY29wZSwgam9iVHlwZVNlcnZpY2UpIHtcblxuICAgIH0pLmRpcmVjdGl2ZSgnYWlzSm9iVHlwZUludGVyZmFjZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2FnZTogPGFpcy1qb2ItaGVhbHRoIC8+XG4gICAgICAgICAqKi9cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdqb2JUeXBlSW50ZXJmYWNlRGlyZWN0aXZlQ29udHJvbGxlcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ21vZHVsZXMvam9icy9kaXJlY3RpdmVzL2pvYlR5cGVJbnRlcmZhY2VUZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGpvYlR5cGVJbnRlcmZhY2U6ICc9J1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuZmFjdG9yeSgnSm9iJywgZnVuY3Rpb24gKHNjYWxlQ29uZmlnLCBKb2JUeXBlLCBzY2FsZVNlcnZpY2UpIHtcbiAgICAgICAgdmFyIEpvYiA9IGZ1bmN0aW9uIChpZCwgam9iX3R5cGUsIGV2ZW50LCBlcnJvciwgc3RhdHVzLCBwcmlvcml0eSwgbnVtX2V4ZXMsIHRpbWVvdXQsIG1heF90cmllcywgY3B1c19yZXF1aXJlZCwgbWVtX3JlcXVpcmVkLCBkaXNrX2luX3JlcXVpcmVkLCBkaXNrX291dF9yZXF1aXJlZCwgY3JlYXRlZCwgcXVldWVkLCBzdGFydGVkLCBlbmRlZCwgbGFzdF9zdGF0dXNfY2hhbmdlLCBsYXN0X21vZGlmaWVkKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgICAgICB0aGlzLmpvYl90eXBlID0gSm9iVHlwZS50cmFuc2Zvcm1lcihqb2JfdHlwZSk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gICAgICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgICAgICAgIHRoaXMubnVtX2V4ZXMgPSBudW1fZXhlcztcbiAgICAgICAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgICAgICB0aGlzLm1heF90cmllcyA9IG1heF90cmllcztcbiAgICAgICAgICAgIHRoaXMuY3B1c19yZXF1aXJlZCA9IGNwdXNfcmVxdWlyZWQ7XG4gICAgICAgICAgICB0aGlzLm1lbV9yZXF1aXJlZCA9IG1lbV9yZXF1aXJlZDtcbiAgICAgICAgICAgIHRoaXMuZGlza19pbl9yZXF1aXJlZCA9IGRpc2tfaW5fcmVxdWlyZWQ7XG4gICAgICAgICAgICB0aGlzLmRpc2tfb3V0X3JlcXVpcmVkID0gZGlza19vdXRfcmVxdWlyZWQ7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZWQgPSBjcmVhdGVkO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVkX2Zvcm1hdHRlZCA9IG1vbWVudC51dGMoY3JlYXRlZCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIHRoaXMucXVldWVkID0gcXVldWVkO1xuICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gc3RhcnRlZDtcbiAgICAgICAgICAgIHRoaXMuZW5kZWQgPSBlbmRlZDtcbiAgICAgICAgICAgIHRoaXMubGFzdF9zdGF0dXNfY2hhbmdlID0gbGFzdF9zdGF0dXNfY2hhbmdlO1xuICAgICAgICAgICAgdGhpcy5sYXN0X21vZGlmaWVkID0gbGFzdF9tb2RpZmllZDtcbiAgICAgICAgICAgIHRoaXMubGFzdF9tb2RpZmllZF9mb3JtYXR0ZWQgPSBtb21lbnQudXRjKGxhc3RfbW9kaWZpZWQpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgSm9iLnByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIGdldER1cmF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zdGFydGVkLFxuICAgICAgICAgICAgICAgICAgICBlbmQgPSB0aGlzLmVuZGVkID8gdGhpcy5lbmRlZCA6IG1vbWVudC51dGMoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzY2FsZVNlcnZpY2UuY2FsY3VsYXRlRHVyYXRpb24oc3RhcnQsIGVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3RhdGljIG1ldGhvZHMsIGFzc2lnbmVkIHRvIGNsYXNzXG4gICAgICAgIEpvYi5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSm9iKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmpvYl90eXBlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmV2ZW50LFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmVycm9yLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmlvcml0eSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5udW1fZXhlcyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS50aW1lb3V0LFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm1heF90cmllcyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jcHVzX3JlcXVpcmVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm1lbV9yZXF1aXJlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kaXNrX2luX3JlcXVpcmVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmRpc2tfb3V0X3JlcXVpcmVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNyZWF0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucXVldWVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN0YXJ0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZW5kZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubGFzdF9zdGF0dXNfY2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxhc3RfbW9kaWZpZWRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBKb2IoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBKb2IudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoSm9iLmJ1aWxkKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEpvYi5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gSm9iO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuZmFjdG9yeSgnSm9iRGV0YWlsRXZlbnQnLCBmdW5jdGlvbiAoSm9iRGV0YWlsRXZlbnRSdWxlKSB7XG4gICAgICAgIHZhciBKb2JEZXRhaWxFdmVudCA9IGZ1bmN0aW9uIChpZCwgdHlwZSwgcnVsZSwgb2NjdXJyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICB0aGlzLnJ1bGUgPSBKb2JEZXRhaWxFdmVudFJ1bGUudHJhbnNmb3JtZXIocnVsZSk7XG4gICAgICAgICAgICB0aGlzLm9jY3VycmVkID0gb2NjdXJyZWQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgSm9iRGV0YWlsRXZlbnQucHJvdG90eXBlID0ge1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3RhdGljIG1ldGhvZHMsIGFzc2lnbmVkIHRvIGNsYXNzXG4gICAgICAgIEpvYkRldGFpbEV2ZW50LmJ1aWxkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBKb2JEZXRhaWxFdmVudChcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnJ1bGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEub2NjdXJyZWRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBKb2JEZXRhaWxFdmVudCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEpvYkRldGFpbEV2ZW50LnRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgICAgICAgICAubWFwKEpvYkRldGFpbEV2ZW50LmJ1aWxkKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEpvYkRldGFpbEV2ZW50LmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBKb2JEZXRhaWxFdmVudDtcbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ0pvYkRldGFpbEV2ZW50UnVsZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIEpvYkRldGFpbEV2ZW50UnVsZSA9IGZ1bmN0aW9uIChpZCwgdHlwZSwgaXNfYWN0aXZlLCBjcmVhdGVkLCBhcmNoaXZlZCwgbGFzdF9tb2RpZmllZCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIHRoaXMuaXNfYWN0aXZlID0gaXNfYWN0aXZlO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVkID0gY3JlYXRlZDtcbiAgICAgICAgICAgIHRoaXMuYXJjaGl2ZWQgPSBhcmNoaXZlZDtcbiAgICAgICAgICAgIHRoaXMubGFzdF9tb2RpZmllZCA9IGxhc3RfbW9kaWZpZWQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgSm9iRGV0YWlsRXZlbnRSdWxlLnByb3RvdHlwZSA9IHtcblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBKb2JEZXRhaWxFdmVudFJ1bGUuYnVpbGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEpvYkRldGFpbEV2ZW50UnVsZShcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmlzX2FjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jcmVhdGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmFyY2hpdmVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxhc3RfbW9kaWZpZWRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBKb2JEZXRhaWxFdmVudFJ1bGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBKb2JEZXRhaWxFdmVudFJ1bGUudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoSm9iRGV0YWlsRXZlbnRSdWxlLmJ1aWxkKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEpvYkRldGFpbEV2ZW50UnVsZS5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gSm9iRGV0YWlsRXZlbnRSdWxlO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuZmFjdG9yeSgnSm9iRGV0YWlsSW5wdXREYXRhJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgSm9iRGV0YWlsSW5wdXREYXRhID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBmaWxlX2lkLCBmaWxlX2lkcywgZmlsZXMpIHtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmZpbGVfaWQgPSBmaWxlX2lkO1xuICAgICAgICAgICAgdGhpcy5maWxlX2lkcyA9IGZpbGVfaWRzO1xuICAgICAgICAgICAgdGhpcy5maWxlcyA9IGZpbGVzO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgICAgIEpvYkRldGFpbElucHV0RGF0YS5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maWxlX2lkKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWxlX2lkO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbGVfaWRzKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWxlX2lkcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzdGF0aWMgbWV0aG9kcywgYXNzaWduZWQgdG8gY2xhc3NcbiAgICAgICAgSm9iRGV0YWlsSW5wdXREYXRhLmJ1aWxkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBKb2JEZXRhaWxJbnB1dERhdGEoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5maWxlX2lkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmZpbGVfaWRzLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmZpbGVzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgSm9iRGV0YWlsSW5wdXREYXRhKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgSm9iRGV0YWlsSW5wdXREYXRhLnRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgICAgICAgICAubWFwKEpvYkRldGFpbElucHV0RGF0YS5idWlsZClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBKb2JEZXRhaWxJbnB1dERhdGEuYnVpbGQoZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEpvYkRldGFpbElucHV0RGF0YTtcbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ0pvYkRldGFpbE91dHB1dERhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBKb2JEZXRhaWxPdXRwdXREYXRhID0gZnVuY3Rpb24gKG5hbWUsIHdvcmtzcGFjZV9pZCwgZmlsZXMpIHtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICB0aGlzLndvcmtzcGFjZV9pZCA9IHdvcmtzcGFjZV9pZDtcbiAgICAgICAgICAgIHRoaXMuZmlsZXMgPSBmaWxlcztcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBwdWJsaWMgbWV0aG9kc1xuICAgICAgICBKb2JEZXRhaWxPdXRwdXREYXRhLnByb3RvdHlwZSA9IHtcblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBKb2JEZXRhaWxPdXRwdXREYXRhLmJ1aWxkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBKb2JEZXRhaWxPdXRwdXREYXRhKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEud29ya3NwYWNlX2lkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmZpbGVzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgSm9iRGV0YWlsT3V0cHV0RGF0YSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEpvYkRldGFpbE91dHB1dERhdGEudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoSm9iRGV0YWlsT3V0cHV0RGF0YS5idWlsZClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBKb2JEZXRhaWxPdXRwdXREYXRhLmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBKb2JEZXRhaWxPdXRwdXREYXRhO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuZmFjdG9yeSgnSm9iRGV0YWlscycsIGZ1bmN0aW9uIChzY2FsZUNvbmZpZywgSm9iVHlwZSwgSm9iRXhlY3V0aW9uLCBQcm9kdWN0LCBKb2JEZXRhaWxJbnB1dERhdGEsIEpvYkRldGFpbE91dHB1dERhdGEsIFJlY2lwZSwgSm9iRGV0YWlsRXZlbnQsIHNjYWxlU2VydmljZSkge1xuICAgICAgICB2YXIgSm9iRGV0YWlscyA9IGZ1bmN0aW9uIChjcHVzX3JlcXVpcmVkLCBjcmVhdGVkLCBxdWV1ZWQsIHN0YXJ0ZWQsIGVuZGVkLCBkYXRhLCBkaXNrX2luX3JlcXVpcmVkLCBkaXNrX291dF9yZXF1aXJlZCwgZXJyb3IsIGV2ZW50LCBpZCwgam9iX2V4ZXMsIGpvYl90eXBlLCBsYXN0X21vZGlmaWVkLCBsYXN0X3N0YXR1c19jaGFuZ2UsIG1heF90cmllcywgbWVtX3JlcXVpcmVkLCBudW1fZXhlcywgcHJpb3JpdHksIHByb2R1Y3RzLCByZWNpcGVzLCByZXN1bHRzLCBpbnB1dF9maWxlcywgc3RhdHVzLCB0aW1lb3V0ICkge1xuICAgICAgICAgICAgLy8gZGVjb3JhdGUgaW5wdXRzIGFuZCBvdXRwdXRzIHRvIHN1cHBvcnQgZGF0YSBiaW5kaW5nIGluIGRldGFpbHMgdmlld1xuICAgICAgICAgICAgZGF0YS5pbnB1dF9kYXRhID0gZGVjb3JhdGVJbnB1dERhdGEoZGF0YS5pbnB1dF9kYXRhLCBpbnB1dF9maWxlcyk7XG4gICAgICAgICAgICBkYXRhLm91dHB1dF9kYXRhID0gZGVjb3JhdGVPdXRwdXREYXRhKGRhdGEub3V0cHV0X2RhdGEsIHJlc3VsdHMsIHByb2R1Y3RzKTtcbiAgICAgICAgICAgIHRoaXMuY3B1c19yZXF1aXJlZCA9IGNwdXNfcmVxdWlyZWQ7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZWQgPSBjcmVhdGVkO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVkX2Zvcm1hdHRlZCA9IG1vbWVudC51dGMoY3JlYXRlZCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIHRoaXMucXVldWVkID0gcXVldWVkO1xuICAgICAgICAgICAgdGhpcy5xdWV1ZWRfZm9ybWF0dGVkID0gbW9tZW50LnV0YyhxdWV1ZWQpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBzdGFydGVkO1xuICAgICAgICAgICAgdGhpcy5zdGFydGVkX2Zvcm1hdHRlZCA9IG1vbWVudC51dGMoc3RhcnRlZCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIHRoaXMuZW5kZWQgPSBlbmRlZDtcbiAgICAgICAgICAgIHRoaXMuZW5kZWRfZm9ybWF0dGVkID0gbW9tZW50LnV0YyhlbmRlZCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBpbnB1dF9kYXRhOiBKb2JEZXRhaWxJbnB1dERhdGEudHJhbnNmb3JtZXIoZGF0YS5pbnB1dF9kYXRhKSxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiBkYXRhLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgb3V0cHV0X2RhdGE6IEpvYkRldGFpbE91dHB1dERhdGEudHJhbnNmb3JtZXIoZGF0YS5vdXRwdXRfZGF0YSlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmRpc2tfaW5fcmVxdWlyZWQgPSBkaXNrX2luX3JlcXVpcmVkO1xuICAgICAgICAgICAgdGhpcy5kaXNrX291dF9yZXF1aXJlZCA9IGRpc2tfb3V0X3JlcXVpcmVkO1xuICAgICAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgdGhpcy5ldmVudCA9IEpvYkRldGFpbEV2ZW50LnRyYW5zZm9ybWVyKGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgICAgIHRoaXMuam9iX2V4ZXMgPSBKb2JFeGVjdXRpb24udHJhbnNmb3JtZXIoam9iX2V4ZXMpO1xuICAgICAgICAgICAgdGhpcy5qb2JfdHlwZSA9IEpvYlR5cGUudHJhbnNmb3JtZXIoam9iX3R5cGUpO1xuICAgICAgICAgICAgdGhpcy5sYXN0X21vZGlmaWVkID0gbGFzdF9tb2RpZmllZDtcbiAgICAgICAgICAgIHRoaXMubGFzdF9zdGF0dXNfY2hhbmdlID0gbGFzdF9zdGF0dXNfY2hhbmdlO1xuICAgICAgICAgICAgdGhpcy5tYXhfdHJpZXMgPSBtYXhfdHJpZXM7XG4gICAgICAgICAgICB0aGlzLm1lbV9yZXF1aXJlZCA9IG1lbV9yZXF1aXJlZDtcbiAgICAgICAgICAgIHRoaXMubnVtX2V4ZXMgPSBudW1fZXhlcztcbiAgICAgICAgICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgICAgICAgIHRoaXMucHJvZHVjdHMgPSBQcm9kdWN0LnRyYW5zZm9ybWVyKHByb2R1Y3RzKTtcbiAgICAgICAgICAgIHRoaXMucmVjaXBlcyA9IFJlY2lwZS50cmFuc2Zvcm1lcihyZWNpcGVzKTtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0cyA9IHtcbiAgICAgICAgICAgICAgICBvdXRwdXRfZGF0YTogSm9iRGV0YWlsT3V0cHV0RGF0YS50cmFuc2Zvcm1lcihyZXN1bHRzLm91dHB1dF9kYXRhKSxcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiByZXN1bHRzLnZlcnNpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmlucHV0X2ZpbGVzID0gaW5wdXRfZmlsZXM7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBkZWNvcmF0ZUlucHV0RGF0YSA9IGZ1bmN0aW9uKGlucHV0X2RhdGEsIGlucHV0X2ZpbGVzKXtcbiAgICAgICAgICAgIF8uZm9yRWFjaChpbnB1dF9kYXRhLCBmdW5jdGlvbih2YWwpe1xuICAgICAgICAgICAgICAgIHZhciBmaWxlX2lkcyA9IFtdO1xuICAgICAgICAgICAgICAgIGlmKCF2YWwuZmlsZXMpeyB2YWwuZmlsZXMgPSBbXTsgfVxuXG4gICAgICAgICAgICAgICAgaWYodmFsLmZpbGVfaWQgJiYgdmFsLmZpbGVfaWQgPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgZmlsZV9pZHMgPSBbdmFsLmZpbGVfaWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKHZhbC5maWxlX2lkcyAmJiB2YWwuZmlsZV9pZHMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgIC8vIG11bHRpcGxlIGZpbGVzXG4gICAgICAgICAgICAgICAgICAgIGZpbGVfaWRzID0gdmFsLmZpbGVfaWRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLmZvckVhY2goZmlsZV9pZHMsIGZ1bmN0aW9uKGZpbGVfaWQpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5maWxlID0gXy5maW5kKGlucHV0X2ZpbGVzLCB7aWQ6IGZpbGVfaWR9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYoaW5maWxlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbC5maWxlcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9uYW1lOiBpbmZpbGUuZmlsZV9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGluZmlsZS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWQ6IGluZmlsZS5jcmVhdGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X21vZGlmaWVkOiBpbmZpbGUubGFzdF9tb2RpZmllZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9zaXplX2Zvcm1hdHRlZDogc2NhbGVTZXJ2aWNlLmNhbGN1bGF0ZUZpbGVTaXplRnJvbUJ5dGVzKGluZmlsZS5maWxlX3NpemUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXRfZGF0YTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZGVjb3JhdGVPdXRwdXREYXRhID0gZnVuY3Rpb24ob3V0cHV0X2RhdGEsIHJlc3VsdHMsIHByb2R1Y3RzKXtcbiAgICAgICAgICAgIF8uZm9yRWFjaChvdXRwdXRfZGF0YSwgZnVuY3Rpb24odmFsKXtcbiAgICAgICAgICAgICAgICB2YXIgZmlsZV9pZHMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gXy5maW5kKHJlc3VsdHMub3V0cHV0X2RhdGEsIHsgbmFtZTogdmFsLm5hbWUgfSk7XG4gICAgICAgICAgICAgICAgaWYoIXZhbC5maWxlcyl7IHZhbC5maWxlcyA9IFtdOyB9XG5cbiAgICAgICAgICAgICAgICBpZiggcmVzdWx0ICYmIHJlc3VsdC5maWxlX2lkICYmIHJlc3VsdC5maWxlX2lkID4gMCApe1xuICAgICAgICAgICAgICAgICAgICAvLyBzaW5nbGUgZmlsZVxuICAgICAgICAgICAgICAgICAgICBmaWxlX2lkcyA9IFtyZXN1bHQuZmlsZV9pZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYocmVzdWx0ICYmIHJlc3VsdC5maWxlX2lkcyAmJiByZXN1bHQuZmlsZV9pZHMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgIC8vIG11bHRpcGxlIGZpbGVzXG4gICAgICAgICAgICAgICAgICAgIGZpbGVfaWRzID0gcmVzdWx0LmZpbGVfaWRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLmZvckVhY2goZmlsZV9pZHMsIGZ1bmN0aW9uKGZpbGVfaWQpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3V0ZmlsZSA9IF8uZmluZChwcm9kdWN0cywge2lkOiBmaWxlX2lkfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpbGVfaWQgKyAnOiAnICsgb3V0ZmlsZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKG91dGZpbGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsLmZpbGVzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlX25hbWU6IG91dGZpbGUuZmlsZV9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG91dGZpbGUudXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkOiBvdXRmaWxlLmNyZWF0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfbW9kaWZpZWQ6IG91dGZpbGUubGFzdF9tb2RpZmllZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9zaXplX2Zvcm1hdHRlZDogc2NhbGVTZXJ2aWNlLmNhbGN1bGF0ZUZpbGVTaXplRnJvbUJ5dGVzKG91dGZpbGUuZmlsZV9zaXplKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG91dHB1dF9kYXRhO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgICAgIEpvYkRldGFpbHMucHJvdG90eXBlID0ge1xuICAgICAgICAgICAgZ2V0RHVyYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGVTZXJ2aWNlLmNhbGN1bGF0ZUR1cmF0aW9uKHRoaXMuY3JlYXRlZCwgdGhpcy5sYXN0X21vZGlmaWVkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRMYXRlc3RFeGVjdXRpb246IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubnVtX2V4ZXMgPiAwICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5qb2JfZXhlc1swXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0U3RhdHVzQ2xhc3M6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLy8gaWYodGhpcy5zdGF0dXMgPT09ICdDT01QTEVURUQnKXtcbiAgICAgICAgICAgICAgICAvLyAgICAgcmV0dXJuICdsYWJlbC1zdWNjZXNzJztcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgLy8gZWxzZSBpZiggdGhpcy5zdGF0dXMgPT09ICdGQUlMRUQnKXtcbiAgICAgICAgICAgICAgICAvLyAgICAgcmV0dXJuICdsYWJlbC1kZWZhdWx0JzsvLyAgICByZXR1cm4gJ2xhYmVsLWRhbmdlcic7XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIC8vIGVsc2V7XG4gICAgICAgICAgICAgICAgLy8gICAgIHJldHVybiAnbGFiZWwtZGVmYXVsdCc7XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXR1cy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBKb2JEZXRhaWxzLmJ1aWxkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBKb2JEZXRhaWxzKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNwdXNfcmVxdWlyZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY3JlYXRlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5xdWV1ZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3RhcnRlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5lbmRlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmRpc2tfaW5fcmVxdWlyZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGlza19vdXRfcmVxdWlyZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9iX2V4ZXMsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9iX3R5cGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubGFzdF9tb2RpZmllZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5sYXN0X3N0YXR1c19jaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubWF4X3RyaWVzLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm1lbV9yZXF1aXJlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5udW1fZXhlcyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmlvcml0eSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9kdWN0cyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5yZWNpcGVzLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnJlc3VsdHMsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaW5wdXRfZmlsZXMsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnRpbWVvdXRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBKb2JEZXRhaWxzKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgSm9iRGV0YWlscy50cmFuc2Zvcm1lciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgLm1hcChKb2JEZXRhaWxzLmJ1aWxkKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEpvYkRldGFpbHMuYnVpbGQoZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEpvYkRldGFpbHM7XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdKb2JFeGVjdXRpb24nLCBmdW5jdGlvbiAoc2NhbGVDb25maWcsIEpvYiwgTm9kZSwgbW9tZW50KSB7XG4gICAgICAgIHZhciBKb2JFeGVjdXRpb24gPSBmdW5jdGlvbiAoaWQsIHN0YXR1cywgY29tbWFuZF9hcmd1bWVudHMsIHRpbWVvdXQsIHByZV9zdGFydGVkLCBwcmVfY29tcGxldGVkLCBwcmVfZXhpdF9jb2RlLCBqb2Jfc3RhcnRlZCwgam9iX2NvbXBsZXRlZCwgam9iX2V4aXRfY29kZSwgcG9zdF9zdGFydGVkLCBwb3N0X2NvbXBsZXRlZCwgcG9zdF9leGl0X2NvZGUsIGNyZWF0ZWQsIHF1ZXVlZCwgc3RhcnRlZCwgZW5kZWQsIGxhc3RfbW9kaWZpZWQsIGpvYiwgbm9kZSwgZXJyb3IsIGVudmlyb25tZW50LCBjcHVzX3NjaGVkdWxlZCwgbWVtX3NjaGVkdWxlZCwgZGlza19pbl9zY2hlZHVsZWQsIGRpc2tfb3V0X3NjaGVkdWxlZCwgZGlza190b3RhbF9zY2hlZHVsZWQsIHJlc3VsdHMsIGN1cnJlbnRfc3Rkb3V0X3VybCwgY3VycmVudF9zdGRlcnJfdXJsLCByZXN1bHRzX21hbmlmZXN0KSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZF9hcmd1bWVudHMgPSBjb21tYW5kX2FyZ3VtZW50cztcbiAgICAgICAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgICAgICB0aGlzLnByZV9zdGFydGVkID0gcHJlX3N0YXJ0ZWQ7XG4gICAgICAgICAgICB0aGlzLnByZV9jb21wbGV0ZWQgPSBwcmVfY29tcGxldGVkO1xuICAgICAgICAgICAgdGhpcy5wcmVfZXhpdF9jb2RlID0gcHJlX2V4aXRfY29kZTtcbiAgICAgICAgICAgIHRoaXMuam9iX3N0YXJ0ZWQgPSBqb2Jfc3RhcnRlZDtcbiAgICAgICAgICAgIHRoaXMuam9iX2NvbXBsZXRlZCA9IGpvYl9jb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aGlzLmpvYl9leGl0X2NvZGUgPSBqb2JfZXhpdF9jb2RlO1xuICAgICAgICAgICAgdGhpcy5wb3N0X3N0YXJ0ZWQgPSBwb3N0X3N0YXJ0ZWQ7XG4gICAgICAgICAgICB0aGlzLnBvc3RfY29tcGxldGVkID0gcG9zdF9jb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aGlzLnBvc3RfZXhpdF9jb2RlID0gcG9zdF9leGl0X2NvZGU7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZWQgPSBjcmVhdGVkO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVkX2Zvcm1hdHRlZCA9IGNyZWF0ZWQgPyBtb21lbnQudXRjKGNyZWF0ZWQpLnRvSVNPU3RyaW5nKCkgOiBjcmVhdGVkO1xuICAgICAgICAgICAgdGhpcy5xdWV1ZWQgPSBxdWV1ZWQ7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlZF9mb3JtYXR0ZWQgPSBxdWV1ZWQgPyBtb21lbnQudXRjKHF1ZXVlZCkudG9JU09TdHJpbmcoKSA6IHF1ZXVlZDtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IHN0YXJ0ZWQ7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWRfZm9ybWF0dGVkID0gc3RhcnRlZCA/IG1vbWVudC51dGMoc3RhcnRlZCkudG9JU09TdHJpbmcoKSA6IHN0YXJ0ZWQ7XG4gICAgICAgICAgICB0aGlzLmVuZGVkID0gZW5kZWQ7XG4gICAgICAgICAgICB0aGlzLmVuZGVkX2Zvcm1hdHRlZCA9IGVuZGVkID8gbW9tZW50LnV0YyhlbmRlZCkudG9JU09TdHJpbmcoKSA6IGVuZGVkO1xuICAgICAgICAgICAgdGhpcy5sYXN0X21vZGlmaWVkID0gbGFzdF9tb2RpZmllZDtcbiAgICAgICAgICAgIHRoaXMubGFzdF9tb2RpZmllZF9mb3JtYXR0ZWQgPSBsYXN0X21vZGlmaWVkID8gbW9tZW50LnV0YyhsYXN0X21vZGlmaWVkKS50b0lTT1N0cmluZygpIDogbGFzdF9tb2RpZmllZDtcbiAgICAgICAgICAgIHRoaXMuam9iID0gSm9iLnRyYW5zZm9ybWVyKGpvYik7XG4gICAgICAgICAgICB0aGlzLm5vZGUgPSBOb2RlLnRyYW5zZm9ybWVyKG5vZGUpO1xuICAgICAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuICAgICAgICAgICAgdGhpcy5jcHVzX3NjaGVkdWxlZCA9IGNwdXNfc2NoZWR1bGVkO1xuICAgICAgICAgICAgdGhpcy5tZW1fc2NoZWR1bGVkID0gbWVtX3NjaGVkdWxlZDtcbiAgICAgICAgICAgIHRoaXMuZGlza19pbl9zY2hlZHVsZWQgPSBkaXNrX2luX3NjaGVkdWxlZDtcbiAgICAgICAgICAgIHRoaXMuZGlza19vdXRfc2NoZWR1bGVkID0gZGlza19vdXRfc2NoZWR1bGVkO1xuICAgICAgICAgICAgdGhpcy5kaXNrX3RvdGFsX3NjaGVkdWxlZCA9IGRpc2tfdG90YWxfc2NoZWR1bGVkO1xuICAgICAgICAgICAgdGhpcy5yZXN1bHRzID0gcmVzdWx0cztcbiAgICAgICAgICAgIHRoaXMuY3VycmVudF9zdGRvdXRfdXJsID0gY3VycmVudF9zdGRvdXRfdXJsO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50X3N0ZGVycl91cmwgPSBjdXJyZW50X3N0ZGVycl91cmw7XG4gICAgICAgICAgICB0aGlzLnJlc3VsdHNfbWFuaWZlc3QgPSByZXN1bHRzX21hbmlmZXN0O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgICAgIEpvYkV4ZWN1dGlvbi5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBnZXREdXJhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQudXRjKHRoaXMuam9iX2NvbXBsZXRlZCkuZGlmZihtb21lbnQudXRjKHRoaXMuam9iX3N0YXJ0ZWQpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRJY29uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuam9iLmpvYlR5cGUuaWNvbkNvZGUgPyAnPGkgY2xhc3M9XCJmYVwiPiYjeCcgKyB0aGlzLmpvYi5qb2JUeXBlLmljb25Db2RlICsgJzwvaT4nIDogJzxpIGNsYXNzPVwiZmFcIj4mI3gnICsgc2NhbGVDb25maWcuZGVmYXVsdEljb25Db2RlICsgJzwvaT4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBKb2JFeGVjdXRpb24uYnVpbGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEpvYkV4ZWN1dGlvbihcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29tbWFuZF9hcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudGltZW91dCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmVfc3RhcnRlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmVfY29tcGxldGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnByZV9leGl0X2NvZGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9iX3N0YXJ0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9iX2NvbXBsZXRlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5qb2JfZXhpdF9jb2RlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnBvc3Rfc3RhcnRlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wb3N0X2NvbXBsZXRlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wb3N0X2V4aXRfY29kZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jcmVhdGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnF1ZXVlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zdGFydGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmVuZGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxhc3RfbW9kaWZpZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9iLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm5vZGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZW52aXJvbm1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY3B1c19zY2hlZHVsZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubWVtX3NjaGVkdWxlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kaXNrX2luX3NjaGVkdWxlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kaXNrX291dF9zY2hlZHVsZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGlza190b3RhbF9zY2hlZHVsZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucmVzdWx0cyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jdXJyZW50X3N0ZG91dF91cmwsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY3VycmVudF9zdGRlcnJfdXJsLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnJlc3VsdHNfbWFuaWZlc3RcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBKb2JFeGVjdXRpb24oKTtcbiAgICAgICAgfTtcblxuICAgICAgICBKb2JFeGVjdXRpb24udHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoSm9iRXhlY3V0aW9uLmJ1aWxkKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEpvYkV4ZWN1dGlvbi5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gSm9iRXhlY3V0aW9uO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuZmFjdG9yeSgnSm9iRXhlY3V0aW9uTG9nJywgZnVuY3Rpb24gKHNjYWxlQ29uZmlnLCBKb2IsIE5vZGUpIHtcbiAgICAgICAgdmFyIEpvYkV4ZWN1dGlvbkxvZyA9IGZ1bmN0aW9uIChpZCwgc3RhdHVzLCBjb21tYW5kX2FyZ3VtZW50cywgdGltZW91dCwgZXhpdF9jb2RlLCBjcmVhdGVkLCBxdWV1ZWQsIHNjaGVkdWxlZCwgcHJlX3N0YXJ0ZWQsIHByZV9jb21wbGV0ZWQsIGpvYl9zdGFydGVkLCBqb2JfY29tcGxldGVkLCBwb3N0X3N0YXJ0ZWQsIHBvc3RfY29tcGxldGVkLCBlbmRlZCwgbGFzdF9tb2RpZmllZCwgam9iLCBub2RlLCBlcnJvciwgaXNfZmluaXNoZWQsIHN0ZG91dCwgc3RkZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZF9hcmd1bWVudHMgPSBjb21tYW5kX2FyZ3VtZW50cztcbiAgICAgICAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgICAgICB0aGlzLmV4aXRfY29kZSA9IGV4aXRfY29kZTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlZCA9IGNyZWF0ZWQ7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlZCA9IHF1ZXVlZDtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVkID0gc2NoZWR1bGVkO1xuICAgICAgICAgICAgdGhpcy5wcmVfc3RhcnRlZCA9IHByZV9zdGFydGVkO1xuICAgICAgICAgICAgdGhpcy5wcmVfY29tcGxldGVkID0gcHJlX2NvbXBsZXRlZDtcbiAgICAgICAgICAgIHRoaXMuam9iX3N0YXJ0ZWQgPSBqb2Jfc3RhcnRlZDtcbiAgICAgICAgICAgIHRoaXMuam9iX2NvbXBsZXRlZCA9IGpvYl9jb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aGlzLnBvc3Rfc3RhcnRlZCA9IHBvc3Rfc3RhcnRlZDtcbiAgICAgICAgICAgIHRoaXMucG9zdF9jb21wbGV0ZWQgPSBwb3N0X2NvbXBsZXRlZDtcbiAgICAgICAgICAgIHRoaXMuZW5kZWQgPSBlbmRlZDtcbiAgICAgICAgICAgIHRoaXMubGFzdF9tb2RpZmllZCA9IGxhc3RfbW9kaWZpZWQ7XG4gICAgICAgICAgICB0aGlzLmpvYiA9IEpvYi50cmFuc2Zvcm1lcihqb2IpO1xuICAgICAgICAgICAgdGhpcy5ub2RlID0gTm9kZS50cmFuc2Zvcm1lcihub2RlKTtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgIHRoaXMuaXNfZmluaXNoZWQgPSBpc19maW5pc2hlZDtcbiAgICAgICAgICAgIHRoaXMuc3Rkb3V0ID0gc3Rkb3V0O1xuICAgICAgICAgICAgdGhpcy5zdGRvdXRIdG1sID0gc3Rkb3V0ID8gc3Rkb3V0LnJlcGxhY2UobmV3IFJlZ0V4cCgnXFxyP1xcbicsJ2cnKSwgJzxiciAvPicpIDogJyc7XG4gICAgICAgICAgICB0aGlzLnN0ZGVyciA9IHN0ZGVycjtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBwdWJsaWMgbWV0aG9kc1xuICAgICAgICBKb2JFeGVjdXRpb25Mb2cucHJvdG90eXBlID0ge1xuICAgICAgICAgICAgdG9IdG1sOiBmdW5jdGlvbihpbnN0cil7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc3RyXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzdGF0aWMgbWV0aG9kcywgYXNzaWduZWQgdG8gY2xhc3NcbiAgICAgICAgSm9iRXhlY3V0aW9uTG9nLmJ1aWxkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBKb2JFeGVjdXRpb25Mb2coXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbW1hbmRfYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnRpbWVvdXQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZXhpdF9jb2RlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNyZWF0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucXVldWVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnNjaGVkdWxlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmVfc3RhcnRlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmVfY29tcGxldGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmpvYl9zdGFydGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmpvYl9jb21wbGV0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucG9zdF9zdGFydGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnBvc3RfY29tcGxldGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmVuZGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxhc3RfbW9kaWZpZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9iLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm5vZGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaXNfZmluaXNoZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc3Rkb3V0LFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN0ZGVyclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEpvYkV4ZWN1dGlvbkxvZygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEpvYkV4ZWN1dGlvbkxvZy50cmFuc2Zvcm1lciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgLm1hcChKb2JFeGVjdXRpb25Mb2cuYnVpbGQpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSm9iRXhlY3V0aW9uTG9nLmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBKb2JFeGVjdXRpb25Mb2c7XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdKb2JUeXBlJywgZnVuY3Rpb24gKHNjYWxlQ29uZmlnLCBKb2JUeXBlSW50ZXJmYWNlKSB7XG4gICAgICAgIHZhciBKb2JUeXBlID0gZnVuY3Rpb24gKGlkLCBuYW1lLCB0aXRsZSwgdmVyc2lvbiwgZGVzY3JpcHRpb24sIGlzX3N5c3RlbSwgaXNfbG9uZ19ydW5uaW5nLCBpc19hY3RpdmUsIGlzX29wZXJhdGlvbmFsLCBpc19wYXVzZWQsIHVzZXNfZG9ja2VyLCBkb2NrZXJfcHJpdmlsZWdlZCwgZG9ja2VyX2ltYWdlLCBwcmlvcml0eSwgdGltZW91dCwgbWF4X3RyaWVzLCBjcHVzX3JlcXVpcmVkLCBtZW1fcmVxdWlyZWQsIGRpc2tfb3V0X2NvbnN0X3JlcXVpcmVkLCBkaXNrX291dF9tdWx0X3JlcXVpcmVkLCBpY29uX2NvZGUsIGNyZWF0ZWQsIGFyY2hpdmVkLCBwYXVzZWQsIGxhc3RfbW9kaWZpZWQsIGpvYl90eXBlX2ludGVyZmFjZSkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgICB0aGlzLmlzX3N5c3RlbSA9IGlzX3N5c3RlbTtcbiAgICAgICAgICAgIHRoaXMuaXNfbG9uZ19ydW5uaW5nID0gaXNfbG9uZ19ydW5uaW5nO1xuICAgICAgICAgICAgdGhpcy5pc19hY3RpdmUgPSBpc19hY3RpdmU7XG4gICAgICAgICAgICB0aGlzLmlzX29wZXJhdGlvbmFsID0gaXNfb3BlcmF0aW9uYWw7XG4gICAgICAgICAgICB0aGlzLmlzX3BhdXNlZCA9IGlzX3BhdXNlZDtcbiAgICAgICAgICAgIHRoaXMudXNlc19kb2NrZXIgPSB1c2VzX2RvY2tlcjtcbiAgICAgICAgICAgIHRoaXMuZG9ja2VyX3ByaXZpbGVnZWQgPSBkb2NrZXJfcHJpdmlsZWdlZDtcbiAgICAgICAgICAgIHRoaXMuZG9ja2VyX2ltYWdlID0gZG9ja2VyX2ltYWdlO1xuICAgICAgICAgICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcbiAgICAgICAgICAgIHRoaXMubWF4X3RyaWVzID0gbWF4X3RyaWVzO1xuICAgICAgICAgICAgdGhpcy5jcHVzX3JlcXVpcmVkID0gY3B1c19yZXF1aXJlZDtcbiAgICAgICAgICAgIHRoaXMubWVtX3JlcXVpcmVkID0gbWVtX3JlcXVpcmVkO1xuICAgICAgICAgICAgdGhpcy5kaXNrX291dF9jb25zdF9yZXF1aXJlZCA9IGRpc2tfb3V0X2NvbnN0X3JlcXVpcmVkO1xuICAgICAgICAgICAgdGhpcy5kaXNrX291dF9tdWx0X3JlcXVpcmVkID0gZGlza19vdXRfbXVsdF9yZXF1aXJlZDtcbiAgICAgICAgICAgIHRoaXMuaWNvbl9jb2RlID0gaWNvbl9jb2RlO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVkID0gY3JlYXRlZDtcbiAgICAgICAgICAgIHRoaXMuYXJjaGl2ZWQgPSBhcmNoaXZlZDtcbiAgICAgICAgICAgIHRoaXMucGF1c2VkID0gcGF1c2VkO1xuICAgICAgICAgICAgdGhpcy5sYXN0X21vZGlmaWVkID0gbGFzdF9tb2RpZmllZDtcbiAgICAgICAgICAgIHRoaXMuam9iX3R5cGVfaW50ZXJmYWNlID0gSm9iVHlwZUludGVyZmFjZS50cmFuc2Zvcm1lcihqb2JfdHlwZV9pbnRlcmZhY2UpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgICAgIEpvYlR5cGUucHJvdG90eXBlID0ge1xuICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0pvYlR5cGUnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEljb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pY29uX2NvZGUgPyAnPGkgY2xhc3M9XCJmYVwiPiYjeCcgKyB0aGlzLmljb25fY29kZSArICc8L2k+JyA6ICc8aSBjbGFzcz1cImZhXCI+JiN4JyArIHNjYWxlQ29uZmlnLmRlZmF1bHRJY29uQ29kZSArICc8L2k+JztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRDZWxsVGV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmljb25fY29kZSA/ICcmI3gnICsgdGhpcy5pY29uX2NvZGUgKyAnOycgOiAnJiN4JyArIHNjYWxlQ29uZmlnLmRlZmF1bHRJY29uQ29kZSArICc7JztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRDZWxsVGl0bGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50aXRsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzdGF0aWMgbWV0aG9kcywgYXNzaWduZWQgdG8gY2xhc3NcbiAgICAgICAgSm9iVHlwZS5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSm9iVHlwZShcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaXNfc3lzdGVtLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmlzX2xvbmdfcnVubmluZyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pc19hY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaXNfb3BlcmF0aW9uYWwsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaXNfcGF1c2VkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnVzZXNfZG9ja2VyLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmRvY2tlcl9wcml2aWxlZ2VkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmRvY2tlcl9pbWFnZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcmlvcml0eSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS50aW1lb3V0LFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm1heF90cmllcyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jcHVzX3JlcXVpcmVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm1lbV9yZXF1aXJlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kaXNrX291dF9jb25zdF9yZXF1aXJlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kaXNrX291dF9tdWx0X3JlcXVpcmVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmljb25fY29kZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jcmVhdGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmFyY2hpdmVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnBhdXNlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5sYXN0X21vZGlmaWVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmludGVyZmFjZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEpvYlR5cGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBKb2JUeXBlLnRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgICAgICAgICAubWFwKEpvYlR5cGUuYnVpbGQpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSm9iVHlwZS5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gSm9iVHlwZTtcbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdKb2JUeXBlRGV0YWlscycsIGZ1bmN0aW9uIChzY2FsZUNvbmZpZywgSm9iVHlwZUludGVyZmFjZSwgSm9iVHlwZUVycm9yTWFwcGluZywgSm9iVHlwZUVycm9yLCBzY2FsZVNlcnZpY2UpIHtcbiAgICAgICAgdmFyIEpvYlR5cGVEZXRhaWxzID0gZnVuY3Rpb24gKGlkLCBuYW1lLCB2ZXJzaW9uLCB0aXRsZSwgZGVzY3JpcHRpb24sIGNhdGVnb3J5LCBhdXRob3JfbmFtZSwgYXV0aG9yX3VybCwgaXNfc3lzdGVtLCBpc19sb25nX3J1bm5pbmcsIGlzX2FjdGl2ZSwgaXNfb3BlcmF0aW9uYWwsIGlzX3BhdXNlZCwgaWNvbl9jb2RlLCB1c2VzX2RvY2tlciwgZG9ja2VyX3ByaXZpbGVnZWQsIGRvY2tlcl9pbWFnZSwgcHJpb3JpdHksIHRpbWVvdXQsIG1heF90cmllcywgY3B1c19yZXF1aXJlZCwgbWVtX3JlcXVpcmVkLCBkaXNrX291dF9jb25zdF9yZXF1aXJlZCwgZGlza19vdXRfbXVsdF9yZXF1aXJlZCwgY3JlYXRlZCwgYXJjaGl2ZWQsIHBhdXNlZCwgbGFzdF9tb2RpZmllZCwgam9iX3R5cGVfaW50ZXJmYWNlLCBlcnJvcl9tYXBwaW5nLCBlcnJvcnMsIGpvYl9jb3VudHNfNmgsIGpvYl9jb3VudHNfMTJoLCBqb2JfY291bnRzXzI0aCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgICB0aGlzLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gICAgICAgICAgICB0aGlzLmF1dGhvcl9uYW1lID0gYXV0aG9yX25hbWU7XG4gICAgICAgICAgICB0aGlzLmF1dGhvcl91cmwgPSBhdXRob3JfdXJsO1xuICAgICAgICAgICAgdGhpcy5pc19zeXN0ZW0gPSBpc19zeXN0ZW07XG4gICAgICAgICAgICB0aGlzLmlzX2xvbmdfcnVubmluZyA9IGlzX2xvbmdfcnVubmluZztcbiAgICAgICAgICAgIHRoaXMuaXNfYWN0aXZlID0gaXNfYWN0aXZlO1xuICAgICAgICAgICAgdGhpcy5pc19vcGVyYXRpb25hbCA9IGlzX29wZXJhdGlvbmFsO1xuICAgICAgICAgICAgdGhpcy5pc19wYXVzZWQgPSBpc19wYXVzZWQ7XG4gICAgICAgICAgICB0aGlzLmljb25fY29kZSA9IGljb25fY29kZTtcbiAgICAgICAgICAgIHRoaXMudXNlc19kb2NrZXIgPSB1c2VzX2RvY2tlcjtcbiAgICAgICAgICAgIHRoaXMuZG9ja2VyX3ByaXZpbGVnZWQgPSBkb2NrZXJfcHJpdmlsZWdlZDtcbiAgICAgICAgICAgIHRoaXMuZG9ja2VyX2ltYWdlID0gZG9ja2VyX2ltYWdlO1xuICAgICAgICAgICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcbiAgICAgICAgICAgIHRoaXMubWF4X3RyaWVzID0gbWF4X3RyaWVzO1xuICAgICAgICAgICAgdGhpcy5jcHVzX3JlcXVpcmVkID0gY3B1c19yZXF1aXJlZDtcbiAgICAgICAgICAgIHRoaXMubWVtX3JlcXVpcmVkID0gbWVtX3JlcXVpcmVkO1xuICAgICAgICAgICAgdGhpcy5tZW1fcmVxdWlyZWRfZm9ybWF0dGVkID0gc2NhbGVTZXJ2aWNlLmNhbGN1bGF0ZUZpbGVTaXplRnJvbU1pYihtZW1fcmVxdWlyZWQpO1xuICAgICAgICAgICAgdGhpcy5kaXNrX291dF9jb25zdF9yZXF1aXJlZCA9IGRpc2tfb3V0X2NvbnN0X3JlcXVpcmVkO1xuICAgICAgICAgICAgdGhpcy5kaXNrX291dF9jb25zdF9yZXF1aXJlZF9mb3JtYXR0ZWQgPSBzY2FsZVNlcnZpY2UuY2FsY3VsYXRlRmlsZVNpemVGcm9tTWliKGRpc2tfb3V0X2NvbnN0X3JlcXVpcmVkKTtcbiAgICAgICAgICAgIHRoaXMuZGlza19vdXRfbXVsdF9yZXF1aXJlZCA9IGRpc2tfb3V0X211bHRfcmVxdWlyZWQ7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZWQgPSBjcmVhdGVkO1xuICAgICAgICAgICAgdGhpcy5hcmNoaXZlZCA9IGFyY2hpdmVkO1xuICAgICAgICAgICAgdGhpcy5wYXVzZWQgPSBwYXVzZWQ7XG4gICAgICAgICAgICB0aGlzLmxhc3RfbW9kaWZpZWQgPSBsYXN0X21vZGlmaWVkO1xuICAgICAgICAgICAgdGhpcy5qb2JfdHlwZV9pbnRlcmZhY2UgPSBqb2JfdHlwZV9pbnRlcmZhY2U7XG4gICAgICAgICAgICB0aGlzLmVycm9yX21hcHBpbmcgPSBKb2JUeXBlRXJyb3JNYXBwaW5nLnRyYW5zZm9ybWVyKGVycm9yX21hcHBpbmcpO1xuICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSBKb2JUeXBlRXJyb3IudHJhbnNmb3JtZXIoZXJyb3JzKTtcbiAgICAgICAgICAgIHRoaXMuam9iX2NvdW50c182aCA9IGpvYl9jb3VudHNfNmg7XG4gICAgICAgICAgICB0aGlzLmpvYl9jb3VudHNfMTJoID0gam9iX2NvdW50c18xMmg7XG4gICAgICAgICAgICB0aGlzLmpvYl9jb3VudHNfMjRoID0gam9iX2NvdW50c18yNGg7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgSm9iVHlwZURldGFpbHMucHJvdG90eXBlID0ge1xuICAgICAgICAgICAgZ2V0SWNvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmljb25fY29kZSA/ICc8aSBjbGFzcz1cImZhXCI+JiN4JyArIHRoaXMuaWNvbl9jb2RlICsgJzwvaT4nIDogJzxpIGNsYXNzPVwiZmFcIj4mI3gnICsgc2NhbGVDb25maWcuZGVmYXVsdEljb25Db2RlICsgJzwvaT4nO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFBlcmZvcm1hbmNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZhaWxlZDZBcnIgPSBfLndoZXJlKHRoaXMuam9iX2NvdW50c182aCwgeyAnc3RhdHVzJzogJ0ZBSUxFRCcgfSksXG4gICAgICAgICAgICAgICAgICAgIGZhaWxlZDEyQXJyID0gXy53aGVyZSh0aGlzLmpvYl9jb3VudHNfMTJoLCB7ICdzdGF0dXMnOiAnRkFJTEVEJyB9KSxcbiAgICAgICAgICAgICAgICAgICAgZmFpbGVkMjRBcnIgPSBfLndoZXJlKHRoaXMuam9iX2NvdW50c18yNGgsIHsgJ3N0YXR1cyc6ICdGQUlMRUQnIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRlZDYgPSBfLmZpbmQodGhpcy5qb2JfY291bnRzXzZoLCAnc3RhdHVzJywgJ0NPTVBMRVRFRCcpIHx8IHsgY291bnQ6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgZmFpbGVkNiA9IF8uc3VtKGZhaWxlZDZBcnIsICdjb3VudCcpLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbDYgPSBmYWlsZWQ2QXJyLmxlbmd0aCA+IDAgPyBmYWlsZWQ2ICsgY29tcGxldGVkNi5jb3VudCA6IGNvbXBsZXRlZDYuY291bnQsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NSYXRlNiA9IHRvdGFsNiA9PT0gMCA/IDAgOiAxMDAgLSAoKGZhaWxlZDYgLyB0b3RhbDYpICogMTAwKS50b0ZpeGVkKDIpLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQxMiA9IF8uZmluZCh0aGlzLmpvYl9jb3VudHNfMTJoLCAnc3RhdHVzJywgJ0NPTVBMRVRFRCcpIHx8IHsgY291bnQ6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgZmFpbGVkMTIgPSBfLnN1bShmYWlsZWQxMkFyciwgJ2NvdW50JyksXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsMTIgPSBmYWlsZWQxMkFyci5sZW5ndGggPiAwID8gZmFpbGVkMTIgKyBjb21wbGV0ZWQxMi5jb3VudCA6IGNvbXBsZXRlZDEyLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzUmF0ZTEyID0gdG90YWwxMiA9PT0gMCA/IDAgOiAxMDAgLSAoKGZhaWxlZDEyIC8gdG90YWwxMikgKiAxMDApLnRvRml4ZWQoMiksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZDI0ID0gXy5maW5kKHRoaXMuam9iX2NvdW50c18yNGgsICdzdGF0dXMnLCAnQ09NUExFVEVEJykgfHwgeyBjb3VudDogMCB9LFxuICAgICAgICAgICAgICAgICAgICBmYWlsZWQyNCA9IF8uc3VtKGZhaWxlZDI0QXJyLCAnY291bnQnKSxcbiAgICAgICAgICAgICAgICAgICAgdG90YWwyNCA9IGZhaWxlZDI0QXJyLmxlbmd0aCA+IDAgPyBmYWlsZWQyNCArIGNvbXBsZXRlZDI0LmNvdW50IDogY29tcGxldGVkMjQuY291bnQsXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NSYXRlMjQgPSB0b3RhbDI0ID09PSAwID8gMCA6IDEwMCAtICgoZmFpbGVkMjQgLyB0b3RhbDI0KSAqIDEwMCkudG9GaXhlZCgyKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGhvdXI2OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXRlOiBzdWNjZXNzUmF0ZTYsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWlsZWQ6IGZhaWxlZDYsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IGNvbXBsZXRlZDYuY291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbDogdG90YWw2XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGhvdXIxMjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmF0ZTogc3VjY2Vzc1JhdGUxMixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWxlZDogZmFpbGVkMTIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IGNvbXBsZXRlZDEyLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWw6IHRvdGFsMTJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaG91cjI0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXRlOiBzdWNjZXNzUmF0ZTI0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFpbGVkOiBmYWlsZWQyNCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogY29tcGxldGVkMjQuY291bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbDogdG90YWwyNFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRGYWlsdXJlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBmYWlsZWQ2ID0gXy53aGVyZSh0aGlzLmpvYl9jb3VudHNfNmgsIHsgJ3N0YXR1cyc6ICdGQUlMRUQnIH0pLFxuICAgICAgICAgICAgICAgICAgICBmYWlsZWQ2VmFsdWVzID0gXy52YWx1ZXMoXy5ncm91cEJ5KGZhaWxlZDYsICdjYXRlZ29yeScpKSxcbiAgICAgICAgICAgICAgICAgICAgZmFpbGVkMTIgPSBfLndoZXJlKHRoaXMuam9iX2NvdW50c18xMmgsIHsgJ3N0YXR1cyc6ICdGQUlMRUQnIH0pLFxuICAgICAgICAgICAgICAgICAgICBmYWlsZWQxMlZhbHVlcyA9IF8udmFsdWVzKF8uZ3JvdXBCeShmYWlsZWQxMiwgJ2NhdGVnb3J5JykpLFxuICAgICAgICAgICAgICAgICAgICBmYWlsZWQyNCA9IF8ud2hlcmUodGhpcy5qb2JfY291bnRzXzI0aCwgeyAnc3RhdHVzJzogJ0ZBSUxFRCcgfSksXG4gICAgICAgICAgICAgICAgICAgIGZhaWxlZDI0VmFsdWVzID0gXy52YWx1ZXMoXy5ncm91cEJ5KGZhaWxlZDI0LCAnY2F0ZWdvcnknKSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgZ2V0RmFpbHVyZUNvdW50cyA9IGZ1bmN0aW9uIChjYXRlZ29yaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1cm5BcnIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGNhdGVnb3JpZXMsIGZ1bmN0aW9uIChjYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGNhdGVnb3J5LCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuQXJyLnB1c2goeyBzdGF0dXM6IHZhbC5jYXRlZ29yeSwgY291bnQ6IHZhbC5jb3VudCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVybkFycjtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaG91cjY6IGdldEZhaWx1cmVDb3VudHMoZmFpbGVkNlZhbHVlcyksXG4gICAgICAgICAgICAgICAgICAgIGhvdXIxMjogZ2V0RmFpbHVyZUNvdW50cyhmYWlsZWQxMlZhbHVlcyksXG4gICAgICAgICAgICAgICAgICAgIGhvdXIyNDogZ2V0RmFpbHVyZUNvdW50cyhmYWlsZWQyNFZhbHVlcylcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBKb2JUeXBlRGV0YWlscy5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSm9iVHlwZURldGFpbHMoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS52ZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNhdGVnb3J5LFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmF1dGhvcl9uYW1lLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmF1dGhvcl91cmwsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaXNfc3lzdGVtLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmlzX2xvbmdfcnVubmluZyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pc19hY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaXNfb3BlcmF0aW9uYWwsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaXNfcGF1c2VkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmljb25fY29kZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS51c2VzX2RvY2tlcixcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kb2NrZXJfcHJpdmlsZWdlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kb2NrZXJfaW1hZ2UsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHJpb3JpdHksXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudGltZW91dCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5tYXhfdHJpZXMsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY3B1c19yZXF1aXJlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5tZW1fcmVxdWlyZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGlza19vdXRfY29uc3RfcmVxdWlyZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGlza19vdXRfbXVsdF9yZXF1aXJlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jcmVhdGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmFyY2hpdmVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnBhdXNlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5sYXN0X21vZGlmaWVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmludGVyZmFjZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5lcnJvcl9tYXBwaW5nLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmVycm9ycyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5qb2JfY291bnRzXzZoLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmpvYl9jb3VudHNfMTJoLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmpvYl9jb3VudHNfMjRoXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgSm9iVHlwZURldGFpbHMoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBKb2JUeXBlRGV0YWlscy50cmFuc2Zvcm1lciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgLm1hcChKb2JUeXBlRGV0YWlscy5idWlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSm9iVHlwZURldGFpbHMuYnVpbGQoZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEpvYlR5cGVEZXRhaWxzO1xuICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ0pvYlR5cGVFcnJvcicsIGZ1bmN0aW9uIChtb21lbnQsIHNjYWxlQ29uZmlnKSB7XG4gICAgICAgIHZhciBKb2JUeXBlRXJyb3IgPSBmdW5jdGlvbiAoaWQsIG5hbWUsIHRpdGxlLCBkZXNjcmlwdGlvbiwgY2F0ZWdvcnksIGNyZWF0ZWQsIGxhc3RfbW9kaWZpZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgICB0aGlzLmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZWQgPSBjcmVhdGVkO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVkX2Zvcm1hdHRlZCA9IGNyZWF0ZWQgPyBtb21lbnQudXRjKGNyZWF0ZWQpLnRvSVNPU3RyaW5nKCkgOiBjcmVhdGVkO1xuICAgICAgICAgICAgdGhpcy5sYXN0X21vZGlmaWVkID0gbGFzdF9tb2RpZmllZDtcbiAgICAgICAgICAgIHRoaXMubGFzdF9tb2RpZmllZF9mb3JtYXR0ZWQgPSBsYXN0X21vZGlmaWVkID8gbW9tZW50LnV0YyhsYXN0X21vZGlmaWVkKS50b0lTT1N0cmluZygpIDogbGFzdF9tb2RpZmllZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBwdWJsaWMgbWV0aG9kc1xuICAgICAgICBKb2JUeXBlRXJyb3IucHJvdG90eXBlID0ge1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3RhdGljIG1ldGhvZHMsIGFzc2lnbmVkIHRvIGNsYXNzXG4gICAgICAgIEpvYlR5cGVFcnJvci5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSm9iVHlwZUVycm9yKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY3JlYXRlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5sYXN0X21vZGlmaWVkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgSm9iVHlwZUVycm9yKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgSm9iVHlwZUVycm9yLnRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgICAgICAgICAubWFwKEpvYlR5cGVFcnJvci5idWlsZClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBKb2JUeXBlRXJyb3IuYnVpbGQoZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEpvYlR5cGVFcnJvcjtcbiAgICB9KVxufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIFxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ0pvYlR5cGVFcnJvck1hcHBpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBKb2JUeXBlRXJyb3JNYXBwaW5nID0gZnVuY3Rpb24gKHZlcnNpb24sIGV4aXRfY29kZXMpIHtcbiAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgICB0aGlzLmV4aXRfY29kZXMgPSBleGl0X2NvZGVzO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgICAgIEpvYlR5cGVFcnJvck1hcHBpbmcucHJvdG90eXBlID0ge1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3RhdGljIG1ldGhvZHMsIGFzc2lnbmVkIHRvIGNsYXNzXG4gICAgICAgIEpvYlR5cGVFcnJvck1hcHBpbmcuYnVpbGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEpvYlR5cGVFcnJvck1hcHBpbmcoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5leGl0X2NvZGVzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgSm9iVHlwZUVycm9yTWFwcGluZygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEpvYlR5cGVFcnJvck1hcHBpbmcudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoSm9iVHlwZUVycm9yTWFwcGluZy5idWlsZClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBKb2JUeXBlRXJyb3JNYXBwaW5nLmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBKb2JUeXBlRXJyb3JNYXBwaW5nO1xuICAgIH0pXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuZmFjdG9yeSgnSm9iVHlwZUlucHV0RGF0YScsIGZ1bmN0aW9uIChzY2FsZUNvbmZpZykge1xuICAgICAgICB2YXIgSm9iVHlwZUlucHV0RGF0YSA9IGZ1bmN0aW9uIChtZWRpYV90eXBlcywgcmVxdWlyZWQsIHR5cGUsIG5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMubWVkaWFfdHlwZXMgPSBtZWRpYV90eXBlcztcbiAgICAgICAgICAgIHRoaXMucmVxdWlyZWQgPSByZXF1aXJlZDtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgICAgIEpvYlR5cGVJbnB1dERhdGEucHJvdG90eXBlID0ge1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3RhdGljIG1ldGhvZHMsIGFzc2lnbmVkIHRvIGNsYXNzXG4gICAgICAgIEpvYlR5cGVJbnB1dERhdGEuYnVpbGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEpvYlR5cGVJbnB1dERhdGEoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubWVkaWFfdHlwZXMsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucmVxdWlyZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5uYW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgSm9iVHlwZUlucHV0RGF0YSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEpvYlR5cGVJbnB1dERhdGEudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoSm9iVHlwZUlucHV0RGF0YS5idWlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSm9iVHlwZUlucHV0RGF0YS5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gSm9iVHlwZUlucHV0RGF0YTtcbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdKb2JUeXBlSW50ZXJmYWNlJywgZnVuY3Rpb24gKHNjYWxlQ29uZmlnLCBKb2JUeXBlSW5wdXREYXRhLCBKb2JUeXBlT3V0cHV0RGF0YSkge1xuICAgICAgICB2YXIgSm9iVHlwZUludGVyZmFjZSA9IGZ1bmN0aW9uICh2ZXJzaW9uLCBjb21tYW5kLCBjb21tYW5kX2FyZ3VtZW50cywgaW5wdXRfZGF0YSwgb3V0cHV0X2RhdGEpIHtcbiAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgICB0aGlzLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgICAgICAgICAgdGhpcy5jb21tYW5kX2FyZ3VtZW50cyA9IGNvbW1hbmRfYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5pbnB1dF9kYXRhID0gSm9iVHlwZUlucHV0RGF0YS50cmFuc2Zvcm1lcihpbnB1dF9kYXRhKTtcbiAgICAgICAgICAgIHRoaXMub3V0cHV0X2RhdGEgPSBKb2JUeXBlT3V0cHV0RGF0YS50cmFuc2Zvcm1lcihvdXRwdXRfZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgSm9iVHlwZUludGVyZmFjZS5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBnZXRJY29uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaWNvbkNvZGUgPyAnPGkgY2xhc3M9XCJmYVwiPiYjeCcgKyB0aGlzLmljb25Db2RlICsgJzwvaT4nIDogJzxpIGNsYXNzPVwiZmFcIj4mI3gnICsgc2NhbGVDb25maWcuZGVmYXVsdEljb25Db2RlICsgJzwvaT4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBKb2JUeXBlSW50ZXJmYWNlLmJ1aWxkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBKb2JUeXBlSW50ZXJmYWNlKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29tbWFuZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jb21tYW5kX2FyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pbnB1dF9kYXRhLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm91dHB1dF9kYXRhXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgSm9iVHlwZUludGVyZmFjZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEpvYlR5cGVJbnRlcmZhY2UudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoSm9iVHlwZUludGVyZmFjZS5idWlsZClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBKb2JUeXBlSW50ZXJmYWNlLmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBKb2JUeXBlSW50ZXJmYWNlO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuZmFjdG9yeSgnSm9iVHlwZU91dHB1dERhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBKb2JUeXBlT3V0cHV0RGF0YSA9IGZ1bmN0aW9uIChuYW1lLCB0eXBlLCByZXF1aXJlZCwgbWVkaWFfdHlwZSkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICB0aGlzLnJlcXVpcmVkID0gcmVxdWlyZWQ7XG4gICAgICAgICAgICB0aGlzLm1lZGlhX3R5cGUgPSBtZWRpYV90eXBlO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgICAgIEpvYlR5cGVPdXRwdXREYXRhLnByb3RvdHlwZSA9IHtcblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBKb2JUeXBlT3V0cHV0RGF0YS5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSm9iVHlwZU91dHB1dERhdGEoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnJlcXVpcmVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm1lZGlhX3R5cGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBKb2JUeXBlT3V0cHV0RGF0YSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEpvYlR5cGVPdXRwdXREYXRhLnRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgICAgICAgICAubWFwKEpvYlR5cGVPdXRwdXREYXRhLmJ1aWxkKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEpvYlR5cGVPdXRwdXREYXRhLmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBKb2JUeXBlT3V0cHV0RGF0YTtcbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdKb2JUeXBlU3RhdHVzJywgZnVuY3Rpb24gKHNjYWxlQ29uZmlnLCBKb2JUeXBlLCBKb2JFeGVjdXRpb24pIHtcbiAgICAgICAgdmFyIEpvYlR5cGVTdGF0dXMgPSBmdW5jdGlvbiAoam9iX3R5cGUsIGpvYl9jb3VudHMpIHtcbiAgICAgICAgICAgIHRoaXMuam9iX3R5cGUgPSBKb2JUeXBlLnRyYW5zZm9ybWVyKGpvYl90eXBlKTtcbiAgICAgICAgICAgIHRoaXMuam9iX2NvdW50cyA9IGpvYl9jb3VudHM7XG4gICAgICAgICAgICB0aGlzLmhhc19ydW5uaW5nID0gXy5maW5kKGpvYl9jb3VudHMsICdzdGF0dXMnLCAnUlVOTklORycpO1xuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IHRoaXMuZ2V0UGVyZm9ybWFuY2UoKS5yYXRlRGVzY3JpcHRpb247XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgSm9iVHlwZVN0YXR1cy5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnSm9iVHlwZVN0YXR1cyc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0UGVyZm9ybWFuY2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmFpbGVkQXJyID0gXy53aGVyZSh0aGlzLmpvYl9jb3VudHMsIHsgJ3N0YXR1cyc6ICdGQUlMRUQnIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRlZCA9IF8uZmluZCh0aGlzLmpvYl9jb3VudHMsICdzdGF0dXMnLCAnQ09NUExFVEVEJykgfHwgeyBjb3VudDogMCB9LFxuICAgICAgICAgICAgICAgICAgICBmYWlsZWQgPSBfLnN1bShmYWlsZWRBcnIsICdjb3VudCcpLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbCA9IGZhaWxlZEFyci5sZW5ndGggPiAwID8gZmFpbGVkICsgY29tcGxldGVkLmNvdW50IDogY29tcGxldGVkLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzUmF0ZSA9IHRvdGFsID09PSAwID8gMCA6IDEwMCAtICgoZmFpbGVkIC8gdG90YWwpICogMTAwKS50b0ZpeGVkKDIpLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzUmF0ZURlc2NyaXB0aW9uID0gJ3N1Y2Nlc3MnO1xuXG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3NSYXRlIDw9IDMwICYmIHRvdGFsID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzUmF0ZURlc2NyaXB0aW9uID0gJ2Vycm9yJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN1Y2Nlc3NSYXRlID4gMzAgJiYgc3VjY2Vzc1JhdGUgPD0gNjAgJiYgdG90YWwgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NSYXRlRGVzY3JpcHRpb24gPSAnd2FybmluZyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0b3RhbCA9PT0gMCAmJiAhdGhpcy5oYXNfcnVubmluZykge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzUmF0ZURlc2NyaXB0aW9uID0gJ3pfaW5hY3RpdmUnOyAvLyBwcmVwZW5kIHdpdGggJ3pfJyBmb3Igb3JkZXJpbmcgcHVycG9zZXNcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICByYXRlOiBzdWNjZXNzUmF0ZSxcbiAgICAgICAgICAgICAgICAgICAgcmF0ZURlc2NyaXB0aW9uOiBzdWNjZXNzUmF0ZURlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICBmYWlsZWQ6IGZhaWxlZCxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWQuY291bnQsXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsOiB0b3RhbFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0UnVubmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfLmZpbmQodGhpcy5qb2JfY291bnRzLCAnc3RhdHVzJywgJ1JVTk5JTkcnKSB8fCB7IGNvdW50OiAwIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0RmFpbHVyZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmFpbGVkID0gXy53aGVyZSh0aGlzLmpvYl9jb3VudHMsIHsgJ3N0YXR1cyc6ICdGQUlMRUQnIH0pLFxuICAgICAgICAgICAgICAgICAgICBmYWlsZWRWYWx1ZXMgPSBfLnZhbHVlcyhfLmdyb3VwQnkoZmFpbGVkLCAnY2F0ZWdvcnknKSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgZ2V0RmFpbHVyZUNvdW50cyA9IGZ1bmN0aW9uIChjYXRlZ29yaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1cm5BcnIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGNhdGVnb3JpZXMsIGZ1bmN0aW9uIChjYXRlZ29yeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGNhdGVnb3J5LCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuQXJyLnB1c2goeyBzdGF0dXM6IHZhbC5jYXRlZ29yeSwgY291bnQ6IHZhbC5jb3VudCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVybkFycjtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEZhaWx1cmVDb3VudHMoZmFpbGVkVmFsdWVzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRDZWxsRmlsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzdGF0dXMgPSB0aGlzLmdldFBlcmZvcm1hbmNlKCkucmF0ZURlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdzdWNjZXNzJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGVDb25maWcuY29sb3JzLmNoYXJ0X2dyZWVuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSAnd2FybmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjYWxlQ29uZmlnLmNvbG9ycy5jaGFydF95ZWxsb3c7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjYWxlQ29uZmlnLmNvbG9ycy5jaGFydF9yZWQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09ICd6X2luYWN0aXZlJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGVDb25maWcuY29sb3JzLmNoYXJ0X2dyYXlfZGFyaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q2VsbEFjdGl2aXR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJ1bm5pbmcgPSB0aGlzLmdldFJ1bm5pbmcoKTtcbiAgICAgICAgICAgICAgICBpZiAocnVubmluZy5jb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcmI3gnICsgc2NhbGVDb25maWcuYWN0aXZpdHlJY29uQ29kZSArICc7JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldENlbGxBY3Rpdml0eVRvdGFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UnVubmluZygpLmNvdW50ID4gMCA/IHRoaXMuZ2V0UnVubmluZygpLmNvdW50IDogJyc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q2VsbEVycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBlcmZvcm1hbmNlID0gdGhpcy5nZXRQZXJmb3JtYW5jZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiAnRmFpbGVkOiAnICsgKHBlcmZvcm1hbmNlLmZhaWxlZCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q2VsbFRvdGFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBlcmZvcm1hbmNlID0gdGhpcy5nZXRQZXJmb3JtYW5jZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiAnQ29tcGxldGVkOiAnICsgcGVyZm9ybWFuY2UuY29tcGxldGVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldENlbGxQYXVzZVJlc3VtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzdGF0aWMgbWV0aG9kcywgYXNzaWduZWQgdG8gY2xhc3NcbiAgICAgICAgSm9iVHlwZVN0YXR1cy5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSm9iVHlwZVN0YXR1cyhcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5qb2JfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5qb2JfY291bnRzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgSm9iVHlwZVN0YXR1cygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIEpvYlR5cGVTdGF0dXMudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoSm9iVHlwZVN0YXR1cy5idWlsZClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBKb2JUeXBlU3RhdHVzLmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBKb2JUeXBlU3RhdHVzO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKXtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdQcm9kdWN0JywgZnVuY3Rpb24gKEpvYlR5cGUsIHNjYWxlU2VydmljZSwgc2NhbGVDb25maWcpIHtcbiAgICAgICAgdmFyIFByb2R1Y3QgPSBmdW5jdGlvbiAoaWQsIHdvcmtzcGFjZSwgZmlsZV9uYW1lLCBtZWRpYV90eXBlLCBmaWxlX3NpemUsIGRhdGFfdHlwZSwgaXNfZGVsZXRlZCwgdXVpZCwgdXJsLCBjcmVhdGVkLCBkZWxldGVkLCBkYXRhX3N0YXJ0ZWQsIGRhdGFfZW5kZWQsIGdlb21ldHJ5LCBjZW50ZXJfcG9pbnQsIG1ldGFfZGF0YSwgY291bnRyaWVzLCBsYXN0X21vZGlmaWVkLCBpc19vcGVyYXRpb25hbCwgaXNfcHVibGlzaGVkLCBwdWJsaXNoZWQsIHVucHVibGlzaGVkLCBqb2JfdHlwZSwgam9iLCBqb2JfZXhlLCB1cGRhdGUsIHNvdXJjZV9maWxlcykge1xuICAgICAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICAgICAgdGhpcy53b3Jrc3BhY2UgPSB3b3Jrc3BhY2U7XG4gICAgICAgICAgICB0aGlzLmZpbGVfbmFtZSA9IGZpbGVfbmFtZTtcbiAgICAgICAgICAgIHRoaXMubWVkaWFfdHlwZSA9IG1lZGlhX3R5cGU7XG4gICAgICAgICAgICB0aGlzLmZpbGVfc2l6ZSA9IGZpbGVfc2l6ZTtcbiAgICAgICAgICAgIHRoaXMuZmlsZV9zaXplX3JlYWRhYmxlID0gdGhpcy5nZXRSZWFkYWJsZUZpbGVTaXplKCk7XG4gICAgICAgICAgICB0aGlzLmRhdGFfdHlwZSA9IGRhdGFfdHlwZTtcbiAgICAgICAgICAgIHRoaXMuaXNfZGVsZXRlZCA9IGlzX2RlbGV0ZWQ7XG4gICAgICAgICAgICB0aGlzLnV1aWQgPSB1dWlkO1xuICAgICAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZWQgPSBjcmVhdGVkO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVkX2Zvcm1hdHRlZCA9IGNyZWF0ZWQgPyBtb21lbnQudXRjKGNyZWF0ZWQpLnRvSVNPU3RyaW5nKCkgOiBjcmVhdGVkO1xuICAgICAgICAgICAgdGhpcy5kZWxldGVkID0gZGVsZXRlZDtcbiAgICAgICAgICAgIHRoaXMuZGF0YV9zdGFydGVkID0gZGF0YV9zdGFydGVkO1xuICAgICAgICAgICAgdGhpcy5kYXRhX2VuZGVkID0gZGF0YV9lbmRlZDtcbiAgICAgICAgICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbiAgICAgICAgICAgIHRoaXMuY2VudGVyX3BvaW50ID0gY2VudGVyX3BvaW50O1xuICAgICAgICAgICAgdGhpcy5tZXRhX2RhdGEgPSBtZXRhX2RhdGE7XG4gICAgICAgICAgICB0aGlzLmNvdW50cmllcyA9IGNvdW50cmllcztcbiAgICAgICAgICAgIHRoaXMubGFzdF9tb2RpZmllZCA9IGxhc3RfbW9kaWZpZWQ7XG4gICAgICAgICAgICB0aGlzLmxhc3RfbW9kaWZpZWRfZm9ybWF0dGVkID0gbGFzdF9tb2RpZmllZCA/IG1vbWVudC51dGMobGFzdF9tb2RpZmllZCkudG9JU09TdHJpbmcoKSA6IGxhc3RfbW9kaWZpZWQ7XG4gICAgICAgICAgICB0aGlzLmlzX29wZXJhdGlvbmFsID0gaXNfb3BlcmF0aW9uYWw7XG4gICAgICAgICAgICB0aGlzLmlzX29wZXJhdGlvbmFsX2xhYmVsID0gaXNfb3BlcmF0aW9uYWwgPyAnT3BlcmF0aW9uYWwnIDogJ1ImYW1wO0QnO1xuICAgICAgICAgICAgdGhpcy5pc19wdWJsaXNoZWQgPSBpc19wdWJsaXNoZWQ7XG4gICAgICAgICAgICB0aGlzLnB1Ymxpc2hlZCA9IHB1Ymxpc2hlZDtcbiAgICAgICAgICAgIHRoaXMudW5wdWJsaXNoZWQgPSB1bnB1Ymxpc2hlZDtcbiAgICAgICAgICAgIHRoaXMuam9iX3R5cGUgPSBKb2JUeXBlLnRyYW5zZm9ybWVyKGpvYl90eXBlKTtcbiAgICAgICAgICAgIHRoaXMuam9iID0gam9iO1xuICAgICAgICAgICAgdGhpcy5qb2JfZXhlID0gam9iX2V4ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlID0gdXBkYXRlO1xuICAgICAgICAgICAgdGhpcy5zb3VyY2VfZmlsZXMgPSBzb3VyY2VfZmlsZXM7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgUHJvZHVjdC5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBnZXREdXJhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQudXRjKHRoaXMubGFzdF9tb2RpZmllZCkuZGlmZihtb21lbnQudXRjKHRoaXMuY3JlYXRlZCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFJlYWRhYmxlRmlsZVNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGVTZXJ2aWNlLmNhbGN1bGF0ZUZpbGVTaXplRnJvbUJ5dGVzKHRoaXMuZmlsZV9zaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzdGF0aWMgbWV0aG9kcywgYXNzaWduZWQgdG8gY2xhc3NcbiAgICAgICAgUHJvZHVjdC5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvZHVjdChcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS53b3Jrc3BhY2UsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZmlsZV9uYW1lLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm1lZGlhX3R5cGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZmlsZV9zaXplLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmRhdGFfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pc19kZWxldGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnV1aWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudXJsLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNyZWF0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGVsZXRlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhX3N0YXJ0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YV9lbmRlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5nZW9tZXRyeSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jZW50ZXJfcG9pbnQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubWV0YV9kYXRhLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNvdW50cmllcyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5sYXN0X21vZGlmaWVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmlzX29wZXJhdGlvbmFsLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmlzX3B1Ymxpc2hlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wdWJsaXNoZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudW5wdWJsaXNoZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9iX3R5cGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9iLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmpvYl9leGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudXBkYXRlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnNvdXJjZV9maWxlc1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb2R1Y3QoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBQcm9kdWN0LnRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgICAgICAgICAubWFwKFByb2R1Y3QuYnVpbGQpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvZHVjdC5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUHJvZHVjdDtcbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ1J1bm5pbmdKb2InLCBmdW5jdGlvbiAoc2NhbGVDb25maWcsIHNjYWxlU2VydmljZSwgSm9iVHlwZSkge1xuICAgICAgICB2YXIgUnVubmluZ0pvYiA9IGZ1bmN0aW9uIChjb3VudCwgbG9uZ2VzdF9ydW5uaW5nLCBqb2JfdHlwZSkge1xuICAgICAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50O1xuICAgICAgICAgICAgdGhpcy5sb25nZXN0X3J1bm5pbmcgPSBsb25nZXN0X3J1bm5pbmc7XG4gICAgICAgICAgICB0aGlzLmpvYl90eXBlID0gSm9iVHlwZS50cmFuc2Zvcm1lcihqb2JfdHlwZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgUnVubmluZ0pvYi5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBnZXREdXJhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY2FsZVNlcnZpY2UuY2FsY3VsYXRlRHVyYXRpb24odGhpcy5sb25nZXN0X3J1bm5pbmcsIG1vbWVudC51dGMoKS50b0lTT1N0cmluZygpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRJY29uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpZ0pvYlR5cGUgPSBfLmZpbmQoc2NhbGVDb25maWcuam9iVHlwZXMsICd0aXRsZScsIHRoaXMuam9iX3R5cGUubmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZ0pvYlR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZ0pvYlR5cGUuaWNvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjYWxlQ29uZmlnLmRlZmF1bHRJY29uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBSdW5uaW5nSm9iLmJ1aWxkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSdW5uaW5nSm9iKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxvbmdlc3RfcnVubmluZyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5qb2JfdHlwZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ1bm5pbmdKb2IoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBSdW5uaW5nSm9iLnRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgICAgICAgICAubWFwKFJ1bm5pbmdKb2IuYnVpbGQpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUnVubmluZ0pvYi5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUnVubmluZ0pvYjtcbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdTeXN0ZW1GYWlsdXJlJywgZnVuY3Rpb24gKHNjYWxlQ29uZmlnLCBzY2FsZVNlcnZpY2UpIHtcbiAgICAgICAgdmFyIFN5c3RlbUZhaWx1cmUgPSBmdW5jdGlvbiAoY291bnQsIGpvYl90eXBlX25hbWUsIGpvYl90eXBlX3ZlcnNpb24sIGVycm9yX25hbWUsIGZpcnN0X2Vycm9yLCBsYXN0X2Vycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmNvdW50ID0gY291bnQ7XG4gICAgICAgICAgICB0aGlzLmpvYl90eXBlX25hbWUgPSBqb2JfdHlwZV9uYW1lO1xuICAgICAgICAgICAgdGhpcy5qb2JfdHlwZV92ZXJzaW9uID0gam9iX3R5cGVfdmVyc2lvbjtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JfbmFtZSA9IGVycm9yX25hbWU7XG4gICAgICAgICAgICB0aGlzLmZpcnN0X2Vycm9yID0gZmlyc3RfZXJyb3I7XG4gICAgICAgICAgICB0aGlzLmxhc3RfZXJyb3IgPSBsYXN0X2Vycm9yO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgICAgIFN5c3RlbUZhaWx1cmUucHJvdG90eXBlID0ge1xuICAgICAgICAgICAgZ2V0RHVyYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGVTZXJ2aWNlLmNhbGN1bGF0ZUR1cmF0aW9uKHRoaXMuZmlyc3RfZXJyb3IsIHRoaXMubGFzdF9lcnJvcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0SWNvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBjb25maWdKb2JUeXBlID0gXy5maW5kKHNjYWxlQ29uZmlnLmpvYlR5cGVzLCAndGl0bGUnLCB0aGlzLmpvYl90eXBlX25hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChjb25maWdKb2JUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25maWdKb2JUeXBlLmljb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzY2FsZUNvbmZpZy5kZWZhdWx0SWNvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzdGF0aWMgbWV0aG9kcywgYXNzaWduZWQgdG8gY2xhc3NcbiAgICAgICAgU3lzdGVtRmFpbHVyZS5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3lzdGVtRmFpbHVyZShcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jb3VudCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5qb2JfdHlwZV9uYW1lLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmpvYl90eXBlX3ZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZXJyb3JfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5maXJzdF9lcnJvcixcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5sYXN0X2Vycm9yXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgU3lzdGVtRmFpbHVyZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFN5c3RlbUZhaWx1cmUudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoU3lzdGVtRmFpbHVyZS5idWlsZClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBTeXN0ZW1GYWlsdXJlLmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBTeXN0ZW1GYWlsdXJlO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuc2VydmljZSgnam9iRXhlY3V0aW9uU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCwgJHEsICRyZXNvdXJjZSwgcG9sbGVyLCBzY2FsZUNvbmZpZywgSm9iRXhlY3V0aW9uLCBKb2JFeGVjdXRpb25Mb2cpIHtcblxuICAgICAgICB2YXIgZ2V0Sm9iRXhlY3V0aW9uc1BhcmFtcyA9IGZ1bmN0aW9uKCBwYWdlTnVtYmVyLCBwYWdlU2l6ZSwgZmlsdGVyICl7XG4gICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIHBhZ2U6IHBhZ2VOdW1iZXIsXG4gICAgICAgICAgICAgICAgcGFnZV9zaXplOiBwYWdlU2l6ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBqb2JUeXBlSWQgPSBmaWx0ZXIuam9iX3R5cGVfaWQgPyBmaWx0ZXIuam9iVHlwZUlkIDogJyc7XG4gICAgICAgICAgICB2YXIgam9iU3RhdHVzID0gZmlsdGVyLnN0YXR1cyA/IGZpbHRlci5qb2JTdGF0dXMgOiAnJztcblxuICAgICAgICAgICAgaWYgKGpvYlN0YXR1cyAmJiBqb2JTdGF0dXMgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLmpvYl9zdGF0dXMgPSBqb2JTdGF0dXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRKb2JFeGVjdXRpb25zOiBmdW5jdGlvbiAocGFnZU51bWJlciwgcGFnZVNpemUsIGZpbHRlcikge1xuICAgICAgICAgICAgICAgIHZhciBqb2JFeGVjdXRpb25zID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IGdldEpvYkV4ZWN1dGlvbnNQYXJhbXMocGFnZU51bWJlciwgcGFnZVNpemUsIGZpbHRlcik7XG4gICAgICAgICAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ2pvYi1leGVjdXRpb25zLycsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBqb2JFeGVjdXRpb25zLmV4ZWN1dGlvbnMgPSBKb2JFeGVjdXRpb24udHJhbnNmb3JtZXIoZGF0YS5yZXN1bHRzKTtcbiAgICAgICAgICAgICAgICAgICAgam9iRXhlY3V0aW9ucy5jb3VudCA9IGRhdGEuY291bnQ7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShqb2JFeGVjdXRpb25zKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Sm9iRXhlY3V0aW9uRGV0YWlsczogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ2pvYi1leGVjdXRpb25zLycgKyBpZCArICcvJykuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoSm9iRXhlY3V0aW9uLnRyYW5zZm9ybWVyKGRhdGEpKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TG9nT25jZTogZnVuY3Rpb24oZXhlY0lkKXtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnam9iLWV4ZWN1dGlvbnMvJyArIGV4ZWNJZCArICcvbG9ncy8nKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TG9nOiBmdW5jdGlvbihleGVjSWQpe1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSB1cmwgfHwgc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnam9iLWV4ZWN1dGlvbnMvJyArIGV4ZWNJZCArICcvbG9ncy8nO1xuXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHZpZXcuIFNpbmNlIGEgcHJvbWlzZSBjYW4gb25seSBiZSByZXNvbHZlZCBvciByZWplY3RlZCBvbmNlIGJ1dCB3ZSB3YW50XG4gICAgICAgICAgICAgICAgLy8gdG8ga2VlcCB0cmFjayBvZiBhbGwgcmVxdWVzdHMsIHBvbGxlciBzZXJ2aWNlIHVzZXMgdGhlIG5vdGlmeUNhbGxiYWNrLiBCeSBkZWZhdWx0XG4gICAgICAgICAgICAgICAgLy8gcG9sbGVyIG9ubHkgZ2V0cyBub3RpZmllZCBvZiBzdWNjZXNzIHJlc3BvbnNlcy5cbiAgICAgICAgICAgICAgICB2YXIgam9iRXhlY3V0aW9uTG9nUmVzb3VyY2UgPSAkcmVzb3VyY2UodXJsKTtcbiAgICAgICAgICAgICAgICB2YXIgam9iRXhlY3V0aW9uTG9nUG9sbGVyID0gcG9sbGVyLmdldChqb2JFeGVjdXRpb25Mb2dSZXNvdXJjZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IHNjYWxlQ29uZmlnLnBvbGxJbnRlcnZhbHMuam9iRXhlY3V0aW9uTG9nXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGpvYkV4ZWN1dGlvbkxvZ1BvbGxlci5wcm9taXNlLnRoZW4obnVsbCwgbnVsbCwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuJHJlc29sdmVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5leGVjdXRpb25fbG9nID0gSm9iRXhlY3V0aW9uTG9nLnRyYW5zZm9ybWVyKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihyZXN1bHQuZXhlY3V0aW9uX2xvZy5zdGF0dXMgPT09ICdDT01QTEVURUQnIHx8IHJlc3VsdC5leGVjdXRpb25fbG9nLnN0YXR1cyA9PT0gJ0ZBSUxFRCcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvYkV4ZWN1dGlvbkxvZ1BvbGxlci5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgam9iRXhlY3V0aW9uTG9nUG9sbGVyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuc2VydmljZSgnam9iU2VydmljZScsIGZ1bmN0aW9uKCRodHRwLCAkcSwgJHJlc291cmNlLCBzY2FsZUNvbmZpZywgSm9iLCBKb2JEZXRhaWxzLCBSdW5uaW5nSm9iLCBwb2xsZXIsIHBvbGxlckZhY3RvcnkpIHtcblxuICAgICAgICB2YXIgZ2V0Sm9ic1BhcmFtcyA9IGZ1bmN0aW9uIChwYWdlLCBwYWdlX3NpemUsIHN0YXJ0ZWQsIGVuZGVkLCBvcmRlciwgc3RhdHVzLCBqb2JfdHlwZV9pZCwgam9iX3R5cGVfbmFtZSwgam9iX3R5cGVfY2F0ZWdvcnksIHVybCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgICAgIHBhZ2Vfc2l6ZTogcGFnZV9zaXplLFxuICAgICAgICAgICAgICAgIHN0YXJ0ZWQ6IHN0YXJ0ZWQsXG4gICAgICAgICAgICAgICAgZW5kZWQ6IGVuZGVkLFxuICAgICAgICAgICAgICAgIG9yZGVyOiBvcmRlcixcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgICAgICAgICBqb2JfdHlwZV9pZDogam9iX3R5cGVfaWQsXG4gICAgICAgICAgICAgICAgam9iX3R5cGVfbmFtZTogam9iX3R5cGVfbmFtZSxcbiAgICAgICAgICAgICAgICBqb2JfdHlwZV9jYXRlZ29yeTogam9iX3R5cGVfY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldEpvYlVwZGF0ZURhdGEgPSBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRKb2JzOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IGdldEpvYnNQYXJhbXMoKTtcbiAgICAgICAgICAgICAgICBwYXJhbXMudXJsID0gcGFyYW1zLnVybCA/IHBhcmFtcy51cmwgOiBzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICdqb2JzLyc7XG5cbiAgICAgICAgICAgICAgICB2YXIgam9ic1Jlc291cmNlID0gJHJlc291cmNlKHBhcmFtcy51cmwsIHBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgIGpvYnNQb2xsZXIgPSBwb2xsZXJGYWN0b3J5Lm5ld1BvbGxlcihqb2JzUmVzb3VyY2UsIHNjYWxlQ29uZmlnLnBvbGxJbnRlcnZhbHMuam9icyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gam9ic1BvbGxlci5wcm9taXNlLnRoZW4obnVsbCwgbnVsbCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuJHJlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnJlc3VsdHMgPSBKb2IudHJhbnNmb3JtZXIoZGF0YS5yZXN1bHRzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpvYnNQb2xsZXIuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEpvYnNPbmNlOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IGdldEpvYnNQYXJhbXMoKTtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAkaHR0cCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogcGFyYW1zLnVybCA/IHBhcmFtcy51cmwgOiBzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICdqb2JzLycsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnJlc3VsdHMgPSBKb2IudHJhbnNmb3JtZXIoZGF0YS5yZXN1bHRzKTtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEpvYkNvdW50c0J5U3RhdHVzOiBmdW5jdGlvbiAoaG91cikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSBob3VyIHx8IDM7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHNjYWxlQ29uZmlnLnVybHMuZ2V0Sm9iQ291bnRzQnlTdGF0dXMoaG91cikpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRKb2JEZXRhaWw6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnam9icy8nICsgaWQgKyAnLycpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKEpvYkRldGFpbHMudHJhbnNmb3JtZXIoZGF0YSkpO1xuICAgICAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRSdW5uaW5nSm9iczogZnVuY3Rpb24gKHBhZ2VOdW1iZXIsIHBhZ2VTaXplKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZU51bWJlcjogcGFnZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgcnVubmluZ0pvYnNSZXNvdXJjZSA9ICRyZXNvdXJjZShzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICdqb2ItdHlwZXMvcnVubmluZy8nLCBwYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBydW5uaW5nSm9ic1BvbGxlciA9IHBvbGxlckZhY3RvcnkubmV3UG9sbGVyKHJ1bm5pbmdKb2JzUmVzb3VyY2UsIHNjYWxlQ29uZmlnLnBvbGxJbnRlcnZhbHMucnVubmluZ0pvYnMpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmdKb2JzUG9sbGVyLnByb21pc2UudGhlbihudWxsLCBudWxsLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS4kcmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucmVzdWx0cyA9IFJ1bm5pbmdKb2IudHJhbnNmb3JtZXIoZGF0YS5yZXN1bHRzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdKb2JzUG9sbGVyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRSdW5uaW5nSm9ic09uY2U6IGZ1bmN0aW9uIChwYWdlTnVtYmVyLCBwYWdlU2l6ZSkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2VOdW1iZXI6IHBhZ2VOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ2pvYi10eXBlcy9ydW5uaW5nLycsIHBhcmFtcykuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnJlc3VsdHMgPSBSdW5uaW5nSm9iLnRyYW5zZm9ybWVyKGRhdGEucmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdXBkYXRlSm9iOiBmdW5jdGlvbiAoaWQsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGF0YSB8fCBnZXRKb2JVcGRhdGVEYXRhKCk7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ2pvYnMvJyArIGlkICsgJy8nLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5zZXJ2aWNlKCdqb2JUeXBlU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCwgJHEsICRyZXNvdXJjZSwgcG9sbGVyLCBwb2xsZXJGYWN0b3J5LCBzY2FsZUNvbmZpZywgam9iU2VydmljZSwgSm9iVHlwZSwgSm9iVHlwZURldGFpbHMsIEpvYlR5cGVTdGF0dXMpIHtcbiAgICAgICAgLyp2YXIgdG90YWxKb2JUeXBlcyA9IDU7XG5cbiAgICAgICAgdmFyIGdldFRvdGFsSm9iVHlwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdG90YWxKb2JUeXBlcztcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgc2V0VG90YWxKb2JUeXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRvdGFsSm9iVHlwZXMgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMjAgLSAxICsgMSkpICsgMTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZXRUb3RhbEpvYlR5cGVzKCk7XG4gICAgICAgIH0sIDMxMDApOyovXG5cbiAgICAgICAgdmFyIGdldEpvYlR5cGVTdGF0dXNQYXJhbXMgPSBmdW5jdGlvbiAocGFnZSwgcGFnZV9zaXplLCBzdGFydGVkLCBlbmRlZCkge1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHt9O1xuXG4gICAgICAgICAgICBpZiAocGFnZSkgeyBwYXJhbXMucGFnZSA9IHBhZ2U7IH1cbiAgICAgICAgICAgIGlmIChwYWdlX3NpemUpIHsgcGFyYW1zLnBhZ2Vfc2l6ZSA9IHBhZ2Vfc2l6ZTsgfVxuICAgICAgICAgICAgaWYgKHN0YXJ0ZWQpIHsgcGFyYW1zLnN0YXJ0ZWQgPSBzdGFydGVkOyB9XG4gICAgICAgICAgICBpZiAoZW5kZWQpIHsgcGFyYW1zLmVuZGVkID0gZW5kZWQ7IH1cblxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0Sm9iVHlwZXM6IGZ1bmN0aW9uIChvcmRlcikge1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIG9yZGVyOiBvcmRlciB8fCBbJ25hbWUnLCd2ZXJzaW9uJ11cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGpvYlR5cGVzUmVzb3VyY2UgPSAkcmVzb3VyY2Uoc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnam9iLXR5cGVzLycsIHBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgIGpvYlR5cGVzUG9sbGVyID0gcG9sbGVyRmFjdG9yeS5uZXdQb2xsZXIoam9iVHlwZXNSZXNvdXJjZSwgc2NhbGVDb25maWcucG9sbEludGVydmFscy5qb2JUeXBlcyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gam9iVHlwZXNQb2xsZXIucHJvbWlzZS50aGVuKG51bGwsIG51bGwsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLiRyZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyp2YXIgcmV0dXJuUmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXNvbHZlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2JfdHlwZXM6IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBnZXRUb3RhbEpvYlR5cGVzKCk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblJlc3VsdC5qb2JfdHlwZXMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpc19zeXN0ZW1cIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGF1c2VkXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpc2tcIjogNjQuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZG9ja2VyX2ltYWdlXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyY2hpdmVkXCI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZXNfZG9ja2VyXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwcmlvcml0eVwiOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidmVyc2lvblwiOiBcIjEuMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpY29uX2NvZGVcIjogc2NhbGVDb25maWcuam9iVHlwZXNbaSAtIDFdLmNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW5nZXN0cyBhIHNvdXJjZSBmaWxlIGludG8gYSB3b3Jrc3BhY2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWVtXCI6IDY0LjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlzX2FjdGl2ZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjcHVzXCI6IDEuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFzdF9tb2RpZmllZFwiOiBcIjIwMTUtMDMtMTFUMDA6MDA6MDBaXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1heF90cmllc1wiOiAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpc19wYXVzZWRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogc2NhbGVDb25maWcuam9iVHlwZXNbaSAtIDFdLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjcmVhdGVkXCI6IFwiMjAxNS0wMy0xMVQwMDowMDowMFpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGltZW91dFwiOiAxODAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpc19sb25nX3J1bm5pbmdcIjogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJldHVyblJlc3VsdDsqL1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnJlc3VsdHMgPSBKb2JUeXBlLnRyYW5zZm9ybWVyKGRhdGEucmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpvYlR5cGVzUG9sbGVyLnN0b3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Sm9iVHlwZXNPbmNlOiBmdW5jdGlvbiAob3JkZXIpIHtcbiAgICAgICAgICAgICAgICBvcmRlciA9IG9yZGVyIHx8IFsnbmFtZScsJ3ZlcnNpb24nXTtcblxuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwKHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICdqb2ItdHlwZXMvJyxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7IG9yZGVyOiBvcmRlciB9XG4gICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnJlc3VsdHMgPSBKb2JUeXBlLnRyYW5zZm9ybWVyKGRhdGEucmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Sm9iVHlwZVN0YXR1czogZnVuY3Rpb24gKHBhZ2UsIHBhZ2Vfc2l6ZSwgc3RhcnRlZCwgZW5kZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gZ2V0Sm9iVHlwZVN0YXR1c1BhcmFtcyhwYWdlLCBwYWdlX3NpemUsIHN0YXJ0ZWQsIGVuZGVkKTtcblxuICAgICAgICAgICAgICAgIHZhciBqb2JUeXBlU3RhdHVzUmVzb3VyY2UgPSAkcmVzb3VyY2Uoc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnam9iLXR5cGVzL3N0YXR1cy8nLCBwYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBqb2JUeXBlU3RhdHVzUG9sbGVyID0gcG9sbGVyRmFjdG9yeS5uZXdQb2xsZXIoam9iVHlwZVN0YXR1c1Jlc291cmNlLCBzY2FsZUNvbmZpZy5wb2xsSW50ZXJ2YWxzLmpvYlR5cGVTdGF0dXMpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGpvYlR5cGVTdGF0dXNQb2xsZXIucHJvbWlzZS50aGVuKG51bGwsIG51bGwsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLiRyZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyp2YXIgcmV0dXJuZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcmVzb2x2ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgam9iX3R5cGVfc3RhdHM6IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZXRUb3RhbEpvYlR5cGVzKCk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybmRhdGEuam9iX3R5cGVfc3RhdHMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpY29uX2NvZGVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm51bV9jb21wbGV0ZWRcIjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDIwMDAwIC0gMTAwMDAgKyAxKSkgKyAxMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibnVtX2NhbmNlbGVkXCI6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMDAgLSAyMCArIDEpKSArIDIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJudW1fZXJyb3JfREFUQVwiOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoOTAwMCAtIDIwICsgMSkpICsgMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm51bV9lcnJvcl9TWVNURU1cIjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDkwMDAgLSAyMCArIDEpKSArIDIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJudW1fZXJyb3JfQUxHT1JJVEhNXCI6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICg5MDAwIC0gMjAgKyAxKSkgKyAyMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHJldHVybmRhdGE7Ki9cblxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5yZXN1bHRzID0gSm9iVHlwZVN0YXR1cy50cmFuc2Zvcm1lcihkYXRhLnJlc3VsdHMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgam9iVHlwZVN0YXR1c1BvbGxlci5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Sm9iVHlwZVN0YXR1c09uY2U6IGZ1bmN0aW9uIChwYWdlLCBwYWdlX3NpemUsIHN0YXJ0ZWQsIGVuZGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSBnZXRKb2JUeXBlU3RhdHVzUGFyYW1zKHBhZ2UsIHBhZ2Vfc2l6ZSwgc3RhcnRlZCwgZW5kZWQpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ2pvYi10eXBlcy9zdGF0dXMvJyxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICAgICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucmVzdWx0cyA9IEpvYlR5cGVTdGF0dXMudHJhbnNmb3JtZXIoZGF0YS5yZXN1bHRzKTtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRKb2JUeXBlRGV0YWlsczogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgICAgICRodHRwLmdldChzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICdqb2ItdHlwZXMvJyArIGlkICsgJy8nKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShKb2JUeXBlRGV0YWlscy50cmFuc2Zvcm1lcihkYXRhKSk7XG4gICAgICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVwZGF0ZUpvYlR5cGU6IGZ1bmN0aW9uIChkYXRhKXtcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZEpvYlR5cGUgPSBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX21hcHBpbmdzOiBkYXRhLmVycm9yX21hcHBpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfcGF1c2VkOiBkYXRhLmlzX3BhdXNlZFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWREYXRhID0gdXBkYXRlZEpvYlR5cGUoZGF0YSk7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ2pvYi10eXBlcy8nICsgZGF0YS5pZCArICcvJyxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB1cGRhdGVkRGF0YVxuICAgICAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoSm9iVHlwZURldGFpbHMudHJhbnNmb3JtZXIocmVzdWx0KSk7XG4gICAgICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmNvbnRyb2xsZXIoJ2xvYWRDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sIHNjYWxlU2VydmljZSwgbmF2U2VydmljZSwgbG9hZFNlcnZpY2UsIHVpR3JpZENvbnN0YW50cywgc2NhbGVDb25maWcsIHN1Ym5hdlNlcnZpY2UsIFF1ZXVlU3RhdHVzLCBncmlkRmFjdG9yeSkge1xuICAgICAgICAkc2NvcGUubG9hZGluZyA9IHRydWU7XG4gICAgICAgICRzY29wZS5xdWV1ZVN0YXR1c0Vycm9yID0gbnVsbDtcbiAgICAgICAgJHNjb3BlLnF1ZXVlU3RhdHVzRXJyb3JTdGF0dXMgPSBudWxsO1xuICAgICAgICAkc2NvcGUudG90YWxRdWV1ZWQgPSAwO1xuICAgICAgICAkc2NvcGUuZ3JpZFN0eWxlID0gJyc7XG4gICAgICAgICRzY29wZS5zdWJuYXZMaW5rcyA9IHNjYWxlQ29uZmlnLnN1Ym5hdkxpbmtzLmxvYWQ7XG4gICAgICAgIHN1Ym5hdlNlcnZpY2Uuc2V0Q3VycmVudFBhdGgoJ2xvYWQnKTtcblxuICAgICAgICAkc2NvcGUuZ2V0UGFnZSA9IGZ1bmN0aW9uIChwYWdlTnVtYmVyLCBwYWdlU2l6ZSkge1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgbG9hZFNlcnZpY2UuZ2V0UXVldWVTdGF0dXMocGFnZU51bWJlciAtIDEsIHBhZ2VTaXplKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld0RhdGEgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5ncmlkT3B0aW9ucy5wYWdpbmF0aW9uUGFnZVNpemU7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBuZXdEYXRhLnB1c2goZGF0YS5qb2JzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLmRhdGEgPSBuZXdEYXRhO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICdVbmFibGUgdG8gbG9hZCBxdWV1ZSBzdGF0dXM6ICcgKyBlcnJvci5tZXNzYWdlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJHNjb3BlLnN0YXR1cyk7XG4gICAgICAgICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucyA9IGdyaWRGYWN0b3J5LmRlZmF1bHRHcmlkT3B0aW9ucygpO1xuICAgICAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLmVuYWJsZVNvcnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy5jb2x1bW5EZWZzID0gW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogJ2pvYl90eXBlX25hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdKb2IgVHlwZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbFRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInVpLWdyaWQtY2VsbC1jb250ZW50c1wiPjxzcGFuIG5nLWJpbmQtaHRtbD1cInJvdy5lbnRpdHkuZ2V0SWNvbigpXCI+PC9zcGFuPiB7eyByb3cuZW50aXR5LmpvYl90eXBlX25hbWUgfX08L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgZmllbGQ6ICdqb2JfdHlwZV92ZXJzaW9uJywgZW5hYmxlRmlsdGVyaW5nOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGZpZWxkOiAnaGlnaGVzdF9wcmlvcml0eScsIGVuYWJsZUZpbHRlcmluZzogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6ICdsb25nZXN0UXVldWVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnRHVyYXRpb24gb2YgTG9uZ2VzdCBRdWV1ZWQgSm9iJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZUZpbHRlcmluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidWktZ3JpZC1jZWxsLWNvbnRlbnRzXCI+e3sgcm93LmVudGl0eS5nZXREdXJhdGlvbigpIH19PC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7IGZpZWxkOiAnY291bnQnLCBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgZmllbGQ6ICdpc19qb2JfdHlwZV9wYXVzZWQnLCBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlIH1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLmRhdGEgPSBbXTtcbiAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy5vblJlZ2lzdGVyQXBpID0gZnVuY3Rpb24gKGdyaWRBcGkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9zZXQgZ3JpZEFwaSBvbiBzY29wZVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ3JpZEFwaSA9IGdyaWRBcGk7XG4gICAgICAgICAgICAgICAgICAgIGdyaWRBcGkuc2VsZWN0aW9uLm9uLnJvd1NlbGVjdGlvbkNoYW5nZWQoJHNjb3BlLCBmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8kbG9jYXRpb24ucGF0aCgnL2pvYnMnKS5zZWFyY2goe2pvYl90eXBlX2lkOiByb3cuZW50aXR5LmpvYl90eXBlX2lkLCBzdGF0dXM6ICdSVU5OSU5HJ30pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdyaWRBcGkucGFnaW5hdGlvbi5vbi5wYWdpbmF0aW9uQ2hhbmdlZCgkc2NvcGUsIGZ1bmN0aW9uIChjdXJyZW50UGFnZSwgcGFnZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRQYWdlKGN1cnJlbnRQYWdlLCBwYWdlU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgbG9hZFNlcnZpY2UuZ2V0UXVldWVTdGF0dXMoMCwgJHNjb3BlLmdyaWRPcHRpb25zLnBhZ2luYXRpb25QYWdlU2l6ZSkudGhlbihudWxsLCBudWxsLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC4kcmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLmRhdGEgPSByZXN1bHQucXVldWVfc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMudG90YWxJdGVtcyA9IHJlc3VsdC5xdWV1ZV9zdGF0dXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxRdWV1ZWQgPSBfLnN1bShyZXN1bHQucXVldWVfc3RhdHVzLCAnY291bnQnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3F1ZXVlIHN0YXR1cyB1cGRhdGVkJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXNUZXh0ICYmIHJlc3VsdC5zdGF0dXNUZXh0ICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnF1ZXVlU3RhdHVzRXJyb3JTdGF0dXMgPSByZXN1bHQuc3RhdHVzVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucXVldWVTdGF0dXNFcnJvciA9ICdVbmFibGUgdG8gcmV0cmlldmUgcXVldWUgc3RhdHVzLic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBuYXZTZXJ2aWNlLnVwZGF0ZUxvY2F0aW9uKCdxdWV1ZScpO1xuICAgICAgICB9O1xuICAgICAgICBpbml0aWFsaXplKCk7XG5cbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBzZXQgY29udGFpbmVyIGhlaWdodHMgZXF1YWwgdG8gYXZhaWxhYmxlIHBhZ2UgaGVpZ2h0XG4gICAgICAgICAgICB2YXIgdmlld3BvcnQgPSBzY2FsZVNlcnZpY2UuZ2V0Vmlld3BvcnRTaXplKCksXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gc2NhbGVDb25maWcuaGVhZGVyT2Zmc2V0LFxuICAgICAgICAgICAgICAgIGdyaWRNYXhIZWlnaHQgPSB2aWV3cG9ydC5oZWlnaHQgLSBvZmZzZXQ7XG5cbiAgICAgICAgICAgICRzY29wZS5ncmlkU3R5bGUgPSAnaGVpZ2h0OiAnICsgZ3JpZE1heEhlaWdodCArICdweDsgbWF4LWhlaWdodDogJyArIGdyaWRNYXhIZWlnaHQgKyAncHg7IG92ZXJmbG93LXk6IGF1dG87JztcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5jb250cm9sbGVyKCdsb2FkRGVwdGhDb250cm9sbGVyJywgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCBuYXZTZXJ2aWNlLCBzY2FsZUNvbmZpZywgc3VibmF2U2VydmljZSkge1xuICAgICAgICAkc2NvcGUuc3VibmF2TGlua3MgPSBzY2FsZUNvbmZpZy5zdWJuYXZMaW5rcy5sb2FkO1xuICAgICAgICBzdWJuYXZTZXJ2aWNlLnNldEN1cnJlbnRQYXRoKCdsb2FkL2RlcHRoJyk7XG5cbiAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICB2YXIgaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5hdlNlcnZpY2UudXBkYXRlTG9jYXRpb24oJ2xvYWQnKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpbml0aWFsaXplKCk7XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuY29udHJvbGxlcigncXVldWVSdW5uaW5nQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJGxvY2F0aW9uLCBzY2FsZVNlcnZpY2UsIG5hdlNlcnZpY2UsIGpvYlNlcnZpY2UsIGdyaWRGYWN0b3J5LCB1aUdyaWRDb25zdGFudHMsIHNjYWxlQ29uZmlnLCBzdWJuYXZTZXJ2aWNlKSB7XG4gICAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLnJ1bm5pbmdKb2JzRXJyb3IgPSBudWxsO1xuICAgICAgICAkc2NvcGUucnVubmluZ0pvYnNFcnJvclN0YXR1cyA9IG51bGw7XG4gICAgICAgICRzY29wZS50b3RhbFJ1bm5pbmcgPSAwO1xuICAgICAgICAkc2NvcGUuZ3JpZFN0eWxlID0gJyc7XG4gICAgICAgICRzY29wZS5zdWJuYXZMaW5rcyA9IHNjYWxlQ29uZmlnLnN1Ym5hdkxpbmtzLmxvYWQ7XG4gICAgICAgIHN1Ym5hdlNlcnZpY2Uuc2V0Q3VycmVudFBhdGgoJ2xvYWQvcnVubmluZycpO1xuXG4gICAgICAgICRzY29wZS5nZXRQYWdlID0gZnVuY3Rpb24gKHBhZ2VOdW1iZXIsIHBhZ2VTaXplKXtcbiAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGpvYlNlcnZpY2UuZ2V0UnVubmluZ0pvYnNPbmNlKHBhZ2VOdW1iZXIgLSAxLCBwYWdlU2l6ZSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBuZXdEYXRhID0gW107XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8ICRzY29wZS5ncmlkT3B0aW9ucy5wYWdpbmF0aW9uUGFnZVNpemU7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIG5ld0RhdGEucHVzaChkYXRhLnJlc3VsdHNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMuZGF0YSA9IG5ld0RhdGE7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcil7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICdVbmFibGUgdG8gbG9hZCBxdWV1ZSBydW5uaW5nIHN0YXR1czogJyArIGVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigkc2NvcGUuc3RhdHVzKTtcbiAgICAgICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucyA9IGdyaWRGYWN0b3J5LmRlZmF1bHRHcmlkT3B0aW9ucygpO1xuICAgICAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLmVuYWJsZVNvcnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy5jb2x1bW5EZWZzID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnSm9iIFR5cGUnLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidWktZ3JpZC1jZWxsLWNvbnRlbnRzXCI+PGkgY2xhc3M9XCJmYSBmYS17eyByb3cuZW50aXR5LmdldEljb24oKSB9fVwiPjwvaT4ge3sgcm93LmVudGl0eS5qb2JfdHlwZS50aXRsZSB9fTwvZGl2PidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtmaWVsZDogJ2pvYl90eXBlLnZlcnNpb24nLCBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlfSxcbiAgICAgICAgICAgICAgICB7ZmllbGQ6ICdjb3VudCcsIGRpc3BsYXlOYW1lOiAnTnVtYmVyIG9mIEpvYnMnLCBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkOiAnbG9uZ2VzdFJ1bm5pbmcnLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogJ0R1cmF0aW9uIG9mIExvbmdlc3QgUnVubmluZyBKb2InLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjZWxsVGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidWktZ3JpZC1jZWxsLWNvbnRlbnRzXCI+e3sgcm93LmVudGl0eS5nZXREdXJhdGlvbigpIH19PC9kaXY+J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMuZGF0YSA9IFtdO1xuICAgICAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLm9uUmVnaXN0ZXJBcGkgPSBmdW5jdGlvbiAoZ3JpZEFwaSkge1xuICAgICAgICAgICAgICAgIC8vIHNldCBncmlkQXBpIG9uIHNjb3BlXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdyaWRBcGkgPSBncmlkQXBpO1xuICAgICAgICAgICAgICAgIGdyaWRBcGkuc2VsZWN0aW9uLm9uLnJvd1NlbGVjdGlvbkNoYW5nZWQoJHNjb3BlLCBmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvam9icycpLnNlYXJjaCh7am9iX3R5cGVfaWQ6IHJvdy5lbnRpdHkuam9iX3R5cGUuaWQsIHN0YXR1czogJ1JVTk5JTkcnfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICRzY29wZS5ncmlkQXBpLnBhZ2luYXRpb24ub24ucGFnaW5hdGlvbkNoYW5nZWQoJHNjb3BlLCBmdW5jdGlvbiAoY3VycmVudFBhZ2UsIHBhZ2VTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRQYWdlKGN1cnJlbnRQYWdlLCBwYWdlU2l6ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBqb2JTZXJ2aWNlLmdldFJ1bm5pbmdKb2JzKDAsICRzY29wZS5ncmlkT3B0aW9ucy5wYWdpbmF0aW9uUGFnZVNpemUpLnRoZW4obnVsbCwgbnVsbCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS4kcmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLmRhdGEgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy50b3RhbEl0ZW1zID0gZGF0YS5yZXN1bHRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUnVubmluZyA9IF8uc3VtKGRhdGEucmVzdWx0cywgJ2NvdW50Jyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdydW5uaW5nIGpvYnMgdXBkYXRlZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1c1RleHQgJiYgZGF0YS5zdGF0dXNUZXh0ICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJ1bm5pbmdKb2JzRXJyb3JTdGF0dXMgPSBkYXRhLnN0YXR1c1RleHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJ1bm5pbmdKb2JzRXJyb3IgPSAnVW5hYmxlIHRvIHJldHJpZXZlIHJ1bm5pbmcgam9icy4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBuYXZTZXJ2aWNlLnVwZGF0ZUxvY2F0aW9uKCdsb2FkJyk7XG4gICAgICAgIH07XG4gICAgICAgIGluaXRpYWxpemUoKTtcblxuICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHNldCBjb250YWluZXIgaGVpZ2h0cyBlcXVhbCB0byBhdmFpbGFibGUgcGFnZSBoZWlnaHRcbiAgICAgICAgICAgIHZhciB2aWV3cG9ydCA9IHNjYWxlU2VydmljZS5nZXRWaWV3cG9ydFNpemUoKSxcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBzY2FsZUNvbmZpZy5oZWFkZXJPZmZzZXQsXG4gICAgICAgICAgICAgICAgZ3JpZE1heEhlaWdodCA9IHZpZXdwb3J0LmhlaWdodCAtIG9mZnNldDtcblxuICAgICAgICAgICAgJHNjb3BlLmdyaWRTdHlsZSA9ICdoZWlnaHQ6ICcgKyBncmlkTWF4SGVpZ2h0ICsgJ3B4OyBtYXgtaGVpZ2h0OiAnICsgZ3JpZE1heEhlaWdodCArICdweDsgb3ZlcmZsb3cteTogYXV0bzsnO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ1F1ZXVlU3RhdHVzJywgZnVuY3Rpb24gKHNjYWxlQ29uZmlnLCBzY2FsZVNlcnZpY2UpIHtcbiAgICAgICAgdmFyIFF1ZXVlU3RhdHVzID0gZnVuY3Rpb24gKGNvdW50LCBsb25nZXN0X3F1ZXVlZCwgam9iX3R5cGVfbmFtZSwgam9iX3R5cGVfdmVyc2lvbiwgaGlnaGVzdF9wcmlvcml0eSwgaXNfam9iX3R5cGVfcGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLmNvdW50ID0gY291bnQ7XG4gICAgICAgICAgICB0aGlzLmxvbmdlc3RfcXVldWVkID0gbG9uZ2VzdF9xdWV1ZWQ7XG4gICAgICAgICAgICB0aGlzLmpvYl90eXBlX25hbWUgPSBqb2JfdHlwZV9uYW1lO1xuICAgICAgICAgICAgdGhpcy5qb2JfdHlwZV92ZXJzaW9uID0gam9iX3R5cGVfdmVyc2lvbjtcbiAgICAgICAgICAgIHRoaXMuaGlnaGVzdF9wcmlvcml0eSA9IGhpZ2hlc3RfcHJpb3JpdHk7XG4gICAgICAgICAgICB0aGlzLmlzX2pvYl90eXBlX3BhdXNlZCA9IGlzX2pvYl90eXBlX3BhdXNlZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBwdWJsaWMgbWV0aG9kc1xuICAgICAgICBRdWV1ZVN0YXR1cy5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBnZXRJY29uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpZ0pvYlR5cGUgPSBfLmZpbmQoc2NhbGVDb25maWcuam9iVHlwZXMsICd0aXRsZScsIHRoaXMuam9iX3R5cGVfbmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZ0pvYlR5cGUgPyAnPGkgY2xhc3M9XCJmYVwiPiYjeCcgKyBjb25maWdKb2JUeXBlLmNvZGUgKyAnPC9pPicgOiAnPGkgY2xhc3M9XCJmYVwiPiYjeCcgKyBzY2FsZUNvbmZpZy5kZWZhdWx0SWNvbkNvZGUgKyAnPC9pPic7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0RHVyYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGVTZXJ2aWNlLmNhbGN1bGF0ZUR1cmF0aW9uKHRoaXMubG9uZ2VzdF9xdWV1ZWQsIG1vbWVudC51dGMoKS50b0lTT1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzdGF0aWMgbWV0aG9kcywgYXNzaWduZWQgdG8gY2xhc3NcbiAgICAgICAgUXVldWVTdGF0dXMuYnVpbGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFF1ZXVlU3RhdHVzKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNvdW50LFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxvbmdlc3RfcXVldWVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmpvYl90eXBlX25hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9iX3R5cGVfdmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5oaWdoZXN0X3ByaW9yaXR5LFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmlzX2pvYl90eXBlX3BhdXNlZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFF1ZXVlU3RhdHVzKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgUXVldWVTdGF0dXMudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoUXVldWVTdGF0dXMuYnVpbGQpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUXVldWVTdGF0dXMuYnVpbGQoZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFF1ZXVlU3RhdHVzO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuc2VydmljZSgnbG9hZFNlcnZpY2UnLCBmdW5jdGlvbigkaHR0cCwgJHEsICRyZXNvdXJjZSwgc2NhbGVDb25maWcsIHBvbGxlciwgcG9sbGVyRmFjdG9yeSwgUXVldWVTdGF0dXMpIHtcbiAgICAgICAgdmFyIGdldEpvYkxvYWRQYXJhbXMgPSBmdW5jdGlvbiAocGFnZSwgcGFnZV9zaXplLCBzdGFydGVkLCBlbmRlZCwgb3JkZXIsIHN0YXR1cywgam9iX3R5cGVfaWQsIGpvYl90eXBlX25hbWUsIGpvYl90eXBlX2NhdGVnb3J5LCB1cmwpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhcnRlZDogc3RhcnRlZCxcbiAgICAgICAgICAgICAgICBlbmRlZDogZW5kZWQsXG4gICAgICAgICAgICAgICAgam9iX3R5cGVfaWQ6IGpvYl90eXBlX2lkLFxuICAgICAgICAgICAgICAgIGpvYl90eXBlX25hbWU6IGpvYl90eXBlX25hbWUsXG4gICAgICAgICAgICAgICAgam9iX3R5cGVfY2F0ZWdvcnk6IGpvYl90eXBlX2NhdGVnb3J5LFxuICAgICAgICAgICAgICAgIHBhZ2Vfc2l6ZTogMTAwMCxcbiAgICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0UmVxdWV1ZUpvYnNQYXJhbXMgPSBmdW5jdGlvbiAoc3RhcnRlZCwgZW5kZWQsIGpvYl9zdGF0dXMsIGpvYl90eXBlX2lkcywgam9iX3R5cGVfbmFtZXMsIGpvYl90eXBlX2NhdGVnb3JpZXMsIHByaW9yaXR5LCB1cmwpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhcnRlZDogc3RhcnRlZCxcbiAgICAgICAgICAgICAgICBlbmRlZDogZW5kZWQsXG4gICAgICAgICAgICAgICAgam9iX3N0YXR1czogam9iX3N0YXR1cyxcbiAgICAgICAgICAgICAgICBqb2JfaWRzOiBqb2JfaWRzLFxuICAgICAgICAgICAgICAgIGpvYl90eXBlX2lkczogam9iX3R5cGVfaWRzLFxuICAgICAgICAgICAgICAgIGpvYl90eXBlX25hbWVzOiBqb2JfdHlwZV9uYW1lcyxcbiAgICAgICAgICAgICAgICBqb2JfdHlwZV9jYXRlZ29yaWVzOiBqb2JfdHlwZV9jYXRlZ29yaWVzLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiBwcmlvcml0eSxcbiAgICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0UXVldWVTdGF0dXM6IGZ1bmN0aW9uIChwYWdlTnVtYmVyLCBwYWdlU2l6ZSkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2VfbnVtYmVyOiBwYWdlTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICBwYWdlX3NpemU6IHBhZ2VTaXplXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBxdWV1ZVN0YXR1c1Jlc291cmNlID0gJHJlc291cmNlKHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ3F1ZXVlL3N0YXR1cy8nLCBwYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVN0YXR1c1BvbGxlciA9IHBvbGxlckZhY3RvcnkubmV3UG9sbGVyKHF1ZXVlU3RhdHVzUmVzb3VyY2UsIHNjYWxlQ29uZmlnLnBvbGxJbnRlcnZhbHMucXVldWVTdGF0dXMpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXVlU3RhdHVzUG9sbGVyLnByb21pc2UudGhlbihudWxsLCBudWxsLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuJHJlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucXVldWVfc3RhdHVzID0gUXVldWVTdGF0dXMudHJhbnNmb3JtZXIocmVzdWx0LnF1ZXVlX3N0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZVN0YXR1c1BvbGxlci5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRRdWV1ZVN0YXR1c09uY2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAncXVldWUvc3RhdHVzLycpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVybkRhdGEgPSBRdWV1ZVN0YXR1cy50cmFuc2Zvcm1lcihkYXRhLnF1ZXVlX3N0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXR1cm5EYXRhKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXF1ZXVlSm9iczogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCBnZXRSZXF1ZXVlSm9ic1BhcmFtcygpO1xuICAgICAgICAgICAgICAgIHBhcmFtcy51cmwgPSBwYXJhbXMudXJsID8gcGFyYW1zLnVybCA6IHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ3F1ZXVlL3JlcXVldWUtam9icy8nO1xuXG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChwYXJhbXMudXJsLCBwYXJhbXMpLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbihlcnJvcil7XG4gICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Sm9iTG9hZDogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCBnZXRKb2JMb2FkUGFyYW1zKCk7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnVybCA9IHBhcmFtcy51cmwgPyBwYXJhbXMudXJsIDogc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnbG9hZC8nO1xuXG4gICAgICAgICAgICAgICAgdmFyIGpvYkxvYWRSZXNvdXJjZSA9ICRyZXNvdXJjZShwYXJhbXMudXJsLCBwYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBqb2JMb2FkUG9sbGVyID0gcG9sbGVyRmFjdG9yeS5uZXdQb2xsZXIoam9iTG9hZFJlc291cmNlLCBzY2FsZUNvbmZpZy5wb2xsSW50ZXJ2YWxzLmpvYkxvYWQpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGpvYkxvYWRQb2xsZXIucHJvbWlzZS50aGVuKG51bGwsIG51bGwsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YS4kcmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpvYkxvYWRQb2xsZXIuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEpvYkxvYWRPbmNlOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IGdldEpvYkxvYWRQYXJhbXMoKTtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICAkaHR0cCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogcGFyYW1zLnVybCA/IHBhcmFtcy51cmwgOiBzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICdsb2FkLycsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5jb250cm9sbGVyKCdtZXRyaWNzQ29udHJvbGxlcicsIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgc2NhbGVDb25maWcsIHNjYWxlU2VydmljZSwgbmF2U2VydmljZSwgbWV0cmljc1NlcnZpY2UsIG1vbWVudCkge1xuICAgICAgICB2YXIgY2hhcnQgPSBudWxsLFxuICAgICAgICAgICAgY29sQXJyID0gW10sXG4gICAgICAgICAgICBjb2xOYW1lcyA9IHt9LFxuICAgICAgICAgICAgeEFyciA9IFtdLFxuICAgICAgICAgICAgcmVtb3ZlSWRzID0gW10sXG4gICAgICAgICAgICB5VW5pdHMgPSBbXSxcbiAgICAgICAgICAgIGxvY2F0aW9uUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIGNoYXJ0OiBudWxsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgJHNjb3BlLl8gPSBfO1xuICAgICAgICAkc2NvcGUubW9tZW50ID0gbW9tZW50O1xuICAgICAgICAkc2NvcGUubG9hZGluZ01ldHJpY3MgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLmNoYXJ0QXJyID0gW107XG4gICAgICAgICRzY29wZS5jaGFydERhdGEgPSBbXTtcbiAgICAgICAgJHNjb3BlLmNoYXJ0U3R5bGUgPSAnJztcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkRGF0YVR5cGUgPSB7fTtcbiAgICAgICAgJHNjb3BlLmlucHV0U3RhcnREYXRlID0gbW9tZW50LnV0YygpLnN1YnRyYWN0KDEsICdNJykudG9EYXRlKCk7XG4gICAgICAgICRzY29wZS5pbnB1dEVuZERhdGUgPSBtb21lbnQudXRjKCkudG9EYXRlKCk7XG4gICAgICAgICRzY29wZS5vcGVuSW5wdXRTdGFydCA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICRzY29wZS5pbnB1dFN0YXJ0T3BlbmVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmlucHV0U3RhcnRPcGVuZWQgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLm9wZW5JbnB1dEVuZCA9IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICRzY29wZS5pbnB1dEVuZE9wZW5lZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5pbnB1dEVuZE9wZW5lZCA9IGZhbHNlO1xuICAgICAgICAkc2NvcGUuZGF0ZU1vZGVsT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRpbWV6b25lOiAnKzAwMCdcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmRhdGFUeXBlRmlsdGVyVGV4dCA9ICcnO1xuICAgICAgICAkc2NvcGUuZmlsdGVyc0FwcGxpZWQgPSBbXTtcbiAgICAgICAgJHNjb3BlLmZpbHRlcmVkQ2hvaWNlcyA9IFtdO1xuICAgICAgICAkc2NvcGUuZmlsdGVyZWRDaG9pY2VzT3B0aW9ucyA9IFtdO1xuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRNZXRyaWNzID0gW107XG4gICAgICAgICRzY29wZS5jb2x1bW5Hcm91cHNPcHRpb25zID0gW107XG4gICAgICAgICRzY29wZS5jb2x1bW5zID0gW107XG4gICAgICAgICRzY29wZS5ncm91cHMgPSBbXTtcbiAgICAgICAgJHNjb3BlLmNoYXJ0VGl0bGUgPSAnJztcbiAgICAgICAgJHNjb3BlLmNoYXJ0RGlzcGxheSA9ICdzdGFja2VkJztcbiAgICAgICAgJHNjb3BlLnN0YWNrZWRDbGFzcyA9ICdidG4tcHJpbWFyeSc7XG4gICAgICAgICRzY29wZS5ncm91cGVkQ2xhc3MgPSAnYnRuLWRlZmF1bHQnO1xuICAgICAgICAkc2NvcGUuc3ViY2hhcnRDbGFzcyA9ICdidG4tcHJpbWFyeSc7XG4gICAgICAgICRzY29wZS5zdWJjaGFydEVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLmNoYXJ0VHlwZSA9ICdiYXInO1xuICAgICAgICAkc2NvcGUuY2hhcnRUeXBlRGlzcGxheSA9ICdCYXInO1xuICAgICAgICAkc2NvcGUuYmFyQ2xhc3MgPSAnYnRuLXByaW1hcnknO1xuICAgICAgICAkc2NvcGUuYXJlYUNsYXNzID0gJ2J0bi1kZWZhdWx0JztcbiAgICAgICAgJHNjb3BlLmxpbmVDbGFzcyA9ICdidG4tZGVmYXVsdCc7XG4gICAgICAgICRzY29wZS5zcGxpbmVDbGFzcyA9ICdidG4tZGVmYXVsdCc7XG4gICAgICAgICRzY29wZS5zY2F0dGVyQ2xhc3MgPSAnYnRuLWRlZmF1bHQnO1xuXG4gICAgICAgIC8qXG4gICAgICAgIC8vIGNoZWNrIGZvciBsb2NhdGlvblBhcmFtcyBpbiBxdWVyeSBzdHJpbmcsIGFuZCB1cGRhdGUgYXMgbmVjZXNzYXJ5XG4gICAgICAgIF8uZm9yRWFjaChfLnBhaXJzKGxvY2F0aW9uUGFyYW1zKSwgZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBfLmF0KCRsb2NhdGlvbi5zZWFyY2goKSwgcGFyYW1bMF0pO1xuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvblBhcmFtc1twYXJhbVswXV0gPSB2YWx1ZS5sZW5ndGggPiAxID8gdmFsdWUgOiB2YWx1ZVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGxvY2F0aW9uUGFyYW1zLmNoYXJ0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICRzY29wZS5jaGFydEFyciA9IEpTT04ucGFyc2UoYXRvYihsb2NhdGlvblBhcmFtcy5jaGFydCkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRvYXN0clsnZXJyb3InXSgnVW5hYmxlIHRvIHBhcnNlIEpTT04nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAqL1xuXG4gICAgICAgIHNlbGYuZ2V0UGxvdERhdGFQYXJhbXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHBhZ2U6IG51bGwsXG4gICAgICAgICAgICAgICAgcGFnZV9zaXplOiBudWxsLFxuICAgICAgICAgICAgICAgIHN0YXJ0ZWQ6IG9iai5zdGFydGVkLFxuICAgICAgICAgICAgICAgIGVuZGVkOiBvYmouZW5kZWQsXG4gICAgICAgICAgICAgICAgY2hvaWNlX2lkOiBvYmouY2hvaWNlX2lkLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogb2JqLmNvbHVtbixcbiAgICAgICAgICAgICAgICBncm91cDogb2JqLmdyb3VwLFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBvYmouZGF0YVR5cGUubmFtZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLnJlc2V0U2VsZWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS5pbnB1dFN0YXJ0RGF0ZSA9IG1vbWVudC51dGMoKS5zdWJ0cmFjdCgxLCAnTScpLnRvRGF0ZSgpO1xuICAgICAgICAgICAgJHNjb3BlLmlucHV0RW5kRGF0ZSA9IG1vbWVudC51dGMoKS50b0RhdGUoKTtcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZERhdGFUeXBlID0ge307XG4gICAgICAgICAgICAkc2NvcGUuY2hhbmdlRGF0YVR5cGVTZWxlY3Rpb24oKTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLnVwZGF0ZUNoYXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLmNoYXJ0RGF0YSA9IFtdO1xuICAgICAgICAgICAgaWYgKCRzY29wZS5jaGFydEFyci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBub3RoaW5nIHRvIHNob3cgb24gY2hhcnRcbiAgICAgICAgICAgICAgICBjaGFydC5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgY2hhcnQgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FsbEluaXQgPSBfLmFmdGVyKCRzY29wZS5jaGFydEFyci5sZW5ndGgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gb25seSBpbml0Q2hhcnQgYWZ0ZXIgdGhpcyBmdW5jdGlvbiBoYXMgYmVlbiBjYWxsZWQgZm9yIGFsbCBkYXRhc2V0cyBpbiBjaGFydEFyclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZ01ldHJpY3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pbml0Q2hhcnQoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCgkc2NvcGUuY2hhcnRBcnIsIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHNlbGYuZ2V0UGxvdERhdGFQYXJhbXMob2JqKTtcbiAgICAgICAgICAgICAgICAgICAgbWV0cmljc1NlcnZpY2UuZ2V0UGxvdERhdGEocGFyYW1zKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vbWV0cmljc1NlcnZpY2UuZ2V0R2VuZXJhdGVkUGxvdERhdGEoe3F1ZXJ5OiBvYmosIHBhcmFtczogcGFyYW1zfSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNoYXJ0RGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeTogb2JqLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHM6IGRhdGEucmVzdWx0c1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsSW5pdCgpO1xuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nTWV0cmljcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyWydlcnJvciddKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBsb2NhdGlvblBhcmFtcy5jaGFydCA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoJHNjb3BlLmNoYXJ0QXJyKSk7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnY2hhcnQnLCBsb2NhdGlvblBhcmFtcy5jaGFydCkucmVwbGFjZSgpO1xuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmFkZFRvQ2hhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUuY2hhcnRBcnIgPSBbXTsgLy8gY29tbWVudCB0aGlzIG91dCBpZiBhbGxvd2luZyBtdWx0aXBsZSBhZGRzXG4gICAgICAgICAgICAkc2NvcGUubG9hZGluZ01ldHJpY3MgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGZpbHRlcmVkQ2hvaWNlcyA9IFtdLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkQ29sdW1ucyA9IFtdO1xuICAgICAgICAgICAgLy8gZmluZCB0aGUgZmlsdGVyIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhlIGNob3NlbiBmaWx0ZXIgSURzXG4gICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLmZpbHRlcnNBcHBsaWVkLCBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZENob2ljZXMucHVzaChfLmZpbmQoJHNjb3BlLmZpbHRlcmVkQ2hvaWNlcywgeyBpZDogcGFyc2VJbnQoaWQpIH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheSgkc2NvcGUuc2VsZWN0ZWRNZXRyaWNzKSkge1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCgkc2NvcGUuc2VsZWN0ZWRNZXRyaWNzLCBmdW5jdGlvbiAobWV0cmljKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ29sdW1ucy5wdXNoKF8uZmluZCgkc2NvcGUuY29sdW1ucywgeyBuYW1lOiBtZXRyaWMgfSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZENvbHVtbnMucHVzaChfLmZpbmQoJHNjb3BlLmNvbHVtbnMsIHsgbmFtZTogJHNjb3BlLnNlbGVjdGVkTWV0cmljcyB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkc2NvcGUuY2hhcnRBcnIucHVzaCh7XG4gICAgICAgICAgICAgICAgc3RhcnRlZDogJHNjb3BlLmlucHV0U3RhcnREYXRlLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgZW5kZWQ6ICRzY29wZS5pbnB1dEVuZERhdGUudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjaG9pY2VfaWQ6ICRzY29wZS5maWx0ZXJzQXBwbGllZCxcbiAgICAgICAgICAgICAgICBjb2x1bW46IF8ucGx1Y2soc2VsZWN0ZWRDb2x1bW5zLCAnbmFtZScpLFxuICAgICAgICAgICAgICAgIGdyb3VwOiBudWxsLFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAkc2NvcGUuc2VsZWN0ZWREYXRhVHlwZSxcbiAgICAgICAgICAgICAgICBmaWx0ZXJzQXBwbGllZDogZmlsdGVyZWRDaG9pY2VzLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkTWV0cmljczogc2VsZWN0ZWRDb2x1bW5zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlQ2hhcnQoKTtcbiAgICAgICAgICAgIC8vc2VsZi5yZXNldFNlbGVjdGlvbnMoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZGVsZXRlRnJvbUNoYXJ0ID0gZnVuY3Rpb24gKG9ialRvRGVsZXRlKSB7XG4gICAgICAgICAgICBfLnJlbW92ZSgkc2NvcGUuY2hhcnRBcnIsIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKSA9PT0gSlNPTi5zdHJpbmdpZnkob2JqVG9EZWxldGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUNoYXJ0KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmdldEZpbHRlck9wdGlvbnMgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBfLnVuaXEoXy5wbHVjaygkc2NvcGUuZmlsdGVyZWRDaG9pY2VzLCBwYXJhbSkpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5jaGFuZ2VEYXRhVHlwZVNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHJlc2V0IG9wdGlvbnNcbiAgICAgICAgICAgICRzY29wZS5maWx0ZXJzQXBwbGllZCA9IFtdO1xuICAgICAgICAgICAgLy8kc2NvcGUuZmlsdGVyZWRDaG9pY2VzID0gW107XG4gICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWREYXRhVHlwZU9wdGlvbnMgPSBbXTtcbiAgICAgICAgICAgICRzY29wZS5kYXRhVHlwZUZpbHRlclRleHQgPSAnJztcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZE1ldHJpY3MgPSBbXTtcbiAgICAgICAgICAgIC8vJHNjb3BlLmNvbHVtbkdyb3VwcyA9IFtdO1xuICAgICAgICAgICAgJHNjb3BlLmNvbHVtbnMgPSBbXTtcblxuICAgICAgICAgICAgaWYgKCEkc2NvcGUuc2VsZWN0ZWREYXRhVHlwZS5uYW1lIHx8ICRzY29wZS5zZWxlY3RlZERhdGFUeXBlLm5hbWUgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkRGF0YVR5cGUgPSB7fTtcbiAgICAgICAgICAgICAgICBzZWxmLmdldERhdGFUeXBlcygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLmdldERhdGFUeXBlT3B0aW9ucygkc2NvcGUuc2VsZWN0ZWREYXRhVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLyokc2NvcGUuY2hhbmdlRmlsdGVyU2VsZWN0aW9uID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG5hbWUgKyAnOiAnICsgJHNjb3BlLmZpbHRlcnNBcHBsaWVkW25hbWVdKTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBmaWx0ZXIgaWYgdmFsdWUgaXMgbnVsbCBvciBlbXB0eVxuICAgICAgICAgICAgaWYgKCEkc2NvcGUuZmlsdGVyc0FwcGxpZWRbbmFtZV0gfHwgJHNjb3BlLmZpbHRlcnNBcHBsaWVkW25hbWVdID09PSAnJykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkc2NvcGUuZmlsdGVyc0FwcGxpZWRbbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB1cGRhdGUgZmlsdGVyZWQgY2hvaWNlc1xuICAgICAgICAgICAgYXBwbHlGaWx0ZXJzVG9DaG9pY2VzKCk7XG4gICAgICAgIH07Ki9cblxuICAgICAgICAkc2NvcGUuYXJlRmlsdGVyc0FwcGxpZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLmZpbHRlcnNBcHBsaWVkLmxlbmd0aCA+IDA7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyokc2NvcGUucmVtb3ZlRmlsdGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIC8vIHNldCB2YWx1ZSA9IG51bGxcbiAgICAgICAgICAgICRzY29wZS5maWx0ZXJzQXBwbGllZFtuYW1lXSA9ICcnO1xuICAgICAgICAgICAgLy8gdHJpZ2dlciBmaWx0ZXIgc2VsZWN0aW9uIGNoYW5nZVxuICAgICAgICAgICAgJHNjb3BlLmNoYW5nZUZpbHRlclNlbGVjdGlvbihuYW1lKTtcbiAgICAgICAgfTsqL1xuXG4gICAgICAgICRzY29wZS51cGRhdGVDaGFydERpc3BsYXkgPSBmdW5jdGlvbiAoZGlzcGxheSkge1xuICAgICAgICAgICAgJHNjb3BlLmNoYXJ0RGlzcGxheSA9IGRpc3BsYXk7XG4gICAgICAgICAgICAkc2NvcGUuc3RhY2tlZENsYXNzID0gZGlzcGxheSA9PT0gJ3N0YWNrZWQnID8gJ2J0bi1wcmltYXJ5JyA6ICdidG4tZGVmYXVsdCc7XG4gICAgICAgICAgICAkc2NvcGUuZ3JvdXBlZENsYXNzID0gZGlzcGxheSA9PT0gJ2dyb3VwZWQnID8gJ2J0bi1wcmltYXJ5JyA6ICdidG4tZGVmYXVsdCc7XG4gICAgICAgICAgICBzZWxmLmluaXRDaGFydCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS51cGRhdGVDaGFydFR5cGUgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgJHNjb3BlLmNoYXJ0VHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAkc2NvcGUuY2hhcnRUeXBlRGlzcGxheSA9IF8uY2FwaXRhbGl6ZSh0eXBlKTtcbiAgICAgICAgICAgICRzY29wZS5iYXJDbGFzcyA9IHR5cGUgPT09ICdiYXInID8gJ2J0bi1wcmltYXJ5JyA6ICdidG4tZGVmYXVsdCc7XG4gICAgICAgICAgICAkc2NvcGUuYXJlYUNsYXNzID0gdHlwZSA9PT0gJ2FyZWEnID8gJ2J0bi1wcmltYXJ5JyA6ICdidG4tZGVmYXVsdCc7XG4gICAgICAgICAgICAkc2NvcGUubGluZUNsYXNzID0gdHlwZSA9PT0gJ2xpbmUnID8gJ2J0bi1wcmltYXJ5JyA6ICdidG4tZGVmYXVsdCc7XG4gICAgICAgICAgICAkc2NvcGUuc3BsaW5lQ2xhc3MgPSB0eXBlID09PSAnc3BsaW5lJyA/ICdidG4tcHJpbWFyeScgOiAnYnRuLWRlZmF1bHQnO1xuICAgICAgICAgICAgJHNjb3BlLnNjYXR0ZXJDbGFzcyA9IHR5cGUgPT09ICdzY2F0dGVyJyA/ICdidG4tcHJpbWFyeScgOiAnYnRuLWRlZmF1bHQnO1xuICAgICAgICAgICAgc2VsZi5pbml0Q2hhcnQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUudG9nZ2xlU3ViY2hhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUuc3ViY2hhcnRFbmFibGVkID0gISRzY29wZS5zdWJjaGFydEVuYWJsZWQ7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLnN1YmNoYXJ0RW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5zdWJjaGFydENsYXNzID0gJ2J0bi1wcmltYXJ5JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnN1YmNoYXJ0Q2xhc3MgPSAnYnRuLWRlZmF1bHQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5hdlNlcnZpY2UudXBkYXRlTG9jYXRpb24oJ21ldHJpY3MnKTtcbiAgICAgICAgICAgIHNlbGYuZ2V0RGF0YVR5cGVzKCk7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgaWYgKCRzY29wZS5jaGFydEFyci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGVDaGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKi9cbiAgICAgICAgfTtcblxuICAgICAgICAvKnZhciBhcHBseUZpbHRlcnNUb0Nob2ljZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY2hvaWNlcyA9ICRzY29wZS5zZWxlY3RlZERhdGFUeXBlT3B0aW9ucyA/ICRzY29wZS5zZWxlY3RlZERhdGFUeXBlT3B0aW9ucy5jaG9pY2VzIDogW107XG4gICAgICAgICAgICB2YXIgZmlsdGVyZWRDaG9pY2VzID0gXy53aGVyZShjaG9pY2VzLCRzY29wZS5maWx0ZXJzQXBwbGllZCk7XG4gICAgICAgICAgICAkc2NvcGUuZmlsdGVyZWRDaG9pY2VzID0gZmlsdGVyZWRDaG9pY2VzO1xuICAgICAgICB9OyovXG5cbiAgICAgICAgc2VsZi5nZXREYXRhVHlwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBtZXRyaWNzU2VydmljZS5nZXREYXRhVHlwZXMoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXZhaWxhYmxlRGF0YVR5cGVzID0gcmVzdWx0LnJlc3VsdHM7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICAgICAgdG9hc3RyWydlcnJvciddKGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuZ2V0RGF0YVR5cGUgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgIG1ldHJpY3NTZXJ2aWNlLmdldERhdGFUeXBlTWV0cmljcyhpZCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkRGF0YVR5cGVBdmFpbGFibGVNZXRyaWNzID0gcmVzdWx0Lm1ldHJpY3M7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBzZWxmLmdldERhdGFUeXBlT3B0aW9ucyA9IGZ1bmN0aW9uIChkYXRhVHlwZSkge1xuICAgICAgICAgICAgbWV0cmljc1NlcnZpY2UuZ2V0RGF0YVR5cGVPcHRpb25zKGRhdGFUeXBlLm5hbWUpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZERhdGFUeXBlT3B0aW9ucyA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBfLmZvckVhY2gocmVzdWx0LmZpbHRlcnMsIGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFUeXBlRmlsdGVyVGV4dCA9ICRzY29wZS5kYXRhVHlwZUZpbHRlclRleHQubGVuZ3RoID09PSAwID8gXy5jYXBpdGFsaXplKGZpbHRlci5wYXJhbSkgOiAkc2NvcGUuZGF0YVR5cGVGaWx0ZXJUZXh0ICsgJywgJyArIF8uY2FwaXRhbGl6ZShmaWx0ZXIucGFyYW0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJlZENob2ljZXMgPSBfLnNvcnRCeU9yZGVyKHJlc3VsdC5jaG9pY2VzLCBbJ3RpdGxlJywndmVyc2lvbiddLCBbJ2FzYycsJ2FzYyddKTtcbiAgICAgICAgICAgICAgICAvLyBmb3JtYXQgZmlsdGVyZWRDaG9pY2VzIGZvciB1c2Ugd2l0aCBtdWx0aXNlbGVjdCBkaXJlY3RpdmVcbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWRDaG9pY2VzT3B0aW9ucyA9IFtdO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCgkc2NvcGUuZmlsdGVyZWRDaG9pY2VzLCBmdW5jdGlvbiAoY2hvaWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkQ2hvaWNlc09wdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogY2hvaWNlLnZlcnNpb24gPyBjaG9pY2UudGl0bGUgKyAnICcgKyBjaG9pY2UudmVyc2lvbiA6IGNob2ljZS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBjaG9pY2UudmVyc2lvbiA/IGNob2ljZS50aXRsZSArICcgJyArIGNob2ljZS52ZXJzaW9uIDogY2hvaWNlLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNob2ljZS5pZFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyZWRDaG9pY2VzT3B0aW9ucyA9IGZpbHRlcmVkQ2hvaWNlc09wdGlvbnM7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbHVtbnMgPSBfLnNvcnRCeU9yZGVyKHJlc3VsdC5jb2x1bW5zLCBbJ3RpdGxlJ10sIFsnYXNjJ10pO1xuICAgICAgICAgICAgICAgICRzY29wZS5ncm91cHMgPSByZXN1bHQuZ3JvdXBzO1xuXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGFuIGFycmF5IG9mIG9iamVjdHMgY29udGFpbmluZyBncm91cGVkIGNvbHVtbnNcbiAgICAgICAgICAgICAgICB2YXIgY29sdW1uR3JvdXBzT3B0aW9ucyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5Hcm91cHMgPSBfLnBhaXJzKF8uZ3JvdXBCeShyZXN1bHQuY29sdW1ucywgJ2dyb3VwJykpO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChjb2x1bW5Hcm91cHMsIGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IF8uZmluZCgkc2NvcGUuZ3JvdXBzLCB7IG5hbWU6IGdyb3VwWzBdIH0pLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChncm91cFsxXSwgZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBjb2x1bW4udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGNvbHVtbi50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY29sdW1uLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24uY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW5Hcm91cHNPcHRpb25zLnB1c2gob3B0aW9uKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb2x1bW5Hcm91cHNPcHRpb25zLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ05vbmUgU2VsZWN0ZWQnLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ05vbmUgU2VsZWN0ZWQnLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY29sdW1uR3JvdXBzT3B0aW9ucyA9IGNvbHVtbkdyb3Vwc09wdGlvbnM7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3Ipe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICB0b2FzdHJbJ2Vycm9yJ10oZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5pbml0aWFsaXplKCk7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnaW5wdXRFbmREYXRlJywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gc2V0IHVwIGNoYXJ0XG4gICAgICAgIHNlbGYuaW5pdENoYXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gbWFyayBhbnkgZXhpc3RpbmcgZGF0YSBmb3IgcmVtb3ZhbFxuICAgICAgICAgICAgLy8gY29tcGFyZSBjdXJyQ29scyAoY29sdW1ucyBjdXJyZW50bHkgaW4gdGhlIGNoYXJ0KSB3aXRoIGRpc3BsYXlDb2xzIChjb2x1bW5zIHRvIGRpc3BsYXkpXG4gICAgICAgICAgICByZW1vdmVJZHMgPSBbXTtcbiAgICAgICAgICAgIHZhciBjdXJyQ29scyA9IFtdLFxuICAgICAgICAgICAgICAgIGRpc3BsYXlDb2xzID0gW107XG4gICAgICAgICAgICBfLmZvckVhY2goY29sQXJyLCBmdW5jdGlvbiAoY29sLCBpZHgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaWR4ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyQ29scy5wdXNoKGNvbFswXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLmNoYXJ0RGF0YSwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5Q29scyA9IGRpc3BsYXlDb2xzLmNvbmNhdChfLnBsdWNrKGQucXVlcnkuZmlsdGVyc0FwcGxpZWQsICduYW1lJykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBkZXRlcm1pbmUgdGhlIGV4YWN0IGRpZmZlcmVuY2VzIGJldHdlZW4gY3VyckNvbHMgYW5kIGRpc3BsYXlDb2xzXG4gICAgICAgICAgICAvLyBpZiBub25lIGFyZSBmb3VuZCwgdGhlbiByZW1vdmVJZHMgc3RheXMgZW1wdHlcbiAgICAgICAgICAgIF8uZm9yRWFjaChjdXJyQ29scywgZnVuY3Rpb24gKGN1cnJDb2wpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlzcGxheUNvbCA9IF8uZmluZChkaXNwbGF5Q29scywgZnVuY3Rpb24gKGRDb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRDb2wgPT09IGN1cnJDb2w7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKCFkaXNwbGF5Q29sKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUlkcy5wdXNoKGN1cnJDb2wpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBpbml0IHdpdGggbmV3IGRhdGFcbiAgICAgICAgICAgIGNvbEFyciA9IFtdO1xuICAgICAgICAgICAgeEFyciA9IFtdO1xuICAgICAgICAgICAgY29sTmFtZXMgPSB7fTtcblxuICAgICAgICAgICAgLy8gY3JlYXRlIHhBcnJcbiAgICAgICAgICAgIHZhciBudW1EYXlzID0gbW9tZW50LnV0Yygkc2NvcGUuaW5wdXRFbmREYXRlKS5lbmRPZignZCcpLmRpZmYobW9tZW50LnV0Yygkc2NvcGUuaW5wdXRTdGFydERhdGUudG9JU09TdHJpbmcoKSkuc3RhcnRPZignZCcpLCAnZCcpICsgMTsgLy8gYWRkIDEgdG8gaW5jbHVkZSBzdGFydGluZyBkYXkgaW4gY291bnRcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtRGF5czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgeEFyci5wdXNoKG1vbWVudC51dGMoJHNjb3BlLmlucHV0U3RhcnREYXRlLnRvSVNPU3RyaW5nKCkpLnN0YXJ0T2YoJ2QnKS5hZGQoaSwgJ2QnKS50b0RhdGUoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGl0ZXJhdGUgb3ZlciBkYXRhdHlwZXMgYW5kIGFkZCB2YWx1ZXMgdG8gY29sQXJyXG4gICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLmNoYXJ0RGF0YSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVBcnIgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnkgPSBkYXRhLnF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgICBxdWVyeUZpbHRlciA9IHt9LFxuICAgICAgICAgICAgICAgICAgICBxdWVyeURhdGVzID0gW107XG5cbiAgICAgICAgICAgICAgICB5VW5pdHMgPSBfLnBsdWNrKHF1ZXJ5LnNlbGVjdGVkTWV0cmljcywgJ3VuaXRzJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAocXVlcnkuZmlsdGVyc0FwcGxpZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmaWx0ZXJzIHdlcmUgYXBwbGllZCwgc28gYnVpbGQgZGF0YSBzb3VyY2UgYWNjb3JkaW5nbHlcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGRhdGEucmVzdWx0cywgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWVzIGZvciBhbGwgZmlsdGVycyBhcmUgcmV0dXJuZWQgaW4gb25lIGFycmF5IG9mIGFycmF5cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIGdyb3VwIHJlc3VsdHMgYnkgaWQgdG8gaXNvbGF0ZSBmaWx0ZXIgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBlZFJlc3VsdCA9IF8uZ3JvdXBCeShyZXN1bHQudmFsdWVzLCAnaWQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRPYmogPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJJZHMgPSBfLnBsdWNrKHF1ZXJ5LmZpbHRlcnNBcHBsaWVkLCAnaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyeSB0byBnZXQgZWFjaCBmaWx0ZXIgaWQgZnJvbSBncm91cGVkUmVzdWx0LlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgaXQncyB1bmRlZmluZWQsIGFuIGVtcHR5IGFycmF5IHdpbGwgYmUgcmV0dXJuZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgYWxsb3dzIGEgemVyb2VkIGFycmF5IHRvIGFwcGVhciBpbiB0aGUgY2hhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSB3ZSB3YW50IHRvIGluY2x1ZGUgYWxsIGZpbHRlcnMgc2VsZWN0ZWQgYnkgdGhlIHVzZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlZ2FyZGxlc3Mgb2YgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJJZHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gbW9yZSB0aGFuIG9uZSBmaWx0ZXIgaXMgcmVxdWVzdGVkLCB0aGVuIGFuIGlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWUgaXMgcHJlc2VudCB3aXRoaW4gZGF0YS5yZXN1bHRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGZpbHRlcklkcywgZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdE9ialtpZF0gPSBfLmdldChncm91cGVkUmVzdWx0LCBpZCwgW10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIG9uZSBmaWx0ZXIgaXMgcmVxdWVzdGVkLCBubyBpZCB2YWx1ZSBpcyBpbmNsdWRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluIGRhdGEucmVzdWx0cywgc28gYnVpbGQgcmVzdWx0T2JqIHdpdGggdGhlIG90aGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5mbyB3ZSBoYXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0T2JqW3F1ZXJ5LmNob2ljZV9pZFswXV0gPSBfLnBhaXJzKGdyb3VwZWRSZXN1bHQpWzBdWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKF8ucGFpcnMocmVzdWx0T2JqKSwgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUFyciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRbMF0gd2lsbCBiZSBjaG9pY2UgaWQsIGRbMV0gd2lsbCBiZSB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBvbmx5IG9uZSBmaWx0ZXIgd2FzIHNlbGVjdGVkLCBkWzBdIHdpbGwgcmV0dXJuIGFzIHN0cmluZyAndW5kZWZpbmVkJyBzaW5jZSBubyBpZCBpcyBpbmNsdWRlZCBpbiB0aGlzIGNhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUZpbHRlciA9IGRbMF0gPT09ICd1bmRlZmluZWQnID8gcXVlcnkuZmlsdGVyc0FwcGxpZWRbMF0gOiBfLmZpbmQocXVlcnkuZmlsdGVyc0FwcGxpZWQsIHsgaWQ6IHBhcnNlSW50KGRbMF0pIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5RGF0ZXMgPSBkWzFdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHJlc3VsdCB2YWx1ZXMgdG8gdmFsdWVBcnJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goeEFyciwgZnVuY3Rpb24gKHhEYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZU9iaiA9IF8uZmluZChxdWVyeURhdGVzLCBmdW5jdGlvbiAocURhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQudXRjKHFEYXRlLmRhdGUpLmlzU2FtZSh4RGF0ZSwgJ2RheScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHVzaCAwIGlmIGRhdGEgZm9yIHhEYXRlIGlzIG5vdCBwcmVzZW50IGluIHF1ZXJ5RGF0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVBcnIucHVzaCh2YWx1ZU9iaiA/IHZhbHVlT2JqLnZhbHVlIDogMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVwZW5kIHZhbHVlQXJyIHdpdGggZmlsdGVyIHRpdGxlLCBhbmQgcHVzaCBvbnRvIGNvbEFyclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlQXJyLnVuc2hpZnQocXVlcnlGaWx0ZXIubmFtZSArIHF1ZXJ5RmlsdGVyLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xOYW1lc1txdWVyeUZpbHRlci5uYW1lICsgcXVlcnlGaWx0ZXIuaWRdID0gcXVlcnlGaWx0ZXIudmVyc2lvbiA/IHF1ZXJ5RmlsdGVyLnRpdGxlICsgJyAnICsgcXVlcnlGaWx0ZXIudmVyc2lvbiA6IHF1ZXJ5RmlsdGVyLnRpdGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbEFyci5wdXNoKHZhbHVlQXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBubyBmaWx0ZXJzIHdlcmUgYXBwbGllZCwgc28gc2hvdyBhZ2dyZWdhdGUgc3RhdGlzdGljc1xuICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goZGF0YS5yZXN1bHRzLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgcmVzdWx0IHZhbHVlcyB0byB2YWx1ZUFyclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKHhBcnIsIGZ1bmN0aW9uICh4RGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZU9iaiA9IF8uZmluZChyZXN1bHQudmFsdWVzLCBmdW5jdGlvbiAocURhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbWVudC51dGMocURhdGUuZGF0ZSkuaXNTYW1lKHhEYXRlLCAnZGF5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHVzaCAwIGlmIGRhdGEgZm9yIHhEYXRlIGlzIG5vdCBwcmVzZW50IGluIHJlc3VsdC52YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUFyci5wdXNoKHZhbHVlT2JqID8gdmFsdWVPYmoudmFsdWUgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVwZW5kIHZhbHVlQXJyIHdpdGggZmlsdGVyIHRpdGxlLCBhbmQgcHVzaCBvbnRvIGNvbEFyclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbkxhYmVsID0gcmVzdWx0LmNvbHVtbi50aXRsZSArICcgZm9yIGFsbCAnICsgcXVlcnkuZGF0YVR5cGUudGl0bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUFyci51bnNoaWZ0KGNvbHVtbkxhYmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbE5hbWVzWydhZ2dyZWdhdGUnXSA9IGNvbHVtbkxhYmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sQXJyLnB1c2godmFsdWVBcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gaW5mb3JtIHRoZSB1c2VyIGlmIHRoZSBtZXRyaWNzIHRoZXkgc2VsZWN0ZWQgYXJlIGVtcHR5XG4gICAgICAgICAgICBpZiAoXy5zdW0oXy5mbGF0dGVuKGNvbEFycikpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdG9hc3RyWydpbmZvJ10oJ1RoZXJlIGlzIG5vIGRhdGEgdG8gZGlzcGxheS4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcHJlcGVuZCB4QXJyIHdpdGggYW4gJ3gnIGxhYmVsIGFuZCBhZGQgdG8gY29sQXJyXG4gICAgICAgICAgICB4QXJyLnVuc2hpZnQoJ3gnKTtcbiAgICAgICAgICAgIGNvbEFyci51bnNoaWZ0KHhBcnIpO1xuXG4gICAgICAgICAgICB2YXIgdHlwZXMgPSB7fSxcbiAgICAgICAgICAgICAgICB0eXBlID0ge30sXG4gICAgICAgICAgICAgICAgZ3JvdXBzID0gW107XG5cbiAgICAgICAgICAgIF8uZm9yRWFjaChjb2xBcnIsIGZ1bmN0aW9uIChjb2wpIHtcbiAgICAgICAgICAgICAgICB0eXBlID0ge307XG4gICAgICAgICAgICAgICAgaWYgKGNvbFswXSAhPT0gJ3gnKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVbY29sWzBdXSA9ICRzY29wZS5jaGFydFR5cGU7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY2hhcnREaXNwbGF5ID09PSAnc3RhY2tlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3Vwcy5wdXNoKGNvbFswXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodHlwZXMsIHR5cGUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChjaGFydCkge1xuICAgICAgICAgICAgICAgIC8vIGNoYXJ0IGFscmVhZHkgZXhpc3RzLCBzbyB1cGRhdGUgdmFsdWVzXG4gICAgICAgICAgICAgICAgY2hhcnQuZ3JvdXBzKFtncm91cHNdKTtcbiAgICAgICAgICAgICAgICBjaGFydC5kYXRhLm5hbWVzKGNvbE5hbWVzKTtcbiAgICAgICAgICAgICAgICBjaGFydC5heGlzLmxhYmVscyh7XG4gICAgICAgICAgICAgICAgICAgIHk6IF8uY2FwaXRhbGl6ZSh5VW5pdHNbMF0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2hhcnQubG9hZCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnM6IGNvbEFycixcbiAgICAgICAgICAgICAgICAgICAgdHlwZXM6IHR5cGVzLFxuICAgICAgICAgICAgICAgICAgICB1bmxvYWQ6IHJlbW92ZUlkc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBubyBjaGFydCB5ZXQsIHNvIHNldCBpdCB1cFxuICAgICAgICAgICAgICAgIGNoYXJ0ID0gYzMuZ2VuZXJhdGUoe1xuICAgICAgICAgICAgICAgICAgICBiaW5kdG86ICcjbWV0cmljcycsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6ICd4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnM6IGNvbEFycixcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVzOiB0eXBlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwczogW2dyb3Vwc10sXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lczogY29sTmFtZXNcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc3ViY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6ICRzY29wZS5zdWJjaGFydEVuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDcwMFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogc2NhbGVDb25maWcuY29sb3JzLnBhdHRlcm5EMzIwXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGF4aXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0aW1lc2VyaWVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWNrOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQudXRjKGQpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdEYXRlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnb3V0ZXItY2VudGVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXy5jYXBpdGFsaXplKHlVbml0c1swXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnb3V0ZXItbWlkZGxlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHNldCBjaGFydCBoZWlnaHRcbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBzZXQgY29udGFpbmVyIGhlaWdodHMgZXF1YWwgdG8gYXZhaWxhYmxlIHBhZ2UgaGVpZ2h0XG4gICAgICAgICAgICB2YXIgdmlld3BvcnQgPSBzY2FsZVNlcnZpY2UuZ2V0Vmlld3BvcnRTaXplKCksXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gc2NhbGVDb25maWcuaGVhZGVyT2Zmc2V0LFxuICAgICAgICAgICAgICAgIGNoYXJ0TWF4SGVpZ2h0ID0gdmlld3BvcnQuaGVpZ2h0IC0gb2Zmc2V0O1xuXG4gICAgICAgICAgICAkc2NvcGUuY2hhcnRTdHlsZSA9ICdoZWlnaHQ6ICcgKyBjaGFydE1heEhlaWdodCArICdweDsgbWF4LWhlaWdodDogJyArIGNoYXJ0TWF4SGVpZ2h0ICsgJ3B4Oyc7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuc2VydmljZSgnbWV0cmljc1NlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHAsICRxLCAkcmVzb3VyY2UsIHNjYWxlQ29uZmlnKSB7XG4gICAgICAgIHZhciBnZXRQbG90RGF0YVBhcmFtcyA9IGZ1bmN0aW9uIChwYWdlLCBwYWdlX3NpemUsIHN0YXJ0ZWQsIGVuZGVkLCBjaG9pY2VfaWQsIGNvbHVtbiwgZ3JvdXAsIGRhdGFUeXBlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjaG9pY2VfaWQpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgICAgIHBhZ2Vfc2l6ZTogcGFnZV9zaXplLFxuICAgICAgICAgICAgICAgIHN0YXJ0ZWQ6IHN0YXJ0ZWQsXG4gICAgICAgICAgICAgICAgZW5kZWQ6IGVuZGVkLFxuICAgICAgICAgICAgICAgIGNob2ljZV9pZDogY2hvaWNlX2lkLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogY29sdW1uLFxuICAgICAgICAgICAgICAgIGdyb3VwOiBncm91cCxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogZGF0YVR5cGVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldERhdGFUeXBlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnbWV0cmljcy8nKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0RGF0YVR5cGVNZXRyaWNzOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ21ldHJpY3MvJyArIGlkICsgJy8nKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0RGF0YVR5cGVPcHRpb25zOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnbWV0cmljcy8nICsgbmFtZSArICcvJztcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQodXJsKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0UGxvdERhdGE6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gcGFyYW1zIHx8IGdldFBsb3REYXRhUGFyYW1zKCksXG4gICAgICAgICAgICAgICAgICAgIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ21ldHJpY3MvJyArIHBhcmFtcy5kYXRhVHlwZSArICcvcGxvdC1kYXRhLycsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0R2VuZXJhdGVkUGxvdERhdGE6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcmV0dXJuT2JqID0ge1xuICAgICAgICAgICAgICAgICAgICBjb3VudDogMjgsXG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiBbXVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgbnVtRGF5cyA9IG1vbWVudC51dGMob2JqLnBhcmFtcy5lbmRlZCkuZGlmZihtb21lbnQudXRjKG9iai5wYXJhbXMuc3RhcnRlZCksICdkJykgKyAxO1xuXG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKG9iai5xdWVyeS5zZWxlY3RlZE1ldHJpY3MsIGZ1bmN0aW9uIChtZXRyaWMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyblJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogbWV0cmljLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluX3g6IG1vbWVudC51dGMob2JqLnBhcmFtcy5zdGFydGVkKS5mb3JtYXQoJ1lZWVktTU0tREQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heF94OiBtb21lbnQudXRjKG9iai5wYXJhbXMuZW5kZWQpLmZvcm1hdCgnWVlZWS1NTS1ERCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluX3k6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhfeTogMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbXVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtRGF5czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnF1ZXJ5LmZpbHRlcnNBcHBsaWVkLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2gob2JqLnF1ZXJ5LmZpbHRlcnNBcHBsaWVkLCBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblJlc3VsdC52YWx1ZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBtb21lbnQudXRjKG9iai5wYXJhbXMuc3RhcnRlZCkuYWRkKGksICdkJykuZm9ybWF0KCdZWVlZLU1NLUREJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDEwMDAgLSAxICsgMSkpICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBmaWx0ZXIuaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblJlc3VsdC52YWx1ZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IG1vbWVudC51dGMob2JqLnBhcmFtcy5zdGFydGVkKS5hZGQoaSwgJ2QnKS5mb3JtYXQoJ1lZWVktTU0tREQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMDAwIC0gMSArIDEpKSArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm5PYmoucmVzdWx0cy5wdXNoKHJldHVyblJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBkLnJlc29sdmUocmV0dXJuT2JqKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5jb250cm9sbGVyKCduYXZDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sICR3aW5kb3csIHNjYWxlQ29uZmlnLCBuYXZTZXJ2aWNlKSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gc2NhbGVDb25maWcuY29sb3JzLm5hdl9iZztcblxuICAgICAgICAkc2NvcGUuYWN0aXZlUGFnZSA9ICdvdmVydmlldyc7XG4gICAgICAgICRzY29wZS5kb2NzVXJsID0gc2NhbGVDb25maWcudXJscy5kb2N1bWVudGF0aW9uO1xuXG4gICAgICAgICRzY29wZS5nb3RvID0gZnVuY3Rpb24obG9jKSB7XG4gICAgICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCcnKTtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKGxvYyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGxvY2F0aW9uVXBkYXRlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLmFjdGl2ZVBhZ2UgPSBuYXZTZXJ2aWNlLmxvY2F0aW9uO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBpbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBuYXZTZXJ2aWNlLnJlZ2lzdGVyT2JzZXJ2ZXIobG9jYXRpb25VcGRhdGVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgaW5pdGlhbGl6ZSgpO1xuXG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgLyoqXG4gICAgICogU2VlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEyNTc2Nzk4L2FuZ3VsYXJqcy1ob3ctdG8td2F0Y2gtc2VydmljZS12YXJpYWJsZXMvMTc1NTg4ODUjMTc1NTg4ODVcbiAgICAgKiBEb2luZyB0aGluZ3MgdGhpcyB3YXkgc28gdGhhdCBzc05hdmJhckNvbnRyb2xsZXIgY2FuIGdldCBub3RpZmllZFxuICAgICAqIHdoZW4gdGhlIGxvY2F0aW9uIGNoYW5nZXMuIFRoZW4sIG91ciBjb250cm9sbGVycyBqdXN0IG5lZWQgdG8gY2FsbCBpbnRvXG4gICAgICogdGhpcyBzZXJ2aWNlIHRvIHVwZGF0ZUxvY2F0aW9uLlxuICAgICAqXG4gICAgICogVGhlIG9ubHkgdGhpbmcgSSBkb24ndCBsaWtlIGFib3V0IHRoaXMgaXMgdGhhdCB0aGUgaW5kaXZpZHVhbFxuICAgICAqIGNvbnRyb2xsZXJzIGhhdmUgdG8gY2FsbCBpbiBhbmQgdGVsbCB0aGUgc3NOYXZpZ2F0aW9uU2VydmljZSB3aGF0XG4gICAgICogcGFnZSB0aGV5IGFyZSBzaG93aW5nLlxuICAgICAqL1xuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLnNlcnZpY2UoJ25hdlNlcnZpY2UnLCBmdW5jdGlvbiAoJGxvY2F0aW9uKSB7XG5cbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9ICdvdmVydmlldyc7IC8vIHdoZXJlIHRoZSBhcHAgc3RhcnRzXG5cbiAgICAgICAgdmFyIG9ic2VydmVycyA9IFtdO1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJPYnNlcnZlciA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBvYnNlcnZlcnMucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5ub3RpZnlPYnNlcnZlcnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChvYnNlcnZlcnMsIGZ1bmN0aW9uKG9ic2VydmVyKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudXBkYXRlTG9jYXRpb24gPSBmdW5jdGlvbihsb2NhdGlvbkluKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb25JbjtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5T2JzZXJ2ZXJzKCk7XG4gICAgICAgIH07XG5cbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLnNlcnZpY2UoJ3N1Ym5hdlNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHAsIHNjYWxlQ29uZmlnKSB7XG4gICAgICAgIHZhciBjdXJyZW50UGF0aCA9ICcnO1xuXG4gICAgICAgIHRoaXMuc2V0Q3VycmVudFBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICAgICAgY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZ2V0Q3VycmVudFBhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFBhdGg7XG4gICAgICAgIH07XG4gICAgfSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuY29udHJvbGxlcignbm9kZURldGFpbHNDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sICRyb3V0ZVBhcmFtcywgJHRpbWVvdXQsIG5hdlNlcnZpY2UsIG5vZGVTZXJ2aWNlKSB7XG4gICAgICAgICRzY29wZS5ub2RlSWQgPSAkcm91dGVQYXJhbXMuaWQ7XG5cbiAgICAgICAgdmFyIGdldE5vZGVEZXRhaWxzID0gZnVuY3Rpb24gKG5vZGVJZCkge1xuICAgICAgICAgICAgbm9kZVNlcnZpY2UuZ2V0Tm9kZShub2RlSWQpLnRoZW4oIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm5vZGUgPSBkYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG5hdlNlcnZpY2UudXBkYXRlTG9jYXRpb24oJ25vZGVzJyk7XG5cbiAgICAgICAgICAgIGdldE5vZGVEZXRhaWxzKCRzY29wZS5ub2RlSWQpO1xuICAgICAgICAgICAgXy5kZWZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGluaXRpYWxpemUoKTtcblxuICAgICAgICAvKiRzY29wZS4kd2F0Y2goJ25vZGVEYXRhJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgJHNjb3BlLnJlZHJhd0dyaWQoKTtcbiAgICAgICAgfSwgdHJ1ZSk7Ki9cbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmNvbnRyb2xsZXIoJ25vZGVzQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJGxvY2F0aW9uLCAkdGltZW91dCwgbmF2U2VydmljZSwgbm9kZVNlcnZpY2UpIHtcbiAgICAgICAgJHNjb3BlLm5vZGVDb3VudHMgPSBbXTtcbiAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAkc2NvcGUuaG91clZhbHVlID0gMztcbiAgICAgICAgJHNjb3BlLm5vZGVzRXJyb3IgPSBudWxsO1xuICAgICAgICAkc2NvcGUubm9kZXNFcnJvclN0YXR1cyA9IG51bGw7XG4gICAgICAgICRzY29wZS5ub2RlU3RhdHVzRXJyb3IgPSBudWxsO1xuICAgICAgICAkc2NvcGUubm9kZVN0YXR1c0Vycm9yU3RhdHVzID0gbnVsbDtcbiAgICAgICAgJHNjb3BlLm5vZGVEYXRhID0ge1xuICAgICAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgICAgIHN0YXR1czogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBkZWJvdW5jZVRpbWVyID0ge307XG5cbiAgICAgICAgdmFyIGRlYm91bmNlQnJvYWRjYXN0ID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGFyZ3MpIHtcbiAgICAgICAgICAgIGlmIChkZWJvdW5jZVRpbWVyW21lc3NhZ2VdKSB7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKGRlYm91bmNlVGltZXJbbWVzc2FnZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVib3VuY2VUaW1lclttZXNzYWdlXSA9ICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdChtZXNzYWdlLCBhcmdzKTtcbiAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnJlZHJhd0dyaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWJvdW5jZUJyb2FkY2FzdCgncmVkcmF3R3JpZCcsICRzY29wZS5ub2RlRGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldE5vZGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbm9kZVNlcnZpY2UuZ2V0Tm9kZXMoKS50aGVuKG51bGwsIG51bGwsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuJHJlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ub2Rlc0Vycm9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5vZGVEYXRhLmRhdGEgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWRyYXdHcmlkKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzVGV4dCAmJiBkYXRhLnN0YXR1c1RleHQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubm9kZXNFcnJvclN0YXR1cyA9IGRhdGEuc3RhdHVzVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubm9kZXNFcnJvciA9ICdVbmFibGUgdG8gcmV0cmlldmUgbm9kZXMuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0Tm9kZVN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5vZGVTZXJ2aWNlLmdldE5vZGVTdGF0dXMobnVsbCwgbnVsbCwgJ1BUJyArICRzY29wZS5ob3VyVmFsdWUgKyAnSCcsIG51bGwpLnRoZW4obnVsbCwgbnVsbCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS4kcmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5vZGVTdGF0dXNFcnJvciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ub2RlRGF0YS5zdGF0dXMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWRyYXdHcmlkKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzVGV4dCAmJiBkYXRhLnN0YXR1c1RleHQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubm9kZVN0YXR1c0Vycm9yU3RhdHVzID0gZGF0YS5zdGF0dXNUZXh0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ub2RlU3RhdHVzRXJyb3IgPSAnVW5hYmxlIHRvIHJldHJpZXZlIG5vZGUgc3RhdHVzLic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGdldE5vZGVzKCk7XG4gICAgICAgICAgICBnZXROb2RlU3RhdHVzKCk7XG4gICAgICAgICAgICBfLmRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBuYXZTZXJ2aWNlLnVwZGF0ZUxvY2F0aW9uKCdub2RlcycpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGluaXRpYWxpemUoKTtcbiAgICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpe1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmNvbnRyb2xsZXIoJ2Fpc05vZGVIZWFsdGhDb250cm9sbGVyJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICRzY29wZSwgbm9kZVNlcnZpY2UpIHtcbiAgICAgICAgJHNjb3BlLmxvYWRpbmdOb2RlSGVhbHRoID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLm5vZGVIZWFsdGhFcnJvciA9IG51bGw7XG4gICAgICAgICRzY29wZS5ub2RlSGVhbHRoRXJyb3JTdGF0dXMgPSBudWxsO1xuICAgICAgICAkc2NvcGUubm9kZUhlYWx0aCA9IHt9O1xuICAgICAgICAkc2NvcGUubm9kZXNPZmZsaW5lID0gMDtcbiAgICAgICAgJHNjb3BlLm5vZGVzUGF1c2VkRXJyb3JzID0gMDtcbiAgICAgICAgJHNjb3BlLm5vZGVzUGF1c2VkID0gMDtcbiAgICAgICAgJHNjb3BlLm5vZGVzT2ZmbGluZUFuZFBhdXNlZCA9IDA7XG4gICAgICAgICRzY29wZS5ub2Rlc09mZmxpbmVBbmRQYXVzZWRFcnJvcnMgPSAwO1xuICAgICAgICAkc2NvcGUuaGVhbHRoeU5vZGVzID0gMDtcbiAgICAgICAgJHNjb3BlLnRvdGFsTm9kZXMgPSAwO1xuXG4gICAgICAgIHZhciBnZXROb2RlU3RhdHVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmdOb2RlSGVhbHRoID0gdHJ1ZTtcbiAgICAgICAgICAgIG5vZGVTZXJ2aWNlLmdldE5vZGVTdGF0dXMobnVsbCwgbnVsbCwgJHNjb3BlLmR1cmF0aW9uLCBudWxsKS50aGVuKG51bGwsIG51bGwsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuJHJlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbE5vZGVzID0gZGF0YS5yZXN1bHRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZXNPZmZsaW5lID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1BhdXNlZEVycm9ycyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNQYXVzZWQgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzT2ZmbGluZUFuZFBhdXNlZEVycm9ycyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNPZmZsaW5lQW5kUGF1c2VkID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGRhdGEucmVzdWx0cywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbi5pc19vbmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBub2RlIGlzIG9mZmxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobi5ub2RlLmlzX3BhdXNlZF9lcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNPZmZsaW5lQW5kUGF1c2VkRXJyb3JzLnB1c2gobik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuLm5vZGUuaXNfcGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzT2ZmbGluZUFuZFBhdXNlZC5wdXNoKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzT2ZmbGluZS5wdXNoKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9kZSBpcyBvbmxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobi5ub2RlLmlzX3BhdXNlZF9lcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNQYXVzZWRFcnJvcnMucHVzaChuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG4ubm9kZS5pc19wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNQYXVzZWQucHVzaChuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ub2Rlc09mZmxpbmUgPSBub2Rlc09mZmxpbmUubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubm9kZXNQYXVzZWRFcnJvcnMgPSBub2Rlc1BhdXNlZEVycm9ycy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ub2Rlc1BhdXNlZCA9IG5vZGVzUGF1c2VkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5vZGVzT2ZmbGluZUFuZFBhdXNlZEVycm9ycyA9IG5vZGVzT2ZmbGluZUFuZFBhdXNlZEVycm9ycy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ub2Rlc09mZmxpbmVBbmRQYXVzZWQgPSBub2Rlc09mZmxpbmVBbmRQYXVzZWQubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgbGVuZ3RoIG9mIG5vZGVzIGJvdGggb2ZmbGluZSBhbmQgcGF1c2VkIHRvIHByb2R1Y2UgYW4gYWNjdXJhdGUgaGVhbHRoeSBjb3VudFxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGVhbHRoeU5vZGVzID0gJHNjb3BlLnRvdGFsTm9kZXMgLSAkc2NvcGUubm9kZXNPZmZsaW5lIC0gJHNjb3BlLm5vZGVzUGF1c2VkRXJyb3JzIC0gJHNjb3BlLm5vZGVzUGF1c2VkIC0gJHNjb3BlLm5vZGVzT2ZmbGluZUFuZFBhdXNlZCAtICRzY29wZS5ub2Rlc09mZmxpbmVBbmRQYXVzZWRFcnJvcnM7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvbnV0RGF0YSA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGRldGVybWluZSBwZXJjZW50YWdlIG9mIGhlYWx0aHkgbm9kZXMsIGFuZCBicmVha2Rvd24gb2Ygd2h5IG5vZGVzIGFyZSB1bmhlYWx0aHlcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdhdWdlRGF0YSA9ICRzY29wZS50b3RhbE5vZGVzID4gMCA/ICgoJHNjb3BlLmhlYWx0aHlOb2RlcyAvICRzY29wZS50b3RhbE5vZGVzKSAqIDEwMCkudG9GaXhlZCgyKSA6IDAuMDA7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ub2Rlc09mZmxpbmUgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb251dERhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnT2ZmbGluZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6ICRzY29wZS5ub2Rlc09mZmxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ub2Rlc1BhdXNlZEVycm9ycyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbnV0RGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdIaWdoIEZhaWx1cmUgUmF0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6ICRzY29wZS5ub2Rlc1BhdXNlZEVycm9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm5vZGVzUGF1c2VkID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9udXREYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogJ1BhdXNlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6ICRzY29wZS5ub2Rlc1BhdXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubm9kZUhlYWx0aCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhdWdlRGF0YTogZ2F1Z2VEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9udXREYXRhOiBkb251dERhdGFcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdGF0dXNUZXh0ICYmIGRhdGEuc3RhdHVzVGV4dCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ub2RlSGVhbHRoRXJyb3JTdGF0dXMgPSBkYXRhLnN0YXR1c1RleHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5vZGVIZWFsdGhFcnJvciA9ICdVbmFibGUgdG8gcmV0cmlldmUgbm9kZSBoZWFsdGguJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmdOb2RlSGVhbHRoID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBnZXROb2RlU3RhdHVzKCk7XG5cbiAgICAgICAgJHJvb3RTY29wZS4kb24oJ3VwZGF0ZU5vZGVIZWFsdGgnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnZXROb2RlU3RhdHVzKCk7XG4gICAgICAgIH0pO1xuICAgIH0pLmRpcmVjdGl2ZSgnYWlzTm9kZUhlYWx0aCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2FnZTogPGFpcy1ub2RlLWhlYWx0aCAvPlxuICAgICAgICAgKiovXG4gICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdhaXNOb2RlSGVhbHRoQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL25vZGVzL2RpcmVjdGl2ZXMvbm9kZUhlYWx0aFRlbXBsYXRlLmh0bWwnLFxuICAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICAgZHVyYXRpb246ICc9JyxcbiAgICAgICAgICAgICAgICAgc2hvd0Rlc2NyaXB0aW9uOiAnPSdcbiAgICAgICAgICAgICB9XG4gICAgICAgICB9O1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpe1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ05vZGUnLCBmdW5jdGlvbiAoTm9kZVJlc291cmNlcywgc2NhbGVTZXJ2aWNlKSB7XG4gICAgICAgIHZhciBOb2RlID0gZnVuY3Rpb24gKGlkLCBob3N0bmFtZSwgcG9ydCwgc2xhdmVfaWQsIHBhdXNlX3JlYXNvbiwgaXNfcGF1c2VkLCBpc19wYXVzZWRfZXJyb3JzLCBpc19hY3RpdmUsIGFyY2hpdmVkLCBjcmVhdGVkLCBsYXN0X29mZmVyLCBsYXN0X21vZGlmaWVkLCByZXNvdXJjZXMpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgICAgIHRoaXMuaG9zdG5hbWUgPSBob3N0bmFtZTtcbiAgICAgICAgICAgIHRoaXMucG9ydCA9IHBvcnQ7XG4gICAgICAgICAgICB0aGlzLnNsYXZlX2lkID0gc2xhdmVfaWQ7XG4gICAgICAgICAgICB0aGlzLnBhdXNlX3JlYXNvbiA9IHBhdXNlX3JlYXNvbjtcbiAgICAgICAgICAgIHRoaXMuaXNfcGF1c2VkID0gaXNfcGF1c2VkO1xuICAgICAgICAgICAgdGhpcy5pc19wYXVzZWRfZXJyb3JzID0gaXNfcGF1c2VkX2Vycm9ycztcbiAgICAgICAgICAgIHRoaXMuaXNfYWN0aXZlID0gaXNfYWN0aXZlO1xuICAgICAgICAgICAgdGhpcy5hcmNoaXZlZCA9IGFyY2hpdmVkO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVkID0gY3JlYXRlZDtcbiAgICAgICAgICAgIHRoaXMubGFzdF9vZmZlciA9IGxhc3Rfb2ZmZXI7XG4gICAgICAgICAgICB0aGlzLmxhc3RfbW9kaWZpZWQgPSBsYXN0X21vZGlmaWVkO1xuICAgICAgICAgICAgdGhpcy5yZXNvdXJjZXMgPSBOb2RlUmVzb3VyY2VzLnRyYW5zZm9ybWVyKHJlc291cmNlcyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuICAgICAgICBOb2RlLnByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdOb2RlJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXREdXJhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY2FsZVNlcnZpY2UuY2FsY3VsYXRlRHVyYXRpb24odGhpcy5jcmVhdGVkLCB0aGlzLmxhc3RfbW9kaWZpZWQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldENlbGxUZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdG5hbWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q2VsbFRpdGxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdG5hbWUuc3BsaXQoJy4nKVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzdGF0aWMgbWV0aG9kcywgYXNzaWduZWQgdG8gY2xhc3NcbiAgICAgICAgTm9kZS5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTm9kZShcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5ob3N0bmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wb3J0LFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnNsYXZlX2lkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnBhdXNlX3JlYXNvbixcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pc19wYXVzZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaXNfcGF1c2VkX2Vycm9ycyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pc19hY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuYXJjaGl2ZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY3JlYXRlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5sYXN0X29mZmVyLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxhc3RfbW9kaWZpZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucmVzb3VyY2VzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9kZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIE5vZGUudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoTm9kZS5idWlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gTm9kZS5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gTm9kZTtcbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdOb2RlUmVzb3VyY2VzJywgZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIE5vZGVSZXNvdXJjZXMgPSBmdW5jdGlvbiAoY3B1cywgbWVtLCBkaXNrKSB7XG4gICAgICAgICAgICB0aGlzLmNwdXMgPSBjcHVzO1xuICAgICAgICAgICAgdGhpcy5tZW0gPSBtZW07XG4gICAgICAgICAgICB0aGlzLmRpc2sgPSBkaXNrO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIG1ldGhvZHNcbiAgICAgICAgTm9kZVJlc291cmNlcy5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICAvLyBnZXREdXJhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy9yZXR1cm4gc2NhbGVTZXJ2aWNlLmNhbGN1bGF0ZUR1cmF0aW9uKHRoaXMuY3JlYXRlZCwgdGhpcy5sYXN0X21vZGlmaWVkKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzdGF0aWMgbWV0aG9kcywgYXNzaWduZWQgdG8gY2xhc3NcbiAgICAgICAgTm9kZVJlc291cmNlcy5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTm9kZVJlc291cmNlcyhcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jcHVzLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLm1lbSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kaXNrXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9kZVJlc291cmNlcygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIE5vZGVSZXNvdXJjZXMudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoTm9kZVJlc291cmNlcy5idWlsZClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBOb2RlUmVzb3VyY2VzLmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBOb2RlUmVzb3VyY2VzO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdOb2RlU3RhdHVzJywgZnVuY3Rpb24gKHNjYWxlQ29uZmlnLCBub2RlVXBkYXRlU2VydmljZSwgTm9kZSwgSm9iRXhlY3V0aW9uKSB7XG4gICAgICAgIHZhciBOb2RlU3RhdHVzID0gZnVuY3Rpb24gKG5vZGUsIGlzX29ubGluZSwgam9iX2V4ZV9jb3VudHMsIGpvYl9leGVzX3J1bm5pbmcpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZSA9IE5vZGUudHJhbnNmb3JtZXIobm9kZSk7XG4gICAgICAgICAgICB0aGlzLmlzX29ubGluZSA9IGlzX29ubGluZTtcbiAgICAgICAgICAgIHRoaXMuam9iX2V4ZV9jb3VudHMgPSBqb2JfZXhlX2NvdW50cztcbiAgICAgICAgICAgIHRoaXMuam9iX2V4ZXNfcnVubmluZyA9IEpvYkV4ZWN1dGlvbi50cmFuc2Zvcm1lcihqb2JfZXhlc19ydW5uaW5nKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG4gICAgICAgIE5vZGVTdGF0dXMucHJvdG90eXBlID0ge1xuICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ05vZGVTdGF0dXMnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldENvbXBsZXRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZWQgPSBfLmZpbmQodGhpcy5qb2JfZXhlX2NvdW50cywgJ3N0YXR1cycsICdDT01QTEVURUQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcGxldGVkID8gY29tcGxldGVkLmNvdW50IDogMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRGYWlsZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmFpbGVkID0gXy5maW5kKHRoaXMuam9iX2V4ZV9jb3VudHMsICdzdGF0dXMnLCAnRkFJTEVEJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhaWxlZCA/IGZhaWxlZC5jb3VudCA6IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q2VsbEZpbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29sb3IgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc19vbmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubm9kZS5pc19wYXVzZWRfZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHNjYWxlQ29uZmlnLmNvbG9ycy5jaGFydF9vcmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5ub2RlLmlzX3BhdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBzY2FsZUNvbmZpZy5jb2xvcnMuY2hhcnRfeWVsbG93O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBzY2FsZUNvbmZpZy5jb2xvcnMuY2hhcnRfZ3JlZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHNjYWxlQ29uZmlnLmNvbG9ycy5jaGFydF9yZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRDZWxsQWN0aXZpdHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q2VsbEVycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdGYWlsZWQ6ICcgKyB0aGlzLmdldEZhaWxlZCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldENlbGxUb3RhbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnQ29tcGxldGVkOiAnICsgdGhpcy5nZXRDb21wbGV0ZWQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRDZWxsU3RhdHVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNfb25saW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm5vZGUuaXNfcGF1c2VkX2Vycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdIaWdoIEZhaWx1cmUgUmF0ZSc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5ub2RlLmlzX3BhdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdQYXVzZWQnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdPbmxpbmUnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdPZmZsaW5lJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q2VsbEpvYnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9ICcnO1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaCh0aGlzLmpvYl9leGVzX3J1bm5pbmcsIGZ1bmN0aW9uIChqb2JFeGVjdXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IGpvYkV4ZWN1dGlvbi5qb2Iuam9iX3R5cGUuaWNvbl9jb2RlID9cbiAgICAgICAgICAgICAgICAgICAgdGV4dCArICcgJyArICcmI3gnICsgam9iRXhlY3V0aW9uLmpvYi5qb2JfdHlwZS5pY29uX2NvZGUgKyAnOycgOlxuICAgICAgICAgICAgICAgICAgICB0ZXh0ICsgJyAnICsgJyYjeCcgKyBzY2FsZUNvbmZpZy5kZWZhdWx0SWNvbkNvZGUgKyAnOyc7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Q2VsbFBhdXNlUmVzdW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5pc19wYXVzZWQgPyAnJiN4ZjA0YjsnIDogJyYjeGYwNGM7JztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXVzZVJlc3VtZUNlbGw6IGZ1bmN0aW9uIChwYXVzZV9yZWFzb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdG5hbWU6IHRoaXMubm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcG9ydDogdGhpcy5ub2RlLnBvcnQsXG4gICAgICAgICAgICAgICAgICAgIHBhdXNlX3JlYXNvbjogcGF1c2VfcmVhc29uIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBpc19wYXVzZWQ6ICF0aGlzLm5vZGUuaXNfcGF1c2VkXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZVVwZGF0ZVNlcnZpY2UudXBkYXRlTm9kZSh0aGlzLm5vZGUuaWQsIHVwZGF0ZURhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTm9kZS50cmFuc2Zvcm1lcihyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3RhdGljIG1ldGhvZHMsIGFzc2lnbmVkIHRvIGNsYXNzXG4gICAgICAgIE5vZGVTdGF0dXMuYnVpbGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE5vZGVTdGF0dXMoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubm9kZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pc19vbmxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9iX2V4ZV9jb3VudHMsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9iX2V4ZXNfcnVubmluZ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vZGVTdGF0dXMoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBOb2RlU3RhdHVzLnRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgICAgICAgICAubWFwKE5vZGVTdGF0dXMuYnVpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE5vZGVTdGF0dXMuYnVpbGQoZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIE5vZGVTdGF0dXM7XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5zZXJ2aWNlKCdub2RlU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCwgJHEsICRyZXNvdXJjZSwgc2NhbGVDb25maWcsIE5vZGUsIE5vZGVTdGF0dXMsIHBvbGxlciwgcG9sbGVyRmFjdG9yeSkge1xuICAgICAgICAvKnZhciB0b3RhbE5vZGVzID0gNTtcblxuICAgICAgICB2YXIgZ2V0VG90YWxOb2RlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0b3RhbE5vZGVzO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBzZXRUb3RhbE5vZGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdG90YWxOb2RlcyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgyMCAtIDEgKyAxKSkgKyAxO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNldFRvdGFsTm9kZXMoKTtcbiAgICAgICAgfSwgMzEwMCk7Ki9cblxuICAgICAgICB2YXIgZ2V0Tm9kZVN0YXR1c1BhcmFtcyA9IGZ1bmN0aW9uIChwYWdlLCBwYWdlX3NpemUsIHN0YXJ0ZWQsIGVuZGVkKSB7XG4gICAgICAgICAgICB2YXIgcGFyYW1zID0ge307XG5cbiAgICAgICAgICAgIGlmKHBhZ2UpIHsgcGFyYW1zLnBhZ2UgPSBwYWdlOyB9XG4gICAgICAgICAgICBpZihwYWdlX3NpemUpIHsgcGFyYW1zLnBhZ2Vfc2l6ZSA9IHBhZ2Vfc2l6ZTsgfVxuICAgICAgICAgICAgaWYoc3RhcnRlZCkgeyBwYXJhbXMuc3RhcnRlZCA9IHN0YXJ0ZWQ7IH1cbiAgICAgICAgICAgIGlmKGVuZGVkKSB7IHBhcmFtcy5lbmRlZCA9IGVuZGVkOyB9XG5cbiAgICAgICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldE5vZGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzUmVzb3VyY2UgPSAkcmVzb3VyY2Uoc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnbm9kZXMvJyksXG4gICAgICAgICAgICAgICAgICAgIG5vZGVzUG9sbGVyID0gcG9sbGVyRmFjdG9yeS5uZXdQb2xsZXIobm9kZXNSZXNvdXJjZSwgc2NhbGVDb25maWcucG9sbEludGVydmFscy5ub2Rlcyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZXNQb2xsZXIucHJvbWlzZS50aGVuKG51bGwsIG51bGwsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLiRyZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyp2YXIgcmV0dXJuUmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXNvbHZlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlczogW11cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZXRUb3RhbE5vZGVzKCk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJob3N0bmFtZVwiOiBcIm5vZGVcIiArIGkgKyBcIi5sb2NhbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBvcnRcIjogNTA1MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzbGF2ZV9pZFwiOiBcIjIwMTUwNjE2LTEwMzA1MC0xODAwNDU0NTM2LTUwNTAtNjE5My1TMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRvdGFsX2NwdXNcIjogMi4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRvdGFsX21lbVwiOiA2NzkzLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidG90YWxfZGlza1wiOiA5NDYzOS4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlzX3BhdXNlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjcmVhdGVkXCI6IFwiMjAxNS0wNi0xNVQxNzoxODo1Mi40MTRaXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibGFzdF9tb2RpZmllZFwiOiBcIjIwMTUtMDYtMTVUMTc6MTg6NTIuNDE0WlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5SZXN1bHQubm9kZXMucHVzaChuZXdEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJldHVyblJlc3VsdDsqL1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnJlc3VsdHMgPSBOb2RlLnRyYW5zZm9ybWVyKGRhdGEucmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1BvbGxlci5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Tm9kZXNPbmNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgICAgICRodHRwLmdldChzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICdub2Rlcy8nKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1cm5EYXRhID0gTm9kZS50cmFuc2Zvcm1lcihkYXRhLm5vZGVzKTtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKHJldHVybkRhdGEpO1xuICAgICAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXROb2RlOiBmdW5jdGlvbiAoc2xhdmVJZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnbm9kZXMvJyArIHNsYXZlSWQgKyAnLycpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVybkRhdGEgPSBOb2RlLnRyYW5zZm9ybWVyKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmV0dXJuRGF0YSk7XG4gICAgICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE5vZGVTdGF0dXM6IGZ1bmN0aW9uIChwYWdlLCBwYWdlX3NpemUsIHN0YXJ0ZWQsIGVuZGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IGdldE5vZGVTdGF0dXNQYXJhbXMocGFnZSwgcGFnZV9zaXplLCBzdGFydGVkLCBlbmRlZCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbm9kZVN0YXR1c1Jlc291cmNlID0gJHJlc291cmNlKHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ25vZGVzL3N0YXR1cy8nLCBwYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBub2RlU3RhdHVzUG9sbGVyID0gcG9sbGVyRmFjdG9yeS5uZXdQb2xsZXIobm9kZVN0YXR1c1Jlc291cmNlLCBzY2FsZUNvbmZpZy5wb2xsSW50ZXJ2YWxzLm5vZGVTdGF0dXMpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVTdGF0dXNQb2xsZXIucHJvbWlzZS50aGVuKG51bGwsIG51bGwsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLiRyZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLyp2YXIgcmV0dXJuUmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyZXNvbHZlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlX3N0YXRzOiBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdEYXRhID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdldFRvdGFsTm9kZXMoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJob3N0bmFtZVwiOiBcIm5vZGVcIiArIGkgKyBcIi5sb2NhbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImpvYnNfY29tcGxldGVkXCI6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMDAgLSAyMCArIDEpKSArIDIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN5c3RlbV9mYWlsdXJlc1wiOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMjAgLSAwICsgMSkpICsgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5SZXN1bHQubm9kZV9zdGF0cy5wdXNoKG5ld0RhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmV0dXJuUmVzdWx0OyovXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucmVzdWx0cyA9IE5vZGVTdGF0dXMudHJhbnNmb3JtZXIoZGF0YS5yZXN1bHRzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVTdGF0dXNQb2xsZXIuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE5vZGVTdGF0dXNPbmNlOiBmdW5jdGlvbiAocGFnZSwgcGFnZV9zaXplLCBzdGFydGVkLCBlbmRlZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gZ2V0Tm9kZVN0YXR1c1BhcmFtcyhwYWdlLCBwYWdlX3NpemUsIHN0YXJ0ZWQsIGVuZGVkKTtcbiAgICAgICAgICAgICAgICAkaHR0cCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnbm9kZXMvc3RhdHVzLycsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnJlc3VsdHMgPSBOb2RlU3RhdHVzLnRyYW5zZm9ybWVyKGRhdGEucmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0Tm9kZURhdGE6IGZ1bmN0aW9uIChzbGF2ZUlkLCBzaW5jZSkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge30sXG4gICAgICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgc2luY2UgPSBzaW5jZSB8fCAnUFQzSCc7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5nZXROb2RlcygpLnRoZW4oZnVuY3Rpb24gKG5vZGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEubm9kZXMgPSBub2RlcztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0Tm9kZVN0YXR1cyhzaW5jZSkudGhlbihmdW5jdGlvbiAoc3RhdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc3RhdHMgPSBzdGF0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuc2VydmljZSgnbm9kZVVwZGF0ZVNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHAsICRxLCBzY2FsZUNvbmZpZywgTm9kZSkge1xuICAgICAgICB2YXIgZ2V0Tm9kZVVwZGF0ZURhdGEgPSBmdW5jdGlvbiAoaG9zdG5hbWUsIHBvcnQsIHBhdXNlX3JlYXNvbiwgaXNfcGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGhvc3RuYW1lOiBob3N0bmFtZSxcbiAgICAgICAgICAgICAgICBwb3J0OiBwb3J0LFxuICAgICAgICAgICAgICAgIHBhdXNlX3JlYXNvbjogcGF1c2VfcmVhc29uLFxuICAgICAgICAgICAgICAgIGlzX3BhdXNlZDogaXNfcGF1c2VkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1cGRhdGVOb2RlOiBmdW5jdGlvbiAoaWQsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGF0YSB8fCBnZXROb2RlVXBkYXRlRGF0YSgpO1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAgICRodHRwKHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICdub2Rlcy8nICsgaWQgKyAnLycsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BBVENIJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoTm9kZS50cmFuc2Zvcm1lcihyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KVxufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuY29udHJvbGxlcignb3ZDb250cm9sbGVyJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCBuYXZTZXJ2aWNlLCBub2RlU2VydmljZSwgam9iU2VydmljZSwgam9iVHlwZVNlcnZpY2UsIHN0YXR1c1NlcnZpY2UsIGdhdWdlRmFjdG9yeSwgc2NhbGVDb25maWcsIHNjYWxlU2VydmljZSwgc2NoZWR1bGVyU2VydmljZSwgdXNlclNlcnZpY2UpIHtcbiAgICAgICAgJHNjb3BlLmRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAkc2NvcGUuam9iRXJyb3IgPSBudWxsO1xuICAgICAgICAkc2NvcGUuam9iRXJyb3JTdGF0dXMgPSBudWxsO1xuICAgICAgICAkc2NvcGUubG9hZGluZ0pvYnMgPSB0cnVlO1xuICAgICAgICAkc2NvcGUuam9iVHlwZXMgPSBbXTtcbiAgICAgICAgJHNjb3BlLmhvdXJWYWx1ZSA9IDM7XG4gICAgICAgICRzY29wZS5qb2JEYXRhID0ge1xuICAgICAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgICAgIHN0YXR1czogbnVsbFxuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuam9iRXJyb3JCcmVha2Rvd24gPSBbXTtcbiAgICAgICAgJHNjb3BlLnN0YXR1cyA9IG51bGw7XG4gICAgICAgICRzY29wZS5sb2FkaW5nU3RhdHVzID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLnN0YXR1c0Vycm9yID0gbnVsbDtcbiAgICAgICAgJHNjb3BlLnN0YXR1c0Vycm9yU3RhdHVzID0gbnVsbDtcbiAgICAgICAgJHNjb3BlLm1hc3RlclN0YXR1cyA9ICcnO1xuICAgICAgICAkc2NvcGUubWFzdGVyU3RhdHVzQ2xhc3MgPSAnYWxlcnQtc3VjY2Vzcyc7XG4gICAgICAgICRzY29wZS5zY2hlZHVsZXJTdGF0dXMgPSAnJztcbiAgICAgICAgJHNjb3BlLnNjaGVkdWxlclN0YXR1c0NsYXNzID0gJ2FsZXJ0LXN1Y2Nlc3MnO1xuICAgICAgICAkc2NvcGUubWVtQ2FsYyA9ICcnO1xuICAgICAgICAkc2NvcGUuZGlza0NhbGMgPSAnJztcbiAgICAgICAgJHNjb3BlLnNjaGVkdWxlcklzUGF1c2VkID0gZmFsc2U7XG4gICAgICAgICRzY29wZS51c2VyID0gdXNlclNlcnZpY2UuZ2V0VXNlckNyZWRzKCk7XG4gICAgICAgICRzY29wZS5zY2hlZHVsZXJDb250YWluZXJDbGFzcyA9ICRzY29wZS51c2VyID8gJHNjb3BlLnVzZXIuaXNfYWRtaW4gPyAnY29sLXhzLTggY29sLWxnLTEwJyA6ICdjb2wteHMtMTInIDogJ2NvbC14cy0xMic7XG4gICAgICAgICRzY29wZS5zY2hlZHVsZXJCdG5DbGFzcyA9ICdmYS1wYXVzZSc7XG5cbiAgICAgICAgJHNjb3BlLnRvZ2dsZVNjaGVkdWxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS5zY2hlZHVsZXJJc1BhdXNlZCA9ICEkc2NvcGUuc2NoZWR1bGVySXNQYXVzZWQ7XG4gICAgICAgICAgICB2YXIgc2NoZWR1bGVyRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBpc19wYXVzZWQ6ICRzY29wZS5zY2hlZHVsZXJJc1BhdXNlZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNjaGVkdWxlclNlcnZpY2UudXBkYXRlU2NoZWR1bGVyKHNjaGVkdWxlckRhdGEpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2NoZWR1bGVyU3RhdHVzID0gZGF0YS5pc19wYXVzZWQgPyAnUGF1c2VkJyA6ICdSdW5uaW5nJztcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2NoZWR1bGVyU3RhdHVzQ2xhc3MgPSBkYXRhLmlzX3BhdXNlZCA/ICdhbGVydC13YXJuaW5nJyA6ICdhbGVydC1zdWNjZXNzJztcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2NoZWR1bGVyQnRuQ2xhc3MgPSBkYXRhLmlzX3BhdXNlZCA/ICdmYS1wbGF5JyA6ICdmYS1wYXVzZSc7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmVkcmF3R3JpZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KCdyZWRyYXdHcmlkJywgJHNjb3BlLmpvYkRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnZXRKb2JUeXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGpvYlR5cGVTZXJ2aWNlLmdldEpvYlR5cGVzKCkudGhlbihudWxsLCBudWxsLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLiRyZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuam9iRXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuam9iRGF0YS5kYXRhID0gZGF0YS5yZXN1bHRzO1xuICAgICAgICAgICAgICAgICAgICByZWRyYXdHcmlkKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzVGV4dCAmJiBkYXRhLnN0YXR1c1RleHQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuam9iRXJyb3JTdGF0dXMgPSBkYXRhLnN0YXR1c1RleHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmpvYkVycm9yID0gJ1VuYWJsZSB0byByZXRyaWV2ZSBqb2IgdHlwZXMuJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZ0pvYnMgPSBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldFN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjcHVHYXVnZSA9IGdhdWdlRmFjdG9yeS5jcmVhdGVHYXVnZSgnY3B1JywgJ0NQVScsIDAsIDEwMCwgMTgwKSxcbiAgICAgICAgICAgICAgICBtZW1HYXVnZSA9IGdhdWdlRmFjdG9yeS5jcmVhdGVHYXVnZSgnbWVtb3J5JywgJ01lbW9yeScsIDAsIDEwMCwgMTgwKSxcbiAgICAgICAgICAgICAgICBkaXNrR2F1Z2UgPSBnYXVnZUZhY3RvcnkuY3JlYXRlR2F1Z2UoJ2Rpc2snLCAnRGlzaycsIDAsIDEwMCwgMTgwKTtcblxuICAgICAgICAgICAgc3RhdHVzU2VydmljZS5nZXRTdGF0dXMoKS50aGVuKG51bGwsIG51bGwsIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LiRyZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzRXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBjcHVHYXVnZS5yZWRyYXcocmVzdWx0LmdldENwdVVzYWdlKCkpO1xuICAgICAgICAgICAgICAgICAgICBtZW1HYXVnZS5yZWRyYXcocmVzdWx0LmdldE1lbVVzYWdlKCkpO1xuICAgICAgICAgICAgICAgICAgICBkaXNrR2F1Z2UucmVkcmF3KHJlc3VsdC5nZXREaXNrVXNhZ2UoKSk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXN0ZXJTdGF0dXMgPSByZXN1bHQubWFzdGVyLmlzX29ubGluZSA/ICdPbmxpbmUnIDogJ09mZmxpbmUnO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFzdGVyU3RhdHVzQ2xhc3MgPSByZXN1bHQubWFzdGVyLmlzX29ubGluZSA/ICdhbGVydC1zdWNjZXNzJyA6ICdhbGVydC1kYW5nZXInO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnNjaGVkdWxlci5pc19vbmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zY2hlZHVsZXJTdGF0dXMgPSByZXN1bHQuc2NoZWR1bGVyLmlzX3BhdXNlZCA/ICdQYXVzZWQnIDogJ1J1bm5pbmcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNjaGVkdWxlclN0YXR1c0NsYXNzID0gcmVzdWx0LnNjaGVkdWxlci5pc19wYXVzZWQgPyAnYWxlcnQtd2FybmluZycgOiAnYWxlcnQtc3VjY2Vzcyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2NoZWR1bGVySXNQYXVzZWQgPSByZXN1bHQuc2NoZWR1bGVyLmlzX3BhdXNlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zY2hlZHVsZXJCdG5DbGFzcyA9IHJlc3VsdC5zY2hlZHVsZXIuaXNfcGF1c2VkID8gJ2ZhLXBsYXknIDogJ2ZhLXBhdXNlJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zY2hlZHVsZXJTdGF0dXMgPSByZXN1bHQuc2NoZWR1bGVyLmlzX3BhdXNlZCA/ICdPZmZsaW5lOyBQYXVzZWQnIDogJ09mZmxpbmUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNjaGVkdWxlclN0YXR1c0NsYXNzID0gJ2FsZXJ0LWRhbmdlcic7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2NoZWR1bGVySXNQYXVzZWQgPSByZXN1bHQuc2NoZWR1bGVyLmlzX3BhdXNlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zY2hlZHVsZXJCdG5DbGFzcyA9IHJlc3VsdC5zY2hlZHVsZXIuaXNfcGF1c2VkID8gJ2ZhLXBsYXknIDogJ2ZhLXBhdXNlJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJlc291cmNlcy5zY2hlZHVsZWQubWVtICYmIHJlc3VsdC5yZXNvdXJjZXMudG90YWwubWVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVtQ2FsYyA9IHNjYWxlU2VydmljZS5jYWxjdWxhdGVGaWxlU2l6ZUZyb21NaWIocmVzdWx0LnJlc291cmNlcy5zY2hlZHVsZWQubWVtKSArICcgLyAnICsgc2NhbGVTZXJ2aWNlLmNhbGN1bGF0ZUZpbGVTaXplRnJvbU1pYihyZXN1bHQucmVzb3VyY2VzLnRvdGFsLm1lbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5yZXNvdXJjZXMuc2NoZWR1bGVkLmRpc2sgJiYgcmVzdWx0LnJlc291cmNlcy50b3RhbC5kaXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlza0NhbGMgPSBzY2FsZVNlcnZpY2UuY2FsY3VsYXRlRmlsZVNpemVGcm9tTWliKHJlc3VsdC5yZXNvdXJjZXMuc2NoZWR1bGVkLmRpc2spICsgJyAvICcgKyBzY2FsZVNlcnZpY2UuY2FsY3VsYXRlRmlsZVNpemVGcm9tTWliKHJlc3VsdC5yZXNvdXJjZXMudG90YWwuZGlzayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1c1RleHQgJiYgcmVzdWx0LnN0YXR1c1RleHQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzRXJyb3JTdGF0dXMgPSByZXN1bHQuc3RhdHVzVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzRXJyb3IgPSAnVW5hYmxlIHRvIHJldHJpZXZlIGNsdXN0ZXIgc3RhdHVzLic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nU3RhdHVzID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkcm9vdFNjb3BlLiRvbignam9iVHlwZVN0YXR1cycsIGZ1bmN0aW9uIChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgJHNjb3BlLmpvYkRhdGEuc3RhdHVzID0gZGF0YTtcbiAgICAgICAgICAgIHJlZHJhd0dyaWQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnZXRKb2JUeXBlcygpO1xuICAgICAgICAgICAgZ2V0U3RhdHVzKCk7XG4gICAgICAgICAgICBuYXZTZXJ2aWNlLnVwZGF0ZUxvY2F0aW9uKCdvdmVydmlldycpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGluaXRpYWxpemUoKTtcbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmNvbnRyb2xsZXIoJ3JlY2lwZURldGFpbHNDb250cm9sbGVyJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICRzY29wZSwgJGxvY2F0aW9uLCAkcm91dGVQYXJhbXMsIG5hdlNlcnZpY2UsIHJlY2lwZVNlcnZpY2UsIHNjYWxlQ29uZmlnLCBzdWJuYXZTZXJ2aWNlLCB1c2VyU2VydmljZSkge1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICAkc2NvcGUucmVjaXBlID0ge307XG4gICAgICAgICRzY29wZS5yZWNpcGVJZCA9ICRyb3V0ZVBhcmFtcy5pZDtcbiAgICAgICAgJHNjb3BlLnN1Ym5hdkxpbmtzID0gc2NhbGVDb25maWcuc3VibmF2TGlua3MucmVjaXBlcztcbiAgICAgICAgc3VibmF2U2VydmljZS5zZXRDdXJyZW50UGF0aCgncmVjaXBlcycpO1xuICAgICAgICAkc2NvcGUubG9hZGluZ1JlY2lwZURldGFpbCA9IHRydWU7XG4gICAgICAgICRzY29wZS5hY3RpdmVUYWIgPSAnc3RhdHVzJztcbiAgICAgICAgJHNjb3BlLmxhc3RTdGF0dXNDaGFuZ2UgPSAnJztcblxuICAgICAgICBzZWxmLmdldFJlY2lwZURldGFpbCA9IGZ1bmN0aW9uIChyZWNpcGVJZCkge1xuICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmdSZWNpcGVEZXRhaWwgPSB0cnVlO1xuICAgICAgICAgICAgcmVjaXBlU2VydmljZS5nZXRSZWNpcGVEZXRhaWxzKHJlY2lwZUlkKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlY2lwZSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgcmVjaXBlU2VydmljZS5nZXRSZWNpcGVUeXBlRGV0YWlsKGRhdGEucmVjaXBlX3R5cGUuaWQpLnRoZW4oZnVuY3Rpb24ocmVjaXBlVHlwZSl7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWNpcGVUeXBlID0gcmVjaXBlVHlwZTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcil7XG4gICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmdSZWNpcGVEZXRhaWwgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGYuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5hdlNlcnZpY2UudXBkYXRlTG9jYXRpb24oJ3JlY2lwZXMnKTtcbiAgICAgICAgICAgICRyb290U2NvcGUudXNlciA9IHVzZXJTZXJ2aWNlLmdldFVzZXJDcmVkcygpO1xuXG4gICAgICAgICAgICBzZWxmLmdldFJlY2lwZURldGFpbCgkc2NvcGUucmVjaXBlSWQpO1xuICAgICAgICB9O1xuXG5cblxuICAgICAgICAkc2NvcGUuc3dpdGNoVGFiID0gZnVuY3Rpb24gKHRhYikge1xuICAgICAgICAgICAgJCgnIycgKyAkc2NvcGUuYWN0aXZlVGFiKS5oaWRlKCk7XG4gICAgICAgICAgICAkc2NvcGUuYWN0aXZlVGFiID0gdGFiO1xuICAgICAgICAgICAgJCgnIycgKyAkc2NvcGUuYWN0aXZlVGFiKS5zaG93KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2VsZi5pbml0aWFsaXplKCk7XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuY29udHJvbGxlcigncmVjaXBlRWRpdG9yQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uLCAkcm91dGVQYXJhbXMsICR1aWJNb2RhbCwgbmF2U2VydmljZSwgcmVjaXBlU2VydmljZSwgUmVjaXBlVHlwZSwgc3VibmF2U2VydmljZSwgam9iVHlwZVNlcnZpY2UsIHNjYWxlQ29uZmlnKSB7XG5cbiAgICAgICAgJHNjb3BlLmRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAkc2NvcGUucmVjaXBlcyA9IG51bGw7XG4gICAgICAgICRzY29wZS5yZWNpcGVUeXBlSWQgPSBwYXJzZUludCgkcm91dGVQYXJhbXMuaWQpO1xuXG4gICAgICAgICRzY29wZS5qb2JUeXBlVmFsdWVzID0gW107XG5cbiAgICAgICAgJHNjb3BlLnN1Ym5hdkxpbmtzID0gc2NhbGVDb25maWcuc3VibmF2TGlua3MucmVjaXBlcztcbiAgICAgICAgc3VibmF2U2VydmljZS5zZXRDdXJyZW50UGF0aCgncmVjaXBlcy9idWlsZGVyJyk7XG5cbiAgICAgICAgJHNjb3BlLml0ZW1zID0gWydpdGVtMScsICdpdGVtMicsICdpdGVtMyddO1xuICAgICAgICAkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgICAkc2NvcGUuc2VsZWN0ZWQgPSBudWxsO1xuXG4gICAgICAgIHZhciBnZXRKb2JUeXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGpvYlR5cGVTZXJ2aWNlLmdldEpvYlR5cGVzT25jZSgpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuam9iVHlwZVZhbHVlcyA9IGRhdGE7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLm9wZW5BZGRKb2IgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICBhbmltYXRpb246ICRzY29wZS5hbmltYXRpb25zRW5hYmxlZCxcbiAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FkZEpvYkNvbnRlbnQuaHRtbCcsXG4gICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgICBzaXplOiAnc20nXG4gICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICRzY29wZS5hZGRKb2JUeXBlKCRzY29wZS5zZWxlY3RlZEl0ZW0pO1xuICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgfSk7XG4gICAgICAgICB9O1xuXG4gICAgICAgICAkc2NvcGUuYWRkSm9iVHlwZSA9IGZ1bmN0aW9uKHNlbGVjdGVkSm9iVHlwZSl7XG4gICAgICAgICAgICAgJHNjb3BlLnJlY2lwZVR5cGUuZGVmaW5pdGlvbi5hZGRKb2JUeXBlKHNlbGVjdGVkSm9iVHlwZSk7XG4gICAgICAgICAgICAgJHNjb3BlLnJlZHJhd0dyYXBoKCk7XG4gICAgICAgICB9O1xuXG4gICAgICAgICAkc2NvcGUuc2VsZWN0SXRlbSA9IGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEl0ZW0gPSBpdGVtO1xuICAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZ2V0Sm9iVHlwZXMoKTtcbiAgICAgICAgICAgIG5hdlNlcnZpY2UudXBkYXRlTG9jYXRpb24oJ3JlY2lwZXMnKTtcbiAgICAgICAgICAgIGlmKCRzY29wZS5yZWNpcGVUeXBlSWQpe1xuICAgICAgICAgICAgICAgICRzY29wZS5nZXRSZWNpcGVUeXBlRGV0YWlsKCRzY29wZS5yZWNpcGVUeXBlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVjaXBlVHlwZSA9IFJlY2lwZVR5cGUubmV3KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZ2V0UmVjaXBlVHlwZURldGFpbCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgcmVjaXBlU2VydmljZS5nZXRSZWNpcGVUeXBlRGV0YWlsKGlkKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlY2lwZVR5cGUgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmVkcmF3R3JhcGgpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlZHJhd0dyYXBoKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnNhdmVSZWNpcGVUeXBlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUucmVjaXBlVHlwZS5uYW1lKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuaW5pdGlhbGl6ZSgpO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuY29udHJvbGxlcigncmVjaXBlVHlwZXNDb250cm9sbGVyJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICRzY29wZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sICR1aWJNb2RhbCwgaG90a2V5cywgc2NhbGVTZXJ2aWNlLCBuYXZTZXJ2aWNlLCByZWNpcGVTZXJ2aWNlLCBzdWJuYXZTZXJ2aWNlLCBqb2JUeXBlU2VydmljZSwgc2NhbGVDb25maWcsIFJlY2lwZVR5cGUsIHVzZXJTZXJ2aWNlKSB7XG4gICAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLm1hc3RlckNvbnRhaW5lclN0eWxlID0gJyc7XG4gICAgICAgICRzY29wZS5kZXRhaWxDb250YWluZXJTdHlsZSA9ICcnO1xuICAgICAgICAkc2NvcGUubWFzdGVyTWF4SGVpZ2h0ID0gMDtcbiAgICAgICAgJHNjb3BlLmRldGFpbE1heEhlaWdodCA9IDA7XG4gICAgICAgICRzY29wZS5yZWNpcGVUeXBlcyA9IFtdO1xuICAgICAgICAkc2NvcGUucmVjaXBlVHlwZUlkcyA9IFtdO1xuICAgICAgICAkc2NvcGUucmVxdWVzdGVkUmVjaXBlVHlwZUlkID0gcGFyc2VJbnQoJHJvdXRlUGFyYW1zLmlkKTtcbiAgICAgICAgJHNjb3BlLmFjdGl2ZVJlY2lwZVR5cGUgPSBudWxsO1xuICAgICAgICAkc2NvcGUucGVyY2VudGFnZSA9IDczO1xuICAgICAgICAkc2NvcGUuZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICRzY29wZS5yZWNpcGVzID0gbnVsbDtcbiAgICAgICAgJHNjb3BlLm1vZGUgPSAndmlldyc7IC8vIHZhbGlkIHZhbHVlcyBhcmUgYWRkLCB2aWV3LCBhbmQgZWRpdFxuICAgICAgICAkc2NvcGUuYWRkQnRuVGV4dCA9ICdOZXcgUmVjaXBlJztcbiAgICAgICAgJHNjb3BlLmFkZEJ0bkNsYXNzID0gJ2J0bi1wcmltYXJ5JztcbiAgICAgICAgJHNjb3BlLmFkZEJ0bkljb24gPSAnZmEtcGx1cy1jaXJjbGUnO1xuICAgICAgICAkc2NvcGUuZWRpdEJ0blRleHQgPSAnRWRpdCc7XG4gICAgICAgICRzY29wZS5lZGl0QnRuQ2xhc3MgPSAnYnRuLXN1Y2Nlc3MnO1xuICAgICAgICAkc2NvcGUuZWRpdEJ0bkljb24gPSAnZmEtZWRpdCc7XG4gICAgICAgICRzY29wZS5qb2JUeXBlVmFsdWVzID0gW107XG4gICAgICAgICRzY29wZS5pc1JlY2lwZU1vZGlmaWVkID0gZmFsc2U7XG4gICAgICAgICRzY29wZS5zYXZlQnRuQ2xhc3MgPSAnYnRuLWRlZmF1bHQnO1xuICAgICAgICAkc2NvcGUubWFzdGVyQ2xhc3MgPSAnY29sLXhzLTMnO1xuICAgICAgICAkc2NvcGUuZGV0YWlsQ2xhc3MgPSAnY29sLXhzLTknO1xuICAgICAgICAkc2NvcGUubWluaW1pemVNYXN0ZXIgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLm5ld0J0bkNvbnRhaW5lckNsYXNzID0gJ2hpZGRlbic7XG4gICAgICAgICRzY29wZS5taW5pbWl6ZUJ0bkNvbnRhaW5lckNsYXNzID0gJ2hpZGRlbic7XG4gICAgICAgICRzY29wZS5taW5pbWl6ZUJ0bkNsYXNzID0gJ2ZhIGZhLWNoZXZyb24tbGVmdCc7XG4gICAgICAgICRzY29wZS51c2VyID0gJHJvb3RTY29wZS51c2VyO1xuXG4gICAgICAgICRzY29wZS5zdWJuYXZMaW5rcyA9IHNjYWxlQ29uZmlnLnN1Ym5hdkxpbmtzLnJlY2lwZXM7XG4gICAgICAgIHN1Ym5hdlNlcnZpY2Uuc2V0Q3VycmVudFBhdGgoJ3JlY2lwZXMvdHlwZXMnKTtcblxuICAgICAgICB2YXIgaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG5hdlNlcnZpY2UudXBkYXRlTG9jYXRpb24oJ3JlY2lwZXMnKTtcbiAgICAgICAgICAgICRyb290U2NvcGUudXNlciA9IHVzZXJTZXJ2aWNlLmdldFVzZXJDcmVkcygpO1xuICAgICAgICAgICAgZ2V0UmVjaXBlVHlwZXMoKTtcbiAgICAgICAgICAgIC8vZ2V0Sm9iVHlwZXMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHZhciBnZXRSZWNpcGVUeXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlY2lwZVNlcnZpY2UuZ2V0UmVjaXBlVHlwZXMoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlY2lwZVR5cGVzID0gZGF0YTtcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVjaXBlVHlwZUlkcyA9IF8ucGx1Y2soZGF0YSwgJ2lkJyk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnZpZXdSZWNpcGVUeXBlRGV0YWlsKCRzY29wZS5yZXF1ZXN0ZWRSZWNpcGVUeXBlSWQpO1xuICAgICAgICAgICAgICAgIGhvdGtleXMuYmluZFRvKCRzY29wZSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21ibzogJ2N0cmwrdXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQcmV2aW91cyBSZWNpcGUgVHlwZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYWN0aXZlUmVjaXBlVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWR4ID0gXy5pbmRleE9mKCRzY29wZS5yZWNpcGVUeXBlSWRzLCAkc2NvcGUuYWN0aXZlUmVjaXBlVHlwZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9hZFJlY2lwZVR5cGUoJHNjb3BlLnJlY2lwZVR5cGVJZHNbaWR4IC0gMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KS5hZGQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tYm86ICdjdHJsK2Rvd24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdOZXh0IFJlY2lwZSBUeXBlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hY3RpdmVSZWNpcGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZHggPSBfLmluZGV4T2YoJHNjb3BlLnJlY2lwZVR5cGVJZHMsICRzY29wZS5hY3RpdmVSZWNpcGVUeXBlLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA8ICgkc2NvcGUucmVjaXBlVHlwZUlkcy5sZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRSZWNpcGVUeXBlKCRzY29wZS5yZWNpcGVUeXBlSWRzW2lkeCArIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5uZXdSZWNpcGVUeXBlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvcmVjaXBlcy90eXBlcy8wJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnZpZXdSZWNpcGVUeXBlRGV0YWlsID0gZnVuY3Rpb24ocmVjaXBlVHlwZUlkKXtcbiAgICAgICAgICAgIGlmIChyZWNpcGVUeXBlSWQgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmVjaXBlU2VydmljZS5nZXRSZWNpcGVUeXBlRGV0YWlsKHJlY2lwZVR5cGVJZCkudGhlbihmdW5jdGlvbiAoZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hY3RpdmVSZWNpcGVUeXBlID0gZGF0YTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiggcmVjaXBlVHlwZUlkID09PSAwKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmFjdGl2ZVJlY2lwZVR5cGUgPSBuZXcgUmVjaXBlVHlwZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5sb2FkUmVjaXBlVHlwZSA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgaWYoJHNjb3BlLmFjdGl2ZVJlY2lwZVR5cGUgJiYgJHNjb3BlLmFjdGl2ZVJlY2lwZVR5cGUubW9kaWZpZWQpe1xuICAgICAgICAgICAgICAgIGNvbmZpcm1DaGFuZ2VSZWNpcGUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT0tcbiAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9yZWNpcGVzL3R5cGVzLycgKyBpZCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDYW5jZWxcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3JlY2lwZXMvdHlwZXMvJyArIGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY29uZmlybUNoYW5nZVJlY2lwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29uZmlybURpYWxvZy5odG1sJyxcbiAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gbW9kYWxJbnN0YW5jZS5yZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnRvZ2dsZU1hc3RlciA9IGZ1bmN0aW9uIChtaW5pbWl6ZU1hc3Rlcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtaW5pbWl6ZU1hc3RlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWluaW1pemVNYXN0ZXIgPSBtaW5pbWl6ZU1hc3RlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1pbmltaXplTWFzdGVyID0gISRzY29wZS5taW5pbWl6ZU1hc3RlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRzY29wZS5tYXN0ZXJDbGFzcyA9ICRzY29wZS5taW5pbWl6ZU1hc3RlciA/ICdjb2wteHMtMScgOiAnY29sLXhzLTMnO1xuICAgICAgICAgICAgJHNjb3BlLmRldGFpbENsYXNzID0gJHNjb3BlLm1pbmltaXplTWFzdGVyID8gJ2NvbC14cy0xMScgOiAnY29sLXhzLTknO1xuICAgICAgICAgICAgJHNjb3BlLm1pbmltaXplQnRuQ29udGFpbmVyQ2xhc3MgPSAkc2NvcGUubWluaW1pemVNYXN0ZXIgPyAnY29sLXhzLTEyJyA6ICRyb290U2NvcGUudXNlciA/ICdjb2wteHMtNiB0ZXh0LXJpZ2h0JyA6ICdjb2wteHMtMTIgdGV4dC1yaWdodCc7XG4gICAgICAgICAgICAkc2NvcGUubWluaW1pemVCdG5DbGFzcyA9ICRzY29wZS5taW5pbWl6ZU1hc3RlciA/ICdmYSBmYS1jaGV2cm9uLXJpZ2h0JyA6ICdmYSBmYS1jaGV2cm9uLWxlZnQnO1xuICAgICAgICAgICAgJHNjb3BlLm5ld0J0bkNvbnRhaW5lckNsYXNzID0gJHNjb3BlLm1pbmltaXplTWFzdGVyID8gJ2hpZGRlbicgOiAnY29sLXhzLTYnO1xuICAgICAgICB9O1xuXG4gICAgICAgICRyb290U2NvcGUuJG9uKCd0b2dnbGVFZGl0JywgZnVuY3Rpb24gKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICAkc2NvcGUudG9nZ2xlTWFzdGVyKGRhdGEgPT09ICdlZGl0Jyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGluaXRpYWxpemUoKTtcblxuICAgICAgICAkcm9vdFNjb3BlLiRvbigncmVjaXBlTW9kaWZpZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUuaXNSZWNpcGVNb2RpZmllZCA9IHRydWU7XG4gICAgICAgICAgICAkc2NvcGUuc2F2ZUJ0bkNsYXNzID0gJ2J0bi1zdWNjZXNzJztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUubmV3QnRuQ29udGFpbmVyQ2xhc3MgPSAkcm9vdFNjb3BlLnVzZXIgPyAnY29sLXhzLTYnIDogJ2hpZGRlbic7XG4gICAgICAgICAgICAkc2NvcGUubWluaW1pemVCdG5Db250YWluZXJDbGFzcyA9ICRyb290U2NvcGUudXNlciA/ICdjb2wteHMtNiB0ZXh0LXJpZ2h0JyA6ICdjb2wteHMtMTIgdGV4dC1yaWdodCc7XG4gICAgICAgICAgICAvLyBzZXQgY29udGFpbmVyIGhlaWdodHMgZXF1YWwgdG8gYXZhaWxhYmxlIHBhZ2UgaGVpZ2h0XG4gICAgICAgICAgICB2YXIgdmlld3BvcnQgPSBzY2FsZVNlcnZpY2UuZ2V0Vmlld3BvcnRTaXplKCksXG4gICAgICAgICAgICAgICAgbWFzdGVyT2Zmc2V0ID0gc2NhbGVDb25maWcuaGVhZGVyT2Zmc2V0ICsgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbWFzdGVyLWNvbnRyb2xzJylbMF0uc2Nyb2xsSGVpZ2h0LFxuICAgICAgICAgICAgICAgIGRldGFpbE9mZnNldCA9IHNjYWxlQ29uZmlnLmhlYWRlck9mZnNldDtcblxuICAgICAgICAgICAgJHNjb3BlLm1hc3Rlck1heEhlaWdodCA9IHZpZXdwb3J0LmhlaWdodCAtIG1hc3Rlck9mZnNldDtcbiAgICAgICAgICAgICRzY29wZS5kZXRhaWxNYXhIZWlnaHQgPSB2aWV3cG9ydC5oZWlnaHQgLSBkZXRhaWxPZmZzZXQ7XG5cbiAgICAgICAgICAgICRzY29wZS5tYXN0ZXJDb250YWluZXJTdHlsZSA9ICdoZWlnaHQ6ICcgKyAkc2NvcGUubWFzdGVyTWF4SGVpZ2h0ICsgJ3B4OyBtYXgtaGVpZ2h0OiAnICsgJHNjb3BlLm1hc3Rlck1heEhlaWdodCArICdweDsgb3ZlcmZsb3cteTogYXV0bzsnO1xuICAgICAgICAgICAgJHNjb3BlLmRldGFpbENvbnRhaW5lclN0eWxlID0gJ2hlaWdodDogJyArICRzY29wZS5kZXRhaWxNYXhIZWlnaHQgKyAncHg7IG1heC1oZWlnaHQ6ICcgKyAkc2NvcGUuZGV0YWlsTWF4SGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuY29udHJvbGxlcigncmVjaXBlc0NvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHNjb3BlLCAkbG9jYXRpb24sIHNjYWxlU2VydmljZSwgbmF2U2VydmljZSwgZ3JpZEZhY3RvcnksIHVpR3JpZENvbnN0YW50cywgc2NhbGVDb25maWcsIHN1Ym5hdlNlcnZpY2UsIHJlY2lwZVNlcnZpY2UpIHtcblxuICAgICAgICB2YXIgcmVjaXBlc1BhcmFtcyA9IHtcbiAgICAgICAgICAgIHBhZ2U6IG51bGwsIHBhZ2Vfc2l6ZTogbnVsbCwgc3RhcnRlZDogbnVsbCwgZW5kZWQ6IG51bGwsIG9yZGVyOiAkcm9vdFNjb3BlLnJlY2lwZXNDb250cm9sbGVyT3JkZXIgfHwgbnVsbCwgdHlwZV9pZDogbnVsbCwgdHlwZV9uYW1lOiBudWxsLCB1cmw6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBjaGVjayBmb3IgcmVjaXBlc1BhcmFtcyBpbiBxdWVyeSBzdHJpbmcsIGFuZCB1cGRhdGUgYXMgbmVjZXNzYXJ5XG4gICAgICAgIF8uZm9yRWFjaChfLnBhaXJzKHJlY2lwZXNQYXJhbXMpLCBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IF8uYXQoJGxvY2F0aW9uLnNlYXJjaCgpLCBwYXJhbVswXSk7XG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJlY2lwZXNQYXJhbXNbcGFyYW1bMF1dID0gdmFsdWUubGVuZ3RoID4gMSA/IHZhbHVlIDogdmFsdWVbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBncmlkUGFnZU51bWJlciA9IHJlY2lwZXNQYXJhbXMucGFnZSB8fCAxLFxuICAgICAgICAgICAgZmlsdGVyZWRCeVJlY2lwZVR5cGUgPSByZWNpcGVzUGFyYW1zLnR5cGVfaWQgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgICBmaWx0ZXJlZEJ5T3JkZXIgPSByZWNpcGVzUGFyYW1zLm9yZGVyID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgIC8vIHRoaXMgZmlsZSB3aWxsIGJlIHNpbWlsYXIgdG8gam9ic0NvbnRyb2xsZXJcbiAgICAgICAgJHNjb3BlLnJlY2lwZXNEYXRhID0ge307XG4gICAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgJHNjb3BlLnJlY2lwZVR5cGVWYWx1ZXMgPSBbXTtcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkUmVjaXBlVHlwZSA9IHJlY2lwZXNQYXJhbXMudHlwZV9pZCB8fCAwO1xuICAgICAgICAkc2NvcGUuc3VibmF2TGlua3MgPSBzY2FsZUNvbmZpZy5zdWJuYXZMaW5rcy5yZWNpcGVzO1xuICAgICAgICAkc2NvcGUuZ3JpZFN0eWxlID0gJyc7XG4gICAgICAgICRzY29wZS5sYXN0TW9kaWZpZWRTdGFydCA9IHJlY2lwZXNQYXJhbXMuc3RhcnRlZCA/IG1vbWVudC51dGMocmVjaXBlc1BhcmFtcy5zdGFydGVkKS50b0RhdGUoKSA6IG1vbWVudC51dGMoKS5zdWJ0cmFjdCgxLCAnd2Vla3MnKS5zdGFydE9mKCdkJykudG9EYXRlKCk7XG4gICAgICAgICRzY29wZS5sYXN0TW9kaWZpZWRTdGFydFBvcHVwID0ge1xuICAgICAgICAgICAgb3BlbmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUub3Blbkxhc3RNb2RpZmllZFN0YXJ0UG9wdXAgPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAkc2NvcGUubGFzdE1vZGlmaWVkU3RhcnRQb3B1cC5vcGVuZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUubGFzdE1vZGlmaWVkU3RvcCA9IHJlY2lwZXNQYXJhbXMuZW5kZWQgPyBtb21lbnQudXRjKHJlY2lwZXNQYXJhbXMuZW5kZWQpLnRvRGF0ZSgpIDogbW9tZW50LnV0YygpLmVuZE9mKCdkJykudG9EYXRlKCk7XG4gICAgICAgICRzY29wZS5sYXN0TW9kaWZpZWRTdG9wUG9wdXAgPSB7XG4gICAgICAgICAgICBvcGVuZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5vcGVuTGFzdE1vZGlmaWVkU3RvcFBvcHVwID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgJHNjb3BlLmxhc3RNb2RpZmllZFN0b3BQb3B1cC5vcGVuZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuZGF0ZU1vZGVsT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHRpbWV6b25lOiAnKzAwMCdcbiAgICAgICAgfTtcblxuICAgICAgICBzdWJuYXZTZXJ2aWNlLnNldEN1cnJlbnRQYXRoKCdyZWNpcGVzJyk7XG5cbiAgICAgICAgdmFyIGRlZmF1bHRDb2x1bW5EZWZzID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZpZWxkOiAncmVjaXBlX3R5cGUnLFxuICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnUmVjaXBlIFR5cGUnLFxuICAgICAgICAgICAgICAgIGNlbGxUZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ1aS1ncmlkLWNlbGwtY29udGVudHNcIj57eyByb3cuZW50aXR5LnJlY2lwZV90eXBlLnRpdGxlIH19IHt7IHJvdy5lbnRpdHkucmVjaXBlX3R5cGUudmVyc2lvbiB9fTwvZGl2PicsXG4gICAgICAgICAgICAgICAgZmlsdGVySGVhZGVyVGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidWktZ3JpZC1maWx0ZXItY29udGFpbmVyXCI+PHNlbGVjdCBjbGFzcz1cImZvcm0tY29udHJvbCBpbnB1dC1zbVwiIG5nLW1vZGVsPVwiZ3JpZC5hcHBTY29wZS5zZWxlY3RlZFJlY2lwZVR5cGVcIj48b3B0aW9uIG5nLXNlbGVjdGVkPVwie3sgZ3JpZC5hcHBTY29wZS5yZWNpcGVUeXBlVmFsdWVzWyRpbmRleF0uaWQgPT0gZ3JpZC5hcHBTY29wZS5zZWxlY3RlZFJlY2lwZVR5cGUgfX1cIiB2YWx1ZT1cInt7IGdyaWQuYXBwU2NvcGUucmVjaXBlVHlwZVZhbHVlc1skaW5kZXhdLmlkIH19XCIgbmctcmVwZWF0PVwicmVjaXBlVHlwZSBpbiBncmlkLmFwcFNjb3BlLnJlY2lwZVR5cGVWYWx1ZXMgdHJhY2sgYnkgJGluZGV4XCI+e3sgZ3JpZC5hcHBTY29wZS5yZWNpcGVUeXBlVmFsdWVzWyRpbmRleF0udGl0bGUgfX0ge3sgZ3JpZC5hcHBTY29wZS5yZWNpcGVUeXBlVmFsdWVzWyRpbmRleF0udmVyc2lvbiB9fTwvb3B0aW9uPjwvc2VsZWN0PidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvL3sgZmllbGQ6ICdjcmVhdGVkJywgZW5hYmxlRmlsdGVyaW5nOiBmYWxzZSwgY2VsbEZpbHRlcjogJ2RhdGU6XFwneXl5eS1NTS1kZCBISDptbTpzc1xcJyd9LFxuICAgICAgICAgICAgeyBmaWVsZDogJ2NyZWF0ZWQnLCBlbmFibGVGaWx0ZXJpbmc6IGZhbHNlfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmaWVsZDogJ2xhc3RfbW9kaWZpZWQnLFxuICAgICAgICAgICAgICAgIGVuYWJsZUZpbHRlcmluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgLy9jZWxsRmlsdGVyOiAnZGF0ZTpcXCd5eXl5LU1NLWRkIEhIOm1tOnNzXFwnJywgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBmaWVsZDogJ2R1cmF0aW9uJywgZW5hYmxlRmlsdGVyaW5nOiBmYWxzZSwgZW5hYmxlU29ydGluZzogZmFsc2UsIGNlbGxUZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ1aS1ncmlkLWNlbGwtY29udGVudHNcIj57eyByb3cuZW50aXR5LmdldER1cmF0aW9uKCkgfX08L2Rpdj4nIH1cbiAgICAgICAgXTtcblxuICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMgPSBncmlkRmFjdG9yeS5kZWZhdWx0R3JpZE9wdGlvbnMoKTtcbiAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLnBhZ2luYXRpb25DdXJyZW50UGFnZSA9IHBhcnNlSW50KHJlY2lwZXNQYXJhbXMucGFnZSB8fCAxKTtcbiAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLnBhZ2luYXRpb25QYWdlU2l6ZSA9IHBhcnNlSW50KHJlY2lwZXNQYXJhbXMucGFnZV9zaXplKSB8fCAkc2NvcGUuZ3JpZE9wdGlvbnMucGFnaW5hdGlvblBhZ2VTaXplO1xuICAgICAgICB2YXIgY29sRGVmcyA9ICRyb290U2NvcGUucmVjaXBlQ29sRGVmcyA/ICRyb290U2NvcGUucmVjaXBlQ29sRGVmcyA6IGRlZmF1bHRDb2x1bW5EZWZzO1xuICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMuY29sdW1uRGVmcyA9IGdyaWRGYWN0b3J5LmFwcGx5U29ydENvbmZpZyhjb2xEZWZzLCByZWNpcGVzUGFyYW1zKTtcbiAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLmRhdGEgPSBbXTtcbiAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLm9uUmVnaXN0ZXJBcGkgPSBmdW5jdGlvbiAoZ3JpZEFwaSkge1xuICAgICAgICAgICAgLy9zZXQgZ3JpZEFwaSBvbiBzY29wZVxuICAgICAgICAgICAgJHNjb3BlLmdyaWRBcGkgPSBncmlkQXBpO1xuICAgICAgICAgICAgJHNjb3BlLmdyaWRBcGkuc2VsZWN0aW9uLm9uLnJvd1NlbGVjdGlvbkNoYW5nZWQoJHNjb3BlLCBmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3JlY2lwZXMvcmVjaXBlLycgKyByb3cuZW50aXR5LmlkKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkc2NvcGUuZ3JpZEFwaS5wYWdpbmF0aW9uLm9uLnBhZ2luYXRpb25DaGFuZ2VkKCRzY29wZSwgZnVuY3Rpb24gKGN1cnJlbnRQYWdlLCBwYWdlU2l6ZSkge1xuICAgICAgICAgICAgICAgIHJlY2lwZXNQYXJhbXMucGFnZSA9IGN1cnJlbnRQYWdlO1xuICAgICAgICAgICAgICAgIHJlY2lwZXNQYXJhbXMucGFnZV9zaXplID0gcGFnZVNpemU7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2dyaWRBcGknKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyUmVzdWx0cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkc2NvcGUuZ3JpZEFwaS5jb3JlLm9uLnNvcnRDaGFuZ2VkKCRzY29wZSwgZnVuY3Rpb24gKGdyaWQsIHNvcnRDb2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5yZWNpcGVDb2xEZWZzID0gbnVsbDtcbiAgICAgICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLmdyaWRBcGkuZ3JpZC5jb2x1bW5zLCBmdW5jdGlvbiAoY29sKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbC5jb2xEZWYuc29ydCA9IGNvbC5zb3J0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUucmVjaXBlQ29sRGVmcyA9ICRzY29wZS5ncmlkQXBpLmdyaWQub3B0aW9ucy5jb2x1bW5EZWZzO1xuICAgICAgICAgICAgICAgIHZhciBzb3J0QXJyID0gW107XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKHNvcnRDb2x1bW5zLCBmdW5jdGlvbiAoY29sKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvcnRBcnIucHVzaChjb2wuc29ydC5kaXJlY3Rpb24gPT09ICdkZXNjJyA/ICctJyArIGNvbC5maWVsZCA6IGNvbC5maWVsZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdXBkYXRlUmVjaXBlT3JkZXIoc29ydEFycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZ2V0UGFnZSA9IGZ1bmN0aW9uIChmaWx0ZXIsIHBhZ2VOdW1iZXIsIHBhZ2VTaXplLCB1cmwpIHtcbiAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlY2lwZVNlcnZpY2UuZ2V0UmVjaXBlcyhmaWx0ZXIsIHBhZ2VOdW1iZXIsIHBhZ2VTaXplLCB1cmwpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3RGF0YSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLmdyaWRPcHRpb25zLnBhZ2luYXRpb25QYWdlU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnJlc3VsdHNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGEucHVzaChkYXRhLnJlc3VsdHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy5kYXRhID0gbmV3RGF0YTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ3JpZE9wdGlvbnMudG90YWxJdGVtcyA9IGRhdGEuY291bnQ7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmpvYnNEYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICBncmlkUGFnZU51bWJlciA9IHBhZ2VOdW1iZXI7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmZpbHRlclJlc3VsdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfLmZvckVhY2goXy5wYWlycyhyZWNpcGVzUGFyYW1zKSwgZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnNlYXJjaChwYXJhbVswXSwgcGFyYW1bMV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkc2NvcGUubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICBnZXRSZWNpcGVzKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldFJlY2lwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZWNpcGVTZXJ2aWNlLmdldFJlY2lwZXMocmVjaXBlc1BhcmFtcykudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5yZWNpcGVzRGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmdyaWRPcHRpb25zLnRvdGFsSXRlbXMgPSBkYXRhLmNvdW50O1xuICAgICAgICAgICAgICAgICRzY29wZS5ncmlkT3B0aW9ucy5kYXRhID0gZGF0YS5yZXN1bHRzO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnZXRSZWNpcGVUeXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlY2lwZVNlcnZpY2UuZ2V0UmVjaXBlVHlwZXMoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlY2lwZVR5cGVWYWx1ZXMgPSBkYXRhO1xuICAgICAgICAgICAgICAgICRzY29wZS5yZWNpcGVUeXBlVmFsdWVzLnVuc2hpZnQoeyBuYW1lOiAnVklFVyBBTEwnLCB0aXRsZTogJ1ZJRVcgQUxMJywgdmVyc2lvbjogJycsIGlkOiAwIH0pO1xuICAgICAgICAgICAgICAgIGdldFJlY2lwZXMoKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICRzY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHVwZGF0ZVJlY2lwZU9yZGVyID0gZnVuY3Rpb24gKHNvcnRBcnIpIHtcbiAgICAgICAgICAgIHJlY2lwZXNQYXJhbXMub3JkZXIgPSBzb3J0QXJyLmxlbmd0aCA+IDAgPyBzb3J0QXJyIDogbnVsbDtcbiAgICAgICAgICAgIGZpbHRlcmVkQnlPcmRlciA9IHNvcnRBcnIubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICRzY29wZS5maWx0ZXJSZXN1bHRzKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHVwZGF0ZVJlY2lwZVR5cGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPSByZWNpcGVzUGFyYW1zLnR5cGVfaWQpIHtcbiAgICAgICAgICAgICAgICByZWNpcGVzUGFyYW1zLnBhZ2UgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjaXBlc1BhcmFtcy50eXBlX2lkID0gdmFsdWUgPT0gMCA/IG51bGwgOiB2YWx1ZTtcbiAgICAgICAgICAgIHJlY2lwZXNQYXJhbXMucGFnZV9zaXplID0gJHNjb3BlLmdyaWRPcHRpb25zLnBhZ2luYXRpb25QYWdlU2l6ZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZWxlY3RlZFJlY2lwZVR5cGUnKTtcbiAgICAgICAgICAgIGlmICghJHNjb3BlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyUmVzdWx0cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2goJ2xhc3RNb2RpZmllZFN0YXJ0JywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoISRzY29wZS5sb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgcmVjaXBlc1BhcmFtcy5zdGFydGVkID0gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyUmVzdWx0cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJHdhdGNoKCdsYXN0TW9kaWZpZWRTdG9wJywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoISRzY29wZS5sb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgcmVjaXBlc1BhcmFtcy5lbmRlZCA9IHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlclJlc3VsdHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaCgnc2VsZWN0ZWRSZWNpcGVUeXBlJywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRCeVJlY2lwZVR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlUmVjaXBlVHlwZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZEJ5UmVjaXBlVHlwZSA9IHZhbHVlICE9IDA7XG4gICAgICAgICAgICAgICAgdXBkYXRlUmVjaXBlVHlwZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBpbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAkcm9vdFNjb3BlLnJlY2lwZUNvbERlZnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgLy8gcm9vdCBjb2x1bW4gZGVmcyBoYXZlIG5vdCBiZWVuIGFsdGVyZWQgYnkgdXNlciwgc28gc2V0IHVwIGRlZmF1bHRzXG4gICAgICAgICAgICAgICAgaWYgKCFyZWNpcGVzUGFyYW1zLm9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY2lwZXNQYXJhbXMub3JkZXIgPSAnLWxhc3RfbW9kaWZpZWQnO1xuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdvcmRlcicsIHJlY2lwZXNQYXJhbXMub3JkZXIpLnJlcGxhY2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFyZWNpcGVzUGFyYW1zLnBhZ2Vfc2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICByZWNpcGVzUGFyYW1zLnBhZ2Vfc2l6ZSA9ICRzY29wZS5ncmlkT3B0aW9ucy5wYWdpbmF0aW9uUGFnZVNpemU7XG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5zZWFyY2goJ3BhZ2Vfc2l6ZScsIHJlY2lwZXNQYXJhbXMucGFnZV9zaXplKS5yZXBsYWNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcmVjaXBlc1BhcmFtcy5zdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY2lwZXNQYXJhbXMuc3RhcnRlZCA9IG1vbWVudC51dGMoJHNjb3BlLmxhc3RNb2RpZmllZFN0YXJ0KS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24uc2VhcmNoKCdzdGFydGVkJywgcmVjaXBlc1BhcmFtcy5zdGFydGVkKS5yZXBsYWNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcmVjaXBlc1BhcmFtcy5lbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZWNpcGVzUGFyYW1zLmVuZGVkID0gbW9tZW50LnV0Yygkc2NvcGUubGFzdE1vZGlmaWVkU3RvcCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnNlYXJjaCgnZW5kZWQnLCByZWNpcGVzUGFyYW1zLmVuZGVkKS5yZXBsYWNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2V0UmVjaXBlVHlwZXMoKTtcbiAgICAgICAgICAgIG5hdlNlcnZpY2UudXBkYXRlTG9jYXRpb24oJ3JlY2lwZXMnKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpbml0aWFsaXplKCk7XG5cbiAgICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpe1xuICAgICAgICAgICAvLyBzZXQgY29udGFpbmVyIGhlaWdodCBlcXVhbCB0byBhdmFpbGFibGUgcGFnZSBoZWlnaHRcbiAgICAgICAgICAgIHZhciB2aWV3cG9ydCA9IHNjYWxlU2VydmljZS5nZXRWaWV3cG9ydFNpemUoKTtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSBzY2FsZUNvbmZpZy5oZWFkZXJPZmZzZXQgKyBzY2FsZUNvbmZpZy5kYXRlRmlsdGVyT2Zmc2V0O1xuICAgICAgICAgICAgdmFyIGdyaWRNYXhIZWlnaHQgPSB2aWV3cG9ydC5oZWlnaHQgLSBvZmZzZXQ7XG4gICAgICAgICAgICAkc2NvcGUuZ3JpZFN0eWxlID0gJ2hlaWdodDogJyArIGdyaWRNYXhIZWlnaHQgKyAncHg7IG1heC1oZWlnaHQ6ICcgKyBncmlkTWF4SGVpZ2h0ICsgJ3B4Oyc7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSkoKTtcbiIsIi8qKlxuICogPGFpcy1zY2FsZS1yZWNpcGUtdmlld2VyIC8+XG4gKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuY29udHJvbGxlcignYWlzU2NhbGVSZWNpcGVHcmFwaFZpZXdlckNvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHNjb3BlLCAkbG9jYXRpb24sICR1aWJNb2RhbCwgc2NhbGVDb25maWcsIHNjYWxlU2VydmljZSwgam9iVHlwZVNlcnZpY2UsIHJlY2lwZVNlcnZpY2UsIHdvcmtzcGFjZXNTZXJ2aWNlKSB7XG4gICAgICAgICRzY29wZS52ZXJ0aWNlcyA9IFtdO1xuICAgICAgICAkc2NvcGUuZWRnZXMgPSBbXTtcbiAgICAgICAgJHNjb3BlLmlzVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICRzY29wZS5zZWxlY3RlZEpvYiA9IG51bGw7XG4gICAgICAgICRzY29wZS5zZWxlY3RlZElucHV0UHJvdmlkZXIgPSBudWxsO1xuICAgICAgICAkc2NvcGUubW9kZSA9IG51bGw7XG4gICAgICAgICRzY29wZS5lZGl0TW9kZSA9IG51bGw7XG4gICAgICAgICRzY29wZS5kZXBlbmRlbmN5QnRuQ2xhc3MgPSAnZmEtcGx1cyc7XG4gICAgICAgICRzY29wZS5hZGRCdG5UZXh0ID0gJ05ldyBSZWNpcGUnO1xuICAgICAgICAkc2NvcGUuYWRkQnRuQ2xhc3MgPSAnYnRuLXByaW1hcnknO1xuICAgICAgICAkc2NvcGUuYWRkQnRuSWNvbiA9ICdmYS1wbHVzLWNpcmNsZSc7XG4gICAgICAgICRzY29wZS5lZGl0QnRuVGV4dCA9ICdFZGl0JztcbiAgICAgICAgJHNjb3BlLmVkaXRCdG5DbGFzcyA9ICdidG4tc3VjY2Vzcyc7XG4gICAgICAgICRzY29wZS5lZGl0QnRuSWNvbiA9ICdmYS1lZGl0JztcbiAgICAgICAgJHNjb3BlLmpvYlR5cGVWYWx1ZXMgPSBbXTtcbiAgICAgICAgJHNjb3BlLnNhdmVCdG5DbGFzcyA9ICdidG4tZGVmYXVsdCc7XG4gICAgICAgICRzY29wZS5zYXZpbmdSZWNpcGUgPSBmYWxzZTtcbiAgICAgICAgJHNjb3BlLndhcm5pbmdzID0gW107XG4gICAgICAgICRzY29wZS5yZWFkb25seSA9IHRydWU7XG4gICAgICAgICRzY29wZS5kZXRhaWxNYXhIZWlnaHQgPSAwO1xuICAgICAgICAkc2NvcGUucmVjaXBlVHlwZVRyaWdnZXIgPSB7IGRhdGFUeXBlczogJycgfTtcbiAgICAgICAgJHNjb3BlLmRldGFpbENvbnRhaW5lclN0eWxlID0gJyc7XG4gICAgICAgICRzY29wZS5jb250YWluZXJDbGFzcyA9ICRzY29wZS5oYXNDb250YWluZXIgPyAnJyA6ICdkZXRhaWwtY29udGFpbmVyIG5vLXRhYnMnO1xuICAgICAgICAkc2NvcGUubGFzdFN0YXR1c0NoYW5nZSA9ICcnO1xuICAgICAgICAkc2NvcGUuYXZhaWxhYmxlV29ya3NwYWNlcyA9IFtdO1xuICAgICAgICAkc2NvcGUucmVjaXBlSW5wdXRUeXBlcyA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAncHJvcGVydHknLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnUHJvcGVydHknLFxuICAgICAgICAgICAgICAgIGZpZWxkczogW11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2ZpbGUnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnRmlsZScsXG4gICAgICAgICAgICAgICAgZmllbGRzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdtZWRpYV90eXBlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ01lZGlhIFR5cGVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnZmlsZXMnLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnRmlsZXMnLFxuICAgICAgICAgICAgICAgIGZpZWxkczogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbWVkaWFfdHlwZXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdNZWRpYSBUeXBlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICAgICAgJHNjb3BlLmF2YWlsYWJsZVRyaWdnZXJUeXBlcyA9IHNjYWxlQ29uZmlnLnRyaWdnZXJUeXBlcztcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkUmVjaXBlSW5wdXRUeXBlID0ge307XG4gICAgICAgICRzY29wZS5yZWNpcGVJbnB1dCA9IHtcbiAgICAgICAgICAgIG5hbWU6ICcnLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiAnJ1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuaXNJRSA9IHNjYWxlU2VydmljZS5pc0lFKCk7XG5cbiAgICAgICAgdmFyIHN0YXJ0Sm9iID0gbnVsbDtcblxuICAgICAgICAvLyBEYWdyZSB2YXJpYWJsZXNcbiAgICAgICAgdmFyIHN2ZyA9IG51bGw7XG4gICAgICAgIHZhciBpbm5lciA9IG51bGw7XG4gICAgICAgIHZhciBncmFwaCA9IG51bGw7XG4gICAgICAgIHZhciB6b29tID0gbnVsbDtcbiAgICAgICAgdmFyIHJlbmRlciA9IG51bGw7XG5cblxuICAgICAgICB2YXIgcmVzZXRFZGl0QnRuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLmVkaXRCdG5UZXh0ID0gJHNjb3BlLm1vZGUgPT09ICdlZGl0JyA/ICdDYW5jZWwgRWRpdCcgOiAnRWRpdCc7XG4gICAgICAgICAgICAkc2NvcGUuZWRpdEJ0bkNsYXNzID0gJHNjb3BlLm1vZGUgPT09ICdlZGl0JyA/ICdidG4td2FybmluZycgOiAnYnRuLXN1Y2Nlc3MnO1xuICAgICAgICAgICAgJHNjb3BlLmVkaXRCdG5JY29uID0gJHNjb3BlLm1vZGUgPT09ICdlZGl0JyA/ICdmYS1jbG9zZScgOiAnZmEtZWRpdCc7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHJlc2V0QWRkQnRuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLmFkZEJ0blRleHQgPSAkc2NvcGUubW9kZSA9PT0gJ2FkZCcgPyAnQ2FuY2VsJyA6ICdOZXcgUmVjaXBlJztcbiAgICAgICAgICAgICRzY29wZS5hZGRCdG5DbGFzcyA9ICRzY29wZS5tb2RlID09PSAnYWRkJyA/ICdidG4td2FybmluZycgOiAnYnRuLXByaW1hcnknO1xuICAgICAgICAgICAgJHNjb3BlLmFkZEJ0bkljb24gPSAkc2NvcGUubW9kZSA9PT0gJ2FkZCcgPyAnZmEtY2xvc2UnIDogJ2ZhLXBsdXMtY2lyY2xlJztcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgdG9nZ2xlQWRkUmVjaXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLm1vZGUgPSAkc2NvcGUubW9kZSA9PT0gJ2FkZCcgPyAndmlldycgOiAnYWRkJztcbiAgICAgICAgICAgIHJlc2V0QWRkQnRuKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHRvZ2dsZUVkaXRSZWNpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZigkc2NvcGUubW9kZSA9PT0gJ2VkaXQnKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUubW9kZSA9ICd2aWV3JztcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVsb2FkUmVjaXBlVHlwZURldGFpbCgkc2NvcGUucmVjaXBlVHlwZS5pZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRzY29wZS5tb2RlID0gJ2VkaXQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHNjb3BlLmVkaXRNb2RlID0gJyc7XG4gICAgICAgICAgICByZXNldEVkaXRCdG4oKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZW5hYmxlU2F2ZVJlY2lwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS5yZWNpcGVUeXBlLm1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgICAgICRzY29wZS5zYXZlQnRuQ2xhc3MgPSAnYnRuLXN1Y2Nlc3MnO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBkaXNhYmxlU2F2ZVJlY2lwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS5yZWNpcGVUeXBlLm1vZGlmaWVkID0gZmFsc2U7XG4gICAgICAgICAgICAkc2NvcGUuc2F2ZUJ0bkNsYXNzID0gJ2J0bi1kZWZhdWx0OydcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY29uZmlybUNoYW5nZVJlY2lwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogJHNjb3BlLmFuaW1hdGlvbnNFbmFibGVkLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29uZmlybURpYWxvZy5odG1sJyxcbiAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gbW9kYWxJbnN0YW5jZS5yZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldFJlY2lwZVR5cGVKb2JDbGFzc05hbWUgPSBmdW5jdGlvbihqb2Ipe1xuICAgICAgICAgICAgLy8gZGVmYXVsdCB0byAnbm9zdGF0dXMnXG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gJ25vc3RhdHVzJztcbiAgICAgICAgICAgIC8vIGZpbmQgdGhlIGFzc29jaWF0ZWQgam9iIGluIHRoZSByZWNpcGUuam9ic1xuICAgICAgICAgICAgaWYoJHNjb3BlLnJlY2lwZSl7XG4gICAgICAgICAgICAgICAgdmFyIHJlY2lwZWpvYiA9IF8uZmluZCgkc2NvcGUucmVjaXBlLmpvYnMse2pvYl9uYW1lOiBqb2IubmFtZX0pO1xuICAgICAgICAgICAgICAgIGlmKHJlY2lwZWpvYil7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IHJlY2lwZWpvYi5qb2Iuc3RhdHVzLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUucmVsb2FkUmVjaXBlVHlwZURldGFpbCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgdmFyIGdldFJlY2lwZURldGFpbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZWNpcGVTZXJ2aWNlLmdldFJlY2lwZVR5cGVEZXRhaWwoaWQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlY2lwZVR5cGUgPSBkYXRhO1xuXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAoJHNjb3BlLnJlY2lwZVR5cGUubW9kaWZpZWQpIHtcbiAgICAgICAgICAgICAgICBjb25maXJtQ2hhbmdlUmVjaXBlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9LXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVTYXZlUmVjaXBlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0QWRkQnRuKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubW9kZSA9PT0gJ2VkaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVFZGl0UmVjaXBlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZ2V0UmVjaXBlRGV0YWlsKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDYW5jZWxcblxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm1vZGUgPT09ICdlZGl0Jykge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVFZGl0UmVjaXBlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc2V0QWRkQnRuKCk7XG4gICAgICAgICAgICAgICAgZ2V0UmVjaXBlRGV0YWlsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnJlZHJhdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGluaXRpYWxpemUoKTtcbiAgICAgICAgICAgIC8vJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdyZWNpcGVNb2RpZmllZCcpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5ub2RlQ2xpY2sgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIHNlbGVjdGlvbiBjbGFzc1xuICAgICAgICAgICAgJCgnZGl2JykucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkLW5vZGUnKTtcbiAgICAgICAgICAgICQoJ2RpdicpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZC1ub2RlLWRlcGVuZGVuY3knKTtcbiAgICAgICAgICAgICQoJ2RpdicpLnJlbW92ZUNsYXNzKCdqb2ItYWN0aXZlJyk7XG5cbiAgICAgICAgICAgIC8vIGZpbmQgdGhlIGpvYiBpbiB0aGUgcmVjaXBlIGRlZmluaXRpb25cbiAgICAgICAgICAgIHZhciBqb2IgPSBfLmZpbmQoJHNjb3BlLnJlY2lwZVR5cGUuZGVmaW5pdGlvbi5qb2JzLHtuYW1lOiBuYW1lfSk7XG5cbiAgICAgICAgICAgIGlmKG5hbWUgPT09ICdzdGFydCcpe1xuICAgICAgICAgICAgICAgIGpvYiA9IHN0YXJ0Sm9iO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyICRuYW1lID0gJCgnIycgKyBuYW1lKTtcbiAgICAgICAgICAgIHZhciBwb3MgPSAkbmFtZS5wb3NpdGlvbigpO1xuXG4gICAgICAgICAgICAvLyBjbGljayBub2RlIGRpZmZlcmVudCBmcm9tIHNlbGVjdGVkSm9iXG4gICAgICAgICAgICBpZiAoISRzY29wZS5zZWxlY3RlZEpvYiB8fCBqb2IubmFtZSAhPT0gJHNjb3BlLnNlbGVjdGVkSm9iLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmVkaXRNb2RlID09PSAnYWRkRGVwZW5kZW5jeScpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkRGVwZW5kZW5jeShuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlU2F2ZVJlY2lwZSgpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVkcmF3KCk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5lZGl0TW9kZSA9PT0gJ2FkZElucHV0Jykge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRJbnB1dFByb3ZpZGVyID0gam9iO1xuICAgICAgICAgICAgICAgICAgICAkKCcucmVjaXBlTm9kZTpub3QoXCIuc2VsZWN0ZWQtbm9kZVwiKScpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZC1ub2RlLXNlbGVjdGFibGUnKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBuYW1lKS5hZGRDbGFzcygnc2VsZWN0ZWQtbm9kZS1kZXBlbmRlbmN5Jyk7XG4gICAgICAgICAgICAgICAgICAgICQoJyNvdXRwdXQtc2VsZWN0b3InKS5jc3Moe3RvcDogcG9zLnRvcCwgbGVmdDogcG9zLmxlZnQsIHBvc2l0aW9uOiAnYWJzb2x1dGUnfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0b2dnbGUgaW5wdXQgc2VsZWN0b3InKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5lZGl0TW9kZSA9PT0gJ2FkZE91dHB1dCcpe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRPdXRwdXRSZWNlaXZlciA9IGpvYjtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHBvc2l0aW9uIG9mIG91dHB1dC1zZWxlY3RvclxuICAgICAgICAgICAgICAgICAgICAkKCcjaW5wdXQtc2VsZWN0b3InKS5jc3Moe3RvcDogcG9zLnRvcCwgbGVmdDogcG9zLmxlZnQsIHBvc2l0aW9uOiAnYWJzb2x1dGUnfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLm1vZGUgPSAnYWRkSW5wdXRBY3RpdmUnO1xuICAgICAgICAgICAgICAgICAgICAkKCcucmVjaXBlTm9kZTpub3QoXCIuc2VsZWN0ZWQtbm9kZVwiKScpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZC1ub2RlLXNlbGVjdGFibGUnKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnIycgKyBuYW1lKS5hZGRDbGFzcygnc2VsZWN0ZWQtbm9kZS1kZXBlbmRlbmN5Jyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0b2dnbGUgb3V0cHV0IHNlbGVjdG9yJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBzZWxlY3RlZCBqb2JcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkSm9iID0gam9iO1xuICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUucmVjaXBlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZFJlY2lwZUpvYiA9IF8uZmluZCgkc2NvcGUucmVjaXBlLmpvYnMsIHsgam9iX25hbWU6IGpvYi5uYW1lIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGFwcGx5IHRoZSBzZWxlY3RlZC1ub2RlIGNsYXNzXG4gICAgICAgICAgICAgICAgICAgICRuYW1lLmFkZENsYXNzKCdzZWxlY3RlZC1ub2RlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7IC8vIGNsaWNrIHNlbGVjdGVkIG5vZGVcbiAgICAgICAgICAgICAgICAkKCdkaXYnKS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQtbm9kZScpO1xuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEpvYiA9IG51bGw7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkUmVjaXBlSm9iID0gbnVsbDtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRPdXRwdXRSZWNlaXZlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkSW5wdXRQcm92aWRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVkaXRNb2RlID0gJyc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlcGVuZGVuY3lCdG5DbGFzcyA9ICdmYS1wbHVzJztcblxuICAgICAgICAgICAgICAgICQoJy5yZWNpcGVOb2RlOm5vdChcIi5zZWxlY3RlZC1ub2RlXCIpJykucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkLW5vZGUtc2VsZWN0YWJsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoJHNjb3BlLnNlbGVjdGVkSm9iKXtcbiAgICAgICAgICAgICAgICAkKCcjJyArICRzY29wZS5zZWxlY3RlZEpvYi5uYW1lKS5hZGRDbGFzcygnc2VsZWN0ZWQtbm9kZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUudG9nZ2xlRWRpdE1vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLm1vZGUgPT09ICdlZGl0Jykge1xuICAgICAgICAgICAgICAgICRzY29wZS5yZWxvYWRSZWNpcGVUeXBlRGV0YWlsKCRzY29wZS5yZWNpcGVUeXBlLmlkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlRWRpdFJlY2lwZSgpO1xuICAgICAgICAgICAgICAgIHJlc2V0QWRkQnRuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3RvZ2dsZUVkaXQnLCAkc2NvcGUubW9kZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLm9wZW5BZGRKb2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb246ICRzY29wZS5hbmltYXRpb25zRW5hYmxlZCxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FkZEpvYkNvbnRlbnQuaHRtbCcsXG4gICAgICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgICAgICBzaXplOiAnc20nXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYoJHNjb3BlLnNlbGVjdGVkSm9iVHlwZSl7XG4gICAgICAgICAgICAgICAgICAgIGpvYlR5cGVTZXJ2aWNlLmdldEpvYlR5cGVEZXRhaWxzKCRzY29wZS5zZWxlY3RlZEpvYlR5cGUuaWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSm9iVHlwZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZVNhdmVSZWNpcGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUub3BlbkVkaXRUcmlnZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uOiAkc2NvcGUuYW5pbWF0aW9uc0VuYWJsZWQsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdlZGl0VHJpZ2dlci5odG1sJyxcbiAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiggJHNjb3BlLm1vZGUgPT09ICdlZGl0JyB8fCAkc2NvcGUubW9kZSA9PT0gJ2FkZCcgKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWNpcGVUeXBlLnRyaWdnZXJfcnVsZS5jb25maWd1cmF0aW9uLmNvbmRpdGlvbi5kYXRhX3R5cGVzID0gJHNjb3BlLnJlY2lwZVR5cGVUcmlnZ2VyLmRhdGFUeXBlcyA/ICRzY29wZS5yZWNpcGVUeXBlVHJpZ2dlci5kYXRhVHlwZXMuc3BsaXQoJywnKSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVTYXZlUmVjaXBlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmRlbGV0ZVJlY2lwZUlucHV0ID0gZnVuY3Rpb24oaW5wdXROYW1lKXtcbiAgICAgICAgICAgIHZhciByZW1vdmVkUmVjaXBlSW5wdXQgPSBfLnJlbW92ZSgkc2NvcGUucmVjaXBlVHlwZS5kZWZpbml0aW9uLmlucHV0X2RhdGEsIGZ1bmN0aW9uIChyZWNpcGVJbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNpcGVJbnB1dC5uYW1lID09PSBpbnB1dE5hbWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZW1vdmVkICcgKyByZW1vdmVkUmVjaXBlSW5wdXQubGVuZ3RoICsgJyByZWNpcGUgaW5wdXRzLicpO1xuICAgICAgICAgICAgZW5hYmxlU2F2ZVJlY2lwZSgpO1xuICAgICAgICAgICAgJHNjb3BlLnJlZHJhdygpO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLm9wZW5BZGRJbnB1dCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb246ICRzY29wZS5hbmltYXRpb25zRW5hYmxlZCxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FkZElucHV0Lmh0bWwnLFxuICAgICAgICAgICAgICAgIHNjb3BlOiAkc2NvcGVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGZpZWxkcyBhbmQgYWRkIGFzIG5lY2Vzc2FyeVxuICAgICAgICAgICAgICAgIGlmKCAkc2NvcGUuc2VsZWN0ZWRSZWNpcGVJbnB1dFR5cGUuZmllbGRzLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGRBcnIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKCRzY29wZS5zZWxlY3RlZFJlY2lwZUlucHV0VHlwZS5maWVsZHMsIGZ1bmN0aW9uKGZpZWxkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChmaWVsZC52YWx1ZS5zcGxpdCgnLCcpLCBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRBcnIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWNpcGVJbnB1dFtmaWVsZC5uYW1lXSA9IGZpZWxkQXJyO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBhZGQgaW5wdXQgdG8gcmVjaXBlIHR5cGUgZGVmaW5pdGlvblxuICAgICAgICAgICAgICAgICRzY29wZS5yZWNpcGVUeXBlLmRlZmluaXRpb24uaW5wdXRfZGF0YS5wdXNoKCRzY29wZS5yZWNpcGVJbnB1dCk7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKCRzY29wZS5yZWNpcGVUeXBlLmRlZmluaXRpb24uam9icywgZnVuY3Rpb24oam9iKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoam9iLnJlY2lwZV9pbnB1dHMubGVuZ3RoID09PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpvYi5yZWNpcGVfaW5wdXRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvYl9pbnB1dDogJHNjb3BlLnJlY2lwZUlucHV0Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBlX2lucHV0OiAkc2NvcGUucmVjaXBlSW5wdXQubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBnZXRJb01hcHBpbmdzKCk7XG5cbiAgICAgICAgICAgICAgICAvLyByZXNldCBmb3JtIGZpZWxkc1xuICAgICAgICAgICAgICAgICRzY29wZS5yZWNpcGVJbnB1dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJycsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkUmVjaXBlSW5wdXRUeXBlID0ge307XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuY2hhbmdlSW5wdXRUeXBlID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZFJlY2lwZUlucHV0VHlwZSA9IF8uZmluZCgkc2NvcGUucmVjaXBlSW5wdXRUeXBlcywgeyduYW1lJzogJHNjb3BlLnJlY2lwZUlucHV0LnR5cGV9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0V2FybmluZ3NIdG1sID0gZnVuY3Rpb24gKHdhcm5pbmdzKSB7XG4gICAgICAgICAgICB2YXIgd2FybmluZ3NIdG1sID0gJyc7XG4gICAgICAgICAgICBfLmZvckVhY2god2FybmluZ3MsIGZ1bmN0aW9uICh3YXJuaW5nKSB7XG4gICAgICAgICAgICAgICAgd2FybmluZ3NIdG1sICs9ICc8Yj4nICsgd2FybmluZy5pZCArICc6PC9iPiAnICsgd2FybmluZy5kZXRhaWxzICsgJzxiciAvPjxiciAvPic7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdhcm5pbmdzSHRtbCArPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgYnRuLXhzIGNsZWFyXCI+SGlkZTwvYnV0dG9uPic7XG4gICAgICAgICAgICByZXR1cm4gd2FybmluZ3NIdG1sO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS52YWxpZGF0ZVJlY2lwZVR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZWNpcGVTZXJ2aWNlLnZhbGlkYXRlUmVjaXBlVHlwZSgkc2NvcGUucmVjaXBlVHlwZSkudGhlbihmdW5jdGlvbih2YWxpZGF0aW9uUmVzdWx0KXtcbiAgICAgICAgICAgICAgICBpZih2YWxpZGF0aW9uUmVzdWx0Lndhcm5pbmdzICYmIHZhbGlkYXRpb25SZXN1bHQud2FybmluZ3MubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRpc3BsYXkgdGhlIHdhcm5pbmdzXG4gICAgICAgICAgICAgICAgICAgIHZhciB3YXJuaW5nc0h0bWwgPSBnZXRXYXJuaW5nc0h0bWwodmFsaWRhdGlvblJlc3VsdC53YXJuaW5ncyk7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0cltcImVycm9yXCJdKHdhcm5pbmdzSHRtbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyW1wic3VjY2Vzc1wiXSgnUmVjaXBlIGlzIHZhbGlkLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgICAgICBpZihlcnJvci5kZXRhaWwpe1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHJbXCJlcnJvclwiXShlcnJvci5kZXRhaWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0cltcImVycm9yXCJdKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9O1xuXG5cbiAgICAgICAgJHNjb3BlLnNhdmVSZWNpcGVUeXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLnNhdmluZ1JlY2lwZSA9IHRydWU7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc2F2ZSByZWNpcGU6ICcgKyAkc2NvcGUucmVjaXBlVHlwZS5uYW1lKTtcbiAgICAgICAgICAgIHJlY2lwZVNlcnZpY2UudmFsaWRhdGVSZWNpcGVUeXBlKCRzY29wZS5yZWNpcGVUeXBlKS50aGVuKGZ1bmN0aW9uKHZhbGlkYXRpb25SZXN1bHQpe1xuICAgICAgICAgICAgICAgIGlmKHZhbGlkYXRpb25SZXN1bHQud2FybmluZ3MgJiYgdmFsaWRhdGlvblJlc3VsdC53YXJuaW5ncy5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gZGlzcGxheSB0aGUgd2FybmluZ3NcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdhcm5pbmdzSHRtbCA9IGdldFdhcm5pbmdzSHRtbCh2YWxpZGF0aW9uUmVzdWx0Lndhcm5pbmdzKTtcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyW1wiZXJyb3JcIl0od2FybmluZ3NIdG1sKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNhdmluZ1JlY2lwZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY2lwZVNlcnZpY2Uuc2F2ZVJlY2lwZVR5cGUoJHNjb3BlLnJlY2lwZVR5cGUpLnRoZW4oZnVuY3Rpb24oc2F2ZVJlc3VsdCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2F2aW5nUmVjaXBlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVjaXBlVHlwZSA9IHNhdmVSZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVkcmF3KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyRsb2NhdGlvbi5wYXRoKCcvcmVjaXBlcy90eXBlcy8nICsgc2F2ZVJlc3VsdC5pZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgICAgICBpZihlcnJvciAmJiBlcnJvci5kZXRhaWwpe1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHJbJ2Vycm9yJ10oZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHJbJ2Vycm9yJ10oZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2aW5nUmVjaXBlID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZGlzYWJsZVNhdmVSZWNpcGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuYWRkSm9iVHlwZSA9IGZ1bmN0aW9uIChzZWxlY3RlZEpvYlR5cGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlbGVjdGVkSm9iVHlwZS5uYW1lKTtcbiAgICAgICAgICAgICRzY29wZS5yZWNpcGVUeXBlLmRlZmluaXRpb24uYWRkSm9iKHNlbGVjdGVkSm9iVHlwZSk7XG4gICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgncmVkcmF3UmVjaXBlcycpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5tYXBJbnB1dCA9IGZ1bmN0aW9uIChwcm92aWRlck5hbWUsIHByb3ZpZGVyT3V0cHV0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbWFwIHNlbGVjdGVkIGpvYiBpbnB1dCB0byAnICsgcHJvdmlkZXJOYW1lICsgJy4nICsgcHJvdmlkZXJPdXRwdXQpO1xuICAgICAgICAgICAgdmFyIGRlcGVuZGVuY3kgPSBfLmZpbmQoJHNjb3BlLnNlbGVjdGVkSm9iLmRlcGVuZGVuY2llcywge25hbWU6IHByb3ZpZGVyTmFtZX0pO1xuXG4gICAgICAgICAgICBpZihkZXBlbmRlbmN5ICYmIGRlcGVuZGVuY3kuY29ubmVjdGlvbnMgJiYgZGVwZW5kZW5jeS5jb25uZWN0aW9ucy5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICB2YXIgY29ubiA9IF8uZmluZChkZXBlbmRlbmN5LmNvbm5lY3Rpb25zLCB7IG91dHB1dDogcHJvdmlkZXJPdXRwdXQsIGlucHV0OiAkc2NvcGUuc2VsZWN0ZWRKb2JJbnB1dC5uYW1lIH0pO1xuICAgICAgICAgICAgICAgIGlmKCFjb25uKXtcbiAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jeS5jb25uZWN0aW9ucy5wdXNoKHsgb3V0cHV0OiBwcm92aWRlck91dHB1dCwgaW5wdXQ6ICRzY29wZS5zZWxlY3RlZEpvYklucHV0Lm5hbWUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZighZGVwZW5kZW5jeSl7XG4gICAgICAgICAgICAgICAgZGVwZW5kZW5jeSA9IHtuYW1lOiBwcm92aWRlck5hbWUsIGNvbm5lY3Rpb25zOiBbeyBvdXRwdXQ6IHByb3ZpZGVyT3V0cHV0LCBpbnB1dDogJHNjb3BlLnNlbGVjdGVkSm9iSW5wdXQubmFtZSB9XX07XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkSm9iLmRlcGVuZGVuY2llcy5wdXNoKGRlcGVuZGVuY3kpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVwZW5kZW5jeS5jb25uZWN0aW9ucyA9IFt7IG91dHB1dDogcHJvdmlkZXJPdXRwdXQsIGlucHV0OiAkc2NvcGUuc2VsZWN0ZWRKb2JJbnB1dC5uYW1lIH1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkSm9iLmRlcFN0YXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICAkc2NvcGUuZWRpdE1vZGUgPSAnJztcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEpvYklucHV0ID0gbnVsbDtcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZElucHV0UHJvdmlkZXIgPSBudWxsO1xuICAgICAgICAgICAgZW5hYmxlU2F2ZVJlY2lwZSgpO1xuICAgICAgICAgICAgJHNjb3BlLnJlZHJhdygpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5tYXBJbnB1dFJlY2lwZUlucHV0ID0gZnVuY3Rpb24ocmVjaXBlSW5wdXQpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ21hcCBzZWxlY3RlZCBqb2IgdG8gcmVjaXBlIGlucHV0ICcgKyByZWNpcGVJbnB1dCk7XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdJbnB1dCA9IF8uZmluZCgkc2NvcGUuc2VsZWN0ZWRKb2IucmVjaXBlX2lucHV0cywgeyBqb2JfaW5wdXQ6ICRzY29wZS5zZWxlY3RlZEpvYklucHV0Lm5hbWUgfSk7XG4gICAgICAgICAgICBpZiggZXhpc3RpbmdJbnB1dCAmJiBleGlzdGluZ0lucHV0LnJlY2lwZV9uYW1lICE9PSByZWNpcGVJbnB1dCl7XG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIGl0XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdJbnB1dC5yZWNpcGVfaW5wdXQgPSByZWNpcGVJbnB1dDtcbiAgICAgICAgICAgICAgICBlbmFibGVTYXZlUmVjaXBlKCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlZHJhdygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmKCAhZXhpc3RpbmdJbnB1dCApe1xuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBpdFxuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEpvYi5yZWNpcGVfaW5wdXRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBqb2JfaW5wdXQ6ICRzY29wZS5zZWxlY3RlZEpvYklucHV0Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHJlY2lwZV9pbnB1dDogcmVjaXBlSW5wdXRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBlbmFibGVTYXZlUmVjaXBlKCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlZHJhdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHNjb3BlLmVkaXRNb2RlID0gJyc7XG4gICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRKb2JJbnB1dCA9IG51bGw7XG4gICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRJbnB1dFByb3ZpZGVyID0gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUubWFwT3V0cHV0ID0gZnVuY3Rpb24gKHJlY2VpdmVyTmFtZSwgcmVjZWl2ZXJJbnB1dCkge1xuICAgICAgICAgICAgdmFyIGRlcGVuZGVuY3kgPSBfLmZpbmQoJHNjb3BlLnNlbGVjdGVkT3V0cHV0UmVjZWl2ZXIuZGVwZW5kZW5jaWVzLCB7bmFtZTogJHNjb3BlLnNlbGVjdGVkSm9iLm5hbWV9KTtcblxuICAgICAgICAgICAgaWYoZGVwZW5kZW5jeSAmJiBkZXBlbmRlbmN5LmNvbm5lY3Rpb25zICYmIGRlcGVuZGVuY3kuY29ubmVjdGlvbnMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICAgICAgdmFyIGNvbm4gPSBfLmZpbmQoZGVwZW5kZW5jeS5jb25uZWN0aW9ucywgeyBvdXRwdXQ6ICRzY29wZS5zZWxlY3RlZEpvYk91dHB1dC5uYW1lLCBpbnB1dDogcmVjZWl2ZXJJbnB1dCB9KTtcbiAgICAgICAgICAgICAgICBpZighY29ubil7XG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3kuY29ubmVjdGlvbnMucHVzaCh7b3V0cHV0OiAkc2NvcGUuc2VsZWN0ZWRKb2JPdXRwdXQubmFtZSwgaW5wdXQ6IHJlY2VpdmVySW5wdXR9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKCFkZXBlbmRlbmN5KXtcbiAgICAgICAgICAgICAgICBkZXBlbmRlbmN5ID0ge25hbWU6ICRzY29wZS5zZWxlY3RlZEpvYi5uYW1lLCBjb25uZWN0aW9uczogW3tvdXRwdXQ6ICRzY29wZS5zZWxlY3RlZEpvYk91dHB1dC5uYW1lLCBpbnB1dDogcmVjZWl2ZXJJbnB1dH1dfTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRPdXRwdXRSZWNlaXZlci5kZXBlbmRlbmNpZXMucHVzaChkZXBlbmRlbmN5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlcGVuZGVuY3kuY29ubmVjdGlvbnMgPSBbe291dHB1dDogJHNjb3BlLnNlbGVjdGVkSm9iT3V0cHV0Lm5hbWUsIGlucHV0OiByZWNlaXZlcklucHV0fV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRPdXRwdXRSZWNlaXZlci5kZXBTdGFydCA9IGZhbHNlO1xuICAgICAgICAgICAgJHNjb3BlLmVkaXRNb2RlID0gJyc7XG4gICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRKb2JPdXRwdXQgPSBudWxsO1xuICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkT3V0cHV0UmVjZWl2ZXIgPSBudWxsO1xuICAgICAgICAgICAgZW5hYmxlU2F2ZVJlY2lwZSgpO1xuICAgICAgICAgICAgJHNjb3BlLnJlZHJhdygpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS50b2dnbGVBZGREZXBlbmRlbmN5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCRzY29wZS5lZGl0TW9kZSA9PT0gJ2FkZERlcGVuZGVuY3knKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVkaXRNb2RlID0gJyc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlcGVuZGVuY3lCdG5DbGFzcyA9ICdmYS1wbHVzJztcbiAgICAgICAgICAgICAgICAkKCcucmVjaXBlTm9kZTpub3QoXCIuc2VsZWN0ZWQtbm9kZVwiKScpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZC1ub2RlLXNlbGVjdGFibGUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3RvZ2dsZSBhZGREZXBlbmRlbmN5IG1vZGUnKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZWRpdE1vZGUgPSAnYWRkRGVwZW5kZW5jeSc7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlcGVuZGVuY3lCdG5DbGFzcyA9ICdmYS1taW51cyc7XG4gICAgICAgICAgICAgICAgJCgnLnJlY2lwZU5vZGU6bm90KFwiLnNlbGVjdGVkLW5vZGVcIiknKS5hZGRDbGFzcygnc2VsZWN0ZWQtbm9kZS1zZWxlY3RhYmxlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnRvZ2dsZUFkZElucHV0ID0gZnVuY3Rpb24gKGpvYmlucHV0KSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLmVkaXRNb2RlID09PSAnYWRkSW5wdXQnKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVkaXRNb2RlID0gJyc7XG4gICAgICAgICAgICAgICAgJCgnLnJlY2lwZU5vZGU6bm90KFwiLnNlbGVjdGVkLW5vZGVcIiknKS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQtbm9kZS1zZWxlY3RhYmxlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEpvYklucHV0ID0gam9iaW5wdXQ7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3RvZ2dsZSBhZGRJbnB1dCBtb2RlJyk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmVkaXRNb2RlID0gJ2FkZElucHV0JztcbiAgICAgICAgICAgICAgICAkKCcucmVjaXBlTm9kZTpub3QoXCIuc2VsZWN0ZWQtbm9kZVwiKScpLmFkZENsYXNzKCdzZWxlY3RlZC1ub2RlLXNlbGVjdGFibGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUudG9nZ2xlQWRkT3V0cHV0ID0gZnVuY3Rpb24gKGpvYm91dHB1dCkge1xuICAgICAgICAgICAgaWYgKCRzY29wZS5lZGl0TW9kZSA9PT0gJ2FkZE91dHB1dCcpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZWRpdE1vZGUgPSAnJztcbiAgICAgICAgICAgICAgICAkKCcucmVjaXBlTm9kZTpub3QoXCIuc2VsZWN0ZWQtbm9kZVwiKScpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZC1ub2RlLXNlbGVjdGFibGUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkSm9iT3V0cHV0ID0gam9ib3V0cHV0O1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0b2dnbGUgYWRkT3V0cHV0IG1vZGUnKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZWRpdE1vZGUgPSAnYWRkT3V0cHV0JztcbiAgICAgICAgICAgICAgICAkKCcucmVjaXBlTm9kZTpub3QoXCIuc2VsZWN0ZWQtbm9kZVwiKScpLmFkZENsYXNzKCdzZWxlY3RlZC1ub2RlLXNlbGVjdGFibGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUucmVtb3ZlRGVwZW5kZW5jeSA9IGZ1bmN0aW9uIChkZXBOYW1lKSB7XG4gICAgICAgICAgICB2YXIgcmVtb3ZlZERlcHMgPSBfLnJlbW92ZSgkc2NvcGUuc2VsZWN0ZWRKb2IuZGVwZW5kZW5jaWVzLCBmdW5jdGlvbiAoZGVwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlcC5uYW1lID09PSBkZXBOYW1lO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygncmVtb3ZlZCAnICsgcmVtb3ZlZERlcHMubGVuZ3RoICsgJyBkZXBlbmRlbmNpZXMuJyk7XG4gICAgICAgICAgICBlbmFibGVTYXZlUmVjaXBlKCk7XG4gICAgICAgICAgICAkc2NvcGUucmVkcmF3KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnJlbW92ZUlucHV0TWFwcGluZyA9IGZ1bmN0aW9uIChkZXBOYW1lLCBkZXBPdXRwdXQpIHtcbiAgICAgICAgICAgIGlmKCBkZXBOYW1lID09PSAncmVjaXBlJyApe1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBpdCBmcm9tIHNlbGVjdGVkSm9iLnJlY2lwZV9pbnB1dHNcbiAgICAgICAgICAgICAgICB2YXIgZGVwID0gXy5yZW1vdmUoJHNjb3BlLnNlbGVjdGVkSm9iLnJlY2lwZV9pbnB1dHMsIHsgcmVjaXBlX2lucHV0OiBkZXBPdXRwdXQgfSk7XG4gICAgICAgICAgICAgICAgZW5hYmxlU2F2ZVJlY2lwZSgpO1xuICAgICAgICAgICAgICAgICRzY29wZS5yZWRyYXcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlcCA9IF8uZmluZCgkc2NvcGUuc2VsZWN0ZWRKb2IuZGVwZW5kZW5jaWVzLCB7bmFtZTogZGVwTmFtZX0pO1xuICAgICAgICAgICAgICAgIGlmIChkZXAgJiYgZGVwLmNvbm5lY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgYW4gaW5wdXQgZnJvbSBhbm90aGVyIGpvYlxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlZENvbiA9IF8ucmVtb3ZlKGRlcC5jb25uZWN0aW9ucywgZnVuY3Rpb24gKGNvbm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25uLm91dHB1dCA9PT0gZGVwT3V0cHV0O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlbW92ZWQgJyArIHJlbW92ZWRDb24ubGVuZ3RoICsgJyBpbnB1dCBjb25uZWN0aW9ucy4nKTtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlU2F2ZVJlY2lwZSgpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVkcmF3KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmRlbGV0ZVJlY2lwZUpvYiA9IGZ1bmN0aW9uKGpvYk5hbWUpe1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGRlcGVuZGVudCBjb25uZWN0aW9uc1xuICAgICAgICAgICAgXy5mb3JFYWNoKCRzY29wZS5yZWNpcGVUeXBlLmRlZmluaXRpb24uam9icywgZnVuY3Rpb24oam9iKXtcbiAgICAgICAgICAgICAgICBfLnJlbW92ZShqb2IuZGVwZW5kZW5jaWVzLCB7bmFtZTogam9iTmFtZX0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyByZW1vdmUgam9iIGZyb20gZGVmaW5pdGlvbi5qb2JzXG4gICAgICAgICAgICBfLnJlbW92ZSgkc2NvcGUucmVjaXBlVHlwZS5kZWZpbml0aW9uLmpvYnMsIHsgbmFtZTogam9iTmFtZSB9KTtcbiAgICAgICAgICAgIC8vIGVuYWJsZSBzYXZlIGFuZCByZWRyYXdcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEpvYiA9IG51bGw7XG4gICAgICAgICAgICBlbmFibGVTYXZlUmVjaXBlKCk7XG4gICAgICAgICAgICAkc2NvcGUucmVkcmF3KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnJlbW92ZU91dHB1dE1hcHBpbmcgPSBmdW5jdGlvbiAoam9iTmFtZSwgZGVwT3V0cHV0KSB7XG4gICAgICAgICAgICAvLyB3ZSBoYXZlIHRvIHJlbW92ZSBvdXRwdXQgbWFwcGluZyBmcm9tIHRoZSBqb2Igd2hlcmUgdGhlIGRlcGVuZGVuY3kgaXMgZGVmaW5lZFxuICAgICAgICAgICAgdmFyIHJlY2VpdmVyID0gXy5maW5kKCRzY29wZS5yZWNpcGVUeXBlLmRlZmluaXRpb24uam9icyx7bmFtZTogam9iTmFtZX0pO1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGl0IGZyb20gcmVjZWl2ZXIuZGVwZW5kZW5jaWVzXG4gICAgICAgICAgICB2YXIgZGVwID0gXy5maW5kKHJlY2VpdmVyLmRlcGVuZGVuY2llcywge25hbWU6ICRzY29wZS5zZWxlY3RlZEpvYi5uYW1lfSk7XG4gICAgICAgICAgICBpZiAoZGVwICYmIGRlcC5jb25uZWN0aW9ucykge1xuICAgICAgICAgICAgICAgIHZhciByZW1vdmVkQ29uID0gXy5yZW1vdmUoZGVwLmNvbm5lY3Rpb25zLCBmdW5jdGlvbiAoY29ubikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29ubi5vdXRwdXQgPT09IGRlcE91dHB1dDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVtb3ZlZCAnICsgcmVtb3ZlZENvbi5sZW5ndGggKyAnIG91dHB1dCBjb25uZWN0aW9ucy4nKTtcbiAgICAgICAgICAgICAgICBlbmFibGVTYXZlUmVjaXBlKCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlZHJhdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5zZWxlY3RKb2JUeXBlVG9BZGQgPSBmdW5jdGlvbihpdGVtKXtcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEpvYlR5cGUgPSBpdGVtO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS4kb24oJ3JlZHJhd1JlY2lwZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUucmVkcmF3KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBhZGREZXBlbmRlbmN5ID0gZnVuY3Rpb24oam9iTmFtZSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUuc2VsZWN0ZWRKb2IubmFtZSArICctPicgKyBqb2JOYW1lKTtcbiAgICAgICAgICAgIGlmICghJHNjb3BlLnNlbGVjdGVkSm9iLmRlcGVuZGVuY2llcykge1xuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEpvYi5kZXBlbmRlbmNpZXMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBleGlzdGluZ0RlcGVuZGVuY3kgPSBfLmZpbmQoJHNjb3BlLnNlbGVjdGVkSm9iLmRlcGVuZGVuY2llcywge25hbWU6IGpvYk5hbWV9KTtcblxuICAgICAgICAgICAgaWYoIWV4aXN0aW5nRGVwZW5kZW5jeSl7ICRzY29wZS5zZWxlY3RlZEpvYi5kZXBlbmRlbmNpZXMucHVzaCh7bmFtZTogam9iTmFtZX0pOyB9XG4gICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRKb2IuZGVwU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgICAgICRzY29wZS5lZGl0TW9kZSA9ICcnO1xuICAgICAgICAgICAgJHNjb3BlLmRlcGVuZGVuY3lCdG5DbGFzcyA9ICdmYS1wbHVzJztcblxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBnZXRJb01hcHBpbmdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYoJHNjb3BlLnJlY2lwZVR5cGUuZGVmaW5pdGlvbil7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKCRzY29wZS5yZWNpcGVUeXBlLmRlZmluaXRpb24uam9icywgZnVuY3Rpb24gKGpvYikge1xuICAgICAgICAgICAgICAgICAgICAvLyBwb3B1bGF0ZSB0aGUgY3VycmVudCBqb2JUeXBlXG4gICAgICAgICAgICAgICAgICAgIC8qdmFyIHRoaXNKb2JUeXBlID0gXy5maW5kKCRzY29wZS5yZWNpcGVUeXBlLmpvYl90eXBlcyx7aWQ6IGpvYi5qb2JfdHlwZV9pZH0pO1xuICAgICAgICAgICAgICAgICAgICBqb2Iuam9iX3R5cGUgPSB0aGlzSm9iVHlwZTsqL1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGZpbmQgZGVwZW5kZW50c1xuICAgICAgICAgICAgICAgICAgICBpZiAoam9iLmpvYl90eXBlICYmIGpvYi5qb2JfdHlwZS5qb2JfdHlwZV9pbnRlcmZhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChqb2Iuam9iX3R5cGUuam9iX3R5cGVfaW50ZXJmYWNlLm91dHB1dF9kYXRhLCBmdW5jdGlvbiAoam9iT3V0cHV0LCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoam9iT3V0cHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXBzID0gZ2V0RGVwZW5kZW50cyhqb2IubmFtZSxqb2JPdXRwdXQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvYk91dHB1dC5kZXBlbmRlbnRzID0gZGVwcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBkZXBlbmRlbmN5IG1hcHBpbmdzXG4gICAgICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goam9iLmpvYl90eXBlLmpvYl90eXBlX2ludGVyZmFjZS5pbnB1dF9kYXRhLCBmdW5jdGlvbiAoam9iSW5wdXQsIGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqb2JJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXRNYXBwaW5ncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goam9iLmRlcGVuZGVuY2llcywgZnVuY3Rpb24gKGRlcGVuZGVuY3ksa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goZGVwZW5kZW5jeS5jb25uZWN0aW9ucywgZnVuY3Rpb24gKGNvbm4sa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm4uaW5wdXQgPT09IGpvYklucHV0Lm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRNYXBwaW5ncy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGRlcGVuZGVuY3kubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dDogY29ubi5vdXRwdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogY29ubi5pbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaChqb2IucmVjaXBlX2lucHV0cywgZnVuY3Rpb24ocmVjaXBlSW5wdXQsIGtleSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihyZWNpcGVJbnB1dC5qb2JfaW5wdXQgPT09IGpvYklucHV0Lm5hbWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0TWFwcGluZ3MucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdyZWNpcGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQ6IHJlY2lwZUlucHV0LnJlY2lwZV9pbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHJlY2lwZUlucHV0LmpvYl9pbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgam9iSW5wdXQuZGVwZW5kZW5jaWVzID0gaW5wdXRNYXBwaW5ncztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgam9iVHlwZVNlcnZpY2UuZ2V0Sm9iVHlwZXNPbmNlKCkudGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuam9iVHlwZVZhbHVlcyA9IGRhdGEucmVzdWx0cztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB3b3Jrc3BhY2VzU2VydmljZS5nZXRXb3Jrc3BhY2VzKCkudGhlbihmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXZhaWxhYmxlV29ya3NwYWNlcyA9IGRhdGFcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkc2NvcGUuJHdhdGNoKCdyZWNpcGVUeXBlJywgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmVjaXBlVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISRzY29wZS5yZWNpcGVUeXBlLmlkIHx8ICRzY29wZS5yZWNpcGVUeXBlLmlkID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9kZSA9ICdhZGQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF8uZm9yRWFjaCgkc2NvcGUucmVjaXBlVHlwZS5kZWZpbml0aW9uLmpvYnMsIGZ1bmN0aW9uIChqb2IsIGlkeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWpvYi5qb2JfdHlwZS5qb2JfdHlwZV9pbnRlcmZhY2UgJiYgJHNjb3BlLnJlY2lwZVR5cGUuam9iX3R5cGVzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgam9iVHlwZURhdGEgPSBfLmZpbmQoJHNjb3BlLnJlY2lwZVR5cGUuam9iX3R5cGVzLCB7bmFtZTogam9iLmpvYl90eXBlLm5hbWUsIHZlcnNpb246IGpvYi5qb2JfdHlwZS52ZXJzaW9ufSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlY2lwZVR5cGUuZGVmaW5pdGlvbi5qb2JzW2lkeF0uam9iX3R5cGUgPSBqb2JUeXBlRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBzZXR1cCBzdHJpbmcgdG8gYmluZCBjb21tYSBkZWxpbWl0ZWQgbGlzdCBvZiB0cmlnZ2VyIHJ1bGUgY29uZmlndXJhdGlvbiBjb25kaXRpb24gZGF0YSB0eXBlc1xuICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUucmVjaXBlVHlwZS50cmlnZ2VyX3J1bGUgJiYgJHNjb3BlLnJlY2lwZVR5cGUudHJpZ2dlcl9ydWxlLmNvbmZpZ3VyYXRpb24gJiYgJHNjb3BlLnJlY2lwZVR5cGUudHJpZ2dlcl9ydWxlLmNvbmZpZ3VyYXRpb24uY29uZGl0aW9uICYmICRzY29wZS5yZWNpcGVUeXBlLnRyaWdnZXJfcnVsZS5jb25maWd1cmF0aW9uLmNvbmRpdGlvbi5kYXRhX3R5cGVzKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZWNpcGVUeXBlVHJpZ2dlci5kYXRhVHlwZXMgPSAkc2NvcGUucmVjaXBlVHlwZS50cmlnZ2VyX3J1bGUuY29uZmlndXJhdGlvbi5jb25kaXRpb24uZGF0YV90eXBlcy5qb2luKCcsJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpbml0R3JhcGgoKTtcbiAgICAgICAgICAgICAgICAgICAgZ2V0SW9NYXBwaW5ncygpO1xuICAgICAgICAgICAgICAgICAgICBkcmF3R3JhcGgoJHNjb3BlLmlzVXBkYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmKCRyb290U2NvcGUudXNlcil7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlYWRvbmx5ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGluaXRHcmFwaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vICoqKioqKlxuICAgICAgICAgICAgLy8gc2V0dXAgRDMgY29udGFpbmVyIGFuZCBHcmFwaFxuICAgICAgICAgICAgLy8gKioqKioqXG4gICAgICAgICAgICAvLyRzY29wZS5zZWxlY3RlZEpvYiA9IG51bGw7XG4gICAgICAgICAgICBmdW5jdGlvbiBjbGlja2VkKCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gZDMuZXZlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIHggPSBkMy5ldmVudC54O1xuICAgICAgICAgICAgICAgIHZhciB5ID0gZDMuZXZlbnQueTtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBwYXJzZUludChzdmcuc3R5bGUoXCJ3aWR0aFwiKS5yZXBsYWNlKC9weC8sIFwiXCIpKTtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoc3ZnLnN0eWxlKFwiaGVpZ2h0XCIpLnJlcGxhY2UoL3B4LywgXCJcIikpO1xuXG4gICAgICAgICAgICAgICAgaW5uZXIuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIHdpZHRoIC8gMiArIFwiLFwiICsgaGVpZ2h0IC8gMiArIFwiKXNjYWxlKDIpdHJhbnNsYXRlKFwiICsgLXggKyBcIixcIiArIC15ICsgXCIpXCIpO1xuXG4gICAgICAgICAgICAgICAgLy9pbm5lci5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDUwcHgsIDUwcHgpc2NhbGUoMiwzKVwiKTtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdmcgPSBkMy5zZWxlY3QoXCJzdmdcIik7XG4gICAgICAgICAgICBpbm5lciA9IHN2Zy5zZWxlY3QoXCJnXCIpOyAvLy5vbihcImNsaWNrXCIsIGNsaWNrZWQpO1xuICAgICAgICAgICAgLy8gU2V0IHVwIHpvb20gc3VwcG9ydFxuICAgICAgICAgICAgem9vbSA9IGQzLmJlaGF2aW9yLnpvb20oKS5vbihcInpvb21cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlubmVyLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBkMy5ldmVudC50cmFuc2xhdGUgKyBcIilcIiArXG4gICAgICAgICAgICAgICAgICAgIFwic2NhbGUoXCIgKyBkMy5ldmVudC5zY2FsZSArIFwiKVwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3ZnLmNhbGwoem9vbSk7XG5cbiAgICAgICAgICAgIHJlbmRlciA9IG5ldyBkYWdyZUQzLnJlbmRlcigpO1xuXG4gICAgICAgICAgICAvLyBMZWZ0LXRvLXJpZ2h0IGxheW91dFxuICAgICAgICAgICAgZ3JhcGggPSBuZXcgZGFncmVEMy5ncmFwaGxpYi5HcmFwaCgpO1xuICAgICAgICAgICAgZ3JhcGguc2V0R3JhcGgoe1xuICAgICAgICAgICAgICAgIG5vZGVzZXA6IDcwLFxuICAgICAgICAgICAgICAgIHJhbmtzZXA6IDUwLFxuICAgICAgICAgICAgICAgIHJhbmtkaXI6IFwiVEJcIixcbiAgICAgICAgICAgICAgICBtYXJnaW54OiAyMCxcbiAgICAgICAgICAgICAgICBtYXJnaW55OiAyMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZHJhd0dyYXBoID0gZnVuY3Rpb24gKGlzVXBkYXRlKSB7XG4gICAgICAgICAgICAvLyBnbG9iYWxzIGJlY2F1c2UgZGFncmUgbmVlZHMgYSByZWZlcmVuY2UgdG8gYW5ndWxhciBzY29wZVxuICAgICAgICAgICAgd2luZG93Lm5vZGVDbGljayA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2NvcGUgPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlY2lwZXZpZXdlcicpKS5zY29wZSgpO1xuICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLm5vZGVDbGljayhuYW1lKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHdpbmRvdy5tYXBJbnB1dCA9IGZ1bmN0aW9uKGpvYk5hbWUsIGpvYk91dHB1dCl7XG4gICAgICAgICAgICAgICAgdmFyIHNjb3BlID0gYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWNpcGV2aWV3ZXInKSkuc2NvcGUoKTtcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5tYXBJbnB1dChqb2JOYW1lLCBqb2JPdXRwdXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHNjb3BlLmlzVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmKCRzY29wZS5yZWNpcGUpe1xuICAgICAgICAgICAgICAgICRzY29wZS5sYXN0U3RhdHVzQ2hhbmdlID0gJHNjb3BlLnJlY2lwZS5sYXN0X21vZGlmaWVkID8gbW9tZW50LmR1cmF0aW9uKG1vbWVudC51dGMoJHNjb3BlLnJlY2lwZS5sYXN0X21vZGlmaWVkKS5kaWZmKG1vbWVudC51dGMoKSkpLmh1bWFuaXplKHRydWUpIDogJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBqb2JzID0gW107XG4gICAgICAgICAgICBpZiAoJHNjb3BlLnJlY2lwZVR5cGUuZGVmaW5pdGlvbikge1xuICAgICAgICAgICAgICAgIGpvYnMgPSAkc2NvcGUucmVjaXBlVHlwZS5kZWZpbml0aW9uLmpvYnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2hpbGRDb3VudHMgPSBbXTtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBncmFwaCBvYmplY3RzXG4gICAgICAgICAgICBmb3IgKHZhciBpZHggaW4gam9icykge1xuICAgICAgICAgICAgICAgIHZhciBqb2IgPSBqb2JzW2lkeF07XG5cbiAgICAgICAgICAgICAgICBpZiAoIGpvYi5kZXBlbmRlbmNpZXMgPT09IHVuZGVmaW5lZCB8fCBqb2IuZGVwZW5kZW5jaWVzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgam9iLmRlcFN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGdldFJlY2lwZVR5cGVKb2JDbGFzc05hbWUoam9iKTtcblxuICAgICAgICAgICAgICAgIHZhciBodG1sID0gJzxkaXY+JztcbiAgICAgICAgICAgICAgICAvL3ZhciBodG1sID0gXCI8ZGl2IG9uY2xpY2s9XFxcImNvbnNvbGUubG9nKCdcIiArIGpvYi5qb2JfdHlwZS5uYW1lICsgXCInKVxcXCI+XCI7XG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPHNwYW4gY2xhc3M9XCJzdGF0dXNcIj48L3NwYW4+JztcbiAgICAgICAgICAgICAgICAvLyAgIGh0bWwgKz0gXCI8c3BhbiBjbGFzcz1jb25zdW1lcnM+XCIrd29ya2VyLmNvbnN1bWVycytcIjwvc3Bhbj5cIjtcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8c3BhbiBjbGFzcz1cIm5hbWVcIj4nO1xuICAgICAgICAgICAgICAgIGlmIChqb2Iuam9iX3R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhqb2Iuam9iVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxkaXYgaWQ9XCInICsgam9iLm5hbWUgKyAnXCIgY2xhc3M9XCJyZWNpcGVOb2RlXCIgb25jbGljaz1cIm5vZGVDbGljayhcXCcnICsgam9iLm5hbWUgKyAnXFwnKVwiPjxzcGFuIGNsYXNzPVwibmFtZVwiPicgKyBqb2Iuam9iX3R5cGUuZ2V0SWNvbigpICsgJyAnICsgam9iLm5hbWUgKyAnPC9zcGFuPjwvZGl2Pic7XG4gICAgICAgICAgICAgICAgICAgIC8vaWYoam9iVHlwZS5uYW1lKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgaHRtbCArPSAnPGRpdiBpZD1cIicgKyBqb2IubmFtZSArICdcIiBjbGFzcz1cInJlY2lwZU5vZGVcIiBvbmNsaWNrPVwibm9kZUNsaWNrKFxcJycgKyBqb2IubmFtZSArICdcXCcpXCI+PHNwYW4gY2xhc3M9XCJuYW1lXCI+JyArIGpvYlR5cGUuZ2V0SWNvbigpICsgJyAnICsgam9iVHlwZS50aXRsZSArICc8L3NwYW4+PC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgLy99IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICBodG1sICs9ICc8ZGl2IGlkPVwiJyArIGpvYi5uYW1lICsgJ1wiIGNsYXNzPVwicmVjaXBlTm9kZVwiIG9uY2xpY2s9XCJub2RlQ2xpY2soXFwnJyArIGpvYi5uYW1lICsgJ1xcJylcIj48c3BhbiBjbGFzcz1cIm5hbWVcIj4nICsgam9iVHlwZS5nZXRJY29uKCkgKyAnICcgKyBqb2IubmFtZSArICc8L3NwYW4+PC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgLy99XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPC9zcGFuPic7XG4gICAgICAgICAgICAgICAgLy8gICBodG1sICs9IFwiPHNwYW4gY2xhc3M9cXVldWU+PHNwYW4gY2xhc3M9Y291bnRlcj5cIit3b3JrZXIuY291bnQrXCI8L3NwYW4+PC9zcGFuPlwiO1xuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzwvZGl2Pic7XG4gICAgICAgICAgICAgICAgZ3JhcGguc2V0Tm9kZShqb2IubmFtZSwge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbFR5cGU6ICdodG1sJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGh0bWwsXG4gICAgICAgICAgICAgICAgICAgIHJ4OiA1LFxuICAgICAgICAgICAgICAgICAgICByeTogNSxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGNsYXNzTmFtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIHNldHVwIGVkZ2VzXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZCBpbiBqb2IuZGVwZW5kZW5jaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXAgPSBqb2IuZGVwZW5kZW5jaWVzW2RdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXAubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JhcGguc2V0RWRnZShkZXAubmFtZSwgam9iLm5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xhYmVsVHlwZTogJ2h0bWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGFiZWw6IGRlcC5uYW1lICsgJy0tPicgKyBqb2IubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjBcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRDb3VudHNbZGVwLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRDb3VudHNbZGVwLm5hbWVdICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkQ291bnRzW2RlcC5uYW1lXSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNldCBzdGFydCBub2RlIGFuZCBlZGdlc1xuICAgICAgICAgICAgZ3JhcGguc2V0Tm9kZSgnc3RhcnQnLCB7XG4gICAgICAgICAgICAgICAgbGFiZWxUeXBlOiAnaHRtbCcsXG4gICAgICAgICAgICAgICAgbGFiZWw6ICc8ZGl2IGlkPVwic3RhcnRcIiBjbGFzcz1cInJlY2lwZU5vZGVcIiBvbmNsaWNrPVwibm9kZUNsaWNrKFxcJ3N0YXJ0XFwnKVwiPjxzcGFuIGNsYXNzPW5hbWU+U3RhcnQ8L3NwYW4+PC9kaXY+JyxcbiAgICAgICAgICAgICAgICByeDogNSxcbiAgICAgICAgICAgICAgICByeTogNSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHN0YXJ0Sm9iID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdzdGFydCcsXG4gICAgICAgICAgICAgICAgam9iX3R5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdTdGFydCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0X2RhdGE6ICRzY29wZS5yZWNpcGVUeXBlLmlucHV0X2RhdGFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgbm9EZXBzID0gXy5maWx0ZXIoam9icywgJ2RlcFN0YXJ0JywgdHJ1ZSk7XG4gICAgICAgICAgICBmb3IgKHZhciBuIGluIG5vRGVwcykge1xuICAgICAgICAgICAgICAgIGdyYXBoLnNldEVkZ2UoJ3N0YXJ0Jywgbm9EZXBzW25dLm5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDIwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNldCBlbmQgbm9kZSBhbmQgZWRnZXNcbiAgICAgICAgICAgIGdyYXBoLnNldE5vZGUoJ2VuZCcsIHtcbiAgICAgICAgICAgICAgICBsYWJlbFR5cGU6ICdodG1sJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogJzxkaXY+PHNwYW4gY2xhc3M9bmFtZT5FbmQ8L3NwYW4+PC9kaXY+JyxcbiAgICAgICAgICAgICAgICByeDogNSxcbiAgICAgICAgICAgICAgICByeTogNSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBub0NoaWxkcmVuID1fLmZpbHRlcihqb2JzLCBmdW5jdGlvbiAoam9iKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFjaGlsZENvdW50c1tqb2IubmFtZV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvciAodmFyIG8gaW4gbm9DaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGdyYXBoLnNldEVkZ2Uobm9DaGlsZHJlbltvXS5uYW1lLCAnZW5kJywge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gd2FpdCBmb3IgY3VycmVudCBjYWxsIHN0YWNrIHRvIGNsZWFyXG4gICAgICAgICAgICBfLmRlZmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpbm5lci5jYWxsKHJlbmRlciwgZ3JhcGgpO1xuXG4gICAgICAgICAgICAgICAgLy8gWm9vbSBhbmQgc2NhbGUgdG8gZml0XG4gICAgICAgICAgICAgICAgdmFyIHpvb21TY2FsZSA9IHpvb20uc2NhbGUoKTtcbiAgICAgICAgICAgICAgICB2YXIgZ3JhcGhXaWR0aCA9IGdyYXBoLmdyYXBoKCkud2lkdGggKyA0MDtcbiAgICAgICAgICAgICAgICB2YXIgZ3JhcGhIZWlnaHQgPSBncmFwaC5ncmFwaCgpLmhlaWdodCArIDQwO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHBhcnNlSW50KHN2Zy5zdHlsZShcIndpZHRoXCIpLnJlcGxhY2UoL3B4LywgXCJcIikpO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChzdmcuc3R5bGUoXCJoZWlnaHRcIikucmVwbGFjZSgvcHgvLCBcIlwiKSk7XG4gICAgICAgICAgICAgICAgLy96b29tU2NhbGUgPSBNYXRoLm1pbih3aWR0aCAvIGdyYXBoV2lkdGgsIGhlaWdodCAvIGdyYXBoSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAvL2lmKHpvb21TY2FsZTwwLjgwKXtcbiAgICAgICAgICAgICAgICAvLyAgem9vbVNjYWxlID0gMC44MDtcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgem9vbVNjYWxlID0gMC43NTtcbiAgICAgICAgICAgICAgICBpZih6b29tU2NhbGUgPCAxKXtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnem9vbVNjYWxlOiAnICsgem9vbVNjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IFswLDBdOy8vIFsod2lkdGgqem9vbVNjYWxlKS0oZ3JhcGhXaWR0aCp6b29tU2NhbGUpLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgem9vbS50cmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgem9vbS5zY2FsZSh6b29tU2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICB6b29tLmV2ZW50KGlzVXBkYXRlID8gc3ZnLnRyYW5zaXRpb24oKS5kdXJhdGlvbig1MDApIDogZDMuc2VsZWN0KFwic3ZnXCIpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBhZGQgc2VsZWN0ZWQgY2xhc3MgdG8gYXBwcm9wcmlhdGUgbm9kZVxuICAgICAgICAgICAgICAgIGlmKCRzY29wZS5zZWxlY3RlZEpvYil7XG4gICAgICAgICAgICAgICAgICAgICQoJyMnICsgJHNjb3BlLnNlbGVjdGVkSm9iLm5hbWUpLmFkZENsYXNzKCdzZWxlY3RlZC1ub2RlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldERlcGVuZGVudHMgPSBmdW5jdGlvbiAobmFtZSxvdXRwdXROYW1lKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuXG4gICAgICAgICAgICBfLmZvckVhY2goJHNjb3BlLnJlY2lwZVR5cGUuZGVmaW5pdGlvbi5qb2JzLCBmdW5jdGlvbiAoam9iLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoam9iLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5mb3JFYWNoKGpvYi5kZXBlbmRlbmNpZXMsIGZ1bmN0aW9uIChkZXBlbmRlbmN5LCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXBlbmRlbmN5Lm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmZvckVhY2goZGVwZW5kZW5jeS5jb25uZWN0aW9ucywgZnVuY3Rpb24gKGNvbm4sIGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29ubi5vdXRwdXQgPT09IG91dHB1dE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogam9iLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiBjb25uLm91dHB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogY29ubi5pbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfTtcblxuICAgICAgICBpbml0aWFsaXplKCk7XG5cbiAgICB9KS5kaXJlY3RpdmUoJ2Fpc1NjYWxlUmVjaXBlR3JhcGhWaWV3ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVzYWdlOiA8YWlzLXNjYWxlLXJlY2lwZS12aWV3ZXIgcmVjaXBlPVwicmVjaXBlXCIgLz5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb250cm9sbGVyOiAnYWlzU2NhbGVSZWNpcGVHcmFwaFZpZXdlckNvbnRyb2xsZXInLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL3JlY2lwZXMvcGFydGlhbHMvcmVjaXBlR3JhcGhWaWV3ZXJUZW1wbGF0ZS5odG1sJyxcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHJlY2lwZVR5cGU6ICc9JyxcbiAgICAgICAgICAgICAgICByZWNpcGU6ICc9JyxcbiAgICAgICAgICAgICAgICBpc01vZGlmaWVkOiAnPW1vZGlmaWVkJyxcbiAgICAgICAgICAgICAgICBhbGxvd0VkaXQ6ICc9JyxcbiAgICAgICAgICAgICAgICBoYXNDb250YWluZXI6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSkge1xuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxIZWlnaHQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdyZWNpcGUtdmlld2VyLXRpdGxlJylbMF0uc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBzY29wZS5kZXRhaWxNYXhIZWlnaHQgPSBzY29wZS4kcGFyZW50LmRldGFpbE1heEhlaWdodCA/IHNjb3BlLiRwYXJlbnQuZGV0YWlsTWF4SGVpZ2h0IC0gZWxIZWlnaHQgOiA3MDA7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmRldGFpbENvbnRhaW5lclN0eWxlID0gJ2hlaWdodDogJyArIHNjb3BlLmRldGFpbE1heEhlaWdodCArICdweDsgbWF4LWhlaWdodDogJyArIHNjb3BlLmRldGFpbE1heEhlaWdodCArICdweDsgb3ZlcmZsb3cteTogYXV0bzsnO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdSZWNpcGUnLCBmdW5jdGlvbiAoUmVjaXBlVHlwZSwgc2NhbGVTZXJ2aWNlKSB7XG4gICAgICAgIHZhciBSZWNpcGUgPSBmdW5jdGlvbiAoaWQsIGNyZWF0ZWQsIGNvbXBsZXRlZCwgbGFzdF9tb2RpZmllZCwgcmVjaXBlX3R5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlZCA9IGNyZWF0ZWQ7XG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IGNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRoaXMubGFzdF9tb2RpZmllZCA9IGxhc3RfbW9kaWZpZWQ7XG4gICAgICAgICAgICB0aGlzLnJlY2lwZV90eXBlID0gUmVjaXBlVHlwZS50cmFuc2Zvcm1lcihyZWNpcGVfdHlwZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgUmVjaXBlLnByb3RvdHlwZSA9IHtcbiAgICAgICAgICAgIGdldER1cmF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjYWxlU2VydmljZS5jYWxjdWxhdGVEdXJhdGlvbih0aGlzLmNyZWF0ZWQsIHRoaXMubGFzdF9tb2RpZmllZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3RhdGljIG1ldGhvZHMsIGFzc2lnbmVkIHRvIGNsYXNzXG4gICAgICAgIFJlY2lwZS5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVjaXBlKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNyZWF0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29tcGxldGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxhc3RfbW9kaWZpZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucmVjaXBlX3R5cGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWNpcGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBSZWNpcGUudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoUmVjaXBlLmJ1aWxkKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFJlY2lwZS5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVjaXBlO1xuICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ1JlY2lwZURhdGEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBSZWNpcGVEYXRhID0gZnVuY3Rpb24gKGlucHV0X2RhdGEsIHZlcnNpb24sIHdvcmtzcGFjZV9pZCkge1xuICAgICAgICAgICAgdGhpcy5pbnB1dF9kYXRhID0gaW5wdXRfZGF0YTtcbiAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgICB0aGlzLndvcmtzcGFjZV9pZCA9IHdvcmtzcGFjZV9pZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzdGF0aWMgbWV0aG9kcywgYXNzaWduZWQgdG8gY2xhc3NcbiAgICAgICAgUmVjaXBlRGF0YS5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVjaXBlRGF0YShcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pbnB1dF9kYXRhLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGEud29ya3NwYWNlX2lkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVjaXBlRGF0YSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFJlY2lwZURhdGEudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoUmVjaXBlRGF0YS5idWlsZClcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBSZWNpcGVEYXRhLmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZWNpcGVEYXRhO1xuICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ1JlY2lwZURldGFpbHMnLCBmdW5jdGlvbiAoUmVjaXBlRGF0YSwgUmVjaXBlVHlwZURlZmluaXRpb24sIFJlY2lwZVR5cGUsIFJlY2lwZVR5cGVEZXRhaWwsIFJlY2lwZUpvYkNvbnRhaW5lciwgc2NhbGVDb25maWcpIHtcbiAgICAgICAgdmFyIFJlY2lwZURldGFpbHMgPSBmdW5jdGlvbiAoaWQsIGNyZWF0ZWQsIGNvbXBsZXRlZCwgbGFzdF9tb2RpZmllZCwgZGF0YSwgcmVjaXBlX3R5cGUsIHJlY2lwZV90eXBlX3Jldiwgam9icykge1xuICAgICAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVkID0gY3JlYXRlZDtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVkID0gY29tcGxldGVkO1xuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZWRfZm9ybWF0dGVkID0gdGhpcy5jb21wbGV0ZWQgPyBtb21lbnQudXRjKHRoaXMuY29tcGxldGVkKS50b0lTT1N0cmluZygpIDogdGhpcy5jb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aGlzLmxhc3RfbW9kaWZpZWQgPSBsYXN0X21vZGlmaWVkO1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gUmVjaXBlRGF0YS50cmFuc2Zvcm1lcihkYXRhKTtcbiAgICAgICAgICAgIHRoaXMucmVjaXBlX3R5cGUgPSBSZWNpcGVUeXBlLnRyYW5zZm9ybWVyKHJlY2lwZV90eXBlKTtcbiAgICAgICAgICAgIHRoaXMucmVjaXBlX3R5cGVfcmV2ID0gUmVjaXBlVHlwZURldGFpbC50cmFuc2Zvcm1lcihyZWNpcGVfdHlwZV9yZXYpO1xuICAgICAgICAgICAgdGhpcy5qb2JzID0gUmVjaXBlSm9iQ29udGFpbmVyLnRyYW5zZm9ybWVyKGpvYnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBSZWNpcGVEZXRhaWxzLmJ1aWxkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWNpcGVEZXRhaWxzKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNyZWF0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29tcGxldGVkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmxhc3RfbW9kaWZpZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5yZWNpcGVfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5yZWNpcGVfdHlwZV9yZXYsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9ic1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlY2lwZURldGFpbHMoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBSZWNpcGVEZXRhaWxzLnRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgICAgICAgICAubWFwKFJlY2lwZURldGFpbHMuYnVpbGQpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUmVjaXBlRGV0YWlscy5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVjaXBlRGV0YWlscztcbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ1JlY2lwZUpvYicsIGZ1bmN0aW9uIChKb2JUeXBlKSB7XG4gICAgICAgIHZhciBSZWNpcGVKb2IgPSBmdW5jdGlvbiAoaWQsIHN0YXR1cywgam9iX3R5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICAgICAgdGhpcy5qb2JfdHlwZSA9IEpvYlR5cGUudHJhbnNmb3JtZXIoam9iX3R5cGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBSZWNpcGVKb2IuYnVpbGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlY2lwZUpvYihcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9iX3R5cGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWNpcGVKb2IoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBSZWNpcGVKb2IudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoUmVjaXBlSm9iLmJ1aWxkKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFJlY2lwZUpvYi5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVjaXBlSm9iO1xuICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ1JlY2lwZUpvYkNvbnRhaW5lcicsIGZ1bmN0aW9uIChSZWNpcGVKb2IpIHtcbiAgICAgICAgdmFyIFJlY2lwZUpvYkNvbnRhaW5lciA9IGZ1bmN0aW9uIChqb2JfbmFtZSwgam9iKSB7XG4gICAgICAgICAgICB0aGlzLmpvYl9uYW1lID0gam9iX25hbWU7XG4gICAgICAgICAgICB0aGlzLmpvYiA9IFJlY2lwZUpvYi50cmFuc2Zvcm1lcihqb2IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBSZWNpcGVKb2JDb250YWluZXIuYnVpbGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlY2lwZUpvYkNvbnRhaW5lcihcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5qb2JfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5qb2JcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWNpcGVKb2JDb250YWluZXIoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBSZWNpcGVKb2JDb250YWluZXIudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoUmVjaXBlSm9iQ29udGFpbmVyLmJ1aWxkKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFJlY2lwZUpvYkNvbnRhaW5lci5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVjaXBlSm9iQ29udGFpbmVyO1xuICAgIH0pO1xufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ1JlY2lwZVR5cGUnLCBmdW5jdGlvbiAoc2NhbGVDb25maWcsIFJlY2lwZVR5cGVEZWZpbml0aW9uKSB7XG4gICAgICAgIHZhciBSZWNpcGVUeXBlID0gZnVuY3Rpb24gKGlkLCBuYW1lLCB2ZXJzaW9uLCB0aXRsZSwgZGVzY3JpcHRpb24sIGlzX2FjdGl2ZSwgZGVmaW5pdGlvbiwgcmV2aXNpb25fbnVtLCBjcmVhdGVkLCAgbGFzdF9tb2RpZmllZCwgYXJjaGl2ZWQsIHRyaWdnZXJfcnVsZSkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgICB0aGlzLmlzX2FjdGl2ZSA9IGlzX2FjdGl2ZTtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5pdGlvbiA9IGRlZmluaXRpb24gPyBSZWNpcGVUeXBlRGVmaW5pdGlvbi50cmFuc2Zvcm1lcihkZWZpbml0aW9uKSA6IG5ldyBSZWNpcGVUeXBlRGVmaW5pdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5yZXZpc2lvbl9udW0gPSByZXZpc2lvbl9udW07XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZWQgPSBjcmVhdGVkO1xuICAgICAgICAgICAgdGhpcy5sYXN0X21vZGlmaWVkID0gbGFzdF9tb2RpZmllZDtcbiAgICAgICAgICAgIHRoaXMuYXJjaGl2ZWQgPSBhcmNoaXZlZDtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcl9ydWxlID0gdHJpZ2dlcl9ydWxlO1xuICAgICAgICAgICAgdGhpcy5tb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBSZWNpcGVUeXBlLmJ1aWxkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmKGRhdGEpe1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVjaXBlVHlwZShcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaXNfYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmRlZmluaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucmV2aXNpb25fbnVtLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNyZWF0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubGFzdF9tb2RpZmllZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5hcmNoaXZlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS50cmlnZ2VyX3J1bGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWNpcGVUeXBlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgUmVjaXBlVHlwZS50cmFuc2Zvcm1lciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEubWFwKFJlY2lwZVR5cGUuYnVpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFJlY2lwZVR5cGUuYnVpbGQoZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlY2lwZVR5cGU7XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdSZWNpcGVUeXBlRGVmaW5pdGlvbicsIGZ1bmN0aW9uIChzY2FsZUNvbmZpZywgUmVjaXBlVHlwZURlZmluaXRpb25Kb2IsIEpvYlR5cGVJbnB1dERhdGEpIHtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIC8vIHByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgUmVjaXBlVHlwZURlZmluaXRpb24gPSBmdW5jdGlvbiAoaW5wdXRfZGF0YSwgdmVyc2lvbiwgam9icykge1xuICAgICAgICAgICAgdGhpcy5pbnB1dF9kYXRhID0gaW5wdXRfZGF0YSA/IEpvYlR5cGVJbnB1dERhdGEudHJhbnNmb3JtZXIoaW5wdXRfZGF0YSkgOiBbXTtcbiAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb24gfHwgJzEuMCc7XG4gICAgICAgICAgICB0aGlzLmpvYnMgPSBqb2JzID8gUmVjaXBlVHlwZURlZmluaXRpb25Kb2IudHJhbnNmb3JtZXIoam9icykgOiBbXTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0Sm9iTmFtZSA9IGZ1bmN0aW9uKGpvYnMsIGpvYk5hbWUpe1xuICAgICAgICAgICAgdmFyIHRoZU5hbWUgPSBqb2JOYW1lO1xuICAgICAgICAgICAgdmFyIGV4aXN0aW5nID0gXy5maW5kKGpvYnMsIHsgJ25hbWUnOiBqb2JOYW1lIH0pO1xuICAgICAgICAgICAgdmFyIGlkeCA9IDI7XG4gICAgICAgICAgICB3aGlsZShleGlzdGluZyl7XG4gICAgICAgICAgICAgICAgdGhlTmFtZSA9IGpvYk5hbWUgKyAnLScgKyBpZHg7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmcgPSBfLmZpbmQoam9icywgeyAnbmFtZSc6IHRoZU5hbWUgfSk7XG4gICAgICAgICAgICAgICAgaWR4Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhlTmFtZTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBwdWJsaWMgbWV0aG9kc1xuICAgICAgICBSZWNpcGVUeXBlRGVmaW5pdGlvbi5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgICBhZGRKb2I6IGZ1bmN0aW9uIChqb2JUeXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGpuYW1lID0gZ2V0Sm9iTmFtZSh0aGlzLmpvYnMsIGpvYlR5cGUubmFtZSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coam5hbWUpO1xuICAgICAgICAgICAgICAgIHZhciBqb2IgPSB7XG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llczogW10sXG4gICAgICAgICAgICAgICAgICAgIHJlY2lwZV9pbnB1dHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBqbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgam9iX3R5cGVfaWQ6IGpvYlR5cGUuaWQsXG4gICAgICAgICAgICAgICAgICAgIGpvYl90eXBlOiBqb2JUeXBlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmpvYnMucHVzaChqb2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBSZWNpcGVUeXBlRGVmaW5pdGlvbi5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZihkYXRhKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlY2lwZVR5cGVEZWZpbml0aW9uKFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmlucHV0X2RhdGEsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5qb2JzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVjaXBlVHlwZURlZmluaXRpb24oKTtcbiAgICAgICAgfTtcblxuICAgICAgICBSZWNpcGVUeXBlRGVmaW5pdGlvbi50cmFuc2Zvcm1lciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoYW5ndWxhci5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgLm1hcChSZWNpcGVUeXBlRGVmaW5pdGlvbi5idWlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUmVjaXBlVHlwZURlZmluaXRpb24uYnVpbGQoZGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlY2lwZVR5cGVEZWZpbml0aW9uO1xuICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpe1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ1JlY2lwZVR5cGVEZWZpbml0aW9uSm9iJywgZnVuY3Rpb24gKHNjYWxlQ29uZmlnLCBKb2JUeXBlRGV0YWlscykge1xuICAgICAgICAvLyBwcml2YXRlIG1ldGhvZHNcbiAgICAgICAgdmFyIFJlY2lwZVR5cGVEZWZpbml0aW9uSm9iID0gZnVuY3Rpb24gKHJlY2lwZV9pbnB1dHMsIG5hbWUsIGpvYl90eXBlLCBkZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgICAgIHRoaXMucmVjaXBlX2lucHV0cyA9IHJlY2lwZV9pbnB1dHM7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgdGhpcy5qb2JfdHlwZSA9IGpvYl90eXBlO1xuICAgICAgICAgICAgLy90aGlzLmpvYl90eXBlID0ge1xuICAgICAgICAgICAgLy8gICAgbmFtZTogam9iX3R5cGUubmFtZSxcbiAgICAgICAgICAgIC8vICAgIHZlcnNpb246IGpvYl90eXBlLnZlcnNpb25cbiAgICAgICAgICAgIC8vfTtcbiAgICAgICAgICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzIHx8IFtdO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHN0YXRpYyBtZXRob2RzLCBhc3NpZ25lZCB0byBjbGFzc1xuICAgICAgICBSZWNpcGVUeXBlRGVmaW5pdGlvbkpvYi5idWlsZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVjaXBlVHlwZURlZmluaXRpb25Kb2IoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucmVjaXBlX2lucHV0cyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmpvYl90eXBlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmRlcGVuZGVuY2llc1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlY2lwZVR5cGVEZWZpbml0aW9uSm9iKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgUmVjaXBlVHlwZURlZmluaXRpb25Kb2IudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoUmVjaXBlVHlwZURlZmluaXRpb25Kb2IuYnVpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFJlY2lwZVR5cGVEZWZpbml0aW9uSm9iLmJ1aWxkKGRhdGEpO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgcmV0dXJuIFJlY2lwZVR5cGVEZWZpbml0aW9uSm9iO1xuXG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5mYWN0b3J5KCdSZWNpcGVUeXBlRGV0YWlsJywgZnVuY3Rpb24gKHNjYWxlQ29uZmlnLCBSZWNpcGVUeXBlRGVmaW5pdGlvbiwgSm9iVHlwZURldGFpbHMpIHtcbiAgICAgICAgdmFyIFJlY2lwZVR5cGVEZXRhaWwgPSBmdW5jdGlvbiAoaWQsIG5hbWUsIHZlcnNpb24sIHRpdGxlLCBkZXNjcmlwdGlvbiwgaXNfYWN0aXZlLCBkZWZpbml0aW9uLCBjcmVhdGVkLCBsYXN0X21vZGlmaWVkLCBhcmNoaXZlZCwgdHJpZ2dlcl9ydWxlLCBqb2JfdHlwZXMpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgdGhpcy5pc19hY3RpdmUgPSBpc19hY3RpdmU7XG4gICAgICAgICAgICB0aGlzLmRlZmluaXRpb24gPSBSZWNpcGVUeXBlRGVmaW5pdGlvbi50cmFuc2Zvcm1lcihkZWZpbml0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlZCA9IGNyZWF0ZWQ7XG4gICAgICAgICAgICB0aGlzLmxhc3RfbW9kaWZpZWQgPSBsYXN0X21vZGlmaWVkO1xuICAgICAgICAgICAgdGhpcy5hcmNoaXZlZCA9IGFyY2hpdmVkO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyX3J1bGUgPSB0cmlnZ2VyX3J1bGU7XG4gICAgICAgICAgICB0aGlzLmpvYl90eXBlcyA9IEpvYlR5cGVEZXRhaWxzLnRyYW5zZm9ybWVyKGpvYl90eXBlcyk7XG4gICAgICAgICAgICB0aGlzLm1vZGlmaWVkID0gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3RhdGljIG1ldGhvZHMsIGFzc2lnbmVkIHRvIGNsYXNzXG4gICAgICAgIFJlY2lwZVR5cGVEZXRhaWwuYnVpbGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlY2lwZVR5cGVEZXRhaWwoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS52ZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmlzX2FjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kZWZpbml0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmNyZWF0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEubGFzdF9tb2RpZmllZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5hcmNoaXZlZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS50cmlnZ2VyX3J1bGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuam9iX3R5cGVzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVjaXBlVHlwZURldGFpbCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFJlY2lwZVR5cGVEZXRhaWwudHJhbnNmb3JtZXIgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoUmVjaXBlVHlwZURldGFpbC5idWlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUmVjaXBlVHlwZURldGFpbC5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVjaXBlVHlwZURldGFpbDtcbiAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdzY2FsZUFwcCcpLmZhY3RvcnkoJ1JlY2lwZVR5cGVWYWxpZGF0aW9uJywgZnVuY3Rpb24gKFJlY2lwZVR5cGVEZWZpbml0aW9uKSB7XG5cbiAgICAgICAgdmFyIGdldFJlY2lwZVR5cGVWYWxpZGF0aW9uSm9icyA9IGZ1bmN0aW9uKGpvYnMpe1xuICAgICAgICAgICAgdmFyIGpvYnNPdXQgPSBbXTtcbiAgICAgICAgICAgIF8uZm9yRWFjaChqb2JzLCBmdW5jdGlvbihqb2Ipe1xuICAgICAgICAgICAgICAgam9ic091dC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICByZWNpcGVfaW5wdXRzOiBqb2IucmVjaXBlX2lucHV0cyxcbiAgICAgICAgICAgICAgICAgICBuYW1lOiBqb2IubmFtZSxcbiAgICAgICAgICAgICAgICAgICBqb2JfdHlwZToge1xuICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBqb2Iuam9iX3R5cGUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogam9iLmpvYl90eXBlLnZlcnNpb25cbiAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llczogam9iLmRlcGVuZGVuY2llc1xuICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGpvYnNPdXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIFJlY2lwZVR5cGVWYWxpZGF0aW9uID0gZnVuY3Rpb24gKGlkLCBuYW1lLCB2ZXJzaW9uLCB0aXRsZSwgZGVzY3JpcHRpb24sIGRlZmluaXRpb24sIHRyaWdnZXJfcnVsZSkge1xuICAgICAgICAgICAgaWYoaWQpe1xuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgLy90aGlzLmRlZmluaXRpb24gPSBkZWZpbml0aW9uID8gUmVjaXBlVHlwZURlZmluaXRpb24udHJhbnNmb3JtZXIoZGVmaW5pdGlvbikgOiBuZXcgUmVjaXBlVHlwZURlZmluaXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuZGVmaW5pdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBpbnB1dF9kYXRhOiBkZWZpbml0aW9uLmlucHV0X2RhdGEsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogZGVmaW5pdGlvbi52ZXJzaW9uLFxuICAgICAgICAgICAgICAgIGpvYnM6IGdldFJlY2lwZVR5cGVWYWxpZGF0aW9uSm9icyhkZWZpbml0aW9uLmpvYnMpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyX3J1bGUgPSB0cmlnZ2VyX3J1bGU7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3RhdGljIG1ldGhvZHMsIGFzc2lnbmVkIHRvIGNsYXNzXG4gICAgICAgIFJlY2lwZVR5cGVWYWxpZGF0aW9uLmJ1aWxkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWNpcGVUeXBlVmFsaWRhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnZlcnNpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGVmaW5pdGlvbixcbiAgICAgICAgICAgICAgICAgICAgZGF0YS50cmlnZ2VyX3J1bGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWNpcGVUeXBlVmFsaWRhdGlvbigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFJlY2lwZVR5cGVWYWxpZGF0aW9uLnRyYW5zZm9ybWVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgICAgICAgICAubWFwKFJlY2lwZVR5cGVWYWxpZGF0aW9uLmJ1aWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBSZWNpcGVUeXBlVmFsaWRhdGlvbi5idWlsZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVjaXBlVHlwZVZhbGlkYXRpb247XG4gICAgfSk7XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgYW5ndWxhci5tb2R1bGUoJ3NjYWxlQXBwJykuc2VydmljZSgncmVjaXBlU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCwgJHEsICR0aW1lb3V0LCBzY2FsZUNvbmZpZywgUmVjaXBlVHlwZSwgUmVjaXBlVHlwZURldGFpbCwgUmVjaXBlLCBSZWNpcGVEZXRhaWxzLCBSZWNpcGVUeXBlVmFsaWRhdGlvbikge1xuICAgICAgICB2YXIgZ2V0UmVjaXBlc1BhcmFtcyA9IGZ1bmN0aW9uIChwYWdlLCBwYWdlX3NpemUsIHN0YXJ0ZWQsIGVuZGVkLCBvcmRlciwgY29tcGxldGVkLCByZWNpcGVfdHlwZV9pZCwgcmVjaXBlX3R5cGVfbmFtZSwgdXJsKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHBhZ2U6IHBhZ2UsXG4gICAgICAgICAgICAgICAgcGFnZV9zaXplOiBwYWdlX3NpemUsXG4gICAgICAgICAgICAgICAgc3RhcnRlZDogc3RhcnRlZCxcbiAgICAgICAgICAgICAgICBlbmRlZDogZW5kZWQsXG4gICAgICAgICAgICAgICAgb3JkZXI6IG9yZGVyLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogY29tcGxldGVkLFxuICAgICAgICAgICAgICAgIHJlY2lwZV90eXBlX2lkOiByZWNpcGVfdHlwZV9pZCxcbiAgICAgICAgICAgICAgICByZWNpcGVfdHlwZV9uYW1lOiByZWNpcGVfdHlwZV9uYW1lLFxuICAgICAgICAgICAgICAgIHVybDogdXJsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRSZWNpcGVUeXBlczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAncmVjaXBlLXR5cGVzLycpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNvbHZlKFJlY2lwZVR5cGUudHJhbnNmb3JtZXIoZGF0YS5yZXN1bHRzKSk7XG4gICAgICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0UmVjaXBlVHlwZURldGFpbDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcblxuICAgICAgICAgICAgICAkaHR0cC5nZXQoc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAncmVjaXBlLXR5cGVzLycgKyBpZCArICcvJykuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciByZXR1cm5EYXRhID0gUmVjaXBlVHlwZURldGFpbC50cmFuc2Zvcm1lcihkYXRhKTtcbiAgICAgICAgICAgICAgICBkLnJlc29sdmUocmV0dXJuRGF0YSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gZC5wcm9taXNlO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgZ2V0UmVjaXBlczogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCBnZXRSZWNpcGVzUGFyYW1zKCk7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHBhcmFtcy51cmwgPyBwYXJhbXMudXJsIDogc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAncmVjaXBlcy8nLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5yZXN1bHRzID0gUmVjaXBlLnRyYW5zZm9ybWVyKGRhdGEucmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIGdldFJlY2lwZURldGFpbHM6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAncmVjaXBlcy8nICsgaWQgKyAnLycpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFJlY2lwZURldGFpbHMudHJhbnNmb3JtZXIoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBkLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNhdmVSZWNpcGVUeXBlOiBmdW5jdGlvbihyZWNpcGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgICAgIHZhciBjbGVhblJlY2lwZVR5cGUgPSBSZWNpcGVUeXBlVmFsaWRhdGlvbi50cmFuc2Zvcm1lcihyZWNpcGVUeXBlKTtcblxuICAgICAgICAgICAgICAgIGlmKCFjbGVhblJlY2lwZVR5cGUuaWQpe1xuICAgICAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ3JlY2lwZS10eXBlcy8nLCBjbGVhblJlY2lwZVR5cGUpLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjaXBlVHlwZS5pZCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVzb2x2ZShyZWNpcGVUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgfSkuZXJyb3IoZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkaHR0cC5wYXRjaChzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICdyZWNpcGUtdHlwZXMvJyArIGNsZWFuUmVjaXBlVHlwZS5pZCArICcvJywgY2xlYW5SZWNpcGVUeXBlKS5zdWNjZXNzKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2lwZVR5cGUgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVjaXBlVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLmVycm9yKGZ1bmN0aW9uKGVycm9yKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQucHJvbWlzZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHZhbGlkYXRlUmVjaXBlVHlwZTogZnVuY3Rpb24gKHJlY2lwZVR5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgdmFyIGNsZWFuUmVjaXBlVHlwZSA9IFJlY2lwZVR5cGVWYWxpZGF0aW9uLnRyYW5zZm9ybWVyKHJlY2lwZVR5cGUpO1xuXG4gICAgICAgICAgICAgICAgJGh0dHAucG9zdChzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICdyZWNpcGUtdHlwZXMvdmFsaWRhdGlvbi8nLCBjbGVhblJlY2lwZVR5cGUpLnN1Y2Nlc3MoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbihlcnJvcil7XG4gICAgICAgICAgICAgICAgICAgIGQucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5zZXJ2aWNlKCd3b3Jrc3BhY2VzU2VydmljZScsIGZ1bmN0aW9uKCRodHRwLCAkcSwgJHJlc291cmNlLCBzY2FsZUNvbmZpZykge1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRXb3Jrc3BhY2VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICd3b3Jrc3BhY2VzLyc7XG5cbiAgICAgICAgICAgICAgICAkaHR0cCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnXG4gICAgICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkLnJlc29sdmUoZGF0YS5yZXN1bHRzKTtcbiAgICAgICAgICAgICAgICB9KS5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBkLnByb21pc2U7XG4gICAgICAgICAgICB9Ly8sXG4gICAgICAgICAgICAvL2dldFdvcmtzcGFjZURldGFpbHM6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy99XG4gICAgICAgIH07XG4gICAgfSk7XG59KSgpO1xuIiwiLyoqXG4gKiBAYXV0aG9yIERpbWl0cnkgS3VkcmF5dnRzZXZcbiAqIEB2ZXJzaW9uIDIuMVxuICovXG5cbiB2YXIgdXBkYXRlV2luZG93ID0gZnVuY3Rpb24oKXtcbiAgICAvLyAgeCA9IHcuaW5uZXJXaWR0aCB8fCBlLmNsaWVudFdpZHRoIHx8IGcuY2xpZW50V2lkdGg7XG4gICAgLy8gIHkgPSB3LmlubmVySGVpZ2h0fHwgZS5jbGllbnRIZWlnaHR8fCBnLmNsaWVudEhlaWdodDtcbiAgICAgLy9cbiAgICAvLyAgc3ZnLmF0dHIoXCJ3aWR0aFwiLCB4KS5hdHRyKFwiaGVpZ2h0XCIsIHkpO1xuICAgIGNvbnNvbGUubG9nKCdyZXNpemUnKTtcbiB9O1xuXG4gd2luZG93Lm9ucmVzaXplID0gdXBkYXRlV2luZG93O1xuXG5kMy5nYW50dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBGSVRfVElNRV9ET01BSU5fTU9ERSA9IFwiZml0XCI7XG4gICAgdmFyIEZJWEVEX1RJTUVfRE9NQUlOX01PREUgPSBcImZpeGVkXCI7XG5cbiAgICB2YXIgbWFyZ2luID0ge1xuXHRcdHRvcCA6IDIwLFxuXHRcdHJpZ2h0IDogMjAsXG5cdFx0Ym90dG9tIDogMjAsXG5cdFx0bGVmdCA6IDYwXG4gICAgfTtcbiAgICB2YXIgdGltZURvbWFpblN0YXJ0ID0gZDMudGltZS5kYXkub2Zmc2V0KG5ldyBEYXRlKCksLTMpO1xuICAgIHZhciB0aW1lRG9tYWluRW5kID0gZDMudGltZS5ob3VyLm9mZnNldChuZXcgRGF0ZSgpLCszKTtcbiAgICB2YXIgdGltZURvbWFpbk1vZGUgPSBGSVRfVElNRV9ET01BSU5fTU9ERTsvLyBmaXhlZCBvciBmaXRcbiAgICB2YXIgdGFza1R5cGVzID0gW107XG4gICAgdmFyIHRhc2tTdGF0dXMgPSBbXTtcbiAgICB2YXIgaGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbS01O1xuICAgIHZhciB3aWR0aCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggLSBtYXJnaW4ucmlnaHQgLSBtYXJnaW4ubGVmdC01O1xuXHR2YXIgcmVuZGVyVG8gPSBcImJvZHlcIjtcblx0dmFyIGJlZ2luID0gJyc7XG5cdHZhciBlbmRlZCA9ICcnO1xuXG4gICAgdmFyIHRpY2tGb3JtYXQgPSBcIiVIOiVNOiVTXCI7XG5cbiAgICB2YXIga2V5RnVuY3Rpb24gPSBmdW5jdGlvbihkKSB7XG5cdFx0cmV0dXJuIGRbYmVnaW5dICsgZC50YXNrTmFtZSArIGRbZW5kZWRdO1xuICAgIH07XG5cbiAgICB2YXIgcmVjdFRyYW5zZm9ybSA9IGZ1bmN0aW9uKGQpIHtcblx0XHRyZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB4KGRbYmVnaW5dKSArIFwiLFwiICsgeShkLnRhc2tOYW1lKSArIFwiKVwiO1xuICAgIH07XG5cbiAgICB2YXIgeCA9IGQzLnRpbWUuc2NhbGUoKS5kb21haW4oWyB0aW1lRG9tYWluU3RhcnQsIHRpbWVEb21haW5FbmQgXSkucmFuZ2UoWyAwLCB3aWR0aCBdKS5jbGFtcCh0cnVlKTtcblxuICAgIHZhciB5ID0gZDMuc2NhbGUub3JkaW5hbCgpLmRvbWFpbih0YXNrVHlwZXMpLnJhbmdlUm91bmRCYW5kcyhbIDAsIGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tIF0sIC4xKTtcblxuICAgIHZhciB4QXhpcyA9IGQzLnN2Zy5heGlzKCkuc2NhbGUoeCkub3JpZW50KFwiYm90dG9tXCIpLnRpY2tGb3JtYXQoZDMudGltZS5mb3JtYXQodGlja0Zvcm1hdCkpLnRpY2tTdWJkaXZpZGUodHJ1ZSlcblx0ICAgIC50aWNrU2l6ZSg4KS50aWNrUGFkZGluZyg4KTtcblxuICAgIHZhciB5QXhpcyA9IGQzLnN2Zy5heGlzKCkuc2NhbGUoeSkub3JpZW50KFwibGVmdFwiKS50aWNrU2l6ZSgwKTtcblxuICAgIHZhciBpbml0VGltZURvbWFpbiA9IGZ1bmN0aW9uKHRhc2tzKSB7XG5cdGlmICh0aW1lRG9tYWluTW9kZSA9PT0gRklUX1RJTUVfRE9NQUlOX01PREUpIHtcblx0ICAgIGlmICh0YXNrcyA9PT0gdW5kZWZpbmVkIHx8IHRhc2tzLmxlbmd0aCA8IDEpIHtcblx0XHR0aW1lRG9tYWluU3RhcnQgPSBkMy50aW1lLmRheS5vZmZzZXQobmV3IERhdGUoKSwgLTMpO1xuXHRcdHRpbWVEb21haW5FbmQgPSBkMy50aW1lLmhvdXIub2Zmc2V0KG5ldyBEYXRlKCksICszKTtcblx0XHRyZXR1cm47XG5cdCAgICB9XG5cdCAgICB0YXNrcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRyZXR1cm4gYVtlbmRlZF0gLSBiW2VuZGVkXTtcblx0ICAgIH0pO1xuXHQgICAgdGltZURvbWFpbkVuZCA9IHRhc2tzW3Rhc2tzLmxlbmd0aCAtIDFdW2VuZGVkXTtcblx0ICAgIHRhc2tzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHRcdHJldHVybiBhW2JlZ2luXSAtIGJbYmVnaW5dO1xuXHQgICAgfSk7XG5cdCAgICB0aW1lRG9tYWluU3RhcnQgPSB0YXNrc1swXVtiZWdpbl07XG5cdH1cbiAgICB9O1xuXG4gICAgdmFyIGluaXRBeGlzID0gZnVuY3Rpb24oKSB7XG5cdHggPSBkMy50aW1lLnNjYWxlKCkuZG9tYWluKFsgdGltZURvbWFpblN0YXJ0LCB0aW1lRG9tYWluRW5kIF0pLnJhbmdlKFsgMCwgd2lkdGggXSkuY2xhbXAodHJ1ZSk7XG5cdHkgPSBkMy5zY2FsZS5vcmRpbmFsKCkuZG9tYWluKHRhc2tUeXBlcykucmFuZ2VSb3VuZEJhbmRzKFsgMCwgaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b20gXSwgLjEpO1xuXHR4QXhpcyA9IGQzLnN2Zy5heGlzKCkuc2NhbGUoeCkub3JpZW50KFwiYm90dG9tXCIpLnRpY2tzKE1hdGguY2VpbCh3aWR0aC8xNTApKS50aWNrRm9ybWF0KGQzLnRpbWUuZm9ybWF0KHRpY2tGb3JtYXQpKS50aWNrU3ViZGl2aWRlKHRydWUpXG5cdFx0LnRpY2tTaXplKDgpLnRpY2tQYWRkaW5nKDgpO1xuXG5cdHlBeGlzID0gZDMuc3ZnLmF4aXMoKS5zY2FsZSh5KS5vcmllbnQoXCJsZWZ0XCIpLnRpY2tTaXplKDApO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnYW50dCh0YXNrcykge1xuXG5cdGluaXRUaW1lRG9tYWluKHRhc2tzKTtcblx0aW5pdEF4aXMoKTtcblxuXHR2YXIgc3ZnID0gZDMuc2VsZWN0KHJlbmRlclRvKVxuXHQuYXBwZW5kKFwic3ZnXCIpXG5cdC5hdHRyKFwiY2xhc3NcIiwgXCJjaGFydFwiKVxuXHQuYXR0cihcIndpZHRoXCIsIHdpZHRoICsgbWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQpXG5cdC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCArIG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKVxuXHQuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZ2FudHQtY2hhcnRcIilcblx0LmF0dHIoXCJ3aWR0aFwiLCB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KVxuXHQuYXR0cihcImhlaWdodFwiLCBoZWlnaHQgKyBtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSlcblx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLCBcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG5cbiAgICAgIHN2Zy5zZWxlY3RBbGwoXCIuY2hhcnRcIilcblx0IC5kYXRhKHRhc2tzLCBrZXlGdW5jdGlvbikuZW50ZXIoKVxuXHQgLmFwcGVuZChcInJlY3RcIilcblx0IC5hdHRyKFwicnhcIiwgNSlcbiAgICAgICAgIC5hdHRyKFwicnlcIiwgNSlcblx0IC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCl7XG5cdCAgICAgaWYodGFza1N0YXR1c1tkLnN0YXR1c10gPT0gbnVsbCl7IHJldHVybiBcImJhclwiO31cblx0ICAgICByZXR1cm4gdGFza1N0YXR1c1tkLnN0YXR1c107XG5cdCAgICAgfSlcblx0IC5hdHRyKFwieVwiLCAwKVxuXHQgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgcmVjdFRyYW5zZm9ybSlcblx0IC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHkucmFuZ2VCYW5kKCk7IH0pXG5cdCAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgICByZXR1cm4gKHgoZFtlbmRlZF0pIC0geChkW2JlZ2luXSkpO1xuXHQgICAgIH0pO1xuXG5cblx0IHN2Zy5hcHBlbmQoXCJnXCIpXG5cdCAuYXR0cihcImNsYXNzXCIsIFwieCBheGlzXCIpXG5cdCAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLCBcIiArIChoZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbSkgKyBcIilcIilcblx0IC50cmFuc2l0aW9uKClcblx0IC5jYWxsKHhBeGlzKTtcblxuXHQgc3ZnLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwieSBheGlzXCIpLnRyYW5zaXRpb24oKS5jYWxsKHlBeGlzKTtcblxuXHQgcmV0dXJuIGdhbnR0O1xuXG4gICAgfTtcblxuICAgIGdhbnR0LnJlZHJhdyA9IGZ1bmN0aW9uKHRhc2tzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdyZWRyYXcnKTtcblx0aW5pdFRpbWVEb21haW4odGFza3MpO1xuXHRpbml0QXhpcygpO1xuXG4gICAgICAgIHZhciBzdmcgPSBkMy5zZWxlY3QoXCJzdmdcIik7XG5cbiAgICAgICAgdmFyIGdhbnR0Q2hhcnRHcm91cCA9IHN2Zy5zZWxlY3QoXCIuZ2FudHQtY2hhcnRcIik7XG4gICAgICAgIHZhciByZWN0ID0gZ2FudHRDaGFydEdyb3VwLnNlbGVjdEFsbChcInJlY3RcIikuZGF0YSh0YXNrcywga2V5RnVuY3Rpb24pO1xuXG4gICAgICAgIHJlY3QuZW50ZXIoKVxuICAgICAgICAgLmluc2VydChcInJlY3RcIixcIjpmaXJzdC1jaGlsZFwiKVxuICAgICAgICAgLmF0dHIoXCJyeFwiLCA1KVxuICAgICAgICAgLmF0dHIoXCJyeVwiLCA1KVxuXHQgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKXtcblx0ICAgICBpZih0YXNrU3RhdHVzW2Quc3RhdHVzXSA9PSBudWxsKXsgcmV0dXJuIFwiYmFyXCI7fVxuXHQgICAgIHJldHVybiB0YXNrU3RhdHVzW2Quc3RhdHVzXTtcblx0ICAgICB9KVxuXHQgLnRyYW5zaXRpb24oKVxuXHQgLmF0dHIoXCJ5XCIsIDApXG5cdCAuYXR0cihcInRyYW5zZm9ybVwiLCByZWN0VHJhbnNmb3JtKVxuXHQgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4geS5yYW5nZUJhbmQoKTsgfSlcblx0ICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgICByZXR1cm4gKHgoZFtlbmRlZF0pIC0geChkW2JlZ2luXSkpO1xuXHQgICAgIH0pO1xuXG4gICAgICAgIHJlY3QudHJhbnNpdGlvbigpXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgcmVjdFRyYW5zZm9ybSlcblx0IC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHkucmFuZ2VCYW5kKCk7IH0pXG5cdCAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHtcblx0ICAgICByZXR1cm4gKHgoZFtlbmRlZF0pIC0geChkW2JlZ2luXSkpO1xuXHQgICAgIH0pO1xuXG5cdHJlY3QuZXhpdCgpLnJlbW92ZSgpO1xuXG5cdHN2Zy5zZWxlY3QoXCIueFwiKS50cmFuc2l0aW9uKCkuY2FsbCh4QXhpcyk7XG5cdHN2Zy5zZWxlY3QoXCIueVwiKS50cmFuc2l0aW9uKCkuY2FsbCh5QXhpcyk7XG5cblx0cmV0dXJuIGdhbnR0O1xuICAgIH07XG5cbiAgICBnYW50dC5tYXJnaW4gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG5cdCAgICByZXR1cm4gbWFyZ2luO1xuXHRtYXJnaW4gPSB2YWx1ZTtcblx0cmV0dXJuIGdhbnR0O1xuICAgIH07XG5cbiAgICBnYW50dC50aW1lRG9tYWluID0gZnVuY3Rpb24odmFsdWUpIHtcblx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKVxuXHQgICAgcmV0dXJuIFsgdGltZURvbWFpblN0YXJ0LCB0aW1lRG9tYWluRW5kIF07XG5cdHRpbWVEb21haW5TdGFydCA9ICt2YWx1ZVswXSwgdGltZURvbWFpbkVuZCA9ICt2YWx1ZVsxXTtcblx0cmV0dXJuIGdhbnR0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ31cbiAgICAgKiAgICAgICAgICAgICAgICB2YWxlIFRoZSB2YWx1ZSBjYW4gYmUgXCJmaXRcIiAtIHRoZSBkb21haW4gZml0cyB0aGUgZGF0YSBvclxuICAgICAqICAgICAgICAgICAgICAgIFwiZml4ZWRcIiAtIGZpeGVkIGRvbWFpbi5cbiAgICAgKi9cbiAgICBnYW50dC50aW1lRG9tYWluTW9kZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdGlmICghYXJndW1lbnRzLmxlbmd0aClcblx0ICAgIHJldHVybiB0aW1lRG9tYWluTW9kZTtcbiAgICAgICAgdGltZURvbWFpbk1vZGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGdhbnR0O1xuXG4gICAgfTtcblxuICAgIGdhbnR0LnRhc2tUeXBlcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdGlmICghYXJndW1lbnRzLmxlbmd0aClcblx0ICAgIHJldHVybiB0YXNrVHlwZXM7XG5cdHRhc2tUeXBlcyA9IHZhbHVlO1xuXHRyZXR1cm4gZ2FudHQ7XG4gICAgfTtcblxuICAgIGdhbnR0LnRhc2tTdGF0dXMgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG5cdCAgICByZXR1cm4gdGFza1N0YXR1cztcblx0dGFza1N0YXR1cyA9IHZhbHVlO1xuXHRyZXR1cm4gZ2FudHQ7XG4gICAgfTtcblxuXHRnYW50dC5iZWdpbiA9IGZ1bmN0aW9uKHZhbHVlKXtcblx0XHRpZighYXJndW1lbnRzLmxlbmd0aCl7XG5cdFx0XHRyZXR1cm4gYmVnaW47XG5cdFx0fVxuXHRcdGJlZ2luID0gdmFsdWU7XG5cdFx0cmV0dXJuIGdhbnR0O1xuXHR9O1xuXG5cdGdhbnR0LmVuZGVkID0gZnVuY3Rpb24odmFsdWUpe1xuXHRcdGlmKCFhcmd1bWVudHMubGVuZ3RoKXtcblx0XHRcdHJldHVybiBlbmRlZDtcblx0XHR9XG5cdFx0ZW5kZWQgPSB2YWx1ZTtcblx0XHRyZXR1cm4gZ2FudHQ7XG5cdH07XG5cbiAgICBnYW50dC53aWR0aCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdGlmICghYXJndW1lbnRzLmxlbmd0aClcblx0ICAgIHJldHVybiB3aWR0aDtcblx0d2lkdGggPSArdmFsdWU7XG5cdHJldHVybiBnYW50dDtcbiAgICB9O1xuXG4gICAgZ2FudHQuaGVpZ2h0ID0gZnVuY3Rpb24odmFsdWUpIHtcblx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKVxuXHQgICAgcmV0dXJuIGhlaWdodDtcblx0aGVpZ2h0ID0gK3ZhbHVlO1xuXHRyZXR1cm4gZ2FudHQ7XG4gICAgfTtcblxuICAgIGdhbnR0LnRpY2tGb3JtYXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG5cdCAgICByZXR1cm4gdGlja0Zvcm1hdDtcblx0dGlja0Zvcm1hdCA9IHZhbHVlO1xuXHRyZXR1cm4gZ2FudHQ7XG4gICAgfTtcblxuXHRnYW50dC5yZW5kZXJUbyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0aWYoIWFyZ3VtZW50cy5sZW5ndGgpe1xuXHRcdFx0cmV0dXJuIHJlbmRlclRvO1xuXHRcdH1cblx0XHRyZW5kZXJUbyA9IHZhbHVlO1xuXHRcdHJldHVybiBnYW50dDtcblx0fTtcblxuXG5cbiAgICByZXR1cm4gZ2FudHQ7XG59O1xuIiwiZnVuY3Rpb24gR2F1Z2UocGxhY2Vob2xkZXJOYW1lLCBjb25maWd1cmF0aW9uKVxue1xuICAgIHRoaXMucGxhY2Vob2xkZXJOYW1lID0gcGxhY2Vob2xkZXJOYW1lO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzOyAvLyBmb3IgaW50ZXJuYWwgZDMgZnVuY3Rpb25zXG5cbiAgICB0aGlzLmNvbmZpZ3VyZSA9IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pXG4gICAge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZ3VyYXRpb247XG5cbiAgICAgICAgdGhpcy5jb25maWcuc2l6ZSA9IHRoaXMuY29uZmlnLnNpemUgKiAwLjk7XG5cbiAgICAgICAgdGhpcy5jb25maWcucmFkdWlzID0gdGhpcy5jb25maWcuc2l6ZSAqIDAuOTcgLyAyO1xuICAgICAgICB0aGlzLmNvbmZpZy5jeCA9IHRoaXMuY29uZmlnLnNpemUgLyAyO1xuICAgICAgICB0aGlzLmNvbmZpZy5jeSA9IHRoaXMuY29uZmlnLnNpemUgLyAyO1xuXG4gICAgICAgIHRoaXMuY29uZmlnLm1pbiA9IHVuZGVmaW5lZCAhPSBjb25maWd1cmF0aW9uLm1pbiA/IGNvbmZpZ3VyYXRpb24ubWluIDogMDtcbiAgICAgICAgdGhpcy5jb25maWcubWF4ID0gdW5kZWZpbmVkICE9IGNvbmZpZ3VyYXRpb24ubWF4ID8gY29uZmlndXJhdGlvbi5tYXggOiAxMDA7XG4gICAgICAgIHRoaXMuY29uZmlnLnJhbmdlID0gdGhpcy5jb25maWcubWF4IC0gdGhpcy5jb25maWcubWluO1xuXG4gICAgICAgIHRoaXMuY29uZmlnLm1ham9yVGlja3MgPSBjb25maWd1cmF0aW9uLm1ham9yVGlja3MgfHwgNTtcbiAgICAgICAgdGhpcy5jb25maWcubWlub3JUaWNrcyA9IGNvbmZpZ3VyYXRpb24ubWlub3JUaWNrcyB8fCAyO1xuXG4gICAgICAgIHRoaXMuY29uZmlnLmdyZWVuQ29sb3IgXHQ9IGNvbmZpZ3VyYXRpb24uZ3JlZW5Db2xvciB8fCBcIiM4ZmNhMGVcIjtcbiAgICAgICAgdGhpcy5jb25maWcueWVsbG93Q29sb3IgPSBjb25maWd1cmF0aW9uLnllbGxvd0NvbG9yIHx8IFwiI2ZmYzMxN1wiO1xuICAgICAgICB0aGlzLmNvbmZpZy5yZWRDb2xvciBcdD0gY29uZmlndXJhdGlvbi5yZWRDb2xvciB8fCBcIiNmNTRkMzZcIjtcblxuICAgICAgICB0aGlzLmNvbmZpZy50cmFuc2l0aW9uRHVyYXRpb24gPSBjb25maWd1cmF0aW9uLnRyYW5zaXRpb25EdXJhdGlvbiB8fCA1MDA7XG4gICAgfTtcblxuICAgIHRoaXMucmVuZGVyID0gZnVuY3Rpb24oKVxuICAgIHtcbiAgICAgICAgdGhpcy5ib2R5ID0gZDMuc2VsZWN0KFwiI1wiICsgdGhpcy5wbGFjZWhvbGRlck5hbWUpXG4gICAgICAgICAgICAuYXBwZW5kKFwic3ZnOnN2Z1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImdhdWdlXCIpXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHRoaXMuY29uZmlnLnNpemUpXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCB0aGlzLmNvbmZpZy5zaXplKTtcblxuICAgICAgICB0aGlzLmJvZHkuYXBwZW5kKFwic3ZnOmNpcmNsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIm91dGVyLWNpcmNsZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCB0aGlzLmNvbmZpZy5jeClcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgdGhpcy5jb25maWcuY3kpXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgdGhpcy5jb25maWcucmFkdWlzICogMC45NSlcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCIjY2NjXCIpO1xuICAgICAgICAgICAgLyouc3R5bGUoXCJzdHJva2VcIiwgXCIjMDAwXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgXCIwLjVweFwiKTsqL1xuXG4gICAgICAgIHRoaXMuYm9keS5hcHBlbmQoXCJzdmc6Y2lyY2xlXCIpXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIHRoaXMuY29uZmlnLmN4KVxuICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCB0aGlzLmNvbmZpZy5jeSlcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCAwLjkgKiB0aGlzLmNvbmZpZy5yYWR1aXMpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIFwiI2ZmZlwiKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwiI2UwZTBlMFwiKVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMnB4XCIpO1xuXG4gICAgICAgIGZvciAodmFyIGdyZWVuSWR4IGluIHRoaXMuY29uZmlnLmdyZWVuWm9uZXMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0JhbmQodGhpcy5jb25maWcuZ3JlZW5ab25lc1tncmVlbklkeF0uZnJvbSwgdGhpcy5jb25maWcuZ3JlZW5ab25lc1tncmVlbklkeF0udG8sIHNlbGYuY29uZmlnLmdyZWVuQ29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgeWVsbG93SWR4IGluIHRoaXMuY29uZmlnLnllbGxvd1pvbmVzKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmRyYXdCYW5kKHRoaXMuY29uZmlnLnllbGxvd1pvbmVzW3llbGxvd0lkeF0uZnJvbSwgdGhpcy5jb25maWcueWVsbG93Wm9uZXNbeWVsbG93SWR4XS50bywgc2VsZi5jb25maWcueWVsbG93Q29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgcmVkSWR4IGluIHRoaXMuY29uZmlnLnJlZFpvbmVzKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmRyYXdCYW5kKHRoaXMuY29uZmlnLnJlZFpvbmVzW3JlZElkeF0uZnJvbSwgdGhpcy5jb25maWcucmVkWm9uZXNbcmVkSWR4XS50bywgc2VsZi5jb25maWcucmVkQ29sb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZvbnRTaXplID0gMDtcblxuICAgICAgICBpZiAodW5kZWZpbmVkICE9IHRoaXMuY29uZmlnLmxhYmVsKVxuICAgICAgICB7XG4gICAgICAgICAgICBmb250U2l6ZSA9IE1hdGgucm91bmQodGhpcy5jb25maWcuc2l6ZSAvIDkpO1xuICAgICAgICAgICAgdGhpcy5ib2R5LmFwcGVuZChcInN2Zzp0ZXh0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHRoaXMuY29uZmlnLmN4KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCB0aGlzLmNvbmZpZy5jeSAvIDIgKyBmb250U2l6ZSAvIDIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBmb250U2l6ZSAvIDIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgICAgIC50ZXh0KHRoaXMuY29uZmlnLmxhYmVsKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBmb250U2l6ZSArIFwicHhcIilcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIFwiIzMzM1wiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCBcIjBweFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvbnRTaXplID0gTWF0aC5yb3VuZCh0aGlzLmNvbmZpZy5zaXplIC8gMTYpO1xuICAgICAgICB2YXIgbWFqb3JEZWx0YSA9IHRoaXMuY29uZmlnLnJhbmdlIC8gKHRoaXMuY29uZmlnLm1ham9yVGlja3MgLSAxKTtcbiAgICAgICAgZm9yICh2YXIgbWFqb3IgPSB0aGlzLmNvbmZpZy5taW47IG1ham9yIDw9IHRoaXMuY29uZmlnLm1heDsgbWFqb3IgKz0gbWFqb3JEZWx0YSlcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIG1pbm9yRGVsdGEgPSBtYWpvckRlbHRhIC8gdGhpcy5jb25maWcubWlub3JUaWNrcyxcbiAgICAgICAgICAgICAgICBwb2ludDEgPSAwLFxuICAgICAgICAgICAgICAgIHBvaW50MiA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBtaW5vciA9IG1ham9yICsgbWlub3JEZWx0YTsgbWlub3IgPCBNYXRoLm1pbihtYWpvciArIG1ham9yRGVsdGEsIHRoaXMuY29uZmlnLm1heCk7IG1pbm9yICs9IG1pbm9yRGVsdGEpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcG9pbnQxID0gdGhpcy52YWx1ZVRvUG9pbnQobWlub3IsIDAuNzUpO1xuICAgICAgICAgICAgICAgIHBvaW50MiA9IHRoaXMudmFsdWVUb1BvaW50KG1pbm9yLCAwLjg1KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuYm9keS5hcHBlbmQoXCJzdmc6bGluZVwiKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIngxXCIsIHBvaW50MS54KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInkxXCIsIHBvaW50MS55KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcIngyXCIsIHBvaW50Mi54KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInkyXCIsIHBvaW50Mi55KVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCIjNjY2XCIpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCBcIjFweFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcG9pbnQxID0gdGhpcy52YWx1ZVRvUG9pbnQobWFqb3IsIDAuNyk7XG4gICAgICAgICAgICBwb2ludDIgPSB0aGlzLnZhbHVlVG9Qb2ludChtYWpvciwgMC44NSk7XG5cbiAgICAgICAgICAgIHRoaXMuYm9keS5hcHBlbmQoXCJzdmc6bGluZVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieDFcIiwgcG9pbnQxLngpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLCBwb2ludDEueSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIngyXCIsIHBvaW50Mi54KVxuICAgICAgICAgICAgICAgIC5hdHRyKFwieTJcIiwgcG9pbnQyLnkpXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwiIzMzM1wiKVxuICAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCBcIjJweFwiKTtcblxuICAgICAgICAgICAgaWYgKG1ham9yID09IHRoaXMuY29uZmlnLm1pbiB8fCBtYWpvciA9PSB0aGlzLmNvbmZpZy5tYXgpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIHBvaW50ID0gdGhpcy52YWx1ZVRvUG9pbnQobWFqb3IsIDAuNjMpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5ib2R5LmFwcGVuZChcInN2Zzp0ZXh0XCIpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBwb2ludC54KVxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgcG9pbnQueSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBmb250U2l6ZSAvIDMpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgbWFqb3IgPT0gdGhpcy5jb25maWcubWluID8gXCJzdGFydFwiIDogXCJlbmRcIilcbiAgICAgICAgICAgICAgICAgICAgLnRleHQobWFqb3IpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBmb250U2l6ZSArIFwicHhcIilcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcIiMzMzNcIilcbiAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMHB4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvaW50ZXJDb250YWluZXIgPSB0aGlzLmJvZHkuYXBwZW5kKFwic3ZnOmdcIikuYXR0cihcImNsYXNzXCIsIFwicG9pbnRlckNvbnRhaW5lclwiKTtcblxuICAgICAgICB2YXIgbWlkVmFsdWUgPSAodGhpcy5jb25maWcubWluICsgdGhpcy5jb25maWcubWF4KSAvIDI7XG5cbiAgICAgICAgdmFyIHBvaW50ZXJQYXRoID0gdGhpcy5idWlsZFBvaW50ZXJQYXRoKG1pZFZhbHVlKTtcblxuICAgICAgICB2YXIgcG9pbnRlckxpbmUgPSBkMy5zdmcubGluZSgpXG4gICAgICAgICAgICAueChmdW5jdGlvbihkKSB7IHJldHVybiBkLnggfSlcbiAgICAgICAgICAgIC55KGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueSB9KVxuICAgICAgICAgICAgLmludGVycG9sYXRlKFwiYmFzaXNcIik7XG5cbiAgICAgICAgcG9pbnRlckNvbnRhaW5lci5zZWxlY3RBbGwoXCJwYXRoXCIpXG4gICAgICAgICAgICAuZGF0YShbcG9pbnRlclBhdGhdKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJzdmc6cGF0aFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJkXCIsIHBvaW50ZXJMaW5lKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcIiM4ODhcIik7XG5cbiAgICAgICAgcG9pbnRlckNvbnRhaW5lci5hcHBlbmQoXCJzdmc6Y2lyY2xlXCIpXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIHRoaXMuY29uZmlnLmN4KVxuICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCB0aGlzLmNvbmZpZy5jeSlcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCAwLjEyICogdGhpcy5jb25maWcucmFkdWlzKVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcIiM4ODhcIik7XG5cbiAgICAgICAgZm9udFNpemUgPSBNYXRoLnJvdW5kKHRoaXMuY29uZmlnLnNpemUgLyAxMCk7XG4gICAgICAgIHBvaW50ZXJDb250YWluZXIuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgICAgLmRhdGEoW21pZFZhbHVlXSlcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwic3ZnOnRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCB0aGlzLmNvbmZpZy5jeClcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCB0aGlzLmNvbmZpZy5zaXplIC0gdGhpcy5jb25maWcuY3kgLyA0IC0gZm9udFNpemUpXG4gICAgICAgICAgICAuYXR0cihcImR5XCIsIGZvbnRTaXplIC8gMilcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCBmb250U2l6ZSArIFwicHhcIilcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgXCIjMDAwXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgXCIwcHhcIik7XG5cbiAgICAgICAgdGhpcy5yZWRyYXcodGhpcy5jb25maWcubWluLCAwKTtcbiAgICB9O1xuXG4gICAgdGhpcy5idWlsZFBvaW50ZXJQYXRoID0gZnVuY3Rpb24odmFsdWUpXG4gICAge1xuICAgICAgICB2YXIgZGVsdGEgPSB0aGlzLmNvbmZpZy5yYW5nZSAvIDEzO1xuXG4gICAgICAgIHZhciBoZWFkID0gdmFsdWVUb1BvaW50KHZhbHVlLCAwLjg1KTtcbiAgICAgICAgdmFyIGhlYWQxID0gdmFsdWVUb1BvaW50KHZhbHVlIC0gZGVsdGEsIDAuMTIpO1xuICAgICAgICB2YXIgaGVhZDIgPSB2YWx1ZVRvUG9pbnQodmFsdWUgKyBkZWx0YSwgMC4xMik7XG5cbiAgICAgICAgdmFyIHRhaWxWYWx1ZSA9IHZhbHVlIC0gKHRoaXMuY29uZmlnLnJhbmdlICogKDEvKDI3MC8zNjApKSAvIDIpO1xuICAgICAgICB2YXIgdGFpbCA9IHZhbHVlVG9Qb2ludCh0YWlsVmFsdWUsIDAuMjgpO1xuICAgICAgICB2YXIgdGFpbDEgPSB2YWx1ZVRvUG9pbnQodGFpbFZhbHVlIC0gZGVsdGEsIDAuMTIpO1xuICAgICAgICB2YXIgdGFpbDIgPSB2YWx1ZVRvUG9pbnQodGFpbFZhbHVlICsgZGVsdGEsIDAuMTIpO1xuXG4gICAgICAgIHJldHVybiBbaGVhZCwgaGVhZDEsIHRhaWwyLCB0YWlsLCB0YWlsMSwgaGVhZDIsIGhlYWRdO1xuXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlVG9Qb2ludCh2YWx1ZSwgZmFjdG9yKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBzZWxmLnZhbHVlVG9Qb2ludCh2YWx1ZSwgZmFjdG9yKTtcbiAgICAgICAgICAgIHBvaW50LnggLT0gc2VsZi5jb25maWcuY3g7XG4gICAgICAgICAgICBwb2ludC55IC09IHNlbGYuY29uZmlnLmN5O1xuICAgICAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuZHJhd0JhbmQgPSBmdW5jdGlvbihzdGFydCwgZW5kLCBjb2xvcilcbiAgICB7XG4gICAgICAgIGlmICgwID49IGVuZCAtIHN0YXJ0KSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5ib2R5LmFwcGVuZChcInN2ZzpwYXRoXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGNvbG9yKVxuICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGQzLnN2Zy5hcmMoKVxuICAgICAgICAgICAgICAgIC5zdGFydEFuZ2xlKHRoaXMudmFsdWVUb1JhZGlhbnMoc3RhcnQpKVxuICAgICAgICAgICAgICAgIC5lbmRBbmdsZSh0aGlzLnZhbHVlVG9SYWRpYW5zKGVuZCkpXG4gICAgICAgICAgICAgICAgLmlubmVyUmFkaXVzKDAuNjUgKiB0aGlzLmNvbmZpZy5yYWR1aXMpXG4gICAgICAgICAgICAgICAgLm91dGVyUmFkaXVzKDAuODUgKiB0aGlzLmNvbmZpZy5yYWR1aXMpKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArIHNlbGYuY29uZmlnLmN4ICsgXCIsIFwiICsgc2VsZi5jb25maWcuY3kgKyBcIikgcm90YXRlKDI3MClcIiB9KTtcbiAgICB9O1xuXG4gICAgdGhpcy5yZWRyYXcgPSBmdW5jdGlvbih2YWx1ZSwgdHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgIHtcbiAgICAgICAgdmFyIHBvaW50ZXJDb250YWluZXIgPSB0aGlzLmJvZHkuc2VsZWN0KFwiLnBvaW50ZXJDb250YWluZXJcIik7XG5cbiAgICAgICAgcG9pbnRlckNvbnRhaW5lci5zZWxlY3RBbGwoXCJ0ZXh0XCIpLnRleHQoTWF0aC5yb3VuZCh2YWx1ZSkpO1xuXG4gICAgICAgIHZhciBwb2ludGVyID0gcG9pbnRlckNvbnRhaW5lci5zZWxlY3RBbGwoXCJwYXRoXCIpO1xuICAgICAgICBwb2ludGVyLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKHVuZGVmaW5lZCAhPSB0cmFuc2l0aW9uRHVyYXRpb24gPyB0cmFuc2l0aW9uRHVyYXRpb24gOiB0aGlzLmNvbmZpZy50cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgICAgICAgICAvLy5kZWxheSgwKVxuICAgICAgICAgICAgLy8uZWFzZShcImxpbmVhclwiKVxuICAgICAgICAgICAgLy8uYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKVxuICAgICAgICAgICAgLmF0dHJUd2VlbihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbigpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIHBvaW50ZXJWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IHNlbGYuY29uZmlnLm1heCkgcG9pbnRlclZhbHVlID0gc2VsZi5jb25maWcubWF4ICsgMC4wMipzZWxmLmNvbmZpZy5yYW5nZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA8IHNlbGYuY29uZmlnLm1pbikgcG9pbnRlclZhbHVlID0gc2VsZi5jb25maWcubWluIC0gMC4wMipzZWxmLmNvbmZpZy5yYW5nZTtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0Um90YXRpb24gPSAoc2VsZi52YWx1ZVRvRGVncmVlcyhwb2ludGVyVmFsdWUpIC0gOTApO1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Um90YXRpb24gPSBzZWxmLl9jdXJyZW50Um90YXRpb24gfHwgdGFyZ2V0Um90YXRpb247XG4gICAgICAgICAgICAgICAgc2VsZi5fY3VycmVudFJvdGF0aW9uID0gdGFyZ2V0Um90YXRpb247XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc3RlcClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3RhdGlvbiA9IGN1cnJlbnRSb3RhdGlvbiArICh0YXJnZXRSb3RhdGlvbi1jdXJyZW50Um90YXRpb24pKnN0ZXA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHNlbGYuY29uZmlnLmN4ICsgXCIsIFwiICsgc2VsZi5jb25maWcuY3kgKyBcIikgcm90YXRlKFwiICsgcm90YXRpb24gKyBcIilcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB2YXIgb3V0ZXJDaXJjbGUgPSB0aGlzLmJvZHkuc2VsZWN0KFwiLm91dGVyLWNpcmNsZVwiKVxuICAgICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgICAgLmR1cmF0aW9uKDc1MClcbiAgICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gcGFyc2VJbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChpID4gMCAmJiBpIDwgNzUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLmdyZWVuQ29sb3I7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID49IDc1ICYmIGkgPCA5MCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jb25maWcueWVsbG93Q29sb3I7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY29uZmlnLnJlZENvbG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICB0aGlzLnZhbHVlVG9EZWdyZWVzID0gZnVuY3Rpb24odmFsdWUpXG4gICAge1xuICAgICAgICAvLyB0aGFua3MgQGNsb3NlYWxlcnRcbiAgICAgICAgLy9yZXR1cm4gdmFsdWUgLyB0aGlzLmNvbmZpZy5yYW5nZSAqIDI3MCAtIDQ1O1xuICAgICAgICByZXR1cm4gdmFsdWUgLyB0aGlzLmNvbmZpZy5yYW5nZSAqIDI3MCAtICh0aGlzLmNvbmZpZy5taW4gLyB0aGlzLmNvbmZpZy5yYW5nZSAqIDI3MCArIDQ1KTtcbiAgICB9O1xuXG4gICAgdGhpcy52YWx1ZVRvUmFkaWFucyA9IGZ1bmN0aW9uKHZhbHVlKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVUb0RlZ3JlZXModmFsdWUpICogTWF0aC5QSSAvIDE4MDtcbiAgICB9O1xuXG4gICAgdGhpcy52YWx1ZVRvUG9pbnQgPSBmdW5jdGlvbih2YWx1ZSwgZmFjdG9yKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHsgXHR4OiB0aGlzLmNvbmZpZy5jeCAtIHRoaXMuY29uZmlnLnJhZHVpcyAqIGZhY3RvciAqIE1hdGguY29zKHRoaXMudmFsdWVUb1JhZGlhbnModmFsdWUpKSxcbiAgICAgICAgICAgIHk6IHRoaXMuY29uZmlnLmN5IC0gdGhpcy5jb25maWcucmFkdWlzICogZmFjdG9yICogTWF0aC5zaW4odGhpcy52YWx1ZVRvUmFkaWFucyh2YWx1ZSkpIFx0XHR9O1xuICAgIH07XG5cbiAgICAvLyBpbml0aWFsaXphdGlvblxuICAgIHRoaXMuY29uZmlndXJlKGNvbmZpZ3VyYXRpb24pO1xufSIsIi8qISBcbiAqIGFuZ3VsYXItaG90a2V5cyB2MS41LjBcbiAqIGh0dHBzOi8vY2hpZWZmYW5jeXBhbnRzLmdpdGh1Yi5pby9hbmd1bGFyLWhvdGtleXNcbiAqIENvcHlyaWdodCAoYykgMjAxNSBXZXMgQ3J1dmVyXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuIWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7YW5ndWxhci5tb2R1bGUoXCJjZnAuaG90a2V5c1wiLFtdKS5wcm92aWRlcihcImhvdGtleXNcIixbXCIkaW5qZWN0b3JcIixmdW5jdGlvbihhKXt0aGlzLmluY2x1ZGVDaGVhdFNoZWV0PSEwLHRoaXMudXNlTmdSb3V0ZT1hLmhhcyhcIm5nVmlld0RpcmVjdGl2ZVwiKSx0aGlzLnRlbXBsYXRlVGl0bGU9XCJLZXlib2FyZCBTaG9ydGN1dHM6XCIsdGhpcy50ZW1wbGF0ZUhlYWRlcj1udWxsLHRoaXMudGVtcGxhdGVGb290ZXI9bnVsbCx0aGlzLnRlbXBsYXRlPSc8ZGl2IGNsYXNzPVwiY2ZwLWhvdGtleXMtY29udGFpbmVyIGZhZGVcIiBuZy1jbGFzcz1cIntpbjogaGVscFZpc2libGV9XCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPjxkaXYgY2xhc3M9XCJjZnAtaG90a2V5c1wiPjxoNCBjbGFzcz1cImNmcC1ob3RrZXlzLXRpdGxlXCIgbmctaWY9XCIhaGVhZGVyXCI+e3sgdGl0bGUgfX08L2g0PjxkaXYgbmctYmluZC1odG1sPVwiaGVhZGVyXCIgbmctaWY9XCJoZWFkZXJcIj48L2Rpdj48dGFibGU+PHRib2R5Pjx0ciBuZy1yZXBlYXQ9XCJob3RrZXkgaW4gaG90a2V5cyB8IGZpbHRlcjp7IGRlc2NyaXB0aW9uOiBcXCchJCR1bmRlZmluZWQkJFxcJyB9XCI+PHRkIGNsYXNzPVwiY2ZwLWhvdGtleXMta2V5c1wiPjxzcGFuIG5nLXJlcGVhdD1cImtleSBpbiBob3RrZXkuZm9ybWF0KCkgdHJhY2sgYnkgJGluZGV4XCIgY2xhc3M9XCJjZnAtaG90a2V5cy1rZXlcIj57eyBrZXkgfX08L3NwYW4+PC90ZD48dGQgY2xhc3M9XCJjZnAtaG90a2V5cy10ZXh0XCI+e3sgaG90a2V5LmRlc2NyaXB0aW9uIH19PC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT48ZGl2IG5nLWJpbmQtaHRtbD1cImZvb3RlclwiIG5nLWlmPVwiZm9vdGVyXCI+PC9kaXY+PGRpdiBjbGFzcz1cImNmcC1ob3RrZXlzLWNsb3NlXCIgbmctY2xpY2s9XCJ0b2dnbGVDaGVhdFNoZWV0KClcIj7DlzwvZGl2PjwvZGl2PjwvZGl2PicsdGhpcy5jaGVhdFNoZWV0SG90a2V5PVwiP1wiLHRoaXMuY2hlYXRTaGVldERlc2NyaXB0aW9uPVwiU2hvdyAvIGhpZGUgdGhpcyBoZWxwIG1lbnVcIix0aGlzLiRnZXQ9W1wiJHJvb3RFbGVtZW50XCIsXCIkcm9vdFNjb3BlXCIsXCIkY29tcGlsZVwiLFwiJHdpbmRvd1wiLFwiJGRvY3VtZW50XCIsZnVuY3Rpb24oYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEpe3ZhciBiPXtjb21tYW5kOlwi4oyYXCIsc2hpZnQ6XCLih6dcIixsZWZ0Olwi4oaQXCIscmlnaHQ6XCLihpJcIix1cDpcIuKGkVwiLGRvd246XCLihpNcIixcInJldHVyblwiOlwi4oapXCIsYmFja3NwYWNlOlwi4oyrXCJ9O2E9YS5zcGxpdChcIitcIik7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspXCJtb2RcIj09PWFbY10mJihkLm5hdmlnYXRvciYmZC5uYXZpZ2F0b3IucGxhdGZvcm0uaW5kZXhPZihcIk1hY1wiKT49MD9hW2NdPVwiY29tbWFuZFwiOmFbY109XCJjdHJsXCIpLGFbY109YlthW2NdXXx8YVtjXTtyZXR1cm4gYS5qb2luKFwiICsgXCIpfWZ1bmN0aW9uIGcoYSxiLGMsZCxlLGYpe3RoaXMuY29tYm89YSBpbnN0YW5jZW9mIEFycmF5P2E6W2FdLHRoaXMuZGVzY3JpcHRpb249Yix0aGlzLmNhbGxiYWNrPWMsdGhpcy5hY3Rpb249ZCx0aGlzLmFsbG93SW49ZSx0aGlzLnBlcnNpc3RlbnQ9Zix0aGlzLl9mb3JtYXRlZD1udWxsfWZ1bmN0aW9uIGgoKXtmb3IodmFyIGE9by5ob3RrZXlzLmxlbmd0aDthLS07KXt2YXIgYj1vLmhvdGtleXNbYV07YiYmIWIucGVyc2lzdGVudCYmayhiKX19ZnVuY3Rpb24gaSgpe28uaGVscFZpc2libGU9IW8uaGVscFZpc2libGUsby5oZWxwVmlzaWJsZT8odD1sKFwiZXNjXCIpLGsoXCJlc2NcIiksaihcImVzY1wiLHQuZGVzY3JpcHRpb24saSxudWxsLFtcIklOUFVUXCIsXCJTRUxFQ1RcIixcIlRFWFRBUkVBXCJdKSk6KGsoXCJlc2NcIiksdCE9PSExJiZqKHQpKX1mdW5jdGlvbiBqKGEsYixjLGQsZSxmKXt2YXIgaCxpPVtcIklOUFVUXCIsXCJTRUxFQ1RcIixcIlRFWFRBUkVBXCJdLGo9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpO2lmKFwiW29iamVjdCBPYmplY3RdXCI9PT1qJiYoYj1hLmRlc2NyaXB0aW9uLGM9YS5jYWxsYmFjayxkPWEuYWN0aW9uLGY9YS5wZXJzaXN0ZW50LGU9YS5hbGxvd0luLGE9YS5jb21ibyksYiBpbnN0YW5jZW9mIEZ1bmN0aW9uPyhkPWMsYz1iLGI9XCIkJHVuZGVmaW5lZCQkXCIpOmFuZ3VsYXIuaXNVbmRlZmluZWQoYikmJihiPVwiJCR1bmRlZmluZWQkJFwiKSx2b2lkIDA9PT1mJiYoZj0hMCksXCJmdW5jdGlvblwiPT10eXBlb2YgYyl7aD1jLGUgaW5zdGFuY2VvZiBBcnJheXx8KGU9W10pO2Zvcih2YXIgayxsPTA7bDxlLmxlbmd0aDtsKyspZVtsXT1lW2xdLnRvVXBwZXJDYXNlKCksaz1pLmluZGV4T2YoZVtsXSksLTEhPT1rJiZpLnNwbGljZShrLDEpO2M9ZnVuY3Rpb24oYSl7dmFyIGI9ITAsYz1hLnRhcmdldHx8YS5zcmNFbGVtZW50LGQ9Yy5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpO2lmKChcIiBcIitjLmNsYXNzTmFtZStcIiBcIikuaW5kZXhPZihcIiBtb3VzZXRyYXAgXCIpPi0xKWI9ITA7ZWxzZSBmb3IodmFyIGU9MDtlPGkubGVuZ3RoO2UrKylpZihpW2VdPT09ZCl7Yj0hMTticmVha31iJiZuKGguYXBwbHkodGhpcyxhcmd1bWVudHMpKX19XCJzdHJpbmdcIj09dHlwZW9mIGQ/TW91c2V0cmFwLmJpbmQoYSxuKGMpLGQpOk1vdXNldHJhcC5iaW5kKGEsbihjKSk7dmFyIG09bmV3IGcoYSxiLGMsZCxlLGYpO3JldHVybiBvLmhvdGtleXMucHVzaChtKSxtfWZ1bmN0aW9uIGsoYSl7dmFyIGI9YSBpbnN0YW5jZW9mIGc/YS5jb21ibzphO2lmKE1vdXNldHJhcC51bmJpbmQoYiksYW5ndWxhci5pc0FycmF5KGIpKXtmb3IodmFyIGM9ITAsZD1iLmxlbmd0aDtkLS07KWM9ayhiW2RdKSYmYztyZXR1cm4gY312YXIgZT1vLmhvdGtleXMuaW5kZXhPZihsKGIpKTtyZXR1cm4gZT4tMT8oby5ob3RrZXlzW2VdLmNvbWJvLmxlbmd0aD4xP28uaG90a2V5c1tlXS5jb21iby5zcGxpY2Uoby5ob3RrZXlzW2VdLmNvbWJvLmluZGV4T2YoYiksMSk6by5ob3RrZXlzLnNwbGljZShlLDEpLCEwKTohMX1mdW5jdGlvbiBsKGEpe2lmKCFhKXJldHVybiBvLmhvdGtleXM7Zm9yKHZhciBiLGM9MDtjPG8uaG90a2V5cy5sZW5ndGg7YysrKWlmKGI9by5ob3RrZXlzW2NdLGIuY29tYm8uaW5kZXhPZihhKT4tMSlyZXR1cm4gYjtyZXR1cm4hMX1mdW5jdGlvbiBtKGEpe3JldHVybiBhLiRpZCBpbiBwfHwocFthLiRpZF09W10sYS4kb24oXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7Zm9yKHZhciBiPXBbYS4kaWRdLmxlbmd0aDtiLS07KWsocFthLiRpZF0ucG9wKCkpfSkpLHthZGQ6ZnVuY3Rpb24oYil7dmFyIGM7cmV0dXJuIGM9YXJndW1lbnRzLmxlbmd0aD4xP2ouYXBwbHkodGhpcyxhcmd1bWVudHMpOmooYikscFthLiRpZF0ucHVzaChjKSx0aGlzfX19ZnVuY3Rpb24gbihhKXtyZXR1cm4gZnVuY3Rpb24oYyxkKXtpZihhIGluc3RhbmNlb2YgQXJyYXkpe3ZhciBlPWFbMF0sZj1hWzFdO2E9ZnVuY3Rpb24oYSl7Zi5zY29wZS4kZXZhbChlKX19Yi4kYXBwbHkoZnVuY3Rpb24oKXthKGMsbChkKSl9KX19TW91c2V0cmFwLnByb3RvdHlwZS5zdG9wQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4oXCIgXCIrYi5jbGFzc05hbWUrXCIgXCIpLmluZGV4T2YoXCIgbW91c2V0cmFwIFwiKT4tMT8hMTpiLmNvbnRlbnRFZGl0YWJsZSYmXCJ0cnVlXCI9PWIuY29udGVudEVkaXRhYmxlfSxnLnByb3RvdHlwZS5mb3JtYXQ9ZnVuY3Rpb24oKXtpZihudWxsPT09dGhpcy5fZm9ybWF0ZWQpe2Zvcih2YXIgYT10aGlzLmNvbWJvWzBdLGI9YS5zcGxpdCgvW1xcc10vKSxjPTA7YzxiLmxlbmd0aDtjKyspYltjXT1mKGJbY10pO3RoaXMuX2Zvcm1hdGVkPWJ9cmV0dXJuIHRoaXMuX2Zvcm1hdGVkfTt2YXIgbz1iLiRuZXcoKTtvLmhvdGtleXM9W10sby5oZWxwVmlzaWJsZT0hMSxvLnRpdGxlPXRoaXMudGVtcGxhdGVUaXRsZSxvLmhlYWRlcj10aGlzLnRlbXBsYXRlSGVhZGVyLG8uZm9vdGVyPXRoaXMudGVtcGxhdGVGb290ZXIsby50b2dnbGVDaGVhdFNoZWV0PWk7dmFyIHA9W107aWYodGhpcy51c2VOZ1JvdXRlJiZiLiRvbihcIiRyb3V0ZUNoYW5nZVN1Y2Nlc3NcIixmdW5jdGlvbihhLGIpe2goKSxiJiZiLmhvdGtleXMmJmFuZ3VsYXIuZm9yRWFjaChiLmhvdGtleXMsZnVuY3Rpb24oYSl7dmFyIGM9YVsyXTsoXCJzdHJpbmdcIj09dHlwZW9mIGN8fGMgaW5zdGFuY2VvZiBTdHJpbmcpJiYoYVsyXT1bYyxiXSksYVs1XT0hMSxqLmFwcGx5KHRoaXMsYSl9KX0pLHRoaXMuaW5jbHVkZUNoZWF0U2hlZXQpe3ZhciBxPWVbMF0scj1hWzBdLHM9YW5ndWxhci5lbGVtZW50KHRoaXMudGVtcGxhdGUpO2oodGhpcy5jaGVhdFNoZWV0SG90a2V5LHRoaXMuY2hlYXRTaGVldERlc2NyaXB0aW9uLGkpLChyPT09cXx8cj09PXEuZG9jdW1lbnRFbGVtZW50KSYmKHI9cS5ib2R5KSxhbmd1bGFyLmVsZW1lbnQocikuYXBwZW5kKGMocykobykpfXZhciB0PSExLHU9e2FkZDpqLGRlbDprLGdldDpsLGJpbmRUbzptLHRlbXBsYXRlOnRoaXMudGVtcGxhdGUsdG9nZ2xlQ2hlYXRTaGVldDppLGluY2x1ZGVDaGVhdFNoZWV0OnRoaXMuaW5jbHVkZUNoZWF0U2hlZXQsY2hlYXRTaGVldEhvdGtleTp0aGlzLmNoZWF0U2hlZXRIb3RrZXksY2hlYXRTaGVldERlc2NyaXB0aW9uOnRoaXMuY2hlYXRTaGVldERlc2NyaXB0aW9uLHVzZU5nUm91dGU6dGhpcy51c2VOZ1JvdXRlLHB1cmdlSG90a2V5czpoLHRlbXBsYXRlVGl0bGU6dGhpcy50ZW1wbGF0ZVRpdGxlfTtyZXR1cm4gdX1dfV0pLmRpcmVjdGl2ZShcImhvdGtleVwiLFtcImhvdGtleXNcIixmdW5jdGlvbihhKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIsbGluazpmdW5jdGlvbihiLGMsZCl7dmFyIGUsZjthbmd1bGFyLmZvckVhY2goYi4kZXZhbChkLmhvdGtleSksZnVuY3Rpb24oYixjKXtmPVwic3RyaW5nXCI9PXR5cGVvZiBkLmhvdGtleUFsbG93SW4/ZC5ob3RrZXlBbGxvd0luLnNwbGl0KC9bXFxzLF0rLyk6W10sZT1jLGEuYWRkKHtjb21ibzpjLGRlc2NyaXB0aW9uOmQuaG90a2V5RGVzY3JpcHRpb24sY2FsbGJhY2s6YixhY3Rpb246ZC5ob3RrZXlBY3Rpb24sYWxsb3dJbjpmfSl9KSxjLmJpbmQoXCIkZGVzdHJveVwiLGZ1bmN0aW9uKCl7YS5kZWwoZSl9KX19fV0pLnJ1bihbXCJob3RrZXlzXCIsZnVuY3Rpb24oYSl7fV0pfSgpLGZ1bmN0aW9uKGEsYixjKXtmdW5jdGlvbiBkKGEsYixjKXtyZXR1cm4gYS5hZGRFdmVudExpc3RlbmVyP3ZvaWQgYS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSk6dm9pZCBhLmF0dGFjaEV2ZW50KFwib25cIitiLGMpfWZ1bmN0aW9uIGUoYSl7aWYoXCJrZXlwcmVzc1wiPT1hLnR5cGUpe3ZhciBiPVN0cmluZy5mcm9tQ2hhckNvZGUoYS53aGljaCk7cmV0dXJuIGEuc2hpZnRLZXl8fChiPWIudG9Mb3dlckNhc2UoKSksYn1yZXR1cm4gclthLndoaWNoXT9yW2Eud2hpY2hdOnNbYS53aGljaF0/c1thLndoaWNoXTpTdHJpbmcuZnJvbUNoYXJDb2RlKGEud2hpY2gpLnRvTG93ZXJDYXNlKCl9ZnVuY3Rpb24gZihhLGIpe3JldHVybiBhLnNvcnQoKS5qb2luKFwiLFwiKT09PWIuc29ydCgpLmpvaW4oXCIsXCIpfWZ1bmN0aW9uIGcoYSl7dmFyIGI9W107cmV0dXJuIGEuc2hpZnRLZXkmJmIucHVzaChcInNoaWZ0XCIpLGEuYWx0S2V5JiZiLnB1c2goXCJhbHRcIiksYS5jdHJsS2V5JiZiLnB1c2goXCJjdHJsXCIpLGEubWV0YUtleSYmYi5wdXNoKFwibWV0YVwiKSxifWZ1bmN0aW9uIGgoYSl7cmV0dXJuIGEucHJldmVudERlZmF1bHQ/dm9pZCBhLnByZXZlbnREZWZhdWx0KCk6dm9pZChhLnJldHVyblZhbHVlPSExKX1mdW5jdGlvbiBpKGEpe3JldHVybiBhLnN0b3BQcm9wYWdhdGlvbj92b2lkIGEuc3RvcFByb3BhZ2F0aW9uKCk6dm9pZChhLmNhbmNlbEJ1YmJsZT0hMCl9ZnVuY3Rpb24gaihhKXtyZXR1cm5cInNoaWZ0XCI9PWF8fFwiY3RybFwiPT1hfHxcImFsdFwiPT1hfHxcIm1ldGFcIj09YX1mdW5jdGlvbiBrKCl7aWYoIXEpe3E9e307Zm9yKHZhciBhIGluIHIpYT45NSYmMTEyPmF8fHIuaGFzT3duUHJvcGVydHkoYSkmJihxW3JbYV1dPWEpfXJldHVybiBxfWZ1bmN0aW9uIGwoYSxiLGMpe3JldHVybiBjfHwoYz1rKClbYV0/XCJrZXlkb3duXCI6XCJrZXlwcmVzc1wiKSxcImtleXByZXNzXCI9PWMmJmIubGVuZ3RoJiYoYz1cImtleWRvd25cIiksY31mdW5jdGlvbiBtKGEpe3JldHVyblwiK1wiPT09YT9bXCIrXCJdOihhPWEucmVwbGFjZSgvXFwrezJ9L2csXCIrcGx1c1wiKSxhLnNwbGl0KFwiK1wiKSl9ZnVuY3Rpb24gbihhLGIpe3ZhciBjLGQsZSxmPVtdO2ZvcihjPW0oYSksZT0wO2U8Yy5sZW5ndGg7KytlKWQ9Y1tlXSx1W2RdJiYoZD11W2RdKSxiJiZcImtleXByZXNzXCIhPWImJnRbZF0mJihkPXRbZF0sZi5wdXNoKFwic2hpZnRcIikpLGooZCkmJmYucHVzaChkKTtyZXR1cm4gYj1sKGQsZixiKSx7a2V5OmQsbW9kaWZpZXJzOmYsYWN0aW9uOmJ9fWZ1bmN0aW9uIG8oYSxjKXtyZXR1cm4gYT09PWI/ITE6YT09PWM/ITA6byhhLnBhcmVudE5vZGUsYyl9ZnVuY3Rpb24gcChhKXtmdW5jdGlvbiBjKGEpe2E9YXx8e307dmFyIGIsYz0hMTtmb3IoYiBpbiB1KWFbYl0/Yz0hMDp1W2JdPTA7Y3x8KHg9ITEpfWZ1bmN0aW9uIGsoYSxiLGMsZCxlLGcpe3ZhciBoLGksaz1bXSxsPWMudHlwZTtpZighcy5fY2FsbGJhY2tzW2FdKXJldHVybltdO2ZvcihcImtleXVwXCI9PWwmJmooYSkmJihiPVthXSksaD0wO2g8cy5fY2FsbGJhY2tzW2FdLmxlbmd0aDsrK2gpaWYoaT1zLl9jYWxsYmFja3NbYV1baF0sKGR8fCFpLnNlcXx8dVtpLnNlcV09PWkubGV2ZWwpJiZsPT1pLmFjdGlvbiYmKFwia2V5cHJlc3NcIj09bCYmIWMubWV0YUtleSYmIWMuY3RybEtleXx8ZihiLGkubW9kaWZpZXJzKSkpe3ZhciBtPSFkJiZpLmNvbWJvPT1lLG49ZCYmaS5zZXE9PWQmJmkubGV2ZWw9PWc7KG18fG4pJiZzLl9jYWxsYmFja3NbYV0uc3BsaWNlKGgsMSksay5wdXNoKGkpfXJldHVybiBrfWZ1bmN0aW9uIGwoYSxiLGMsZCl7cy5zdG9wQ2FsbGJhY2soYixiLnRhcmdldHx8Yi5zcmNFbGVtZW50LGMsZCl8fGEoYixjKT09PSExJiYoaChiKSxpKGIpKX1mdW5jdGlvbiBtKGEpe1wibnVtYmVyXCIhPXR5cGVvZiBhLndoaWNoJiYoYS53aGljaD1hLmtleUNvZGUpO3ZhciBiPWUoYSk7aWYoYilyZXR1cm5cImtleXVwXCI9PWEudHlwZSYmdj09PWI/dm9pZCh2PSExKTp2b2lkIHMuaGFuZGxlS2V5KGIsZyhhKSxhKX1mdW5jdGlvbiBvKCl7Y2xlYXJUaW1lb3V0KHQpLHQ9c2V0VGltZW91dChjLDFlMyl9ZnVuY3Rpb24gcShhLGIsZCxmKXtmdW5jdGlvbiBnKGIpe3JldHVybiBmdW5jdGlvbigpe3g9YiwrK3VbYV0sbygpfX1mdW5jdGlvbiBoKGIpe2woZCxiLGEpLFwia2V5dXBcIiE9PWYmJih2PWUoYikpLHNldFRpbWVvdXQoYywxMCl9dVthXT0wO2Zvcih2YXIgaT0wO2k8Yi5sZW5ndGg7KytpKXt2YXIgaj1pKzE9PT1iLmxlbmd0aCxrPWo/aDpnKGZ8fG4oYltpKzFdKS5hY3Rpb24pO3IoYltpXSxrLGYsYSxpKX19ZnVuY3Rpb24gcihhLGIsYyxkLGUpe3MuX2RpcmVjdE1hcFthK1wiOlwiK2NdPWIsYT1hLnJlcGxhY2UoL1xccysvZyxcIiBcIik7dmFyIGYsZz1hLnNwbGl0KFwiIFwiKTtyZXR1cm4gZy5sZW5ndGg+MT92b2lkIHEoYSxnLGIsYyk6KGY9bihhLGMpLHMuX2NhbGxiYWNrc1tmLmtleV09cy5fY2FsbGJhY2tzW2Yua2V5XXx8W10sayhmLmtleSxmLm1vZGlmaWVycyx7dHlwZTpmLmFjdGlvbn0sZCxhLGUpLHZvaWQgcy5fY2FsbGJhY2tzW2Yua2V5XVtkP1widW5zaGlmdFwiOlwicHVzaFwiXSh7Y2FsbGJhY2s6Yixtb2RpZmllcnM6Zi5tb2RpZmllcnMsYWN0aW9uOmYuYWN0aW9uLHNlcTpkLGxldmVsOmUsY29tYm86YX0pKX12YXIgcz10aGlzO2lmKGE9YXx8YiwhKHMgaW5zdGFuY2VvZiBwKSlyZXR1cm4gbmV3IHAoYSk7cy50YXJnZXQ9YSxzLl9jYWxsYmFja3M9e30scy5fZGlyZWN0TWFwPXt9O3ZhciB0LHU9e30sdj0hMSx3PSExLHg9ITE7cy5faGFuZGxlS2V5PWZ1bmN0aW9uKGEsYixkKXt2YXIgZSxmPWsoYSxiLGQpLGc9e30saD0wLGk9ITE7Zm9yKGU9MDtlPGYubGVuZ3RoOysrZSlmW2VdLnNlcSYmKGg9TWF0aC5tYXgoaCxmW2VdLmxldmVsKSk7Zm9yKGU9MDtlPGYubGVuZ3RoOysrZSlpZihmW2VdLnNlcSl7aWYoZltlXS5sZXZlbCE9aCljb250aW51ZTtpPSEwLGdbZltlXS5zZXFdPTEsbChmW2VdLmNhbGxiYWNrLGQsZltlXS5jb21ibyxmW2VdLnNlcSl9ZWxzZSBpfHxsKGZbZV0uY2FsbGJhY2ssZCxmW2VdLmNvbWJvKTt2YXIgbT1cImtleXByZXNzXCI9PWQudHlwZSYmdztkLnR5cGUhPXh8fGooYSl8fG18fGMoZyksdz1pJiZcImtleWRvd25cIj09ZC50eXBlfSxzLl9iaW5kTXVsdGlwbGU9ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD0wO2Q8YS5sZW5ndGg7KytkKXIoYVtkXSxiLGMpfSxkKGEsXCJrZXlwcmVzc1wiLG0pLGQoYSxcImtleWRvd25cIixtKSxkKGEsXCJrZXl1cFwiLG0pfWZvcih2YXIgcSxyPXs4OlwiYmFja3NwYWNlXCIsOTpcInRhYlwiLDEzOlwiZW50ZXJcIiwxNjpcInNoaWZ0XCIsMTc6XCJjdHJsXCIsMTg6XCJhbHRcIiwyMDpcImNhcHNsb2NrXCIsMjc6XCJlc2NcIiwzMjpcInNwYWNlXCIsMzM6XCJwYWdldXBcIiwzNDpcInBhZ2Vkb3duXCIsMzU6XCJlbmRcIiwzNjpcImhvbWVcIiwzNzpcImxlZnRcIiwzODpcInVwXCIsMzk6XCJyaWdodFwiLDQwOlwiZG93blwiLDQ1OlwiaW5zXCIsNDY6XCJkZWxcIiw5MTpcIm1ldGFcIiw5MzpcIm1ldGFcIiwyMjQ6XCJtZXRhXCJ9LHM9ezEwNjpcIipcIiwxMDc6XCIrXCIsMTA5OlwiLVwiLDExMDpcIi5cIiwxMTE6XCIvXCIsMTg2OlwiO1wiLDE4NzpcIj1cIiwxODg6XCIsXCIsMTg5OlwiLVwiLDE5MDpcIi5cIiwxOTE6XCIvXCIsMTkyOlwiYFwiLDIxOTpcIltcIiwyMjA6XCJcXFxcXCIsMjIxOlwiXVwiLDIyMjpcIidcIn0sdD17XCJ+XCI6XCJgXCIsXCIhXCI6XCIxXCIsXCJAXCI6XCIyXCIsXCIjXCI6XCIzXCIsJDpcIjRcIixcIiVcIjpcIjVcIixcIl5cIjpcIjZcIixcIiZcIjpcIjdcIixcIipcIjpcIjhcIixcIihcIjpcIjlcIixcIilcIjpcIjBcIixfOlwiLVwiLFwiK1wiOlwiPVwiLFwiOlwiOlwiO1wiLCdcIic6XCInXCIsXCI8XCI6XCIsXCIsXCI+XCI6XCIuXCIsXCI/XCI6XCIvXCIsXCJ8XCI6XCJcXFxcXCJ9LHU9e29wdGlvbjpcImFsdFwiLGNvbW1hbmQ6XCJtZXRhXCIsXCJyZXR1cm5cIjpcImVudGVyXCIsZXNjYXBlOlwiZXNjXCIscGx1czpcIitcIixtb2Q6L01hY3xpUG9kfGlQaG9uZXxpUGFkLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSk/XCJtZXRhXCI6XCJjdHJsXCJ9LHY9MTsyMD52OysrdilyWzExMSt2XT1cImZcIit2O2Zvcih2PTA7OT49djsrK3Ypclt2Kzk2XT12O3AucHJvdG90eXBlLmJpbmQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXM7cmV0dXJuIGE9YSBpbnN0YW5jZW9mIEFycmF5P2E6W2FdLGQuX2JpbmRNdWx0aXBsZS5jYWxsKGQsYSxiLGMpLGR9LHAucHJvdG90eXBlLnVuYmluZD1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7cmV0dXJuIGMuYmluZC5jYWxsKGMsYSxmdW5jdGlvbigpe30sYil9LHAucHJvdG90eXBlLnRyaWdnZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO3JldHVybiBjLl9kaXJlY3RNYXBbYStcIjpcIitiXSYmYy5fZGlyZWN0TWFwW2ErXCI6XCIrYl0oe30sYSksY30scC5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO3JldHVybiBhLl9jYWxsYmFja3M9e30sYS5fZGlyZWN0TWFwPXt9LGF9LHAucHJvdG90eXBlLnN0b3BDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXM7cmV0dXJuKFwiIFwiK2IuY2xhc3NOYW1lK1wiIFwiKS5pbmRleE9mKFwiIG1vdXNldHJhcCBcIik+LTE/ITE6byhiLGMudGFyZ2V0KT8hMTpcIklOUFVUXCI9PWIudGFnTmFtZXx8XCJTRUxFQ1RcIj09Yi50YWdOYW1lfHxcIlRFWFRBUkVBXCI9PWIudGFnTmFtZXx8Yi5pc0NvbnRlbnRFZGl0YWJsZX0scC5wcm90b3R5cGUuaGFuZGxlS2V5PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztyZXR1cm4gYS5faGFuZGxlS2V5LmFwcGx5KGEsYXJndW1lbnRzKX0scC5pbml0PWZ1bmN0aW9uKCl7dmFyIGE9cChiKTtmb3IodmFyIGMgaW4gYSlcIl9cIiE9PWMuY2hhckF0KDApJiYocFtjXT1mdW5jdGlvbihiKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYVtiXS5hcHBseShhLGFyZ3VtZW50cyl9fShjKSl9LHAuaW5pdCgpLGEuTW91c2V0cmFwPXAsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMmJihtb2R1bGUuZXhwb3J0cz1wKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQmJmRlZmluZShmdW5jdGlvbigpe3JldHVybiBwfSl9KHdpbmRvdyxkb2N1bWVudCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnc2NhbGVBcHAnKS5jb25maWcoZnVuY3Rpb24gKCRwcm92aWRlKSB7XG4gICAgICAgICRwcm92aWRlLmRlY29yYXRvcignJGh0dHBCYWNrZW5kJywgYW5ndWxhci5tb2NrLmUyZS4kaHR0cEJhY2tlbmREZWNvcmF0b3IpO1xuICAgIH0pLnJ1bihmdW5jdGlvbiAoJGh0dHBCYWNrZW5kLCBzY2FsZUNvbmZpZywgWE1MSHR0cFJlcXVlc3QpIHtcblxuICAgICAgICB2YXIgZ2V0U3luYyA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCwgZmFsc2UpO1xuICAgICAgICAgICAgcmVxdWVzdC5zZW5kKG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuIFtyZXF1ZXN0LnN0YXR1cywgcmVxdWVzdC5yZXNwb25zZSwge31dO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFN0YXR1cyBzZXJ2aWNlXG4gICAgICAgIHZhciBzdGF0dXNPdmVycmlkZVVybCA9ICd0ZXN0L2RhdGEvc3RhdHVzLmpzb24nO1xuICAgICAgICB2YXIgc3RhdHVzUmVnZXggPSBuZXcgUmVnRXhwKCdeJyArIHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ3N0YXR1cy8nLCAnaScpO1xuICAgICAgICAkaHR0cEJhY2tlbmQud2hlbkdFVChzdGF0dXNSZWdleCkucmVzcG9uZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0U3luYyhzdGF0dXNPdmVycmlkZVVybCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEpvYiB0eXBlIHN0YXR1c1xuICAgICAgICB2YXIgam9iVHlwZVN0YXR1c092ZXJyaWRlVXJsID0gJ3Rlc3QvZGF0YS9qb2JUeXBlU3RhdHVzLmpzb24nO1xuICAgICAgICB2YXIgam9iVHlwZVN0YXR1c1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyBzY2FsZUNvbmZpZy51cmxzLmFwaVByZWZpeCArICdqb2ItdHlwZXMvc3RhdHVzLycsICdpJyk7XG4gICAgICAgICRodHRwQmFja2VuZC53aGVuR0VUKGpvYlR5cGVTdGF0dXNSZWdleCkucmVzcG9uZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0U3luYyhqb2JUeXBlU3RhdHVzT3ZlcnJpZGVVcmwpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBKb2IgdHlwZXNcbiAgICAgICAgdmFyIGpvYlR5cGVzT3ZlcnJpZGVVcmwgPSAndGVzdC9kYXRhL2pvYlR5cGVzLmpzb24nO1xuICAgICAgICB2YXIgam9iVHlwZXNSZWdleCA9IG5ldyBSZWdFeHAoJ14nICsgc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnam9iLXR5cGVzLycsICdpJyk7XG4gICAgICAgICRodHRwQmFja2VuZC53aGVuR0VUKGpvYlR5cGVzUmVnZXgpLnJlc3BvbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldFN5bmMoam9iVHlwZXNPdmVycmlkZVVybCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE5vZGUgc3RhdHVzXG4gICAgICAgIHZhciBub2RlU3RhdHVzT3ZlcnJpZGVVcmwgPSAndGVzdC9kYXRhL25vZGVTdGF0dXMuanNvbic7XG4gICAgICAgIHZhciBub2RlU3RhdHVzUmVnZXggPSBuZXcgUmVnRXhwKCdeJyArIHNjYWxlQ29uZmlnLnVybHMuYXBpUHJlZml4ICsgJ25vZGVzL3N0YXR1cy8nLCAnaScpO1xuICAgICAgICAkaHR0cEJhY2tlbmQud2hlbkdFVChub2RlU3RhdHVzUmVnZXgpLnJlc3BvbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldFN5bmMobm9kZVN0YXR1c092ZXJyaWRlVXJsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSm9iIGxvYWRcbiAgICAgICAgdmFyIGpvYkxvYWRSZWdleCA9IG5ldyBSZWdFeHAoJ14nICsgc2NhbGVDb25maWcudXJscy5hcGlQcmVmaXggKyAnbG9hZC8nLCAnaScpO1xuICAgICAgICAkaHR0cEJhY2tlbmQud2hlbkdFVChqb2JMb2FkUmVnZXgpLnJlc3BvbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG51bUhvdXJzID0gbW9tZW50LnV0YygpLmVuZE9mKCdkJykuZGlmZihtb21lbnQudXRjKCkuc3VidHJhY3QoNywgJ2QnKS5zdGFydE9mKCdkJyksICdoJyk7XG4gICAgICAgICAgICB2YXIgc3RhcnRUaW1lID0gbW9tZW50LnV0YygpLnN1YnRyYWN0KDcsICdkJykuc3RhcnRPZignZCcpO1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgY291bnQ6IG51bUhvdXJzLFxuICAgICAgICAgICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgcHJldmlvdXM6IG51bGwsXG4gICAgICAgICAgICAgICAgcmVzdWx0czogW11cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5jb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5yZXN1bHRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aW1lOiBtb21lbnQudXRjKHN0YXJ0VGltZSkuYWRkKGksICdoJykudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ19jb3VudDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDEwMCAtIDIwICsgMSkpICsgMjAsXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlZF9jb3VudDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDEwMCAtIDIwICsgMSkpICsgMjAsXG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdfY291bnQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMDAgLSAyMCArIDEpKSArIDIwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBbMjAwLCBkYXRhLCB7fV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEZvciBldmVyeXRoaW5nIGVsc2UsIGRvbid0IG1vY2tcbiAgICAgICAgJGh0dHBCYWNrZW5kLndoZW5HRVQoL15cXHcrLiovKS5wYXNzVGhyb3VnaCgpO1xuICAgICAgICAkaHR0cEJhY2tlbmQud2hlblBPU1QoL15cXHcrLiovKS5wYXNzVGhyb3VnaCgpO1xuICAgIH0pO1xufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
