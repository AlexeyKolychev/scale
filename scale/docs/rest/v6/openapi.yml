openapi: '3.0.0'

info:
  title: Scale API
  description: Scale API Overview
  version: v6
  contact: 
      name: "Scale Team"
      url: "gitter.com/ngageoint/scale"
  x-logo:
    url: "http://ngageoint.github.io/scale/images/scale3-transparent-128.png"
    altText: "Scale logo"

servers:
  - url: http://scale.nga.gov/api/v6

components:
  schemas:
    batch:
      properties:
        creator_job: {description: The job that is executed to create all the recipes
            defined by the batch., example: 62, type: integer}
        description: {description: Extended description of the Batch, example: My
            batch of recipes, type: string}
        event: {description: The trigger event that is associated with the batch,
          example: 19, type: integer}
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
        recipe_type: {description: The recipe type that is associated with the batch.,
          example: 6, type: integer}
        status: {description: 'The current status of the batch. Choices: [SUBMITTED,
            CREATED].', example: SUBMITTED, type: string}
        title: {description: Human readable display name of the Batch, example: My
            Batch, type: string}
      title: Batch
      type: object
    broker:
      discriminator: {propertyName: type}
      properties:
        type: {description: 'The type is a required string that specifies the type
            of the broker to use. The other fields that configure the broker are based
            upon the type of the broker in the type field. The valid broker types
            are host, nfs, and s3', example: nfs, type: string}
      required: [type]
      title: Broker
      type: object
    choice:
      properties:
        id: {description: Unique identifier, type: integer}
      title: Choice
      type: object
    column:
      properties:
        aggregate: {description: 'The math operation used to aggregate certain types
            of metrics (avg, max, min, sum...)', example: sum, type: string}
        description: {description: A longer description of the metrics column, example: Number
            of successfully completed jobs, type: string}
        group: {description: 'Some metric columns are related together, which is indicated
            by the group name', example: overview, type: string}
        name: {description: The identifying name of the metrics column used for queries,
          example: completed_count, type: string}
        title: {description: The human readable display name of the metrics column,
          example: Completed Count, type: string}
        units: {description: 'Each value for the metrics column is converted to this
            type of unit (count, seconds)', example: count, type: string}
      title: Column
      type: object
    credentials:
      description: The credentials is a JSON object that provides the necessary information
        to access the bucket. This attribute should be omitted when using IAM role-based
        security. If it is included for key-based security, then both sub-attributes
        must be included. An IAM account should be created and granted the appropriate
        permissions to the bucket before attempting to use it here.
      properties:
        access_key_id: {description: The access_key_id is a unique identifier for
            the user account in IAM that will be used as a proxy for read and write
            operations within Scale., example: AKIAIOSFODNN7EXAMPLE, type: string}
        secret_access_key: {description: The secret_access_key is a generated token
            that the system can use to prove it should be able to make requests on
            behalf of the associated IAM account without requiring the actual password
            used by that account., example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY,
          type: string}
      required: [access_key_id, secret_access_key]
      title: Credentials
      type: object
    database_update:
      description: Information on if and when the current Scale database update completed
      properties:
        completed: {description: When the database update was completed (in ISO-8601
            Datetime), example: !!timestamp '1970-01-01 00:00:00', format: date-time,
          type: string}
        is_completed: {example: true, type: boolean}
      title: Database Update
      type: object
    dir_monitor:
      properties:
        transfer_suffix: {description: The transfer_suffix field is an optional string
            that defines a suffix that is used on the file names to indicate that
            files are still transferring and have not yet finished being copied into
            the scanned directory. Only used with dir monitors., example: _tmp, type: string}
        type: {description: The type is a required string that specifies the type
            of monitor to use. The other fields that configure the monitor are based
            upon the type of the monitor in the type field. Certain monitor types
            may only be used on workspaces with corresponding broker types. The valid
            monitor types are dir-watcher and s3, example: dir-watcher, type: string}
      required: [type]
      title: Directory Monitor
      type: object
    docker_param:
      properties:
        flag: {description: "The command line flag (long form) to use for passing\
            \ the parameter without the preceding dashes (e.g. use \u201Cvolume\u201D\
            \ for passing \u201C\u2013volume=...\u201D).", example: volume, type: string}
        value: {description: The value to pass to the parameter on the Docker command
            line., type: string}
      title: Docker Parameter
      type: object
    error:
      properties:
        description: {example: My Error Description, type: string}
        last_updated: {description: When the error was last updated (in ISO-8601 Datetime),
          example: !!timestamp '1970-01-01 00:00:00', format: date-time, type: string}
        name: {example: my-error, type: string}
        started: {description: When the error began (in ISO-8601 Datetime), example: !!timestamp '1970-01-01
            00:00:00', format: date-time, type: string}
        title: {example: My Error, type: string}
      title: Error
      type: object
    error_base:
      properties:
        category: {example: SYSTEM, type: string}
        description: {example: My Error Description, type: string}
        id: {example: 1, type: integer}
        is_builtin: {description: Whether the error was loaded during the installation
            process., example: true, type: boolean}
        job_type_name: {description: The name of the job type that relates to this
            error., example: job-type, type: string}
        name: {example: my-error, type: string}
        title: {example: My Error, type: string}
      title: Error Base
      type: object
    error_details:
      allof:
      - {ref: '#/components/schemas/error_details'}
      - {title: Error Details}
      - properties:
          created: {description: When the associated database model was initially
              created., example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time,
            type: string}
          last_modified: {description: When the associated database model was last
              saved., example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time,
            type: string}
        type: object
    error_list:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of Error objects
          items: {$ref: '#/components/schemas/error_details'}
          type: array
      title: Error List
      type: object
    exe_config:
      properties:
        input_files:
          items: {$ref: '#/components/schemas/input_file'}
          type: array
        output_workspaces:
          additionalProperties: {type: string}
          type: object
        tasks:
          items: {$ref: '#/components/schemas/task'}
          type: array
      title: Execution Configuration
      type: object
    exe_output:
      properties:
        output_data:
          items: {$ref: '#/components/schemas/output_file'}
          type: array
      title: Execution Output
      type: object
    exe_task_results:
      properties:
        ended: {description: when the task finished, example: !!timestamp '2015-09-10
            15:24:53.987000', format: date-time, type: string}
        exit_code: {description: exit code returned by the task execution, example: 0,
          type: integer}
        launched: {description: when the task was launched, example: !!timestamp '2015-09-10
            15:24:53.987000', format: date-time, type: string}
        started: {description: when the task was started, example: !!timestamp '2015-09-10
            15:24:53.987000', format: date-time, type: string}
        status: {description: final status of the task (FAILED/COMPLETED/CANCELED),
          example: COMPLETED, type: string}
        task_id: {description: The unique identifier of the model. Can be passed to
            the details API call., example: 10, type: string}
        type: {description: "type of the task (\u201Cpull\u201D, \u201Cpre\u201D,\
            \ \u201Cmain\u201D, or \u201Cpost\u201D)", example: pull, type: string}
        was_launched: {description: whether the task was launched, example: true,
          type: boolean}
        was_started: {description: wether the task was started, example: true, type: boolean}
        was_timed_out: {description: whether the task timed out, example: false, type: boolean}
      title: Task Results
      type: object
    failed:
      properties:
        algorithm:
          items: {$ref: '#/components/schemas/job_execution_count'}
          type: array
        data:
          items: {$ref: '#/components/schemas/job_execution_count'}
          type: array
        system:
          items: {$ref: '#/components/schemas/job_execution_count'}
          type: array
        total: {example: 9, type: integer}
      title: Failed Job Execution Count
      type: object
    file:
      properties:
        batch: {$ref: '#/components/schemas/batch'}
        center_point: {description: The central geospatial location of the source
            file., example: POINT(11 -11), type: string}
        countries:
          description: A list of zero or more strings with the ISO3 country codes
            for countries contained in the geographic boundary of this file.
          items: {type: string}
          style: simple
          type: array
        created: {description: When the associated database model was initially created.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        data_ended: {description: The ended time of the source data being ingested.,
          example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time, type: string}
        data_started: {description: The start time of the source data being ingested.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        data_type:
          description: A list of string data type "tags" for the file.
          items: {type: string}
          style: simple
          type: array
        deleted: {description: When the source file was deleted., example: !!timestamp '2015-09-10
            15:24:53.987000', format: date-time, type: string}
        file_name: {description: The name of the source file., example: my_file.kml,
          type: string}
        file_path: {description: The relative path of the file in the workspace.,
          example: path/to/the/file.png, type: string}
        file_size: {description: The size of the file in bytes., example: 1234, type: integer}
        geometry: {description: The full geospatial geometry footprint of the source
            file. (WKT format), example: 'POLYGON((11 -11,22 -22,33 -33,44 -44))',
          type: string}
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
        is_deleted: {description: Whether the source file has been deleted., example: true,
          type: boolean}
        is_superseded: {description: Whether this file has been replaced and is now
            obsolete., example: true, type: boolean}
        job: {$ref: '#/components/schemas/job'}
        job_exe: {$ref: '#/components/schemas/job_exe', example: !!timestamp '2015-09-10
            15:24:53.987000'}
        job_output: {description: The name of the output from the job related to this
            file., example: output_name_1, type: string}
        job_type: {$ref: '#/components/schemas/job_type'}
        last_modified: {description: When the associated database model was last saved.,
          example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time, type: string}
        media_type: {description: The IANA media type of the source file., example: application/vnd.google-earth.kml+xml,
          type: string}
        recipe: {$ref: '#/components/schemas/recipe'}
        recipe_node: {description: The recipe node that produced this file., example: kml-footprint,
          type: string}
        recipe_type: {$ref: '#/components/schemas/recipe_type'}
        source_collection: {description: The collection of the source file, example: 113394955,
          type: string}
        source_ended: {description: When collection of the underlying source file
            ended., example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time,
          type: string}
        source_sensor: {description: The specific identifier of the sensor used to
            produce the source file, example: 1, type: string}
        source_sensor_class: {description: The class of sensor used to produce the
            source file, example: ABC, type: string}
        source_started: {description: When collection of the underlying source file
            started., example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time,
          type: string}
        source_task: {description: The task that produced the source file., example: my-task,
          type: string}
        superseded: {description: When the file became superseded by another file.,
          example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time, type: string}
        url: {description: The absolute URL to use for downloading the file., example: 'http://host.com/file/path/my_file.kml',
          format: uri, type: string}
        workspace: {$ref: ./workspace.yml#/components/schemas/workspace_base}
      required: [id]
      title: File
      type: object
    file_details:
      allof:
      - {ref: '#/components/schemas/file'}
      - {title: File Details}
      - {type: object}
    file_list:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of ingest objects
          items: {$ref: '#/components/schemas/file'}
          type: array
      title: File List
      type: object
    filter:
      properties:
        param: {description: The identifying name of the parameter used for queries,
          example: name, type: string}
        type: {description: 'The data type of the parameter clients can use for validation
            (bool, date, datetime, float, int, string, time, int)', example: string,
          type: string}
      title: Filter
      type: object
    group:
      properties:
        description: {description: A longer description of the metrics group, example: Overall
            counts based on job status, type: string}
        name: {description: The identifying name of the metrics group used for queries,
          example: overview, type: string}
        title: {description: The human readable display name of the metrics group,
          example: Overview, type: string}
      title: Group
      type: object
    host_broker:
      allOf:
      - {$ref: '#/components/schemas/broker'}
      properties:
        host_path: {description: "The host_path is a required string that specifies\
            \ the absolute path of the host\u2019s local directory that should be\
            \ mounted into a job\u2019s container in order to access the workspace\u2019\
            s files.", example: /the/absolute/host/path, type: string}
      required: [host_path]
      title: Host Broker
      type: object
    host_mount:
      properties:
        host_path: {type: string}
        type: {type: string}
      required: [type, host_path]
      title: Host Mount
      type: object
    ingest_details:
      properties:
        bytes_transferred: {description: The total number of bytes transferred so
            far., example: 1234, type: integer}
        created: {description: When the associated database model was initially created.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        data_ended: {description: The end time of the source data being ingested.,
          example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time, type: string}
        data_started: {description: The start time of the source data being ingested.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        data_type:
          description: A list of string data type "tags" for the file.
          items: {type: string}
          style: simple
          type: array
        file_name: {description: The name of the file being ingested., example: file_name.txt,
          type: string}
        file_path: {description: The relative path of the file in the workspace.,
          example: the/current/path/file_name.txt, type: string}
        file_size: {description: The size of the file in bytes., example: 1234, type: integer}
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
        ingest_ended: {description: When the ingest ended., example: !!timestamp '2015-09-10
            15:24:53.987000', format: date-time, type: string}
        ingest_started: {description: When the ingest was started., example: !!timestamp '2015-09-10
            15:24:53.503000', format: date-time, type: string}
        job: {$ref: '#/components/schemas/job'}
        last_modified: {description: When the associated database model was last saved.,
          example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time, type: string}
        media_type: {description: The IANA media type of the file., example: text/plain,
          type: string}
        new_file_path: {description: The relative path for where the file should be
            moved as part of ingesting., example: the/new/path/file_name.txt, type: string}
        new_workspace: {$ref: '#/components/schemas/workspace_base'}
        scan: {$ref: '#/components/schemas/scan'}
        source_file: {$ref: '#/components/schemas/source_file'}
        status: {description: 'The current status of the ingest. Choices: [TRANSFERRING,
            TRANSFERRED, DEFERRED, INGESTING, INGESTED, ERRORED, DUPLICATE]', example: INGESTED,
          type: string}
        strike: {$ref: '#/components/schemas/strike_details'}
        transfer_ended: {description: When the transfer ended., example: !!timestamp '2015-09-10
            14:48:08.956000', format: date-time, type: string}
        transfer_started: {description: When the transfer was started., example: !!timestamp '2015-09-10
            14:48:08.920000', format: date-time, type: string}
        workspace: {$ref: '#/components/schemas/workspace_base'}
      title: Ingest Details
      type: object
    ingest_file:
      properties:
        data_types:
          description: "The data_types field is an optional list of strings. Any file\
            \ that matches the corresponding file name regular expression will have\
            \ these data type strings \u201Ctagged\u201D with the file. If not provided,\
            \ data_types defaults to an empty array."
          example: []
          items: {type: string}
          style: simple
          type: array
        filename_regex: {description: "The filename_regex field is a required string\
            \ that defines a regular expression to check against the names of new\
            \ files in the scanned workspace. When a new file appears in the workspace,\
            \ the file\u2019s name is checked against each expression in order of\
            \ the files_to_ingest array. If an expression matches the new file name\
            \ in the workspace, that file is ingested according to the other fields\
            \ in the JSON object and all subsequent rules in the list are ignored\
            \ (first rule matched is applied).", example: '*.txt', type: string}
        new_file_path: {description: 'The new_file_path field is an optional string
            that specifies a new relative path for storing new files. If new_workspace
            is also specified, the file is moved to the new workspace at this new
            path location (instead of using the current path the new file originally
            came in on). If new_workspace is not specified, the file is moved to this
            new path location within the original scanned workspace. In either of
            these cases, three additional and dynamically named directories, for the
            current year, month, and day, will be appended to the new_file_path value
            automatically by the Scale system (i.e. workspace_path/YYYY/MM/DD).',
          example: the/new/path/, type: string}
        new_workspace: {description: The new_workspace field optionally specifies
            the name of a new workspace to which the file should be copied. This allows
            the ingest process to move files to a different workspace after they appear
            in the scanned workspace., example: my-new-workspace, type: string}
      title: File Ingest Rule
      type: object
    ingest_list:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of ingest objects
          items: {$ref: '#/components/schemas/ingest_details'}
          type: array
      title: Ingest List
      type: object
    input_file:
      properties:
        id: {type: integer}
        is_deleted: {description: Whether the input file has been deleted or not.,
          type: boolean}
        local_file_name: {description: Alternate file name to use when passing the
            input file to the executing container. This is used to deconflict identical
            input file names when multiple files with the same name are passed to
            the same input., type: string}
        type: {description: type of the input file (SOURCE or PRODUCT), type: string}
        workspace_name: {description: name of the workspace holding the input file,
          type: string}
        workspace_path: {description: path of the input file within the workspace,
          type: string}
      title: Input File
      type: object
    job:
      properties:
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
      title: Job Details
      type: object
    job_base:
      properties:
        id: {example: 1, type: integer}
        job_type: {$ref: ./job_type.yml#/components/schemas/job_type_base}
        status: {description: 'The current status of the job. Choices: [QUEUED, RUNNING,
            FAILED, COMPLETED, CANCELED].', example: QUEUED, type: string}
      title: Job Base
      type: object
    job_cancel_post:
      properties:
        batch_ids:
          description: Cancel only jobs with these batch ids
          items: {type: integer}
          type: array
        ended: {description: Cancel only jobs that ran before this datetime, example: !!timestamp '2015-09-10
            15:24:53.503000', format: date-time, type: string}
        error_categories:
          description: Cancel only jobs with an error in these categories
          items: {type: string}
          type: array
        error_ids:
          description: Cancel only jobs with an error with one of these ids
          items: {type: integer}
          type: array
        is_superseded: {description: Cancel only jobs with matching is_superseded
            flag., type: boolean}
        job_ids:
          description: Cancel only jobs with these ids
          items: {type: integer}
          type: array
        job_type_ids:
          description: Cancel only jobs with these job type ids
          items: {type: integer}
          type: array
        job_type_names:
          description: Cancel only jobs with these job type names
          items: {type: string}
          type: array
        recipe_ids:
          description: Cancel only jobs with these recipe ids
          items: {type: integer}
          type: array
        started: {description: Cancel only jobs that ran after this datetime, example: !!timestamp '2015-09-10
            15:24:53.503000', format: date-time, type: string}
        status: {description: 'Cancel only jobs with this status. Choices: [QUEUED,
            RUNNING, FAILED, COMPLETED, CANCELED].', type: string}
      title: Cancel Jobs Post
      type: object
    job_details:
      allof:
      - {$ref: '#/components/schemas/job'}
      - execution: {$ref: '#/components/schemas/job_execution_details', description: The
            most recent execution of the job.}
        job_type_rev: {$ref: ./job_type.yml#/components/schemas/job_type_revision_detail}
        properties: null
        resources: {$ref: ./system.yml#/components/schemas/resources, description: JSON
            description describing the resources required for this job.}
        superseded_by_job: {$ref: '#/components/schemas/job_base', description: The
            next job in the chain that superseded this job.}
        type: object
      title: Job Details
    job_exe:
      properties:
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
      required: [id]
      title: Job Execution
      type: object
    job_execution:
      description: The job executions related to this node. The *running* field describes
        the jobs currently running on the node, with a total count and count per job
        type. The *completed* field describes job executions that have completed on
        the node in the last 3 hours, with a total count and count per job type. The
        *failed* field is similar to *completed*, just with failed executions grouped
        by error category.
      properties:
        completed: {$ref: '#/components/schemas/job_execution_count'}
        failed: {$ref: '#/components/schemas/failed'}
        running: {$ref: '#/components/schemas/job_execution_count'}
      title: Job Execution
      type: object
    job_execution_base:
      properties:
        cluster_id: {description: The Scale cluster identifier., example: scale_job_1234_263x0,
          type: string}
        created: {description: When the associated database model was initially created.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        ended: {description: 'When the job execution ended. (FAILED, COMPLETED, or
            CANCELED)', example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time,
          type: string}
        error: {$ref: ./error.yml#/components/schemas/error_base, description: The
            last error that was recorded for the execution.}
        exe_num: {description: The unique job execution number for the job identifer.,
          example: 1, type: integer}
        id: {description: The unique identifier of the model. Can be passed to the
            details API call., example: 10, type: integer}
        job: {$ref: '#/components/schemas/job_base', description: The job that is
            associated with the execution.}
        job_type: {$ref: ./job_type.yml#/components/schemas/job_type_base, description: The
            job type that is associated with the execution.}
        node: {$ref: ./node.yml#/components/schemas/node_base, description: The node
            that ran the execution.}
        queued: {description: When the job was added to the queue for this run and
            went to QUEUED status., example: !!timestamp '2015-09-10 15:24:53.987000',
          format: date-time, type: string}
        started: {description: When the job was scheduled and went to RUNNING status.,
          example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time, type: string}
        status: {description: 'The status of the job execution. (RUNNING,FAILED,COMPLETED,CANCELED)',
          example: RUNNING, type: string}
      title: Job Execution Base
      type: object
    job_execution_count:
      properties:
        by_job_type:
          items: {$ref: '#/components/schemas/job_type_execution_count'}
          type: array
        total: {example: 3, type: integer}
      title: Job Execution Count
      type: object
    job_execution_details:
      allof:
      - {$ref: '#/components/schemas/job_execution'}
      - properties:
          configuration: {$ref: '#/components/schemas/exe_config', description: JSON
              description of the configuration for running the job}
          output: {$ref: '#/components/schemas/exe_output', description: JSON description
              of the job output.}
          resources: {$ref: '#/components/schemas/resources_wrapper', description: JSON
              description describing the resources allocated to this execution.}
          task_results: {$ref: '#/components/schemas/exe_task_results', description: JSON
              description of the task results for this execution.}
        type: object
      title: Job Execution Details
    job_execution_list:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of Job Execution objects
          items: {$ref: '#/components/schemas/job_execution'}
          type: array
      title: Job Execution List
      type: object
    job_execution_log:
      properties:
        message: {description: The log message, example: INFO - Starting job execution,
          type: string}
        scale_job_exe: {description: The unique cluster ID of the Scale job execution
            that produced this log message, example: scale_job_1234_263x0, type: string}
        scale_node: {description: The host name of the Scale node that executed the
            Scale task, example: machine.com, type: string}
        scale_order_num: {description: A sequence number used to indicate correct
            log message order when multiple messages share the same @timestamp value.,
          example: 1, type: integer}
        scale_task: {description: The ID of the Scale task that produced this log
            message., example: 123, type: integer}
        stream: {description: "Indicates which stream produced the log message, either\
            \ \u201Cstdout\u201D or \u201Cstderr\u201D", example: stdout, type: string}
        timestamp: {description: The ISO-8601 timestamp marking when the message was
            logged., example: !!timestamp '2015-08-28 17:57:41.033000', format: date-time,
          type: string}
      title: Job Execution Log
      type: object
    job_executions:
      description: The job executions related to this node. The *running* field describes
        the jobs currently running on the node, with a total count and count per job
        type. The *completed* field describes job executions that have completed on
        the node in the last 3 hours, with a total count and count per job type. The
        *failed* field is similar to *completed*, just with failed executions grouped
        by error category.
      properties:
        completed: {$ref: '#/components/schemas/job_execution'}
        failed: {$ref: '#/components/schemas/job_execution'}
        running: {$ref: '#/components/schemas/job_execution'}
      title: Job Executions
      type: object
    job_list:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of Job objects
          items: {$ref: '#/components/schemas/job'}
          type: array
      title: Job List
      type: object
    job_requeue_post:
      allof:
      - {$ref: '#/components/schemas/job_cancel_post'}
      - properties:
          priority: {description: Change the priority of matching jobs when adding
              them to the queue. Defaults to jobs current priority; lower number is
              higher priority., type: integer}
        type: object
      title: Requeue Jobs Post
    job_type:
      properties:
        description: {example: My Job Description, type: string}
        icon_code: {example: f186, type: string}
        id: {example: 1, type: integer}
        is_system: {example: false, type: boolean}
        name: {example: my-job, type: string}
        title: {example: My Job, type: string}
        version: {example: 1.0, type: string}
      title: Job Type
      type: object
    job_type_base:
      properties:
        description: {example: My Job Description, type: string}
        icon_code: {example: f186, type: string}
        id: {example: 1, type: integer}
        name: {example: my-job, type: string}
        title: {example: My Job, type: string}
      title: Job Type Base
      type: object
    job_type_config:
      properties:
        mounts:
          additionalProperties:
            oneOf:
            - {$ref: '#/components/schemas/host_mount'}
            - {$ref: '#/components/schemas/volume_mount'}
          type: object
        output_workspaces:
          items: {$ref: '#/components/schemas/output_workspace'}
          type: array
        priority: {description: The priority to use for scheduling the job off of
            the queue. Jobs with a lower value will be processed before those with
            higher values, example: 100, type: integer}
        settings:
          additionalProperties: {type: string}
          description: "A JSON object representing the configuration for each setting\
            \ to provide to the job. Each key is the name of a setting defined in\
            \ the job\u2019s Seed manifest and each value is the value to provide\
            \ for that setting."
          type: object
        version: {description: 'The version is an optional string value that defines
            the version of the configuration used. This allows updates to be made
            to the specification while maintaining backwards compatibility by allowing
            Scale to recognize an older version and convert it to the current version.
            The default value for version if it is not included is the latest version,
            which is currently 6. It is recommended, though not required, that you
            include the version so that future changes to the specification will still
            accept your configuration.', example: 6, type: string}
      title: Job Type Configuration
      type: object
    job_type_detail:
      allof:
      - {ref: '#/components/schemas/job_type'}
      - properties:
          configuration: {$ref: '#/components/schemas/job_type_config'}
        type: object
      title: Job Type Details
    job_type_details:
      properties:
        author_name: {description: The name of the person or organization that created
            the job algorithm., example: null, type: string}
        author_url: {description: The address to a home page about the author or associated
            algorithm., example: null, type: string}
        category: {description: An optional overall category of the job type., example: footprint,
          type: string}
        description: {description: Extended description of the Job Type, example: Creates
            a KML file, type: string}
        icon_code: {description: A font-awesome icon code to use when representing
            this job type., example: f0ac, type: string}
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
        is_active: {description: Whether the job type is active (false once job type
            is archived)., example: true, type: boolean}
        is_long_running: {description: 'Whether this type is long running. A job of
            this type is intended to run for a long time, potentially indefinitely,
            without timing out and always being re-queued after a failure.', example: false,
          type: boolean}
        is_operational: {description: Whether this job type is operational (True)
            or is still in a research & development (R&D) phase (False)., example: true,
          type: boolean}
        is_paused: {description: Whether the job type is paused (while paused no jobs
            of this type will be scheduled off of the queue)., example: false, type: boolean}
        is_system: {description: Whether this is a system type., example: false, type: boolean}
        name: {description: The name of the job type., example: kml-footprint, type: string}
        title: {description: Human readable display name of the Job Type, example: KML
            Footprint, type: string}
        version: {description: Version of the Job Type, example: 1.0.0, type: string}
      required: [id]
      title: Job Type
      type: object
    job_type_execution_count:
      properties:
        count: {example: 3, type: integer}
        job_type_id: {example: 1, type: integer}
      title: Job Execution Count
      type: object
    job_type_list:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of Job Type objects
          items: {$ref: '#/components/schemas/job_type_name'}
          type: array
      title: Job Type List
      type: object
    job_type_name:
      properties:
        description: {example: My Job Description, type: string}
        icon_code: {example: f186, type: string}
        latest_version: {example: 1.1.0, type: string}
        name: {example: my-job, type: string}
        num_versions: {example: 1, type: integer}
        title: {example: My Job, type: string}
      title: Job Type Name
      type: object
    job_type_post:
      properties:
        configuration: {$ref: '#/components/schemas/job_type_config'}
        docker_image: {example: 'my-job-1.0.0-seed:1.0.0', type: string}
        icon_code: {example: f186, type: string}
        max_scheduled: {example: 1, type: integer}
      required: [docker_image, manifest]
      title: Job Type Create/Edit
      type: object
    job_type_revision:
      allof:
      - {ref: '#/components/schemas/job_type_revision_base'}
      - created: {description: When the associated database model was initially created.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        docker_image: {example: 'my-job-1.0.0-seed:1.0.0', type: string}
        job_type: {$ref: '#/components/schemas/job_type_base'}
        properties: null
        type: object
      title: Job Type Revision
    job_type_revision_base:
      properties:
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
        job_type: {$ref: '#/components/schemas/model'}
        revision_num: {example: 1, type: integer}
      title: Job Type Revision Base
      type: object
    job_type_revision_detail:
      properties:
        created: {description: When the associated database model was initially created.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        docker_image: {example: 'my-job-1.0.0-seed:1.0.0', type: string}
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
        job_type: {$ref: '#/components/schemas/job_type_name'}
        revision_num: {example: 1, type: integer}
      title: Job Type Revision Details
      type: object
    job_type_revisions:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of Job Type Revisions
          items: {$ref: '#/components/schemas/job_type_revision'}
          type: array
      title: Job Type Revision List
      type: object
    job_type_update:
      properties:
        configuration: {$ref: '#/components/schemas/job_type_config'}
        icon_code: {example: f186, type: string}
        is_active: {example: true, type: boolean}
        is_paused: {example: false, type: boolean}
        max_scheduled: {example: 1, type: integer}
      title: Job Type Update
      type: object
    job_type_validation:
      properties:
        is_valid: {description: The job type is valid, example: true, type: boolean}
        validation_error: {$ref: '#/components/schemas/validation_error', type: array}
        validation_warning: {$ref: '#/components/schemas/validation_warning', type: array}
      title: Job Type Validation
      type: object
    job_type_validation_post:
      properties:
        configuration: {$ref: '#/components/schemas/job_type_config'}
      required: [manifest]
      title: Job Type Validation Post
      type: object
    job_type_versions:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of Job Type objects
          items: {$ref: '#/components/schemas/job_type'}
          type: array
      title: Job Type Versions
      type: object
    mesos:
      description: Contains Scale's framework ID and hostname and port of the Mesos
        master
      properties:
        framework_id: {description: Mesos master framework ID, example: framework-1234,
          type: string}
        master_hostname: {description: Mesos master hostname, example: 192.168.1.1,
          type: string}
        master_port: {description: Mesos master port number, example: 5050, type: number}
      title: Mesos
      type: object
    metrics:
      description: Contains various near real-time metrics related to scheudling tasks
        and jobs
      properties:
        jobs_finished_per_sec: {description: number of task updates per second, example: 0.0,
          type: number}
        jobs_launched_per_sec: {description: number of task updates per second, example: 0.0,
          type: number}
        offers_launched_per_sec: {description: number of task updates per second,
          example: 0.0, type: number}
        task_updates_per_sec: {description: number of task updates per second, example: 0.0,
          type: number}
        tasks_finished_per_sec: {description: number of task updates per second, example: 0.0,
          type: number}
        tasks_launched_per_sec: {description: number of task updates per second, example: 0.0,
          type: number}
      title: Metrics
      type: object
    metrics_list:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of metrics type objects, with a few basic fields
          items: {$ref: '#/components/schemas/metrics_type'}
          type: array
      title: Metrics List
      type: object
    metrics_plot:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of plot results
          items: {$ref: '#/components/schemas/plot_result'}
          type: array
      title: Metrics Plot Data
      type: object
    metrics_type:
      properties:
        columns:
          description: The column definitions that can be used to select the results
            returned
          items: {$ref: '#/components/schemas/column'}
          type: array
        description: {description: A longer description of the metrics type, example: Metrics
            for jobs and executions grouped by job type, type: string}
        filters:
          description: The filter parameters that can be used to query the metrics
            type
          items: {$ref: '#/components/schemas/filter'}
          type: array
        groups:
          description: The group definitions that can be used to select the results
            returned
          items: {$ref: '#/components/schemas/group'}
          type: array
        name: {description: The identifying name of the metrics type used for queries,
          example: job-types, type: string}
        title: {description: The human readable display name of the metrics type,
          example: Job Types, type: string}
      title: Metrics Type
      type: object
    metrics_type_plus_model:
      properties:
        choices:
          description: The related model choices that can be used to filter the metrics
            records. All of the filter parameters described above are fields within
            the model. The list of choices allow clients to restrict filtering to
            only valid combinations. Each choice model is specific to a metrics type
            and so the actual fields vary.
          items: {$ref: '#/components/schemas/choice'}
          type: array
        columns:
          description: The column definitions that can be used to select the results
            returned
          items: {$ref: '#/components/schemas/column'}
          type: array
        description: {description: A longer description of the metrics type, example: Metrics
            for jobs and executions grouped by job type, type: string}
        filters:
          description: The filter parameters that can be used to query the metrics
            type
          items: {$ref: '#/components/schemas/filter'}
          type: array
        name: {description: The identifying name of the metrics type used for queries,
          example: job-types, type: string}
        title: {description: The human readable display name of the metrics type,
          example: Job Types, type: string}
      title: Metrics Type and Model
      type: object
    model:
      properties:
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
      title: Model
      type: object
    nfs_broker:
      allOf:
      - {$ref: '#/components/schemas/broker'}
      properties:
        nfs_path: {description: 'The nfs_path is a required string that specifies
            the remote NFS path to use for storing and retrieving the workspace files.
            It should be in the format host:/path.', example: 'host:/my/path', type: string}
      required: [nfs_path]
      title: NFS Broker
      type: object
    node:
      properties:
        agent_id: {example: my-agent, type: string}
        errors:
          description: List of node error objects, with a title, description, and
            when the error began and was last updated
          items: {$ref: '#/components/schemas/error'}
          type: array
        hostname: {example: my-host, type: string}
        id: {example: 1, type: integer}
        is_active: {example: true, type: boolean}
        job_executions: {$ref: '#/components/schemas/job_executions'}
        node_tasks:
          description: List of node tasks running on the node, with a type, title,
            description, and count
          items: {$ref: '#/components/schemas/node_task'}
          type: array
        num_offers: {description: Number of resource offers for this node, example: 1,
          type: integer}
        resources: {$ref: '#/components/schemas/resources'}
        state: {$ref: '#/components/schemas/state'}
        system_tasks:
          description: List of node tasks running on the node, with a type, title,
            description, and count
          items: {$ref: '#/components/schemas/system_task'}
          type: array
        warnings:
          description: List of node warning objects, with a title, description, and
            when the warning began and was last updated
          items: {$ref: '#/components/schemas/warning'}
          type: array
      title: Node
      type: object
    node_base:
      properties:
        host_name: {description: The full domain-qualified hostname of the node, example: host.com,
          type: string}
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
      title: Node Base
      type: object
    node_list:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of node objects
          items: {$ref: '#/components/schemas/node_object'}
          type: array
      title: Node List
      type: object
    node_object:
      allof:
      - {ref: '#/components/schemas/node_base'}
      - properties:
          created: {description: When the associated database model was initially
              created., format: date-time, type: string}
          deprecated: {description: When the node was removed (is_active == False)
              from the cluster., format: date-time, type: string}
          is_active: {description: True if the node is actively participating in the
              cluster., example: true, type: boolean}
          is_paused: {description: True if the node is paused and will not accept
              new jobs for execution. Remaining tasks for a previously executing job
              will complete., example: false, type: boolean}
          last_modified: {description: When the associated database model was last
              saved., format: date-time, type: string}
          pause_reason: {description: The reason this node is paused if is_paused
              is true. This is a descriptive field for presentation to the user, example: Node
              is undergoing scheduled maintenance, type: string}
        type: object
      title: Node
    node_task:
      properties:
        count: {description: Number of tasks of this type, example: 1, type: integer}
        description: {example: Performs Docker container and volume cleanup on the
            node, type: string}
        title: {example: Node cleanup, type: string}
        type: {example: cleanup, type: string}
      title: Node Task
      type: object
    node_update:
      properties:
        is_active: {description: True if the node is actively participating in the
            cluster., example: true, type: string}
        is_paused: {description: True if the node is paused and will not accept new
            jobs for execution. Remaining tasks for a previously executing job will
            complete., example: false, type: boolean}
        pause_reason: {description: The reason this node is paused if is_paused is
            true. This is a descriptive field for presentation to the user, example: Node
            is undergoing scheduled maintenance, type: string}
      title: Node Update
      type: object
    number:
      properties:
        num: {description: Number of jobs to queues, example: 100, type: integer}
      title: Number
      type: object
    output_file:
      properties:
        file_id: {description: Unique ID of the file in the Scale system, type: integer}
        name: {description: Name of the output file, type: string}
      title: Output File
      type: object
    output_workspace:
      properties:
        default: {description: "The unique name of the default workspace to use for\
            \ storing any output files that don\u2019t belong to an output configured\
            \ in 'outputs'.", type: string}
        outputs:
          additionalPropterties: {type: string}
          description: "A JSON object representing the workspaces to use for storing\
            \ the job\u2019s output files for specific job file outputs. Each key\
            \ is the name of a file output defined in the job\u2019s Seed manifest\
            \ and each value is the unique name of the workspace to use."
          type: object
      title: Output Workspace configuration
      type: object
    plot_result:
      properties:
        column:
          description: The column definition of the selected plot data values
          items: {$ref: '#/components/schemas/column'}
          type: array
        max_x: {description: The maximum value within the x-axis for the metric column.,
          format: date-time, type: string}
        max_y: {description: The maximum value within the y-axis for the metric column.,
          type: integer}
        min_x: {description: The minimum value within the x-axis for the metric column.,
          format: date-time, type: string}
        min_y: {description: The minimum value within the y-axis for the metric column.,
          type: integer}
        values:
          description: List of plot value JSON objects for each choice and date in
            the data series. Note that the values are sorted oldest to newest.
          items: {$ref: '#/components/schemas/value'}
          type: array
      title: Plot Result
      type: object
    recipe:
      properties:
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
      required: [id]
      title: Recipe
      type: object
    recipe_type:
      properties:
        description: {description: Extended description of the Recipe Type, example: Processes
            some data, type: string}
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
        name: {description: The name of the Recipe type., example: my-recipe, type: string}
        revision_num: {description: 'The current revision number of the recipe type,
            incremented for each edit.', example: 1, type: integer}
        title: {description: Human readable display name of the Recipe Type, example: My
            Recipe, type: string}
      title: Recipe Type
      type: object
    resource:
      properties:
        free: {example: 72744.0, type: number}
        offered: {example: 91445.0, type: number}
        running: {example: 1024.0, type: number}
        total: {example: 177501.0, type: number}
        unavailable: {example: 12288.0, type: number}
      title: Resource
      type: object
    resources:
      description: Describes the resource totals across all of Scale's nodes. Each
        resource name is a key and its corresponding object breaks down the resource
        into several categories. *running* resources are used by current Scale tasks,
        *offered* resources are currently offered to Scale, *free* resources are available
        on the node and may be offered to Scale soon, *unavailable* resources are
        used by other tasks and cannot be used by Scale, and *total* resources are
        the total amounts for the node.
      properties:
        cpus: {$ref: '#/components/schemas/resource'}
        disk: {$ref: '#/components/schemas/resource'}
        gpus: {$ref: '#/components/schemas/resource'}
        mem: {$ref: '#/components/schemas/resource'}
      title: Resources
      type: object
    resources_obj:
      additionalProperties: {type: string}
      title: Resources Object
      type: object
    resources_wrapper:
      properties:
        resources:
          additionalProperties: {type: string}
          type: object
      title: Resources Wrapper
      type: object
    s3_broker:
      allOf:
      - {$ref: '#/components/schemas/broker'}
      properties:
        bucket_name: {description: Specifies the globally unique name of a storage
            bucket within S3. The bucket should be created before attempting to use
            it here., example: my_bucket.domain.com, type: string}
        credentials: {$ref: '#/components/schemas/credentials'}
        host_path: {description: 'The host_path is an optional string that adds S3
            workspace support for locally mounted buckets and partial file read-only
            access. If a FUSE file system (such as s3fs or goofys) mounts the S3 bucket
            at the host_path location on all nodes, an alternative to downloading
            large files is available to jobs that use only portions of a file. The
            job interface must indicate partial equal to true for any input files
            to take advantage of host_path. Only read operations are performed using
            the mount, all write operations will use the S3 REST API.', example: /my_bucket,
          type: string}
        region_name: {description: 'The region_name is an optional string that specifies
            the AWS region where the SQS Queue is located. This is not always required,
            as environment variables or configuration files could set the default
            region, but it is a highly recommended setting for explicitly indicating
            the SQS region.', example: us-east-1, type: string}
      required: [bucket_name]
      title: S3 Broker
      type: object
    s3_monitor:
      properties:
        region_name: {description: 'The region_name is an optional string that specifies
            the AWS region where the SQS Queue is located. This is not always required,
            as environment variables or configuration files could set the default
            region, but it is a highly recommended setting for explicitly indicating
            the SQS region.', example: us-east-1, type: string}
        sqs_name: {description: The sqs_name field is a required string that defines
            the name of the SQS queue that should be polled for object creation notifications
            that describe new files in the S3 bucket., example: my-sqs, type: string}
        type: {description: The type is a required string that specifies the type
            of monitor to use. The other fields that configure the monitor are based
            upon the type of the monitor in the type field. Certain monitor types
            may only be used on workspaces with corresponding broker types. The valid
            monitor types are dir-watcher and s3, example: dir-watcher, type: string}
      required: [type, sqs_name]
      title: S3 Monitor
      type: object
    scan:
      properties:
        configuration: {$ref: '#/components/schemas/scan_config'}
        created: {description: When the associated database model was initially created.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        description: {description: A longer description of the Scan process., example: This
            is my Scan process for detecting my favorite files!, type: string}
        dry_run_job: {$ref: '#/components/schemas/job'}
        file_count: {description: The unique identifier of the model. Can be passed
            to the details API call, example: 4, type: integer}
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
        job: {$ref: '#/components/schemas/job'}
        last_modified: {description: When the associated database model was last saved.,
          example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time, type: string}
        name: {description: The identifying name of the Scan process used for queries.,
          example: my-scan-process, type: string}
        title: {description: The human readable display name of the Scan process.,
          example: My Scan Process, type: string}
      title: Scan Details
      type: object
    scan_base:
      properties:
        created: {description: When the associated database model was initially created.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        description: {description: A longer description of the Scan process., example: This
            is my Scan process for detecting my favorite files!, type: string}
        dry_run_job: {$ref: '#/components/schemas/job_base'}
        file_count: {description: Count of files identified from last scan operation
            (either dry run or ingest), example: 50, type: integer}
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
        job: {$ref: '#/components/schemas/job_base'}
        last_modified: {description: When the associated database model was last saved.,
          example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time, type: string}
        name: {description: The identifying name of the Scan process used for queries.,
          example: my-scan-process, type: string}
        title: {description: The human readable display name of the Scan process.,
          example: My Scan Process, type: string}
      title: Scan Base
      type: object
    scan_config:
      properties:
        files_to_ingest:
          description: List of ingest objects
          items: {$ref: '#/components/schemas/ingest_file'}
          type: array
        recursive: {description: 'Indicates whether a scanner should be limited to
            the root of a workspace or traverse the entire tree. If ommitted, the
            default is true for full tree recursion.', type: boolean}
        scanner: {$ref: '#/components/schemas/scanner'}
        workspace: {description: The workspace field is a required string that specifies
            the name of the workspace that is being scanned. The type of the workspace
            (its broker type) will determine which types of monitor can be used.,
          example: my-host-workspace, type: string}
      title: Scan Configuration
      type: object
    scan_details:
      allof:
      - {ref: '#/components/schemas/scan_base'}
      - {title: Scan Details}
      - properties:
          configuration: {$ref: '#/components/schemas/scan_config'}
        type: object
    scan_list:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of scan process objects
          items: {$ref: '#/components/schemas/scan_base'}
          type: array
      title: Scan List
      type: object
    scan_post:
      properties:
        configuration: {$ref: '#/components/schemas/scan_config'}
        description: {description: A longer description of the Scan process., example: This
            is my Scan process for detecting my favorite files!, type: string}
        title: {description: The human readable display name of the Scan process.
            This will be used to generate the name field, example: My Scan Process,
          type: string}
      title: Scan Post
      type: object
    scan_process:
      properties:
        ingest: {description: Whether a dry run or ingest triggering scan should be
            run. Defaults to false when unset., example: true, type: boolean}
      title: Scan Process
      type: object
    scanner:
      properties:
        transfer_suffix: {description: The transfer_suffix field is an optional string
            that defines a suffix that is used on the file names to indicate that
            files are still transferring and have not yet finished being copied into
            the scanned directory. Only used with dir scanners., example: _tmp, type: string}
        type: {description: The type is a required string that specifies the type
            of the scanner to use. The other fields that configure the scanner are
            based upon the type of the scanner in the type field. Certain scanner
            types may only be used on workspaces with corresponding broker types.
            The valid scanner types are dir and s3, example: dir, type: string}
      required: [type]
      title: Scanner
      type: object
    scheduler:
      description: Scheduler configuration and metrics information
      properties:
        hostname: {description: The name of the host where the scheduler is running,
          example: scheduler-host.com, type: string}
        mesos: {$ref: '#/components/schemas/mesos'}
        metrics: {$ref: '#/components/schemas/metrics'}
        state: {$ref: '#/components/schemas/state'}
      title: Scheduler
      type: object
    scheduler_data:
      properties:
        is_paused: {description: True if the scheduler is paused. This functions like
            individually pausing all nodes but maintains separated state so toggling
            this back to unpaused results in the previous individual node pause state.,
          example: false, type: boolean}
        num_message_handlers: {description: The number of message handlers to have
            scheduled, example: 2, type: integer}
        system_logging_level: {description: The logging level for all scale system
            components, example: INFO, type: string}
      title: System Scheduler data
      type: object
    service:
      properties:
        actual_count: {example: 1, type: integer}
        description: {example: Processes the backend messaging system, type: string}
        desired_count: {example: 1, type: integer}
        name: {example: messaging, type: string}
        title: {example: Messaging, type: string}
      title: Service
      type: object
    source_file:
      properties:
        center_point: {description: The central geospatial location of the source
            file., example: POINT(11 -11), type: string}
        countries:
          description: A list of zero or more strings with the ISO3 country codes
            for countries contained in the geographic boundary of this file.
          items: {type: string}
          style: simple
          type: array
        created: {description: When the associated database model was initially created.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        data_ended: {description: When collection of the underlying data file ended.,
          example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time, type: string}
        data_started: {description: When collection of the underlying data file started.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        data_type:
          description: A list of string data type "tags" for the file.
          items: {type: string}
          style: simple
          type: array
        deleted: {description: When the source file was deleted., example: !!timestamp '2015-09-10
            15:24:53.987000', format: date-time, type: string}
        file_name: {description: The name of the source file., example: my_file.kml,
          type: string}
        file_size: {description: The size of the file in bytes., example: 1234, type: integer}
        geometry: {description: The full geospatial geometry footprint of the source
            file. (WKT format), example: 'POLYGON((11 -11,22 -22,33 -33,44 -44))',
          type: string}
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
        is_deleted: {description: Whether the source file has been deleted., example: true,
          type: boolean}
        is_parsed: {description: Whether this source file was successfully parsed
            and ingested into the system., example: true, type: boolean}
        last_modified: {description: When the associated database model was last saved.,
          example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time, type: string}
        media_type: {description: The IANA media type of the source file., example: application/vnd.google-earth.kml+xml,
          type: string}
        parsed: {description: When the source file was originally parsed by Scale.,
          example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time, type: string}
        url: {description: The absolute URL to use for downloading the file., example: 'http://host.com/file/path/my_file.kml',
          format: uri, type: string}
        uuid: {description: A unique identifier that stays stable across multiple
            job execution runs., example: c8928d9183fc99122948e7840ec9a0fd, type: string}
        workspace: {$ref: '#/components/schemas/workspace_base'}
      required: [id, secret_access_key]
      title: Source File
      type: object
    state:
      description: The current scheduler state, with a title and description
      properties:
        description: {description: Scheduler state description, example: Scheduler
            is ready to run new jobs., type: string}
        name: {description: Scheduler state name, example: READY, type: string}
        title: {description: Scheduler state title, example: Ready, type: string}
      title: State
      type: object
    status:
      properties:
        job_types:
          description: List of job type objects, with a few basic fields
          items: {$ref: '#/components/schemas/job_type'}
          type: array
        nodes:
          description: List of node objects, with a few basic fields including the
            current node state
          items: {$ref: '#/components/schemas/node'}
          type: array
        num_offers: {description: Number of resource offers currently held by Scale,
          example: 4, type: integer}
        resources: {$ref: '#/components/schemas/resources'}
        scheduler: {$ref: '#/components/schemas/scheduler'}
        system: {$ref: '#/components/schemas/system'}
        timestamp: {description: When the status information was generated (in ISO-8601
            Datetime), example: !!timestamp '1970-01-01 00:00:00', format: date-time,
          type: string}
      title: System Status response
      type: object
    strike_base:
      properties:
        created: {description: When the associated database model was initially created.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        description: {description: A longer description of the Strike process., example: This
            is my Strike process for detecting my favorite files!, type: string}
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
        job: {$ref: '#/components/schemas/job_base'}
        last_modified: {description: When the associated database model was last saved.,
          example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time, type: string}
        name: {description: The identifying name of the Strike process used for queries.,
          example: my-strike-process, type: string}
        title: {description: The human readable display name of the Strike process.,
          example: My Strike Process, type: string}
      title: Strike Base
      type: object
    strike_config:
      properties:
        files_to_ingest:
          description: List of ingest objects
          items: {$ref: '#/components/schemas/ingest_file'}
          type: array
        monitor:
          oneOf:
          - {$ref: '#/components/schemas/dir_monitor'}
          - {$ref: '#/components/schemas/s3_monitor'}
        workspace: {description: The workspace field is a required string that specifies
            the name of the workspace that is being scanned. The type of the workspace
            (its broker type) will determine which types of monitor can be used.,
          example: my-host-workspace, type: string}
      title: Strike Configuration
      type: object
    strike_details:
      allof:
      - {ref: '#/components/schemas/strike_base'}
      - {title: Strike Details}
      - properties:
          configuration: {$ref: '#/components/schemas/strike_config'}
        type: object
    strike_list:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of strike process objects
          items: {$ref: '#/components/schemas/strike_base'}
          type: array
      title: Strike List
      type: object
    strike_post:
      properties:
        configuration: {$ref: '#/components/schemas/strike_config'}
        description: {description: A longer description of the Strike process., example: This
            is my Strike process for detecting my favorite files!, type: string}
        title: {description: The human readable display name of the Strike process.
            This will be used to generate the name field, example: My Strike Process,
          type: string}
      title: Strike Post
      type: object
    system:
      description: System information
      properties:
        database_update: {$ref: '#/components/schemas/database_update'}
        services:
          description: List of services, with name, title, description, and task counts
          items: {$ref: '#/components/schemas/service'}
          type: array
      title: System
      type: object
    system_task:
      properties:
        count: {description: Number of tasks of this type, example: 1, type: integer}
        description: {example: Processes messages from Scale's backend messaging system,
          type: string}
        title: {example: Message Handler, type: string}
        type: {example: message-handler, type: string}
      title: System Task
      type: object
    task:
      properties:
        args: {description: command arguments that will be passed to the task, type: string}
        docker_params:
          description: Objects that describe each Docker parameter to pass to the
            container
          items: {$ref: '#/components/schemas/docker_param'}
          type: array
        env_vars:
          additionalProperties: {type: string}
          description: optional object where each key is the name of an environment
            variable and each corresponding value is the value passed to that environment
            variable
          type: object
        mounts:
          additionalProperties: {type: string}
          description: Optional object where each key is the name of a mount variable
            and each corresponding value is the name of the docker volume that will
            be mounted into the task's container. A null value indicates a required
            mount that was not provided.
          type: object
        resources: {$ref: '#/components/schemas/resources_obj'}
        settings:
          additionalProperties: {type: string}
          description: optional object where each key is the name of a setting variable
            and each corresponding value is the value passed to that setting. A null
            value indicates a required setting that was not provided.
          type: object
        task_id: {type: integer}
        type: {description: "type of the task (\u201Cpull\u201D, \u201Cpre\u201D,\
            \ \u201Cmain\u201D, or \u201Cpost\u201D)", type: string}
        volumes:
          additionalProperties: {$ref: '#/components/schemas/task_volume'}
          description: Optional object where each key is the name of a Docker volume
            being mounted into the task.
          type: object
        workspaces:
          additionalProperties: {$ref: '#/components/schemas/task_workspace'}
          type: object
      title: Task
      type: object
    task_volume:
      properties:
        additionalPropterties: {type: string}
        driver: {description: "Custom Docker volume driver to use for the volume.\
            \ This field should only be specified when type is \u201Cvolume\u201D.",
          type: string}
        driver_opts: {description: "Name and value of a Docker volume driver argument\
            \ option that should be passed to the volume driver. This field should\
            \ only be specified when type is \u201Cvolume\u201D.", type: object}
        host_path: {description: "The path on the host machine that should be mounted\
            \ into the container. This field should only be specified when type is\
            \ \u201Chost\u201D.", type: string}
        mode: {description: "Mode to use for mounting the volume. There are two valid\
            \ values: \u201Cro\u201D for read-only mode and \u201Crw\u201D for read-write\
            \ mode.", type: string}
        type: {description: "The type of the volume: \u201Cvolume\u201D for normal\
            \ Docker volume mounts and \u201Chost\u201D for Docker host path mounts.",
          type: string}
      required: [type, mode]
      title: Task Volume
      type: object
    task_workspace:
      properties:
        mode: {description: "Mode to use for the workspace. There are two valid values:\
            \ \u201Cro\u201D for read-only mode and \u201Crw\u201D for read-write\
            \ mode.", type: string}
        volume_name: {description: "The name of Docker volume that will be mounted\
            \ into the task\u2019s container in order to make the workspace available.",
          type: string}
      required: [mode]
      title: Task Workspace
      type: object
    validation:
      properties:
        errors:
          items: {$ref: '#/components/schemas/validation_error'}
          type: array
        is_valid: {description: The given element is valid, example: true, type: boolean}
        warnings:
          items: {$ref: '#/components/schemas/validation_warning'}
          type: array
      title: Validation
      type: object
    validation_error:
      properties:
        description: {description: A description of the validation error, type: string}
        name: {description: The name of the error, type: string}
      title: Validation Error
      type: object
    validation_warning:
      properties:
        description: {description: A description of the warning, type: string}
        name: {description: The name of the warning, type: string}
      title: Validation Warning
      type: object
    value:
      properties:
        date: {description: The date when the plot value occurred., format: date-time,
          type: string}
        id: {description: The unique identifier of the related choice model for this
            data value. This field is omitted when there are no choice filters or
            only 1 specified., type: integer}
        value: {description: The statistic value that was calculated for the date.,
          type: integer}
      title: Plot Value
      type: object
    version:
      properties:
        version: {description: The full version identifier of Scale., example: 6.0.0,
          type: string}
      title: System Version response
      type: object
    volume_mount:
      properties:
        driver: {type: string}
        driver_opts:
          additionalPropterties: {type: string}
          type: object
        type: {type: string}
      required: [type]
      title: Volume Mount
      type: object
    warning:
      properties:
        description: {example: My Warning Description, type: string}
        last_updated: {description: When the warning was last updated (in ISO-8601
            Datetime), example: !!timestamp '1970-01-01 00:00:00', format: date-time,
          type: string}
        name: {example: my-warning, type: string}
        started: {description: When the warning began (in ISO-8601 Datetime), example: !!timestamp '1970-01-01
            00:00:00', format: date-time, type: string}
        title: {example: My Warning, type: string}
      title: Warning
      type: object
    workspace_base:
      properties:
        archived: {description: When the associated database model was archived.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        base_url: {description: The URL prefix used to access all files within the
            workspace. This field can be null if the workspace is not web-accessible.,
          example: 'http://host.com/rs', type: string}
        created: {description: When the associated database model was initially created.,
          example: !!timestamp '2015-09-10 15:24:53.503000', format: date-time, type: string}
        description: {description: A longer description of the workspace., example: Raw
            Source Workspace, type: string}
        id: {description: The unique identifier of the model. Can be passed to the
            details API call, example: 4, type: integer}
        is_active: {description: Whether the workspace is active (false once workspace
            is archived)., example: true, type: boolean}
        last_modified: {description: When the associated database model was last saved.,
          example: !!timestamp '2015-09-10 15:24:53.987000', format: date-time, type: string}
        name: {description: The identifying name of the workspace used for queries.,
          example: raw-source, type: string}
        title: {description: The human readable display name of the workspace., example: Raw
            Source, type: string}
      title: Workspace Base
      type: object
    workspace_config:
      properties:
        broker:
          oneOf:
          - {$ref: '#/components/schemas/host_broker'}
          - {$ref: '#/components/schemas/nfs_broker'}
          - {$ref: '#/components/schemas/s3_broker'}
        version: {description: 'The version is an optional string value that defines
            the version of the configuration used. This allows updates to be made
            to the specification while maintaining backwards compatibility by allowing
            Scale to recognize an older version and convert it to the current version.
            The default value for version if it is not included is the latest version,
            which is currently 1.0. It is recommended, though not required, that you
            include the version so that future changes to the specification will still
            accept your workspace configuration.', example: 1.0, type: string}
      required: [broker]
      title: Workspace Configuration
      type: object
    workspace_details:
      allof:
      - {$ref: '#/components/schemas/workspace_base'}
      - {title: Workspace Details}
      - properties:
          configuration: {$ref: '#/components/schemas/workspace_config'}
        type: object
    workspace_list:
      properties:
        count: {description: The total number of results that match the query parameters,
          example: 10, type: integer}
        next: {description: A URL to the next page of results., example: null, format: uri,
          type: string}
        previous: {description: A URL to the previous page of results., example: null,
          format: uri, type: string}
        results:
          description: List of workspace objects
          items: {$ref: '#/components/schemas/workspace_base'}
          type: array
      title: Workspace List
      type: object
    workspace_post:
      properties:
        base_url: {description: The URL prefix used to access all files within the
            workspace. This field can be null if the workspace is not web-accessible.,
          example: 'http://host.com/rs', type: string}
        configuration: {$ref: '#/components/schemas/workspace_config'}
        description: {description: A longer description of the workspace, example: Raw
            source workspace, type: string}
        is_active: {description: Whether the workspace is active (false once workspace
            is archived)., example: true, type: boolean}
        name: {description: The identifying name of the workspace used for queries.
            Used for validation of changes to existing workspace, example: raw-source,
          type: string}
        title: {description: The human readable display name of the workspace. This
            will be used to generate the name field, example: Raw Source, type: string}
      title: Workspace Post
      type: object
paths:
  /diagnostics/job/bake/:
    post:
      description: Creates and queues a specified number of Scale Bake jobs. Scale
        Bake jobs wait for 15 minutes and then complete, allowing a simulation of
        jobs that take some amount of time to complete.
      operationId: _rest_v6_queue_scale_bake_jobs
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/number'}
        required: true
      responses: {'202': 'description:- The 202 ACCEPTED response indicates a successful
          request'}
      summary: Queue Scale Bake Jobs
  /diagnostics/job/hello/:
    post:
      description: Creates and queues a specified number of Scale Hello jobs. Scale
        Hello jobs simply print out a hello message and are useful for testing and
        evaluating Scale's job throughput performance.
      operationId: _rest_v6_queue_scale_hello_jobs
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/number'}
        required: true
      responses: {'202': 'description:- The 202 ACCEPTED response indicates a successful
          request'}
      summary: Queue Scale Hello Jobs
  /diagnostics/job/roulette/:
    post:
      description: Creates and queues a specified number of Scale Roulette jobs. Scale
        Roulette randomly complete/fail with 50% odds and are useful for testing jobs
        that both complete and fail.
      operationId: _rest_v6_queue_scale_roulette_jobs
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/number'}
        required: true
      responses: {'202': 'description:- The 202 ACCEPTED response indicates a successful
          request'}
      summary: Queue Scale Roulette Jobs
  /diagnostics/recipe/casino/:
    post:
      description: Creates and queues a specified number of Scale Casino recipes.
        Scale Casino recipes are useful for testing recipes in the presence of job
        failures.
      operationId: _rest_v6_queue_scale_casino_recipies
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/number'}
        required: true
      responses: {'202': 'description:- The 202 ACCEPTED response indicates a successful
          request'}
      summary: Queue Scale Casino Recipies
  /errors/:
    get:
      description: Returns a list of all errors
      operationId: _rest_v6_error_list
      parameters:
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      - description: if provided, only return errors matching is_builtin
        in: query
        name: is_builtin
        schema: {type: boolean}
      - description: if provided, only return errors for job types with the given
          name (any version)
        in: query
        name: job_type_name
        schema: {type: string}
      - description: if provided, only return errors with the given name
        in: query
        name: name
        schema: {type: string}
      - description: if provided, only return errors matching the given category
        in: query
        name: category
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/error_list'}
          description: 200 response
      summary: Error List
  /files/purge-source/:
    post:
      description: Removes all records related to the given source file. This includes
        records for the following models - BatchJob, BatchRecipe, FileAncestryLink,
        Ingest, Job, JobExecution, JobExecutionEnd, JobExecutionOutput, JobInputFile,
        Queue, Recipe, RecipeInputFile, RecipeNode, ScaleFile, and TaskUpdate. **This
        will also delete any product files from their respective workspace.**
      operationId: _rest_v6_purge_source
      requestBody:
        content:
          application/json:
            schema:
              properties:
                file_id: {description: The file id of the ScaleFile SOURCE file to
                    purge., example: 123, type: integer}
              title: Purge File Request
              type: object
        required: true
      responses:
        '204': {description: 204 no content - The message was recieved and the purge
            process has started.}
        '400': {description: '400 bad request - There was an issue with the request,
            see error details for relevant details.'}
      summary: Purge Source File
  /files/{id}/:
    get:
      description: Returns a specific file and all its related model information
      operationId: _rest_v6_file_details
      parameters:
      - description: id of an existing scale file
        in: path
        name: id
        schema: {type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/file_details'}
          description: 200 response
      summary: File Details
  /ingests:
    get:
      description: Returns a list of all ingests
      operationId: _rest_v6_ingest_list
      parameters:
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      - description: The start of the time range to query
        in: query
        name: started
        schema: {format: date-time, type: string}
      - description: End of the time range to query, defaults to the current time
        in: query
        name: ended
        schema: {format: date-time, type: string}
      - description: 'One or more fields to use when ordering the results. Duplicate
          it to multi-sort, (ex: order=host_name&order=created) Nested objects require
          a delimiter (ex: order=source_file__created) Prefix fields with a dash to
          reverse the sort, (ex: order=-created)'
        in: query
        name: order
        schema: {type: string}
      - description: 'Return only ingests with a status matching this string. Choices:
          [TRANSFERRING, TRANSFERRED, DEFERRED, INGESTING, INGESTED, ERRORED, DUPLICATE]'
        in: query
        name: status
        schema: {type: string}
      - description: Return only ingests created by a given scan process identifier.
          Duplicate it to filter by multiple values.
        in: query
        name: scan_id
        schema: {type: integer}
      - description: Return only ingests created by a given strike process identifier.
          Duplicate it to filter by multiple values.
        in: query
        name: strike_id
        schema: {type: integer}
      - description: Return only ingests with a specific file name.
        in: query
        name: file_name
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ingest_list'}
          description: 200 response
      summary: Ingest List
  /ingests/errors/{id}/:
    get:
      description: Returns detailed information about the error with the specified
        id
      operationId: _rest_v6_error_details
      parameters:
      - description: id of an existing error
        in: path
        name: id
        schema: {type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/error_details'}
          description: 200 response
      summary: Error Details
  /ingests/status/:
    get:
      description: 'Returns status summary information (counts, file sizes) for completed
        ingests grouped into 1 hour time slots. NOTE: Time range must be within a
        one month period (31 days).'
      operationId: _rest_v6_ingest_status
      parameters:
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      - description: The start of the time range to query
        in: query
        name: started
        schema: {format: date-time, type: string}
      - description: End of the time range to query, defaults to the current time
        in: query
        name: ended
        schema: {format: date-time, type: string}
      - description: Whether to group counts by ingest time or data time. Ingest time
          is when the strike process registered the file. Data time is the time when
          the data was collected by a sensor. Defaults to False (data time).
        in: query
        name: use_ingest_time
        schema: {type: boolean}
      responses:
        '200': {description: 200 response}
      summary: Ingest Status
  /ingests/{id}/:
    get:
      description: Returns a specific ingest and all its related model information
      operationId: _rest_v6_ingest_details
      parameters:
      - description: id of an existing node
        in: path
        name: id
        schema: {type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/ingest_details'}
          description: 200 response
      summary: Ingest Details
  /job-executions/{job_exe_id}/logs/{log_name}:
    get:
      description: Returns a specific job execution log
      operationId: _rest_v6_job_execution_logs
      parameters:
      - description: id of a job execution
        in: path
        name: job_exe_id
        schema: {type: integer}
      - description: Name of the log to get (stdout, stderr, or combined)
        in: path
        name: log_name
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job_execution_log'}
          description: 200 response
      summary: Job Execution Logs
  /job-types/:
    get:
      description: Returns a list of all job type names
      operationId: _rest_v6_job_type_list
      parameters:
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      - description: Keyword to perform a 'like' search on name, title, description,
          and tag
        in: query
        name: keyword
        schema: {type: string}
      - description: if provided, only return names with a least one version that
          matches is_active
        in: query
        name: is_active
        schema: {type: boolean}
      - description: if provided, only return names with a least one version that
          matches is_system
        in: query
        name: is_system
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job_type_list'}
          description: 200 response
      summary: Job Type Names
    post:
      description: Creates or edits an existing job type
      operationId: _rest_v6_job_type_post
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/job_type_post'}
        required: true
      responses:
        '201':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job_type_detail'}
          description: The 201 CREATED response indicates a successful event
          headers:
            location:
              description: The url of the created/edited job type
              schema: {type: string}
      summary: Job Type Post
  /job-types/validation/:
    post:
      description: Validates a job type without creating/editing it
      operationId: _rest_v6_job_type_validation
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/job_type_validation_post'}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job_type_validation'}
          description: The 200 OK response indicates a successful event
      summary: Job Type Validation
  /job-types/{name}/:
    get:
      description: Returns a list of the versions of a job type
      operationId: _rest_v6_job_type_versions
      parameters:
      - description: name of an existing job type
        in: path
        name: name
        schema: {type: string}
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      - description: if provided, only return names with a least one version that
          matches is_active
        in: query
        name: is_active
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job_type_versions'}
          description: 200 response
      summary: Job Type Versions
  /job-types/{name}/{version}/:
    get:
      description: Returns detailed information about the job type with the specified
        name and version
      operationId: _rest_v6_job_type_details
      parameters:
      - description: name of an existing job type
        in: path
        name: name
        schema: {type: string}
      - description: version of an existing job type
        in: path
        name: version
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job_type_detail'}
          description: 200 response
      summary: Job Type Details
    patch:
      description: Update one or more fields in an existing job type
      operationId: _rest_v6_job_type_update
      parameters:
      - description: name of an existing job type
        in: path
        name: name
        schema: {type: string}
      - description: version of an existing job type
        in: path
        name: version
        schema: {type: string}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/job_type_update'}
        required: true
      responses:
        '204': {description: 204 no content}
      summary: Job Type Update
  /job-types/{name}/{version}/revisions/:
    get:
      description: Returns a list of the revisions of a job type
      operationId: _rest_v6_job_type_revisions
      parameters:
      - description: name of an existing job type
        in: path
        name: name
        schema: {type: string}
      - description: version of an existing job type
        in: path
        name: version
        schema: {type: string}
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job_type_revisions'}
          description: 200 response
      summary: Job Type Revisions
  /job-types/{name}/{version}/revisions/{revision_num}/:
    get:
      description: Returns detailed information about the job type revision with the
        specified name, version and revision number
      operationId: _rest_v6_job_type_revision_details
      parameters:
      - description: name of an existing job type
        in: path
        name: name
        schema: {type: string}
      - description: version of an existing job type
        in: path
        name: version
        schema: {type: string}
      - description: revision number of the job type
        in: path
        name: revision_num
        schema: {type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job_type_revision_detail'}
          description: 200 response
      summary: Job Type Revision Details
  /jobs/:
    get:
      description: Returns a list of all jobs
      operationId: _rest_v6_job_list
      parameters:
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      - description: The start of the time range to query
        in: query
        name: started
        schema: {format: date-time, type: string}
      - description: End of the time range to query, defaults to the current time
        in: query
        name: ended
        schema: {format: date-time, type: string}
      - description: The start of the source time range to query
        in: query
        name: source_started
        schema: {format: date-time, type: string}
      - description: End of the source time range to query, defaults to the current
          time
        in: query
        name: source_ended
        schema: {format: date-time, type: string}
      - description: Return only jobs for the given source sensor class. Duplicate
          it to filter by multiple values.
        in: query
        name: source_sensor_class
        schema: {type: string}
      - description: Return only jobs for the given source sensor. Duplicate it to
          filter by multiple values.
        in: query
        name: source_sensor
        schema: {type: string}
      - description: Return only jobs for the given source collection. Duplicate it
          to filter by multiple values.
        in: query
        name: source_collection
        schema: {type: string}
      - description: Return only jobs for the given source task. Duplicate it to filter
          by multiple values.
        in: query
        name: source_task
        schema: {type: string}
      - description: 'One or more fields to use when ordering the results. Duplicate
          it to multi-sort, (ex: order=host_name&order=created) Prefix fields with
          a dash to reverse the sort, (ex: order=-created)'
        in: query
        name: order
        schema: {type: string}
      - description: 'Return only jobs with a status matching this string. Choices:
          [QUEUED, RUNNING, FAILED, COMPLETED, CANCELED]. Duplicate it to filter by
          multiple values.'
        in: query
        name: status
        schema: {type: string}
      - description: Return only jobs with a given identifier. Duplicate it to filter
          by multiple values.
        in: query
        name: job_id
        schema: {type: integer}
      - description: Return only jobs with a given job type identifier. Duplicate
          it to filter by multiple values.
        in: query
        name: job_type_id
        schema: {type: integer}
      - description: Return only jobs with a given job type name. Duplicate it to
          filter by multiple values.
        in: query
        name: job_type_name
        schema: {type: string}
      - description: Return only jobs with the given batch identifier. Duplicate it
          to filter by multiple values.
        in: query
        name: batch_id
        schema: {type: integer}
      - description: Return only jobs with the given recipe identifier. Duplicate
          it to filter by multiple values.
        in: query
        name: recipe_id
        schema: {type: integer}
      - description: 'Return only jobs that failed due to an error with the given
          category. Choices: [SYSTEM, DATA, ALGORITHM]. Duplicate it to filter by
          multiple values.'
        in: query
        name: error_category
        schema: {type: string}
      - description: Return only jobs that failed with this error. Duplicate it to
          filter by multiple values.
        in: query
        name: error_id
        schema: {type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job_list'}
          description: 200 response
      summary: Job List
  /jobs/cancel/:
    post:
      description: Cancels the jobs that fit the given filter criteria. The canceling
        will be done asynchronously, so the response will just indicate that the cancel
        request has been accepted.
      operationId: _rest_v6_job_cancel
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/job_cancel_post'}
        required: false
      responses: {'202': 'description:- 202 ACCEPTED response'}
      summary: Cancel Jobs
  /jobs/requeue/:
    post:
      description: Re-queues the jobs that fit the given filter criteria. The re-queuing
        will be done asynchronously, so the response will just indicate that the re-queue
        request has been accepted.
      operationId: _rest_v6_job_requeue
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/job_requeue_post'}
        required: false
      responses:
        '202': {description: 202 ACCEPTED response}
      summary: Requeue Jobs
  /jobs/{id}/:
    get:
      description: Returns a specific job and all its related model information.
      operationId: _rest_v6_job_details
      parameters:
      - description: id of an existing job
        in: path
        name: id
        schema: {type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job_details'}
          description: 200 response
      summary: Job Details
  /jobs/{id}/executions/:
    get:
      description: Returns a list of job executions associated with a given Job ID
      operationId: _rest_v6_job_executions
      parameters:
      - description: id of an existing job
        in: path
        name: id
        schema: {type: integer}
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      - description: 'Return only executions with a status matching this string. Choices:
          [QUEUED, RUNNING, FAILED, COMPLETED, CANCELED]. Duplicate it to filter by
          multiple values.'
        in: query
        name: status
        schema: {type: string}
      - description: Return only executions run on the given node. Duplicate it to
          filter by multiple values.
        in: query
        name: node_id
        schema: {type: integer}
      - description: Return only excutions with the given error. Duplicate it to filter
          by multiple values.
        in: query
        name: error_id
        schema: {type: integer}
      - description: Return only excutions with errors of the given category. Duplicate
          it to filter by multiple values.
        in: query
        name: error_category
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job_execution_list'}
          description: 200 response
      summary: Job Executions
  /jobs/{id}/executions/{exe_num}:
    get:
      description: Returns a specific job execution and all its related model information
        including job, node, environment, and results.
      operationId: _rest_v6_job_execution_details
      parameters:
      - description: id of an existing job
        in: path
        name: id
        schema: {type: integer}
      - description: execution number of a job execution
        in: path
        name: exe_num
        schema: {type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/job_execution_details'}
          description: 200 response
      summary: Job Execution Details
  /jobs/{id}/input_files/:
    get:
      description: Returns detailed information about input files associated with
        a given Job ID.
      operationId: _rest_v6_job_input_files
      parameters:
      - description: id of an existing job
        in: path
        name: id
        schema: {type: integer}
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      - description: The start of the time range to query
        in: query
        name: started
        schema: {format: date-time, type: string}
      - description: End of the time range to query, defaults to the current time
        in: query
        name: ended
        schema: {format: date-time, type: string}
      - description: 'Indicates the time field(s) that *started* and *ended* will
          use for time filtering. Valid values are: *last_modified*, *data* and *source*.
          The default value is *last_modified*.'
        in: query
        name: time_field
        schema: {type: string}
      - description: Returns only input files with this file name.
        in: query
        name: file_name
        schema: {type: string}
      - description: Returns files for this job input.
        in: query
        name: job_input
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: ./scale_file.yml#/components/schemas/file_list}
          description: 200 response
      summary: Job Input Files
  /metrics:
    get:
      description: Returns a list of all metrics types
      operationId: _rest_v6_metrics_list
      parameters:
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/metrics_list'}
          description: 200 response
      summary: Metrics List
  /metrics/{name}/:
    get:
      description: Returns a specific metrics type and all its related model information
        including possible filter choices
      operationId: _rest_v6_metrics_details
      parameters:
      - description: system name of an existing model
        in: path
        name: name
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/metrics_type_plus_model'}
          description: 200 response
      summary: Metrics Details
  /metrics/{name}/plot-data/:
    get:
      description: Returns all the plot values for a metrics type based on optional
        query parameters
      operationId: _rest_v6_metrics_plot
      parameters:
      - description: system name of an existing model
        in: path
        name: name
        schema: {type: string}
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      - description: The start of the time range to query
        in: query
        name: started
        schema: {format: date-time, type: string}
      - description: End of the time range to query, defaults to the current time
        in: query
        name: ended
        schema: {format: date-time, type: string}
      - description: Return only metrics associated with the related model choice.
          Each of these values must be one of the items in the choices list. Duplicate
          it to filter by multiple values. When no choice filters are used, then values
          are aggregated across all the choice by date.
        in: query
        name: choice_id
        schema: {type: integer}
      - description: Include only metrics with the given column name. The column name
          corresponds with a single statistic, such as completed count. Duplicate
          it to filter by multiple values.
        in: query
        name: column
        schema: {type: string}
      - description: Include only metrics with the given group name. The column name
          corresponds with a single statistic, such as completed count. Duplicate
          it to filter by multiple values.
        in: query
        name: group
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/metrics_plot'}
          description: 200 response
      summary: Metric Plot Data
  /nodes:
    get:
      description: Returns a list of all nodes
      operationId: _rest_v6_node_list
      parameters:
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      - description: The start of the time range to query
        in: query
        name: started
        schema: {format: date-time, type: string}
      - description: End of the time range to query, defaults to the current time
        in: query
        name: ended
        schema: {format: date-time, type: string}
      - description: 'One or more fields to use when ordering the results. Duplicate
          it to multi-sort, (ex: order=host_name&order=created) Prefix fields with
          a dash to reverse the sort, (ex: order=-created)'
        in: query
        name: order
        schema: {type: string}
      - description: If True, all nodes in the database are returned including those
          marked inactive. Default is False
        in: query
        name: include_inactive
        schema: {type: boolean}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/node_list'}
          description: 200 response
      summary: Node List
  /nodes/{id}/:
    get:
      description: Returns a specific node and all its related model information
      operationId: _rest_v6_node_details
      parameters:
      - description: id of an existing node
        in: path
        name: id
        schema: {type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/node_object'}
          description: 200 response
      summary: Node Details
    patch:
      description: Update one or more fields in an existing node
      operationId: _rest_v6_node_update
      parameters:
      - description: id of an existing node
        in: path
        name: id
        schema: {type: integer}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/node_update'}
        required: true
      responses:
        '204': {description: 204 no content}
      summary: Node Update
  /scans/:
    get:
      description: Returns a list of all scan processes
      operationId: _rest_v6_scan_list
      parameters:
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      - description: The start of the time range to query
        in: query
        name: started
        schema: {format: date-time, type: string}
      - description: End of the time range to query, defaults to the current time
        in: query
        name: ended
        schema: {format: date-time, type: string}
      - description: Return only Scan processes with a given name. Duplicate it to
          filter by multiple values.
        in: query
        name: name
        schema: {type: string}
      - description: 'One or more fields to use when ordering the results. Duplicate
          it to multi-sort, (ex: order=host_name&order=created) Nested objects require
          a delimiter (ex: order=source_file__created) Prefix fields with a dash to
          reverse the sort, (ex: order=-created)'
        in: query
        name: order
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/scan_list'}
          description: 200 response
      summary: Scan List
    post:
      description: Creates a new Scan process and places it onto the queue.
      operationId: _rest_v6_scan_create
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/scan_post'}
        required: true
      responses:
        '201':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/scan_details'}
          description: The 201 CREATED response indicates a successful request
      summary: Create Scan
  /scans/validation/:
    post:
      description: Validates a new Scan process configuration without actually saving
        it.
      operationId: _rest_v6_scan_validate
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/scan_process'}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/validation'}
          description: The 200 OK response indicates a valid scan configuration
      summary: Validate Scan
  /scans/{id}/:
    get:
      description: Returns a specific scan process and all its related model information
      operationId: _rest_v6_scan_details
      parameters:
      - description: id of an existing scan process
        in: path
        name: id
        schema: {type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/scan_details'}
          description: 200 response
      summary: Scan Details
    patch:
      description: Edits an existing Scan process with associated configuration.
      operationId: _rest_v6_scan_edit
      parameters:
      - description: id of an existing scan process
        in: path
        name: id
        schema: {type: integer}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/scan_post'}
        required: true
      responses: {'204': 'description:- The 204 No content response indicates a successful
          edit'}
      summary: Edit Scan
  /scans/{id}/process/:
    patch:
      description: Launches an existing Scan with associated configuration
      operationId: _rest_v6_scan_process
      parameters:
      - description: id of an existing scan process
        in: path
        name: id
        schema: {type: integer}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/scan_process'}
        required: true
      responses:
        '201':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/scan_details'}
          description: The 201 CREATED response indicates a successful request
      summary: Process Scan
  /scheduler:
    get:
      description: Returns data for the scheduler
      operationId: _rest_v6_scheduler_details
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/scheduler_data'}
          description: 200 response
        '204': description:- The 204 NO CONTENT response indicates that the Scale
          scheduler is currently offline, so there is no status content to provide.
      summary: Get Scheduler Details
    patch:
      description: Update one or more fields for the scheduler
      operationId: _rest_v6_scheduler_update
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/scheduler_data'}
        required: true
      responses: {'204': 'description:- The 204 NO CONTENT response indicates a successful
          update', '400': 'description:- The 400 BAD REQUEST response indicates an
          error in the privded update fields', '404': 'description:- The 404 response
          indicates the scheduler does not exist'}
      summary: Update Scheduler Details
  /status:
    get:
      description: Returns the current status of the scheduler, including information
        about nodes and running jobs.
      operationId: _rest_v6_system_status
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/status'}
          description: 200 response
        '204': description:- The 204 NO CONTENT response indicates that the Scale
          scheduler is currently offline, so there is no status content to provide.
      summary: Get System Status
  /strikes:
    get:
      description: Returns a list of all strike processes
      operationId: _rest_v6_strike_list
      parameters:
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      - description: The start of the time range to query
        in: query
        name: started
        schema: {format: date-time, type: string}
      - description: End of the time range to query, defaults to the current time
        in: query
        name: ended
        schema: {format: date-time, type: string}
      - description: Return only Strike processes with a given name. Duplicate it
          to filter by multiple values.
        in: query
        name: name
        schema: {type: string}
      - description: 'One or more fields to use when ordering the results. Duplicate
          it to multi-sort, (ex: order=host_name&order=created) Nested objects require
          a delimiter (ex: order=source_file__created) Prefix fields with a dash to
          reverse the sort, (ex: order=-created)'
        in: query
        name: order
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/strike_list'}
          description: 200 response
      summary: Strike List
    post:
      description: Creates a new Strike process and places it onto the queue.
      operationId: _rest_v6_strike_create
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/strike_post'}
        required: true
      responses: {'201': 'description:- The 201 CREATED response indicates a successful
          request'}
      summary: Create Strike
  /strikes/validation/:
    post:
      description: Validates a new Strike process configuration without actually saving
        it.
      operationId: _rest_v6_strike_validate
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/strike_post'}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/validation'}
          description: The 200 OK response indicates a valid strike configuration
      summary: Validate Strike
  /strikes/{id}/:
    get:
      description: Returns a specific strike process and all its related model information
      operationId: _rest_v6_strike_details
      parameters:
      - description: id of an existing strike process
        in: path
        name: id
        schema: {type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/strike_details'}
          description: 200 response
      summary: Strike Details
    patch:
      description: Edits an existing Strike process with associated configuration.
      operationId: _rest_v6_strike_edit
      parameters:
      - description: id of an existing strike process
        in: path
        name: id
        schema: {type: integer}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/strike_post'}
        required: true
      responses:
        '204': {description: The 204 No content response indicates a successful edit}
      summary: Edit Strike
  /version:
    get:
      description: Returns the current version of the scheduler
      operationId: _rest_v6_system_version
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/version'}
          description: 200 response
      summary: Get System Version
  /workspaces/:
    get:
      description: Returns a list of all workspaces
      operationId: _rest_v6_workspace_list
      parameters:
      - description: The page of the results to return. Defaults to 1.
        in: query
        name: page
        schema: {type: integer}
      - description: The size of the page to use for pagination of results. Defaults
          to 100, and can be anywhere from 1-1000.
        in: query
        name: page_size
        schema: {type: integer}
      - description: The start of the time range to query
        in: query
        name: started
        schema: {format: date-time, type: string}
      - description: End of the time range to query, defaults to the current time
        in: query
        name: ended
        schema: {format: date-time, type: string}
      - description: Return only workspaces with a given name. Duplicate it to filter
          by multiple values.
        in: query
        name: name
        schema: {type: string}
      - description: 'One or more fields to use when ordering the results. Duplicate
          it to multi-sort, (ex: order=host_name&order=created) Nested objects require
          a delimiter (ex: order=source_file__created) Prefix fields with a dash to
          reverse the sort, (ex: order=-created)'
        in: query
        name: order
        schema: {type: string}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/workspace_list'}
          description: 200 response
      summary: Workspace List
    post:
      description: Creates a new Workspace with associated configuration
      operationId: _rest_v6_workspace_create
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/workspace_post'}
        required: true
      responses: {'201': 'description:- The 201 CREATED response indicates a successful
          request'}
      summary: Create Workspace
  /workspaces/validation/:
    post:
      description: Validates a new workspace configuration without actually saving
        it.
      operationId: _rest_v6_workspace_validate
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/workspace_post'}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/validation'}
          description: The 200 OK response indicates a valid workspace configuration
      summary: Validate Workspace
  /workspaces/{id}/:
    get:
      description: Returns a specific workspace and all its related model information
      operationId: _rest_v6_workspace_details
      parameters:
      - description: id of an existing workspace
        in: path
        name: id
        schema: {type: integer}
      responses:
        '200':
          content:
            application/json:
              schema: {$ref: '#/components/schemas/workspace_details'}
          description: 200 response
      summary: Workspace Details
    patch:
      description: Edits an existing Workspace with associated configuration.
      operationId: _rest_v6_workspace_edit
      parameters:
      - description: id of an existing workspace
        in: path
        name: id
        schema: {type: integer}
      requestBody:
        content:
          application/json:
            schema: {$ref: '#/components/schemas/workspace_post'}
        required: true
      responses: {'204': 'description:- The 204 No content response indicates a successful
          edit'}
      summary: Edit Workspace
